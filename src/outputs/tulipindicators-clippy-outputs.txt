   Compiling tulipindicators v0.1.0 (/mnt/c/Users/sebir/Documents/Research/tidyclippy/Edited_Code_and_Results/tulipindicators_edits)
warning: type `size_t` should have an upper camel case name
  --> src/benchmark.rs:53:10
   |
53 | pub type size_t = libc::c_ulong;
   |          ^^^^^^ help: convert the identifier to upper camel case: `SizeT`
   |
   = note: `#[warn(non_camel_case_types)]` on by default

warning: type `__uint64_t` should have an upper camel case name
  --> src/benchmark.rs:54:10
   |
54 | pub type __uint64_t = libc::c_ulong;
   |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `Uint64T`

warning: type `__off_t` should have an upper camel case name
  --> src/benchmark.rs:55:10
   |
55 | pub type __off_t = libc::c_long;
   |          ^^^^^^^ help: convert the identifier to upper camel case: `OffT`

warning: type `__off64_t` should have an upper camel case name
  --> src/benchmark.rs:56:10
   |
56 | pub type __off64_t = libc::c_long;
   |          ^^^^^^^^^ help: convert the identifier to upper camel case: `Off64T`

warning: type `__clock_t` should have an upper camel case name
  --> src/benchmark.rs:57:10
   |
57 | pub type __clock_t = libc::c_long;
   |          ^^^^^^^^^ help: convert the identifier to upper camel case: `ClockT`

warning: type `_IO_lock_t` should have an upper camel case name
  --> src/benchmark.rs:91:10
   |
91 | pub type _IO_lock_t = ();
   |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `IoLockT`

warning: type `clock_t` should have an upper camel case name
  --> src/benchmark.rs:93:10
   |
93 | pub type clock_t = __clock_t;
   |          ^^^^^^^ help: convert the identifier to upper camel case: `ClockT`

warning: type `ti_indicator_start_function` should have an upper camel case name
   --> src/benchmark.rs:107:10
    |
107 | pub type ti_indicator_start_function = Option::<
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStartFunction`

warning: type `ti_indicator_function` should have an upper camel case name
   --> src/benchmark.rs:110:10
    |
110 | pub type ti_indicator_function = Option::<
    |          ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorFunction`

warning: type `ti_indicator_stream_new` should have an upper camel case name
   --> src/benchmark.rs:118:10
    |
118 | pub type ti_indicator_stream_new = Option::<
    |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamNew`

warning: type `ti_indicator_stream_run` should have an upper camel case name
   --> src/benchmark.rs:121:10
    |
121 | pub type ti_indicator_stream_run = Option::<
    |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamRun`

warning: type `ti_indicator_stream_free` should have an upper camel case name
   --> src/benchmark.rs:129:10
    |
129 | pub type ti_indicator_stream_free = Option::<unsafe extern "C" fn(*mut ti_stream) -> ()>;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamFree`

warning: type `uint64_t` should have an upper camel case name
   --> src/benchmark.rs:149:10
    |
149 | pub type uint64_t = __uint64_t;
    |          ^^^^^^^^ help: convert the identifier to upper camel case: `Uint64T`

warning: type `TC_REAL` should have an upper camel case name
   --> src/benchmark.rs:150:10
    |
150 | pub type TC_REAL = libc::c_double;
    |          ^^^^^^^ help: convert the identifier to upper camel case: `TcReal`

warning: type `tc_set` should have an upper camel case name
   --> src/benchmark.rs:151:10
    |
151 | pub type tc_set = uint64_t;
    |          ^^^^^^ help: convert the identifier to upper camel case: `TcSet`

warning: type `tc_candle_function` should have an upper camel case name
   --> src/benchmark.rs:163:10
    |
163 | pub type tc_candle_function = Option::<
    |          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TcCandleFunction`

warning: type `run_fun` should have an upper camel case name
   --> src/benchmark.rs:179:10
    |
179 | pub type run_fun = Option::<
    |          ^^^^^^^ help: convert the identifier to upper camel case: `RunFun`

warning: type `__off_t` should have an upper camel case name
  --> src/cli.rs:23:10
   |
23 | pub type __off_t = libc::c_long;
   |          ^^^^^^^ help: convert the identifier to upper camel case: `OffT`

warning: type `__off64_t` should have an upper camel case name
  --> src/cli.rs:24:10
   |
24 | pub type __off64_t = libc::c_long;
   |          ^^^^^^^^^ help: convert the identifier to upper camel case: `Off64T`

warning: type `size_t` should have an upper camel case name
  --> src/cli.rs:25:10
   |
25 | pub type size_t = libc::c_ulong;
   |          ^^^^^^ help: convert the identifier to upper camel case: `SizeT`

warning: type `ti_indicator_start_function` should have an upper camel case name
  --> src/cli.rs:26:10
   |
26 | pub type ti_indicator_start_function = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStartFunction`

warning: type `ti_indicator_function` should have an upper camel case name
  --> src/cli.rs:29:10
   |
29 | pub type ti_indicator_function = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorFunction`

warning: type `ti_indicator_stream_new` should have an upper camel case name
  --> src/cli.rs:37:10
   |
37 | pub type ti_indicator_stream_new = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamNew`

warning: type `ti_indicator_stream_run` should have an upper camel case name
  --> src/cli.rs:40:10
   |
40 | pub type ti_indicator_stream_run = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamRun`

warning: type `ti_indicator_stream_free` should have an upper camel case name
  --> src/cli.rs:48:10
   |
48 | pub type ti_indicator_stream_free = Option::<unsafe extern "C" fn(*mut ti_stream) -> ()>;
   |          ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamFree`

warning: type `_IO_lock_t` should have an upper camel case name
   --> src/cli.rs:101:10
    |
101 | pub type _IO_lock_t = ();
    |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `IoLockT`

warning: type `__uint64_t` should have an upper camel case name
  --> src/fuzzer.rs:26:10
   |
26 | pub type __uint64_t = libc::c_ulong;
   |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `Uint64T`

warning: type `ti_indicator_start_function` should have an upper camel case name
  --> src/fuzzer.rs:27:10
   |
27 | pub type ti_indicator_start_function = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStartFunction`

warning: type `ti_indicator_function` should have an upper camel case name
  --> src/fuzzer.rs:30:10
   |
30 | pub type ti_indicator_function = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorFunction`

warning: type `ti_indicator_stream_new` should have an upper camel case name
  --> src/fuzzer.rs:38:10
   |
38 | pub type ti_indicator_stream_new = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamNew`

warning: type `ti_indicator_stream_run` should have an upper camel case name
  --> src/fuzzer.rs:41:10
   |
41 | pub type ti_indicator_stream_run = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamRun`

warning: type `ti_indicator_stream_free` should have an upper camel case name
  --> src/fuzzer.rs:49:10
   |
49 | pub type ti_indicator_stream_free = Option::<unsafe extern "C" fn(*mut ti_stream) -> ()>;
   |          ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamFree`

warning: type `uint64_t` should have an upper camel case name
  --> src/fuzzer.rs:69:10
   |
69 | pub type uint64_t = __uint64_t;
   |          ^^^^^^^^ help: convert the identifier to upper camel case: `Uint64T`

warning: type `TC_REAL` should have an upper camel case name
  --> src/fuzzer.rs:70:10
   |
70 | pub type TC_REAL = libc::c_double;
   |          ^^^^^^^ help: convert the identifier to upper camel case: `TcReal`

warning: type `tc_set` should have an upper camel case name
  --> src/fuzzer.rs:71:10
   |
71 | pub type tc_set = uint64_t;
   |          ^^^^^^ help: convert the identifier to upper camel case: `TcSet`

warning: type `tc_candle_function` should have an upper camel case name
  --> src/fuzzer.rs:89:10
   |
89 | pub type tc_candle_function = Option::<
   |          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TcCandleFunction`

warning: type `ti_indicator_start_function` should have an upper camel case name
  --> src/sample.rs:16:10
   |
16 | pub type ti_indicator_start_function = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStartFunction`

warning: type `ti_indicator_function` should have an upper camel case name
  --> src/sample.rs:19:10
   |
19 | pub type ti_indicator_function = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorFunction`

warning: type `ti_indicator_stream_new` should have an upper camel case name
  --> src/sample.rs:27:10
   |
27 | pub type ti_indicator_stream_new = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamNew`

warning: type `ti_indicator_stream_run` should have an upper camel case name
  --> src/sample.rs:30:10
   |
30 | pub type ti_indicator_stream_run = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamRun`

warning: type `ti_indicator_stream_free` should have an upper camel case name
  --> src/sample.rs:38:10
   |
38 | pub type ti_indicator_stream_free = Option::<unsafe extern "C" fn(*mut ti_stream) -> ()>;
   |          ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamFree`

warning: type `__uint64_t` should have an upper camel case name
  --> src/candles.rs:25:10
   |
25 | pub type __uint64_t = libc::c_ulong;
   |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `Uint64T`

warning: type `uint64_t` should have an upper camel case name
  --> src/candles.rs:26:10
   |
26 | pub type uint64_t = __uint64_t;
   |          ^^^^^^^^ help: convert the identifier to upper camel case: `Uint64T`

warning: type `TC_REAL` should have an upper camel case name
  --> src/candles.rs:27:10
   |
27 | pub type TC_REAL = libc::c_double;
   |          ^^^^^^^ help: convert the identifier to upper camel case: `TcReal`

warning: type `tc_set` should have an upper camel case name
  --> src/candles.rs:43:10
   |
43 | pub type tc_set = uint64_t;
   |          ^^^^^^ help: convert the identifier to upper camel case: `TcSet`

warning: type `tc_candle_function` should have an upper camel case name
  --> src/candles.rs:55:10
   |
55 | pub type tc_candle_function = Option::<
   |          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TcCandleFunction`

warning: type `ti_indicator_start_function` should have an upper camel case name
 --> src/example2.rs:7:10
  |
7 | pub type ti_indicator_start_function = Option::<
  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStartFunction`

warning: type `ti_indicator_function` should have an upper camel case name
  --> src/example2.rs:10:10
   |
10 | pub type ti_indicator_function = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorFunction`

warning: type `ti_indicator_stream_new` should have an upper camel case name
  --> src/example2.rs:18:10
   |
18 | pub type ti_indicator_stream_new = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamNew`

warning: type `ti_indicator_stream_run` should have an upper camel case name
  --> src/example2.rs:21:10
   |
21 | pub type ti_indicator_stream_run = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamRun`

warning: type `ti_indicator_stream_free` should have an upper camel case name
  --> src/example2.rs:29:10
   |
29 | pub type ti_indicator_stream_free = Option::<unsafe extern "C" fn(*mut ti_stream) -> ()>;
   |          ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamFree`

warning: type `ti_indicator_start_function` should have an upper camel case name
   --> src/indicators_rs.rs:773:10
    |
773 | pub type ti_indicator_start_function = Option::<
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStartFunction`

warning: type `ti_indicator_function` should have an upper camel case name
   --> src/indicators_rs.rs:776:10
    |
776 | pub type ti_indicator_function = Option::<
    |          ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorFunction`

warning: type `ti_indicator_stream_new` should have an upper camel case name
   --> src/indicators_rs.rs:790:10
    |
790 | pub type ti_indicator_stream_new = Option::<
    |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamNew`

warning: type `ti_indicator_stream_run` should have an upper camel case name
   --> src/indicators_rs.rs:793:10
    |
793 | pub type ti_indicator_stream_run = Option::<
    |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamRun`

warning: type `ti_indicator_stream_free` should have an upper camel case name
   --> src/indicators_rs.rs:801:10
    |
801 | pub type ti_indicator_stream_free = Option::<unsafe extern "C" fn(*mut ti_stream) -> ()>;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamFree`

warning: type `__uint64_t` should have an upper camel case name
  --> src/smoke.rs:59:10
   |
59 | pub type __uint64_t = libc::c_ulong;
   |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `Uint64T`

warning: type `__off_t` should have an upper camel case name
  --> src/smoke.rs:60:10
   |
60 | pub type __off_t = libc::c_long;
   |          ^^^^^^^ help: convert the identifier to upper camel case: `OffT`

warning: type `__off64_t` should have an upper camel case name
  --> src/smoke.rs:61:10
   |
61 | pub type __off64_t = libc::c_long;
   |          ^^^^^^^^^ help: convert the identifier to upper camel case: `Off64T`

warning: type `__clock_t` should have an upper camel case name
  --> src/smoke.rs:62:10
   |
62 | pub type __clock_t = libc::c_long;
   |          ^^^^^^^^^ help: convert the identifier to upper camel case: `ClockT`

warning: type `size_t` should have an upper camel case name
  --> src/smoke.rs:63:10
   |
63 | pub type size_t = libc::c_ulong;
   |          ^^^^^^ help: convert the identifier to upper camel case: `SizeT`

warning: type `ti_indicator_start_function` should have an upper camel case name
  --> src/smoke.rs:64:10
   |
64 | pub type ti_indicator_start_function = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStartFunction`

warning: type `ti_indicator_function` should have an upper camel case name
  --> src/smoke.rs:67:10
   |
67 | pub type ti_indicator_function = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorFunction`

warning: type `ti_indicator_stream_new` should have an upper camel case name
  --> src/smoke.rs:75:10
   |
75 | pub type ti_indicator_stream_new = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamNew`

warning: type `ti_indicator_stream_run` should have an upper camel case name
  --> src/smoke.rs:78:10
   |
78 | pub type ti_indicator_stream_run = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamRun`

warning: type `ti_indicator_stream_free` should have an upper camel case name
  --> src/smoke.rs:86:10
   |
86 | pub type ti_indicator_stream_free = Option::<unsafe extern "C" fn(*mut ti_stream) -> ()>;
   |          ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamFree`

warning: type `uint64_t` should have an upper camel case name
   --> src/smoke.rs:106:10
    |
106 | pub type uint64_t = __uint64_t;
    |          ^^^^^^^^ help: convert the identifier to upper camel case: `Uint64T`

warning: type `TC_REAL` should have an upper camel case name
   --> src/smoke.rs:107:10
    |
107 | pub type TC_REAL = libc::c_double;
    |          ^^^^^^^ help: convert the identifier to upper camel case: `TcReal`

warning: type `tc_set` should have an upper camel case name
   --> src/smoke.rs:108:10
    |
108 | pub type tc_set = uint64_t;
    |          ^^^^^^ help: convert the identifier to upper camel case: `TcSet`

warning: type `tc_candle_function` should have an upper camel case name
   --> src/smoke.rs:120:10
    |
120 | pub type tc_candle_function = Option::<
    |          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TcCandleFunction`

warning: type `_IO_lock_t` should have an upper camel case name
   --> src/smoke.rs:169:10
    |
169 | pub type _IO_lock_t = ();
    |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `IoLockT`

warning: type `clock_t` should have an upper camel case name
   --> src/smoke.rs:171:10
    |
171 | pub type clock_t = __clock_t;
    |          ^^^^^^^ help: convert the identifier to upper camel case: `ClockT`

warning: type `__uint64_t` should have an upper camel case name
  --> src/tiamalgamation.rs:41:10
   |
41 | pub type __uint64_t = libc::c_ulong;
   |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `Uint64T`

warning: type `ti_indicator_start_function` should have an upper camel case name
  --> src/tiamalgamation.rs:42:10
   |
42 | pub type ti_indicator_start_function = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStartFunction`

warning: type `ti_indicator_function` should have an upper camel case name
  --> src/tiamalgamation.rs:45:10
   |
45 | pub type ti_indicator_function = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorFunction`

warning: type `ti_indicator_stream_new` should have an upper camel case name
  --> src/tiamalgamation.rs:59:10
   |
59 | pub type ti_indicator_stream_new = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamNew`

warning: type `ti_indicator_stream_run` should have an upper camel case name
  --> src/tiamalgamation.rs:62:10
   |
62 | pub type ti_indicator_stream_run = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamRun`

warning: type `ti_indicator_stream_free` should have an upper camel case name
  --> src/tiamalgamation.rs:70:10
   |
70 | pub type ti_indicator_stream_free = Option::<unsafe extern "C" fn(*mut ti_stream) -> ()>;
   |          ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamFree`

warning: type `uint64_t` should have an upper camel case name
   --> src/tiamalgamation.rs:120:10
    |
120 | pub type uint64_t = __uint64_t;
    |          ^^^^^^^^ help: convert the identifier to upper camel case: `Uint64T`

warning: type `TC_REAL` should have an upper camel case name
   --> src/tiamalgamation.rs:121:10
    |
121 | pub type TC_REAL = libc::c_double;
    |          ^^^^^^^ help: convert the identifier to upper camel case: `TcReal`

warning: type `tc_set` should have an upper camel case name
   --> src/tiamalgamation.rs:137:10
    |
137 | pub type tc_set = uint64_t;
    |          ^^^^^^ help: convert the identifier to upper camel case: `TcSet`

warning: type `tc_candle_function` should have an upper camel case name
   --> src/tiamalgamation.rs:149:10
    |
149 | pub type tc_candle_function = Option::<
    |          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TcCandleFunction`

warning: unused label
   --> src/beta/abands.rs:178:5
    |
178 |     'c_3579: {
    |     ^^^^^^^
    |
    = note: `#[warn(unused_labels)]` on by default

warning: unused label
   --> src/beta/abands.rs:277:5
    |
277 |     'c_4400: {
    |     ^^^^^^^

warning: type `size_t` should have an upper camel case name
  --> src/beta/alma.rs:18:10
   |
18 | pub type size_t = libc::c_ulong;
   |          ^^^^^^ help: convert the identifier to upper camel case: `SizeT`

warning: unused label
   --> src/beta/alma.rs:123:5
    |
123 |     'c_3559: {
    |     ^^^^^^^

warning: unused label
   --> src/beta/cmf.rs:107:5
    |
107 |     'c_3549: {
    |     ^^^^^^^

warning: unused label
  --> src/beta/ikhts.rs:81:5
   |
81 |     'c_3783: {
   |     ^^^^^^^

warning: unused label
   --> src/beta/ikhts.rs:120:5
    |
120 |     'c_3702: {
    |     ^^^^^^^

warning: unused label
   --> src/beta/ikhts.rs:169:5
    |
169 |     'c_3554: {
    |     ^^^^^^^

warning: unused label
   --> src/beta/kst.rs:164:5
    |
164 |     'c_3572: {
    |     ^^^^^^^

warning: unused label
   --> src/beta/kst.rs:313:5
    |
313 |     'c_4523: {
    |     ^^^^^^^

warning: unused label
   --> src/beta/pfe.rs:217:5
    |
217 |     'c_3573: {
    |     ^^^^^^^

warning: unused label
   --> src/beta/pfe.rs:314:5
    |
314 |     'c_4354: {
    |     ^^^^^^^

warning: unused label
  --> src/beta/rmta.rs:83:5
   |
83 |     'c_3547: {
   |     ^^^^^^^

warning: type `__uint64_t` should have an upper camel case name
  --> src/templates/candles.rs:26:10
   |
26 | pub type __uint64_t = libc::c_ulong;
   |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `Uint64T`

warning: type `uint64_t` should have an upper camel case name
  --> src/templates/candles.rs:27:10
   |
27 | pub type uint64_t = __uint64_t;
   |          ^^^^^^^^ help: convert the identifier to upper camel case: `Uint64T`

warning: type `TC_REAL` should have an upper camel case name
  --> src/templates/candles.rs:28:10
   |
28 | pub type TC_REAL = libc::c_double;
   |          ^^^^^^^ help: convert the identifier to upper camel case: `TcReal`

warning: type `tc_set` should have an upper camel case name
  --> src/templates/candles.rs:44:10
   |
44 | pub type tc_set = uint64_t;
   |          ^^^^^^ help: convert the identifier to upper camel case: `TcSet`

warning: type `tc_candle_function` should have an upper camel case name
  --> src/templates/candles.rs:56:10
   |
56 | pub type tc_candle_function = Option::<
   |          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TcCandleFunction`

warning: unused label
   --> src/templates/candles.rs:228:9
    |
228 |         'c_3279: {
    |         ^^^^^^^

warning: unused label
   --> src/templates/candles.rs:256:9
    |
256 |         'c_3232: {
    |         ^^^^^^^

warning: type `ti_indicator_start_function` should have an upper camel case name
 --> src/templates/indicators.rs:6:10
  |
6 | pub type ti_indicator_start_function = Option::<
  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStartFunction`

warning: type `ti_indicator_function` should have an upper camel case name
 --> src/templates/indicators.rs:9:10
  |
9 | pub type ti_indicator_function = Option::<
  |          ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorFunction`

warning: type `ti_indicator_stream_new` should have an upper camel case name
  --> src/templates/indicators.rs:23:10
   |
23 | pub type ti_indicator_stream_new = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamNew`

warning: type `ti_indicator_stream_run` should have an upper camel case name
  --> src/templates/indicators.rs:26:10
   |
26 | pub type ti_indicator_stream_run = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamRun`

warning: type `ti_indicator_stream_free` should have an upper camel case name
  --> src/templates/indicators.rs:34:10
   |
34 | pub type ti_indicator_stream_free = Option::<unsafe extern "C" fn(*mut ti_stream) -> ()>;
   |          ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamFree`

warning: this `else { if .. }` block can be collapsed
   --> src/benchmark.rs:420:17
    |
420 |           }  else {
    |  _________________^
421 | |             if 0 as libc::c_int != 0 {} else {
422 | |                 __assert_fail(
423 | |                     b"0\0" as *const u8 as *const libc::c_char,
...   |
432 | |             };
433 | |         }
    | |_________^
    |
    = note: `#[warn(clippy::collapsible_else_if)]` on by default
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
420 ~         }  else if 0 as libc::c_int != 0 {} else {
421 +             __assert_fail(
422 +                 b"0\0" as *const u8 as *const libc::c_char,
423 +                 b"benchmark.c\0" as *const u8 as *const libc::c_char,
424 +                 368 as libc::c_int as libc::c_uint,
425 +                 (*::core::mem::transmute::<
426 +                     &[u8; 52],
427 +                     &[libc::c_char; 52],
428 +                 >(b"void ti_setup(const ti_indicator_info *, double **)\0"))
429 +                     .as_ptr(),
430 +             );
431 +         }
    |

warning: this `else { if .. }` block can be collapsed
   --> src/sample.rs:390:16
    |
390 |           } else {
    |  ________________^
391 | |             if 0 as libc::c_int != 0 {} else {
392 | |                 __assert_fail(
393 | |                     b"0\0" as *const u8 as *const libc::c_char,
...   |
402 | |             };
403 | |         }
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
390 ~         } else if 0 as libc::c_int != 0 {} else {
391 +             __assert_fail(
392 +                 b"0\0" as *const u8 as *const libc::c_char,
393 +                 b"sample.c\0" as *const u8 as *const libc::c_char,
394 +                 144 as libc::c_int as libc::c_uint,
395 +                 (*::core::mem::transmute::<
396 +                     &[u8; 23],
397 +                     &[libc::c_char; 23],
398 +                 >(b"int main(int, char **)\0"))
399 +                     .as_ptr(),
400 +             );
401 +         }
    |

warning: this `if` statement can be collapsed
   --> src/candles.rs:715:5
    |
715 | /     if (*result).count > 0 as libc::c_int {
716 | |         if (*((*result).hits).offset(((*result).count - 1 as libc::c_int) as isize))
717 | |             .index == hit.index
718 | |         {
...   |
722 | |         }
723 | |     }
    | |_____^
    |
    = note: `#[warn(clippy::collapsible_if)]` on by default
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
    |
715 ~     if (*result).count > 0 as libc::c_int && (*((*result).hits).offset(((*result).count - 1 as libc::c_int) as isize))
716 +             .index == hit.index {
717 +         (*((*result).hits).offset(((*result).count - 1 as libc::c_int) as isize))
718 +             .patterns |= hit.patterns;
719 +         return 0 as libc::c_int;
720 +     }
    |

warning: this `if` statement can be collapsed
    --> src/tiamalgamation.rs:5778:17
     |
5778 | /                 if !(j == (*rsi).index) {
5779 | |                     if *((*rsi).vals).as_mut_ptr().offset(j as isize) > max {
5780 | |                         max = *((*rsi).vals).as_mut_ptr().offset(j as isize);
5781 | |                         maxi = j;
5782 | |                     }
5783 | |                 }
     | |_________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
     |
5778 ~                 if !(j == (*rsi).index) && *((*rsi).vals).as_mut_ptr().offset(j as isize) > max {
5779 +                     max = *((*rsi).vals).as_mut_ptr().offset(j as isize);
5780 +                     maxi = j;
5781 +                 }
     |

warning: this `if` statement can be collapsed
    --> src/tiamalgamation.rs:5796:17
     |
5796 | /                 if !(j_0 == (*rsi).index) {
5797 | |                     if *((*rsi).vals).as_mut_ptr().offset(j_0 as isize) < min {
5798 | |                         min = *((*rsi).vals).as_mut_ptr().offset(j_0 as isize);
5799 | |                         mini = j_0;
5800 | |                     }
5801 | |                 }
     | |_________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
     |
5796 ~                 if !(j_0 == (*rsi).index) && *((*rsi).vals).as_mut_ptr().offset(j_0 as isize) < min {
5797 +                     min = *((*rsi).vals).as_mut_ptr().offset(j_0 as isize);
5798 +                     mini = j_0;
5799 +                 }
     |

warning: this `if` statement can be collapsed
     --> src/tiamalgamation.rs:16984:5
      |
16984 | /     if (*result).count > 0 as libc::c_int {
16985 | |         if (*((*result).hits).offset(((*result).count - 1 as libc::c_int) as isize))
16986 | |             .index == hit.index
16987 | |         {
...     |
16991 | |         }
16992 | |     }
      | |_____^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
      |
16984 ~     if (*result).count > 0 as libc::c_int && (*((*result).hits).offset(((*result).count - 1 as libc::c_int) as isize))
16985 +             .index == hit.index {
16986 +         (*((*result).hits).offset(((*result).count - 1 as libc::c_int) as isize))
16987 +             .patterns |= hit.patterns;
16988 +         return 0 as libc::c_int;
16989 +     }
      |

warning: consider choosing a more descriptive name
  --> src/beta/kst.rs:80:13
   |
80 |     let mut _1: libc::c_double = (*real.offset(roc1 as isize)
   |             ^^
   |
   = note: `#[warn(clippy::just_underscores_and_digits)]` on by default
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#just_underscores_and_digits

warning: consider choosing a more descriptive name
  --> src/beta/kst.rs:82:13
   |
82 |     let mut _2: libc::c_double = (*real.offset(roc2 as isize)
   |             ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#just_underscores_and_digits

warning: consider choosing a more descriptive name
  --> src/beta/kst.rs:84:13
   |
84 |     let mut _3: libc::c_double = (*real.offset(roc3 as isize)
   |             ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#just_underscores_and_digits

warning: consider choosing a more descriptive name
  --> src/beta/kst.rs:86:13
   |
86 |     let mut _4: libc::c_double = (*real.offset(roc4 as isize)
   |             ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#just_underscores_and_digits

warning: this `if` statement can be collapsed
   --> src/indicators/stochrsi.rs:114:17
    |
114 | /                 if !(j == (*rsi).index) {
115 | |                     if *((*rsi).vals).as_mut_ptr().offset(j as isize) > max {
116 | |                         max = *((*rsi).vals).as_mut_ptr().offset(j as isize);
117 | |                         maxi = j;
118 | |                     }
119 | |                 }
    | |_________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
    |
114 ~                 if !(j == (*rsi).index) && *((*rsi).vals).as_mut_ptr().offset(j as isize) > max {
115 +                     max = *((*rsi).vals).as_mut_ptr().offset(j as isize);
116 +                     maxi = j;
117 +                 }
    |

warning: this `if` statement can be collapsed
   --> src/indicators/stochrsi.rs:132:17
    |
132 | /                 if !(j_0 == (*rsi).index) {
133 | |                     if *((*rsi).vals).as_mut_ptr().offset(j_0 as isize) < min {
134 | |                         min = *((*rsi).vals).as_mut_ptr().offset(j_0 as isize);
135 | |                         mini = j_0;
136 | |                     }
137 | |                 }
    | |_________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
    |
132 ~                 if !(j_0 == (*rsi).index) && *((*rsi).vals).as_mut_ptr().offset(j_0 as isize) < min {
133 +                     min = *((*rsi).vals).as_mut_ptr().offset(j_0 as isize);
134 +                     mini = j_0;
135 +                 }
    |

warning: crate-level attribute should be in the root module
 --> src/benchmark.rs:1:1
  |
1 | #![feature(extern_types)]
  | ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_attributes)]` on by default

warning: crate-level attribute should be in the root module
 --> src/beta/abands.rs:1:1
  |
1 | #![feature(label_break_value)]
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: crate-level attribute should be in the root module
 --> src/beta/alma.rs:1:1
  |
1 | #![feature(label_break_value)]
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: crate-level attribute should be in the root module
 --> src/beta/cmf.rs:1:1
  |
1 | #![feature(label_break_value)]
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: crate-level attribute should be in the root module
 --> src/beta/ikhts.rs:1:1
  |
1 | #![feature(label_break_value)]
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: crate-level attribute should be in the root module
 --> src/beta/kst.rs:1:1
  |
1 | #![feature(label_break_value)]
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: crate-level attribute should be in the root module
 --> src/beta/pfe.rs:1:1
  |
1 | #![feature(label_break_value)]
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: crate-level attribute should be in the root module
 --> src/beta/rmta.rs:1:1
  |
1 | #![feature(label_break_value)]
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: crate-level attribute should be in the root module
 --> src/templates/candles.rs:1:1
  |
1 | #![feature(label_break_value)]
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: value assigned to `i` is never read
   --> src/benchmark.rs:221:13
    |
221 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = note: `#[warn(unused_assignments)]` on by default
    = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
   --> src/benchmark.rs:390:13
    |
390 |     let mut j: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
   --> src/benchmark.rs:467:21
    |
467 |             let mut i: libc::c_int = 0;
    |                     ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
   --> src/benchmark.rs:527:21
    |
527 |             let mut i: libc::c_int = 0;
    |                     ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
   --> src/benchmark.rs:750:21
    |
750 |             let mut i: libc::c_int = 0;
    |                     ^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `ti`
   --> src/benchmark.rs:785:9
    |
785 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `ti`
   --> src/benchmark.rs:793:9
    |
793 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: unused variable: `ti`
   --> src/benchmark.rs:805:9
    |
805 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: unused variable: `ti`
   --> src/benchmark.rs:815:9
    |
815 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: unused variable: `ti`
   --> src/benchmark.rs:824:9
    |
824 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: unused variable: `ti`
   --> src/benchmark.rs:833:9
    |
833 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: unused variable: `ti`
   --> src/benchmark.rs:843:9
    |
843 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: unused variable: `ti`
   --> src/benchmark.rs:852:9
    |
852 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: unused variable: `ti`
   --> src/benchmark.rs:867:9
    |
867 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: unused variable: `period`
   --> src/benchmark.rs:879:9
    |
879 |     mut period: libc::c_double,
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_period`

warning: unused variable: `ti`
   --> src/benchmark.rs:881:9
    |
881 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: unused variable: `ti`
   --> src/benchmark.rs:890:9
    |
890 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: unused variable: `ti`
   --> src/benchmark.rs:899:9
    |
899 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: unused variable: `ti`
   --> src/benchmark.rs:908:9
    |
908 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: unused variable: `ti`
   --> src/benchmark.rs:920:9
    |
920 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: unused variable: `ti`
   --> src/benchmark.rs:934:9
    |
934 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: unused variable: `ti`
   --> src/benchmark.rs:943:9
    |
943 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: unused variable: `ti`
   --> src/benchmark.rs:956:9
    |
956 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: unused variable: `ti`
   --> src/benchmark.rs:965:9
    |
965 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: unused variable: `ti`
   --> src/benchmark.rs:987:9
    |
987 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: unused variable: `ti`
   --> src/benchmark.rs:998:9
    |
998 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: unused variable: `ti`
    --> src/benchmark.rs:1007:9
     |
1007 |     mut ti: libc::c_int,
     |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: unused variable: `ti`
    --> src/benchmark.rs:1019:9
     |
1019 |     mut ti: libc::c_int,
     |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: value assigned to `i` is never read
    --> src/benchmark.rs:1058:13
     |
1058 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
    --> src/benchmark.rs:1059:13
     |
1059 |     let mut j: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `best` is never read
    --> src/benchmark.rs:1405:13
     |
1405 |     let mut best: libc::c_int = 0;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/benchmark.rs:1413:17
     |
1413 |         let mut i: libc::c_int = 0;
     |                 ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `period` is never read
    --> src/benchmark.rs:1414:17
     |
1414 |         let mut period: libc::c_int = 0;
     |                 ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/benchmark.rs:1505:13
     |
1505 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `best` is never read
    --> src/benchmark.rs:1636:13
     |
1636 |     let mut best: libc::c_int = 0;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/benchmark.rs:1644:17
     |
1644 |         let mut i: libc::c_int = 0;
     |                 ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `period` is never read
    --> src/benchmark.rs:1645:17
     |
1645 |         let mut period: libc::c_int = 0;
     |                 ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
   --> src/cli.rs:215:13
    |
215 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `o` is never read
   --> src/fuzzer.rs:266:13
    |
266 |     let mut o: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
   --> src/fuzzer.rs:271:17
    |
271 |         let mut i: libc::c_int = 0;
    |                 ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `k` is never read
   --> src/fuzzer.rs:286:33
    |
286 |                         let mut k: libc::c_int = 0;
    |                                 ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
   --> src/fuzzer.rs:287:33
    |
287 |                         let mut j: libc::c_int = 0;
    |                                 ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
   --> src/fuzzer.rs:422:13
    |
422 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `choices` is never read
   --> src/fuzzer.rs:466:13
    |
466 |     let mut choices: libc::c_int = 0;
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `optionsd` is never read
   --> src/fuzzer.rs:467:13
    |
467 |     let mut optionsd: *mut libc::c_double = 0 as *mut libc::c_double;
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
   --> src/fuzzer.rs:479:13
    |
479 |     let mut j: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `rsc` is never read
   --> src/fuzzer.rs:570:25
    |
570 |                         rsc = ((*info).stream_run)
    |                         ^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
   --> src/sample.rs:253:21
    |
253 |             let mut i: libc::c_int = 0;
    |                     ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
   --> src/sample.rs:340:13
    |
340 |     let mut j: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `i_0` is never read
   --> src/sample.rs:435:13
    |
435 |     let mut i_0: libc::c_int = 0;
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `i_1` is never read
   --> src/sample.rs:470:17
    |
470 |         let mut i_1: libc::c_int = 0;
    |                 ^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `k_0` is never read
   --> src/sample.rs:471:17
    |
471 |         let mut k_0: libc::c_int = 0;
    |                 ^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
   --> src/candles.rs:854:13
    |
854 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
   --> src/candles.rs:875:13
    |
875 |         let upper: TC_REAL = *high.offset(i as isize) - top;
    |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
   --> src/candles.rs:876:13
    |
876 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
    |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: value assigned to `i` is never read
    --> src/candles.rs:1670:13
     |
1670 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:1691:13
     |
1691 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:1692:13
     |
1692 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: value assigned to `i` is never read
    --> src/candles.rs:1760:13
     |
1760 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:1781:13
     |
1781 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:1782:13
     |
1782 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: value assigned to `i` is never read
    --> src/candles.rs:1850:13
     |
1850 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:1871:13
     |
1871 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:1872:13
     |
1872 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_total`
    --> src/candles.rs:1874:13
     |
1874 |         let avg_total: TC_REAL = avg_total_sum * div;
     |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: value assigned to `i` is never read
    --> src/candles.rs:1926:13
     |
1926 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:1947:13
     |
1947 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:1948:13
     |
1948 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_total`
    --> src/candles.rs:1950:13
     |
1950 |         let avg_total: TC_REAL = avg_total_sum * div;
     |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: value assigned to `i` is never read
    --> src/candles.rs:2002:13
     |
2002 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:2023:13
     |
2023 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:2024:13
     |
2024 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: value assigned to `i` is never read
    --> src/candles.rs:2080:13
     |
2080 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:2101:13
     |
2101 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:2102:13
     |
2102 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_body`
    --> src/candles.rs:2103:13
     |
2103 |         let avg_body: TC_REAL = avg_body_sum * div;
     |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_body`

warning: value assigned to `i` is never read
    --> src/candles.rs:2155:13
     |
2155 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:2176:13
     |
2176 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:2177:13
     |
2177 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: value assigned to `i` is never read
    --> src/candles.rs:2232:13
     |
2232 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:2253:13
     |
2253 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:2254:13
     |
2254 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_body`
    --> src/candles.rs:2255:13
     |
2255 |         let avg_body: TC_REAL = avg_body_sum * div;
     |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_body`

warning: unused variable: `avg_total`
    --> src/candles.rs:2256:13
     |
2256 |         let avg_total: TC_REAL = avg_total_sum * div;
     |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: value assigned to `i` is never read
    --> src/candles.rs:2310:13
     |
2310 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:2331:13
     |
2331 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:2332:13
     |
2332 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_body`
    --> src/candles.rs:2333:13
     |
2333 |         let avg_body: TC_REAL = avg_body_sum * div;
     |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_body`

warning: unused variable: `avg_total`
    --> src/candles.rs:2334:13
     |
2334 |         let avg_total: TC_REAL = avg_total_sum * div;
     |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: value assigned to `i` is never read
    --> src/candles.rs:2388:13
     |
2388 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:2409:13
     |
2409 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:2410:13
     |
2410 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: value assigned to `i` is never read
    --> src/candles.rs:2501:13
     |
2501 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:2522:13
     |
2522 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:2523:13
     |
2523 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_total`
    --> src/candles.rs:2525:13
     |
2525 |         let avg_total: TC_REAL = avg_total_sum * div;
     |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: value assigned to `i` is never read
    --> src/candles.rs:2614:13
     |
2614 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:2635:13
     |
2635 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:2636:13
     |
2636 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_body`
    --> src/candles.rs:2637:13
     |
2637 |         let avg_body: TC_REAL = avg_body_sum * div;
     |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_body`

warning: value assigned to `i` is never read
    --> src/candles.rs:2691:13
     |
2691 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:2712:13
     |
2712 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:2713:13
     |
2713 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: value assigned to `i` is never read
    --> src/candles.rs:2768:13
     |
2768 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:2789:13
     |
2789 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:2790:13
     |
2790 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: value assigned to `i` is never read
    --> src/candles.rs:2853:13
     |
2853 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:2874:13
     |
2874 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:2875:13
     |
2875 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: value assigned to `i` is never read
    --> src/candles.rs:2938:13
     |
2938 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:2959:13
     |
2959 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:2960:13
     |
2960 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: value assigned to `i` is never read
    --> src/candles.rs:3028:13
     |
3028 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:3049:13
     |
3049 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:3050:13
     |
3050 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: value assigned to `i` is never read
    --> src/candles.rs:3105:13
     |
3105 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:3126:13
     |
3126 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:3127:13
     |
3127 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: value assigned to `i` is never read
    --> src/candles.rs:3182:13
     |
3182 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:3203:13
     |
3203 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:3204:13
     |
3204 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: value assigned to `i` is never read
    --> src/candles.rs:3295:13
     |
3295 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:3316:13
     |
3316 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:3317:13
     |
3317 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_total`
    --> src/candles.rs:3319:13
     |
3319 |         let avg_total: TC_REAL = avg_total_sum * div;
     |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: value assigned to `i` is never read
    --> src/candles.rs:3408:13
     |
3408 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:3429:13
     |
3429 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:3430:13
     |
3430 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: value assigned to `i` is never read
    --> src/candles.rs:3498:13
     |
3498 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:3519:13
     |
3519 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:3520:13
     |
3520 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_total`
    --> src/candles.rs:3522:13
     |
3522 |         let avg_total: TC_REAL = avg_total_sum * div;
     |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: value assigned to `i` is never read
    --> src/candles.rs:3577:13
     |
3577 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:3598:13
     |
3598 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:3599:13
     |
3599 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_body`
    --> src/candles.rs:3600:13
     |
3600 |         let avg_body: TC_REAL = avg_body_sum * div;
     |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_body`

warning: unused variable: `avg_total`
    --> src/candles.rs:3601:13
     |
3601 |         let avg_total: TC_REAL = avg_total_sum * div;
     |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: value assigned to `i` is never read
    --> src/candles.rs:3654:13
     |
3654 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:3675:13
     |
3675 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:3676:13
     |
3676 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_body`
    --> src/candles.rs:3677:13
     |
3677 |         let avg_body: TC_REAL = avg_body_sum * div;
     |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_body`

warning: unused variable: `avg_total`
    --> src/candles.rs:3678:13
     |
3678 |         let avg_total: TC_REAL = avg_total_sum * div;
     |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: value assigned to `i` is never read
    --> src/candles.rs:3767:13
     |
3767 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:3788:13
     |
3788 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:3789:13
     |
3789 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_body`
    --> src/candles.rs:3790:13
     |
3790 |         let avg_body: TC_REAL = avg_body_sum * div;
     |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_body`

warning: unused variable: `avg_total`
    --> src/candles.rs:3791:13
     |
3791 |         let avg_total: TC_REAL = avg_total_sum * div;
     |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: value assigned to `i` is never read
    --> src/candles.rs:3880:13
     |
3880 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:3901:13
     |
3901 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:3902:13
     |
3902 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: value assigned to `i` is never read
  --> src/example1.rs:21:13
   |
21 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/example2.rs:59:17
   |
59 |         let mut i: libc::c_int = 0;
   |                 ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
   --> src/smoke.rs:354:13
    |
354 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `s` is never read
   --> src/smoke.rs:493:13
    |
493 |     let mut s: *const libc::c_char = 0 as *const libc::c_char;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
   --> src/smoke.rs:521:13
    |
521 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `num` is never read
   --> src/smoke.rs:961:17
    |
961 |         let mut num: *mut libc::c_char = 0 as *mut libc::c_char;
    |                 ^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `line` is never read
    --> src/smoke.rs:1027:13
     |
1027 |     let mut line: *mut libc::c_char = 0 as *mut libc::c_char;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `get` is never read
    --> src/smoke.rs:1539:13
     |
1539 |     let mut get: libc::c_double = 0.;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
   --> src/tiamalgamation.rs:167:9
    |
167 |     mut options: *const libc::c_double,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
   --> src/tiamalgamation.rs:180:13
    |
180 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `options`
   --> src/tiamalgamation.rs:175:9
    |
175 |     mut options: *const libc::c_double,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: unused variable: `options`
   --> src/tiamalgamation.rs:191:9
    |
191 |     mut options: *const libc::c_double,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
   --> src/tiamalgamation.rs:204:13
    |
204 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `options`
   --> src/tiamalgamation.rs:199:9
    |
199 |     mut options: *const libc::c_double,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: unused variable: `options`
   --> src/tiamalgamation.rs:214:42
    |
214 | pub unsafe extern "C" fn ti_ad_start(mut options: *const libc::c_double) -> libc::c_int {
    |                                          ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
   --> src/tiamalgamation.rs:230:13
    |
230 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `options`
   --> src/tiamalgamation.rs:221:9
    |
221 |     mut options: *const libc::c_double,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: unused variable: `options`
   --> src/tiamalgamation.rs:248:9
    |
248 |     mut options: *const libc::c_double,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
   --> src/tiamalgamation.rs:262:13
    |
262 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `options`
   --> src/tiamalgamation.rs:256:9
    |
256 |     mut options: *const libc::c_double,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
   --> src/tiamalgamation.rs:310:13
    |
310 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
   --> src/tiamalgamation.rs:383:13
    |
383 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `dp` is never read
   --> src/tiamalgamation.rs:386:17
    |
386 |         let mut dp: libc::c_double = 0.;
    |                 ^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `dm` is never read
   --> src/tiamalgamation.rs:387:17
    |
387 |         let mut dm: libc::c_double = 0.;
    |                 ^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `dp_0` is never read
   --> src/tiamalgamation.rs:414:17
    |
414 |         let mut dp_0: libc::c_double = 0.;
    |                 ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `dm_0` is never read
   --> src/tiamalgamation.rs:415:17
    |
415 |         let mut dm_0: libc::c_double = 0.;
    |                 ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
   --> src/tiamalgamation.rs:500:13
    |
500 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `dp` is never read
   --> src/tiamalgamation.rs:503:17
    |
503 |         let mut dp: libc::c_double = 0.;
    |                 ^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `dm` is never read
   --> src/tiamalgamation.rs:504:17
    |
504 |         let mut dm: libc::c_double = 0.;
    |                 ^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `dp_0` is never read
   --> src/tiamalgamation.rs:533:17
    |
533 |         let mut dp_0: libc::c_double = 0.;
    |                 ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `dm_0` is never read
   --> src/tiamalgamation.rs:534:17
    |
534 |         let mut dm_0: libc::c_double = 0.;
    |                 ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `options`
   --> src/tiamalgamation.rs:608:42
    |
608 | pub unsafe extern "C" fn ti_ao_start(mut options: *const libc::c_double) -> libc::c_int {
    |                                          ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
   --> src/tiamalgamation.rs:629:13
    |
629 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `options`
   --> src/tiamalgamation.rs:685:9
    |
685 |     mut options: *const libc::c_double,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
   --> src/tiamalgamation.rs:720:13
    |
720 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `bar` is never read
   --> src/tiamalgamation.rs:781:13
    |
781 |     let mut bar: libc::c_double = 0.;
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
   --> src/tiamalgamation.rs:782:13
    |
782 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
   --> src/tiamalgamation.rs:783:13
    |
783 |     let mut j: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
   --> src/tiamalgamation.rs:902:13
    |
902 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
   --> src/tiamalgamation.rs:903:13
    |
903 |     let mut j: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `options`
   --> src/tiamalgamation.rs:975:9
    |
975 |     mut options: *const libc::c_double,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
   --> src/tiamalgamation.rs:988:13
    |
988 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `options`
   --> src/tiamalgamation.rs:983:9
    |
983 |     mut options: *const libc::c_double,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: unused variable: `options`
   --> src/tiamalgamation.rs:999:9
    |
999 |     mut options: *const libc::c_double,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:1012:13
     |
1012 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:1007:9
     |
1007 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `truerange` is never read
    --> src/tiamalgamation.rs:1047:13
     |
1047 |     let mut truerange: libc::c_double = 0.;
     |             ^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:1051:13
     |
1051 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `truerange` is never read
    --> src/tiamalgamation.rs:1225:21
     |
1225 |             let mut truerange: libc::c_double = 0.;
     |                     ^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `truerange_0` is never read
    --> src/tiamalgamation.rs:1259:21
     |
1259 |             let mut truerange_0: libc::c_double = 0.;
     |                     ^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:1295:9
     |
1295 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:1311:13
     |
1311 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:1303:9
     |
1303 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:1352:13
     |
1352 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:1446:9
     |
1446 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:1462:13
     |
1462 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:1454:9
     |
1454 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:1506:13
     |
1506 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
    --> src/tiamalgamation.rs:1507:13
     |
1507 |     let mut j: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:1563:9
     |
1563 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:1576:13
     |
1576 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:1571:9
     |
1571 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:1609:13
     |
1609 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:1703:9
     |
1703 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:1716:13
     |
1716 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:1711:9
     |
1711 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:1727:9
     |
1727 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:1740:13
     |
1740 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:1735:9
     |
1735 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:1751:9
     |
1751 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:1765:13
     |
1765 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:1759:9
     |
1759 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:1784:9
     |
1784 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:1798:13
     |
1798 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:1792:9
     |
1792 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:1841:13
     |
1841 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:1892:9
     |
1892 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:1910:13
     |
1910 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:1954:13
     |
1954 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:2019:13
     |
2019 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `truerange` is never read
    --> src/tiamalgamation.rs:2022:17
     |
2022 |         let mut truerange: libc::c_double = 0.;
     |                 ^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `dp` is never read
    --> src/tiamalgamation.rs:2037:17
     |
2037 |         let mut dp: libc::c_double = 0.;
     |                 ^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `dm` is never read
    --> src/tiamalgamation.rs:2038:17
     |
2038 |         let mut dm: libc::c_double = 0.;
     |                 ^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `truerange_0` is never read
    --> src/tiamalgamation.rs:2064:17
     |
2064 |         let mut truerange_0: libc::c_double = 0.;
     |                 ^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `dp_0` is never read
    --> src/tiamalgamation.rs:2079:17
     |
2079 |         let mut dp_0: libc::c_double = 0.;
     |                 ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `dm_0` is never read
    --> src/tiamalgamation.rs:2080:17
     |
2080 |         let mut dm_0: libc::c_double = 0.;
     |                 ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:2142:9
     |
2142 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:2156:13
     |
2156 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:2150:9
     |
2150 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:2191:13
     |
2191 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `dp` is never read
    --> src/tiamalgamation.rs:2194:17
     |
2194 |         let mut dp: libc::c_double = 0.;
     |                 ^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `dm` is never read
    --> src/tiamalgamation.rs:2195:17
     |
2195 |         let mut dm: libc::c_double = 0.;
     |                 ^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `dp_0` is never read
    --> src/tiamalgamation.rs:2221:17
     |
2221 |         let mut dp_0: libc::c_double = 0.;
     |                 ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `dm_0` is never read
    --> src/tiamalgamation.rs:2222:17
     |
2222 |         let mut dm_0: libc::c_double = 0.;
     |                 ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:2307:13
     |
2307 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:2371:13
     |
2371 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `dp` is never read
    --> src/tiamalgamation.rs:2374:17
     |
2374 |         let mut dp: libc::c_double = 0.;
     |                 ^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `dm` is never read
    --> src/tiamalgamation.rs:2375:17
     |
2375 |         let mut dm: libc::c_double = 0.;
     |                 ^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `dp_0` is never read
    --> src/tiamalgamation.rs:2403:17
     |
2403 |         let mut dp_0: libc::c_double = 0.;
     |                 ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `dm_0` is never read
    --> src/tiamalgamation.rs:2404:17
     |
2404 |         let mut dm_0: libc::c_double = 0.;
     |                 ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:2452:9
     |
2452 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:2470:13
     |
2470 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:2488:9
     |
2488 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:2514:13
     |
2514 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:2545:9
     |
2545 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:2565:13
     |
2565 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:2600:9
     |
2600 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:2613:13
     |
2613 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:2608:9
     |
2608 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `bar` is never read
    --> src/tiamalgamation.rs:2656:13
     |
2656 |     let mut bar: libc::c_double = 0.;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:2658:13
     |
2658 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
    --> src/tiamalgamation.rs:2659:13
     |
2659 |     let mut j: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:2765:9
     |
2765 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:2778:13
     |
2778 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:2773:9
     |
2773 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:2815:13
     |
2815 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:2903:13
     |
2903 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:3004:13
     |
3004 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `er` is never read
    --> src/tiamalgamation.rs:3019:13
     |
3019 |     let mut er: libc::c_double = 0.;
     |             ^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `sc` is never read
    --> src/tiamalgamation.rs:3020:13
     |
3020 |     let mut sc: libc::c_double = 0.;
     |             ^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:3073:9
     |
3073 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:3113:13
     |
3113 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:3190:13
     |
3190 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:3245:13
     |
3245 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:3318:13
     |
3318 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:3390:13
     |
3390 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:3436:42
     |
3436 | pub unsafe extern "C" fn ti_ln_start(mut options: *const libc::c_double) -> libc::c_int {
     |                                          ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:3448:13
     |
3448 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:3443:9
     |
3443 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:3459:9
     |
3459 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:3472:13
     |
3472 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:3467:9
     |
3467 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:3534:13
     |
3534 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:3613:9
     |
3613 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:3631:13
     |
3631 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:3692:13
     |
3692 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:3769:13
     |
3769 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
    --> src/tiamalgamation.rs:3770:13
     |
3770 |     let mut j: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:3880:13
     |
3880 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
    --> src/tiamalgamation.rs:3881:13
     |
3881 |     let mut j: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:3926:9
     |
3926 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:3940:13
     |
3940 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:3934:9
     |
3934 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:3980:13
     |
3980 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:4110:13
     |
4110 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
    --> src/tiamalgamation.rs:4111:13
     |
4111 |     let mut j: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:4238:13
     |
4238 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `weight` is never read
    --> src/tiamalgamation.rs:4291:13
     |
4291 |     let mut weight: libc::c_double = 0 as libc::c_int as libc::c_double;
     |             ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `phase` is never read
    --> src/tiamalgamation.rs:4292:13
     |
4292 |     let mut phase: libc::c_double = 0.;
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `rp` is never read
    --> src/tiamalgamation.rs:4293:13
     |
4293 |     let mut rp: libc::c_double = 0.;
     |             ^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ip` is never read
    --> src/tiamalgamation.rs:4294:13
     |
4294 |     let mut ip: libc::c_double = 0.;
     |             ^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:4295:13
     |
4295 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
    --> src/tiamalgamation.rs:4296:13
     |
4296 |     let mut j: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:4376:9
     |
4376 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:4390:13
     |
4390 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:4384:9
     |
4384 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `truerange` is never read
    --> src/tiamalgamation.rs:4425:13
     |
4425 |     let mut truerange: libc::c_double = 0.;
     |             ^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:4429:13
     |
4429 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:4498:9
     |
4498 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:4519:13
     |
4519 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:4555:9
     |
4555 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:4574:13
     |
4574 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:4563:9
     |
4563 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:4593:9
     |
4593 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:4628:13
     |
4628 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:4661:9
     |
4661 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `lng` is never read
    --> src/tiamalgamation.rs:4686:13
     |
4686 |     let mut lng: libc::c_int = 0;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `sar` is never read
    --> src/tiamalgamation.rs:4695:13
     |
4695 |     let mut sar: libc::c_double = 0.;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `extreme` is never read
    --> src/tiamalgamation.rs:4696:13
     |
4696 |     let mut extreme: libc::c_double = 0.;
     |             ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:4705:13
     |
4705 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:4785:9
     |
4785 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:4806:13
     |
4806 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:4865:13
     |
4865 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:4928:13
     |
4928 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:4979:13
     |
4979 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:5009:9
     |
5009 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:5022:13
     |
5022 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:5017:9
     |
5017 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:5056:13
     |
5056 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:5128:9
     |
5128 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:5141:13
     |
5141 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:5136:9
     |
5136 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:5152:9
     |
5152 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:5165:13
     |
5165 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:5160:9
     |
5160 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:5198:13
     |
5198 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:5283:13
     |
5283 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:5330:9
     |
5330 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:5343:13
     |
5343 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:5338:9
     |
5338 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:5377:13
     |
5377 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:5455:13
     |
5455 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `bar` is never read
    --> src/tiamalgamation.rs:5550:13
     |
5550 |     let mut bar: libc::c_double = 0.;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:5553:13
     |
5553 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
    --> src/tiamalgamation.rs:5554:13
     |
5554 |     let mut j: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:5712:13
     |
5712 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
    --> src/tiamalgamation.rs:5775:21
     |
5775 |             let mut j: libc::c_int = 0;
     |                     ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `j_0` is never read
    --> src/tiamalgamation.rs:5793:21
     |
5793 |             let mut j_0: libc::c_int = 0;
     |                     ^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:5848:9
     |
5848 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:5862:13
     |
5862 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:5856:9
     |
5856 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:5894:13
     |
5894 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:5935:9
     |
5935 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:5948:13
     |
5948 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:5943:9
     |
5943 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:5959:9
     |
5959 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:5972:13
     |
5972 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:5967:9
     |
5967 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:6010:13
     |
6010 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:6056:9
     |
6056 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:6069:13
     |
6069 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:6064:9
     |
6064 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:6083:9
     |
6083 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:6096:13
     |
6096 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:6091:9
     |
6091 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:6109:42
     |
6109 | pub unsafe extern "C" fn ti_tr_start(mut options: *const libc::c_double) -> libc::c_int {
     |                                          ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `truerange` is never read
    --> src/tiamalgamation.rs:6123:13
     |
6123 |     let mut truerange: libc::c_double = 0.;
     |             ^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:6129:13
     |
6129 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:6116:9
     |
6116 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:6192:13
     |
6192 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:6302:13
     |
6302 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:6352:9
     |
6352 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:6365:13
     |
6365 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:6360:9
     |
6360 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:6404:13
     |
6404 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:6452:9
     |
6452 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:6467:13
     |
6467 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:6460:9
     |
6460 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:6521:13
     |
6521 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:6647:13
     |
6647 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `bar` is never read
    --> src/tiamalgamation.rs:6718:13
     |
6718 |     let mut bar: libc::c_double = 0.;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:6720:13
     |
6720 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
    --> src/tiamalgamation.rs:6721:13
     |
6721 |     let mut j: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `c` is never read
    --> src/tiamalgamation.rs:6723:13
     |
6723 |     let mut c: libc::c_double = 0.;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:6852:13
     |
6852 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:6963:13
     |
6963 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:7043:13
     |
7043 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:7116:13
     |
7116 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:7162:9
     |
7162 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:7182:13
     |
7182 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:7231:9
     |
7231 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:7246:13
     |
7246 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:7239:9
     |
7239 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:7283:13
     |
7283 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `bar` is never read
    --> src/tiamalgamation.rs:7351:13
     |
7351 |     let mut bar: libc::c_double = 0.;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:7352:13
     |
7352 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
    --> src/tiamalgamation.rs:7353:13
     |
7353 |     let mut j: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:7456:13
     |
7456 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:7526:13
     |
7526 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:17123:13
      |
17123 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:17144:13
      |
17144 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:17145:13
      |
17145 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:17939:13
      |
17939 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:17960:13
      |
17960 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:17961:13
      |
17961 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:18029:13
      |
18029 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:18050:13
      |
18050 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:18051:13
      |
18051 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:18119:13
      |
18119 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:18140:13
      |
18140 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:18141:13
      |
18141 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_total`
     --> src/tiamalgamation.rs:18143:13
      |
18143 |         let avg_total: TC_REAL = avg_total_sum * div;
      |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:18195:13
      |
18195 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:18216:13
      |
18216 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:18217:13
      |
18217 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_total`
     --> src/tiamalgamation.rs:18219:13
      |
18219 |         let avg_total: TC_REAL = avg_total_sum * div;
      |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:18271:13
      |
18271 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:18292:13
      |
18292 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:18293:13
      |
18293 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:18349:13
      |
18349 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:18370:13
      |
18370 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:18371:13
      |
18371 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_body`
     --> src/tiamalgamation.rs:18372:13
      |
18372 |         let avg_body: TC_REAL = avg_body_sum * div;
      |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_body`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:18424:13
      |
18424 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:18445:13
      |
18445 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:18446:13
      |
18446 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:18501:13
      |
18501 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:18522:13
      |
18522 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:18523:13
      |
18523 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_body`
     --> src/tiamalgamation.rs:18524:13
      |
18524 |         let avg_body: TC_REAL = avg_body_sum * div;
      |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_body`

warning: unused variable: `avg_total`
     --> src/tiamalgamation.rs:18525:13
      |
18525 |         let avg_total: TC_REAL = avg_total_sum * div;
      |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:18579:13
      |
18579 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:18600:13
      |
18600 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:18601:13
      |
18601 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_body`
     --> src/tiamalgamation.rs:18602:13
      |
18602 |         let avg_body: TC_REAL = avg_body_sum * div;
      |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_body`

warning: unused variable: `avg_total`
     --> src/tiamalgamation.rs:18603:13
      |
18603 |         let avg_total: TC_REAL = avg_total_sum * div;
      |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:18657:13
      |
18657 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:18678:13
      |
18678 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:18679:13
      |
18679 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:18770:13
      |
18770 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:18791:13
      |
18791 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:18792:13
      |
18792 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_total`
     --> src/tiamalgamation.rs:18794:13
      |
18794 |         let avg_total: TC_REAL = avg_total_sum * div;
      |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:18883:13
      |
18883 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:18904:13
      |
18904 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:18905:13
      |
18905 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_body`
     --> src/tiamalgamation.rs:18906:13
      |
18906 |         let avg_body: TC_REAL = avg_body_sum * div;
      |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_body`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:18960:13
      |
18960 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:18981:13
      |
18981 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:18982:13
      |
18982 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:19037:13
      |
19037 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:19058:13
      |
19058 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:19059:13
      |
19059 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:19122:13
      |
19122 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:19143:13
      |
19143 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:19144:13
      |
19144 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:19207:13
      |
19207 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:19228:13
      |
19228 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:19229:13
      |
19229 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:19297:13
      |
19297 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:19318:13
      |
19318 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:19319:13
      |
19319 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:19374:13
      |
19374 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:19395:13
      |
19395 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:19396:13
      |
19396 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:19451:13
      |
19451 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:19472:13
      |
19472 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:19473:13
      |
19473 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:19564:13
      |
19564 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:19585:13
      |
19585 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:19586:13
      |
19586 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_total`
     --> src/tiamalgamation.rs:19588:13
      |
19588 |         let avg_total: TC_REAL = avg_total_sum * div;
      |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:19677:13
      |
19677 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:19698:13
      |
19698 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:19699:13
      |
19699 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:19767:13
      |
19767 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:19788:13
      |
19788 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:19789:13
      |
19789 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_total`
     --> src/tiamalgamation.rs:19791:13
      |
19791 |         let avg_total: TC_REAL = avg_total_sum * div;
      |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:19846:13
      |
19846 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:19867:13
      |
19867 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:19868:13
      |
19868 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_body`
     --> src/tiamalgamation.rs:19869:13
      |
19869 |         let avg_body: TC_REAL = avg_body_sum * div;
      |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_body`

warning: unused variable: `avg_total`
     --> src/tiamalgamation.rs:19870:13
      |
19870 |         let avg_total: TC_REAL = avg_total_sum * div;
      |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:19923:13
      |
19923 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:19944:13
      |
19944 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:19945:13
      |
19945 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_body`
     --> src/tiamalgamation.rs:19946:13
      |
19946 |         let avg_body: TC_REAL = avg_body_sum * div;
      |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_body`

warning: unused variable: `avg_total`
     --> src/tiamalgamation.rs:19947:13
      |
19947 |         let avg_total: TC_REAL = avg_total_sum * div;
      |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:20036:13
      |
20036 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:20057:13
      |
20057 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:20058:13
      |
20058 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_body`
     --> src/tiamalgamation.rs:20059:13
      |
20059 |         let avg_body: TC_REAL = avg_body_sum * div;
      |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_body`

warning: unused variable: `avg_total`
     --> src/tiamalgamation.rs:20060:13
      |
20060 |         let avg_total: TC_REAL = avg_total_sum * div;
      |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:20149:13
      |
20149 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:20170:13
      |
20170 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:20171:13
      |
20171 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: value assigned to `i` is never read
  --> src/beta/alma.rs:37:13
   |
37 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
  --> src/beta/alma.rs:38:13
   |
38 |     let mut j: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `close`
  --> src/beta/ce.rs:64:13
   |
64 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_close`

warning: value assigned to `i` is never read
  --> src/beta/ce.rs:75:13
   |
75 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `val` is never read
  --> src/beta/ce.rs:79:13
   |
79 |     let mut val: libc::c_double = 0.;
   |             ^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
   --> src/beta/ce.rs:122:21
    |
122 |             let mut j: libc::c_int = 0;
    |                     ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `j_0` is never read
   --> src/beta/ce.rs:141:21
    |
141 |             let mut j_0: libc::c_int = 0;
    |                     ^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `atr` is never read
   --> src/beta/ce.rs:284:13
    |
284 |     let mut atr: libc::c_double = 0.;
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `prev_close` is never read
   --> src/beta/ce.rs:285:13
    |
285 |     let mut prev_close: libc::c_double = 0.;
    |             ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `LP` is never read
   --> src/beta/ce.rs:290:13
    |
290 |     let mut LP: libc::c_double = 0.;
    |             ^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `HP` is never read
   --> src/beta/ce.rs:291:13
    |
291 |     let mut HP: libc::c_double = 0.;
    |             ^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `val` is never read
   --> src/beta/ce.rs:309:17
    |
309 |         let mut val: libc::c_double = 0.;
    |                 ^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
   --> src/beta/ce.rs:316:21
    |
316 |             let mut j: libc::c_int = 0;
    |                     ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `j_0` is never read
   --> src/beta/ce.rs:339:21
    |
339 |             let mut j_0: libc::c_int = 0;
    |                     ^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `truerange` is never read
   --> src/beta/ce.rs:366:17
    |
366 |         let mut truerange: libc::c_double = 0.;
    |                 ^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `val_0` is never read
   --> src/beta/ce.rs:394:17
    |
394 |         let mut val_0: libc::c_double = 0.;
    |                 ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `j_1` is never read
   --> src/beta/ce.rs:401:21
    |
401 |             let mut j_1: libc::c_int = 0;
    |                     ^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `j_2` is never read
   --> src/beta/ce.rs:424:21
    |
424 |             let mut j_2: libc::c_int = 0;
    |                     ^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `truerange_0` is never read
   --> src/beta/ce.rs:463:17
    |
463 |         let mut truerange_0: libc::c_double = 0.;
    |                 ^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `val_1` is never read
   --> src/beta/ce.rs:491:17
    |
491 |         let mut val_1: libc::c_double = 0.;
    |                 ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `j_3` is never read
   --> src/beta/ce.rs:498:21
    |
498 |             let mut j_3: libc::c_int = 0;
    |                     ^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `j_4` is never read
   --> src/beta/ce.rs:521:21
    |
521 |             let mut j_4: libc::c_int = 0;
    |                     ^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/beta/cmf.rs:40:13
   |
40 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `buffers` is never read
   --> src/beta/copp.rs:124:13
    |
124 |     let mut buffers: *mut C2RustUnnamed = 0 as *mut C2RustUnnamed;
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var1` is never read
   --> src/beta/copp.rs:164:13
    |
164 |     let mut var1: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var2` is never read
   --> src/beta/copp.rs:165:13
    |
165 |     let mut var2: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var3` is never read
   --> src/beta/copp.rs:166:13
    |
166 |     let mut var3: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var1` is never read
   --> src/beta/copp.rs:434:13
    |
434 |     let mut var1: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var2` is never read
   --> src/beta/copp.rs:435:13
    |
435 |     let mut var2: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var3` is never read
   --> src/beta/copp.rs:436:13
    |
436 |     let mut var3: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var1` is never read
   --> src/beta/dc.rs:168:25
    |
168 |                 let mut var1: libc::c_double = 0.;
    |                         ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var1_0` is never read
   --> src/beta/dc.rs:207:25
    |
207 |                 let mut var1_0: libc::c_double = 0.;
    |                         ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/beta/fi.rs:23:42
   |
23 | pub unsafe extern "C" fn ti_fi_start(mut options: *const libc::c_double) -> libc::c_int {
   |                                          ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
   --> src/beta/ikhts.rs:137:13
    |
137 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/beta/kc.rs:41:42
   |
41 | pub unsafe extern "C" fn ti_kc_start(mut options: *const libc::c_double) -> libc::c_int {
   |                                          ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `var1` is never read
   --> src/beta/kc.rs:167:13
    |
167 |     let mut var1: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
   --> src/beta/kc.rs:170:13
    |
170 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `truerange` is never read
   --> src/beta/kc.rs:221:17
    |
221 |         let mut truerange: libc::c_double = 0.;
    |                 ^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `max_ma` is never read
  --> src/beta/kst.rs:64:13
   |
64 |     let mut max_ma: libc::c_double = 0.;
   |             ^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `max_ma` is never read
  --> src/beta/kst.rs:73:9
   |
73 |         max_ma = ma4 as libc::c_double;
   |         ^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
   --> src/beta/mama.rs:181:9
    |
181 |     mut options: *const libc::c_double,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `data_0` is never read
   --> src/beta/mama.rs:206:13
    |
206 |     let mut data_0: *mut data = 0 as *mut data;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var1` is never read
   --> src/beta/mama.rs:525:13
    |
525 |     let mut var1: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var2` is never read
   --> src/beta/mama.rs:526:13
    |
526 |     let mut var2: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var3` is never read
   --> src/beta/mama.rs:527:13
    |
527 |     let mut var3: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var4` is never read
   --> src/beta/mama.rs:528:13
    |
528 |     let mut var4: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var5` is never read
   --> src/beta/mama.rs:529:13
    |
529 |     let mut var5: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/beta/mama.rs:1639:13
     |
1639 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `var1` is never read
    --> src/beta/mama.rs:1813:17
     |
1813 |         let mut var1: libc::c_double = 0.;
     |                 ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `var2` is never read
    --> src/beta/mama.rs:1814:17
     |
1814 |         let mut var2: libc::c_double = 0.;
     |                 ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `var3` is never read
    --> src/beta/mama.rs:1815:17
     |
1815 |         let mut var3: libc::c_double = 0.;
     |                 ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `var4` is never read
    --> src/beta/mama.rs:1816:17
     |
1816 |         let mut var4: libc::c_double = 0.;
     |                 ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `var5` is never read
    --> src/beta/mama.rs:1817:17
     |
1817 |         let mut var5: libc::c_double = 0.;
     |                 ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/beta/pbands.rs:95:13
   |
95 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `var1` is never read
   --> src/beta/pbands.rs:268:13
    |
268 |     let mut var1: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var1` is never read
   --> src/beta/pc.rs:203:25
    |
203 |                 let mut var1: libc::c_double = 0.;
    |                         ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var1_0` is never read
   --> src/beta/pc.rs:241:25
    |
241 |                 let mut var1_0: libc::c_double = 0.;
    |                         ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/beta/pfe.rs:74:13
   |
74 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `prev` is never read
   --> src/beta/pfe.rs:381:17
    |
381 |         let mut prev: libc::c_double = 0.;
    |                 ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `prev_0` is never read
   --> src/beta/pfe.rs:416:17
    |
416 |         let mut prev_0: libc::c_double = 0.;
    |                 ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `prev_1` is never read
   --> src/beta/pfe.rs:473:17
    |
473 |         let mut prev_1: libc::c_double = 0.;
    |                 ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `ema` is never read
   --> src/beta/posc.rs:101:13
    |
101 |     let mut ema: libc::c_double = 0.;
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
   --> src/beta/posc.rs:106:13
    |
106 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var1` is never read
   --> src/beta/posc.rs:278:13
    |
278 |     let mut var1: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `gains_ema` is never read
  --> src/beta/rmi.rs:81:13
   |
81 |     let mut gains_ema: libc::c_double = 0.;
   |             ^^^^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `losses_ema` is never read
  --> src/beta/rmi.rs:82:13
   |
82 |     let mut losses_ema: libc::c_double = 0.;
   |             ^^^^^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `var1` is never read
   --> src/beta/rmi.rs:231:13
    |
231 |     let mut var1: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var1` is never read
   --> src/beta/rvi.rs:182:13
    |
182 |     let mut var1: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var1` is never read
   --> src/beta/smi.rs:112:13
    |
112 |     let mut var1: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `i_0` is never read
   --> src/beta/smi.rs:256:13
    |
256 |     let mut i_0: libc::c_int = 0;
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var1` is never read
   --> src/beta/smi.rs:321:13
    |
321 |     let mut var1: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/beta/tsi.rs:52:9
   |
52 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
   --> src/beta/vwap.rs:139:13
    |
139 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var1` is never read
   --> src/beta/vwap.rs:188:13
    |
188 |     let mut var1: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var2` is never read
   --> src/beta/vwap.rs:189:13
    |
189 |     let mut var2: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var3` is never read
   --> src/beta/vwap.rs:190:13
    |
190 |     let mut var3: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var4` is never read
   --> src/beta/vwap.rs:191:13
    |
191 |     let mut var4: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `options`
 --> src/indicators/abs.rs:7:9
  |
7 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/abs.rs:20:13
   |
20 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/abs.rs:15:9
   |
15 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: unused variable: `options`
 --> src/indicators/acos.rs:7:9
  |
7 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/acos.rs:20:13
   |
20 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/acos.rs:15:9
   |
15 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: unused variable: `options`
 --> src/indicators/ad.rs:3:42
  |
3 | pub unsafe extern "C" fn ti_ad_start(mut options: *const libc::c_double) -> libc::c_int {
  |                                          ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/ad.rs:19:13
   |
19 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/ad.rs:10:9
   |
10 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: unused variable: `options`
 --> src/indicators/add.rs:4:9
  |
4 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/add.rs:18:13
   |
18 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/add.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/adosc.rs:49:13
   |
49 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/adx.rs:40:13
   |
40 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dp` is never read
  --> src/indicators/adx.rs:43:17
   |
43 |         let mut dp: libc::c_double = 0.;
   |                 ^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dm` is never read
  --> src/indicators/adx.rs:44:17
   |
44 |         let mut dm: libc::c_double = 0.;
   |                 ^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dp_0` is never read
  --> src/indicators/adx.rs:71:17
   |
71 |         let mut dp_0: libc::c_double = 0.;
   |                 ^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dm_0` is never read
  --> src/indicators/adx.rs:72:17
   |
72 |         let mut dm_0: libc::c_double = 0.;
   |                 ^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/adxr.rs:51:13
   |
51 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dp` is never read
  --> src/indicators/adxr.rs:54:17
   |
54 |         let mut dp: libc::c_double = 0.;
   |                 ^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dm` is never read
  --> src/indicators/adxr.rs:55:17
   |
55 |         let mut dm: libc::c_double = 0.;
   |                 ^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dp_0` is never read
  --> src/indicators/adxr.rs:84:17
   |
84 |         let mut dp_0: libc::c_double = 0.;
   |                 ^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dm_0` is never read
  --> src/indicators/adxr.rs:85:17
   |
85 |         let mut dm_0: libc::c_double = 0.;
   |                 ^^^^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/ao.rs:11:42
   |
11 | pub unsafe extern "C" fn ti_ao_start(mut options: *const libc::c_double) -> libc::c_int {
   |                                          ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/ao.rs:32:13
   |
32 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/apo.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/apo.rs:47:13
   |
47 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `bar` is never read
  --> src/indicators/aroon.rs:40:13
   |
40 |     let mut bar: libc::c_double = 0.;
   |             ^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/aroon.rs:41:13
   |
41 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
  --> src/indicators/aroon.rs:42:13
   |
42 |     let mut j: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/aroonosc.rs:40:13
   |
40 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
  --> src/indicators/aroonosc.rs:41:13
   |
41 |     let mut j: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/asin.rs:14:13
   |
14 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
 --> src/indicators/asin.rs:9:9
  |
9 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: unused variable: `options`
  --> src/indicators/asin.rs:25:9
   |
25 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: unused variable: `options`
 --> src/indicators/atan.rs:7:9
  |
7 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/atan.rs:20:13
   |
20 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/atan.rs:15:9
   |
15 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `truerange` is never read
  --> src/indicators/atr.rs:64:13
   |
64 |     let mut truerange: libc::c_double = 0.;
   |             ^^^^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/atr.rs:68:13
   |
68 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `truerange` is never read
   --> src/indicators/atr.rs:242:21
    |
242 |             let mut truerange: libc::c_double = 0.;
    |                     ^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `truerange_0` is never read
   --> src/indicators/atr.rs:276:21
    |
276 |             let mut truerange_0: libc::c_double = 0.;
    |                     ^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `options`
 --> src/indicators/avgprice.rs:4:9
  |
4 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/avgprice.rs:20:13
   |
20 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/avgprice.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/bbands.rs:39:13
   |
39 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
 --> src/indicators/bop.rs:4:9
  |
4 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/bop.rs:20:13
   |
20 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/bop.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/cci.rs:49:13
   |
49 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
  --> src/indicators/cci.rs:50:13
   |
50 |     let mut j: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
 --> src/indicators/ceil.rs:7:9
  |
7 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/ceil.rs:20:13
   |
20 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/ceil.rs:15:9
   |
15 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/cmo.rs:34:13
   |
34 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
 --> src/indicators/cos.rs:7:9
  |
7 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/cos.rs:20:13
   |
20 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/cos.rs:15:9
   |
15 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: unused variable: `options`
 --> src/indicators/cosh.rs:7:9
  |
7 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/cosh.rs:20:13
   |
20 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/cosh.rs:15:9
   |
15 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: unused variable: `options`
 --> src/indicators/crossany.rs:4:9
  |
4 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/crossany.rs:18:13
   |
18 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/crossany.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: unused variable: `options`
 --> src/indicators/crossover.rs:4:9
  |
4 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/crossover.rs:18:13
   |
18 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/crossover.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/cvi.rs:50:13
   |
50 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
 --> src/indicators/decay.rs:4:9
  |
4 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/decay.rs:22:13
   |
22 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/dema.rs:38:13
   |
38 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/di.rs:39:13
   |
39 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `truerange` is never read
  --> src/indicators/di.rs:42:17
   |
42 |         let mut truerange: libc::c_double = 0.;
   |                 ^^^^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dp` is never read
  --> src/indicators/di.rs:57:17
   |
57 |         let mut dp: libc::c_double = 0.;
   |                 ^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dm` is never read
  --> src/indicators/di.rs:58:17
   |
58 |         let mut dm: libc::c_double = 0.;
   |                 ^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `truerange_0` is never read
  --> src/indicators/di.rs:84:17
   |
84 |         let mut truerange_0: libc::c_double = 0.;
   |                 ^^^^^^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dp_0` is never read
  --> src/indicators/di.rs:99:17
   |
99 |         let mut dp_0: libc::c_double = 0.;
   |                 ^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dm_0` is never read
   --> src/indicators/di.rs:100:17
    |
100 |         let mut dm_0: libc::c_double = 0.;
    |                 ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/div.rs:12:13
   |
12 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
 --> src/indicators/div.rs:6:9
  |
6 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: unused variable: `options`
  --> src/indicators/div.rs:23:9
   |
23 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/dm.rs:36:13
   |
36 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dp` is never read
  --> src/indicators/dm.rs:39:17
   |
39 |         let mut dp: libc::c_double = 0.;
   |                 ^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dm` is never read
  --> src/indicators/dm.rs:40:17
   |
40 |         let mut dm: libc::c_double = 0.;
   |                 ^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dp_0` is never read
  --> src/indicators/dm.rs:66:17
   |
66 |         let mut dp_0: libc::c_double = 0.;
   |                 ^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dm_0` is never read
  --> src/indicators/dm.rs:67:17
   |
67 |         let mut dm_0: libc::c_double = 0.;
   |                 ^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/dpo.rs:35:13
   |
35 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/dx.rs:36:13
   |
36 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dp` is never read
  --> src/indicators/dx.rs:39:17
   |
39 |         let mut dp: libc::c_double = 0.;
   |                 ^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dm` is never read
  --> src/indicators/dx.rs:40:17
   |
40 |         let mut dm: libc::c_double = 0.;
   |                 ^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dp_0` is never read
  --> src/indicators/dx.rs:68:17
   |
68 |         let mut dp_0: libc::c_double = 0.;
   |                 ^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dm_0` is never read
  --> src/indicators/dx.rs:69:17
   |
69 |         let mut dm_0: libc::c_double = 0.;
   |                 ^^^^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
 --> src/indicators/edecay.rs:4:9
  |
4 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/edecay.rs:22:13
   |
22 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/ema.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/ema.rs:38:13
   |
38 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/emv.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/emv.rs:32:13
   |
32 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
 --> src/indicators/exp.rs:7:9
  |
7 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/exp.rs:20:13
   |
20 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/exp.rs:15:9
   |
15 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `bar` is never read
  --> src/indicators/fisher.rs:45:13
   |
45 |     let mut bar: libc::c_double = 0.;
   |             ^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/fisher.rs:47:13
   |
47 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
  --> src/indicators/fisher.rs:48:13
   |
48 |     let mut j: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/floor.rs:14:13
   |
14 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
 --> src/indicators/floor.rs:9:9
  |
9 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: unused variable: `options`
  --> src/indicators/floor.rs:25:9
   |
25 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/fosc.rs:38:13
   |
38 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/hma.rs:60:13
   |
60 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/kama.rs:39:13
   |
39 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `er` is never read
  --> src/indicators/kama.rs:54:13
   |
54 |     let mut er: libc::c_double = 0.;
   |             ^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `sc` is never read
  --> src/indicators/kama.rs:55:13
   |
55 |     let mut sc: libc::c_double = 0.;
   |             ^^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/kvo.rs:13:9
   |
13 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/kvo.rs:53:13
   |
53 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/lag.rs:32:13
   |
32 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/linreg.rs:37:13
   |
37 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/linregintercept.rs:37:13
   |
37 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/linregslope.rs:36:13
   |
36 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/ln.rs:14:13
   |
14 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
 --> src/indicators/ln.rs:9:9
  |
9 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: unused variable: `options`
  --> src/indicators/ln.rs:24:42
   |
24 | pub unsafe extern "C" fn ti_ln_start(mut options: *const libc::c_double) -> libc::c_int {
   |                                          ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: unused variable: `options`
 --> src/indicators/log10.rs:7:9
  |
7 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/log10.rs:20:13
   |
20 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/log10.rs:15:9
   |
15 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/macd.rs:63:13
   |
63 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/marketfi.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/marketfi.rs:30:13
   |
30 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/mass.rs:53:13
   |
53 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/max.rs:35:13
   |
35 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
  --> src/indicators/max.rs:36:13
   |
36 |     let mut j: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/md.rs:33:13
   |
33 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
  --> src/indicators/md.rs:34:13
   |
34 |     let mut j: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
 --> src/indicators/medprice.rs:4:9
  |
4 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/medprice.rs:18:13
   |
18 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/medprice.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/mfi.rs:49:13
   |
49 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/min.rs:35:13
   |
35 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
  --> src/indicators/min.rs:36:13
   |
36 |     let mut j: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/mom.rs:32:13
   |
32 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `weight` is never read
  --> src/indicators/msw.rs:40:13
   |
40 |     let mut weight: libc::c_double = 0 as libc::c_int as libc::c_double;
   |             ^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `phase` is never read
  --> src/indicators/msw.rs:41:13
   |
41 |     let mut phase: libc::c_double = 0.;
   |             ^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `rp` is never read
  --> src/indicators/msw.rs:42:13
   |
42 |     let mut rp: libc::c_double = 0.;
   |             ^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `ip` is never read
  --> src/indicators/msw.rs:43:13
   |
43 |     let mut ip: libc::c_double = 0.;
   |             ^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/msw.rs:44:13
   |
44 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
  --> src/indicators/msw.rs:45:13
   |
45 |     let mut j: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
 --> src/indicators/mul.rs:4:9
  |
4 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/mul.rs:18:13
   |
18 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/mul.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `truerange` is never read
  --> src/indicators/natr.rs:37:13
   |
37 |     let mut truerange: libc::c_double = 0.;
   |             ^^^^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/natr.rs:41:13
   |
41 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/nvi.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/nvi.rs:33:13
   |
33 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
 --> src/indicators/obv.rs:4:9
  |
4 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/obv.rs:23:13
   |
23 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/obv.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: unused variable: `options`
  --> src/indicators/ppo.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/ppo.rs:47:13
   |
47 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/psar.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `lng` is never read
  --> src/indicators/psar.rs:37:13
   |
37 |     let mut lng: libc::c_int = 0;
   |             ^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `sar` is never read
  --> src/indicators/psar.rs:46:13
   |
46 |     let mut sar: libc::c_double = 0.;
   |             ^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `extreme` is never read
  --> src/indicators/psar.rs:47:13
   |
47 |     let mut extreme: libc::c_double = 0.;
   |             ^^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/psar.rs:56:13
   |
56 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/pvi.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/pvi.rs:33:13
   |
33 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/qstick.rs:35:13
   |
35 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/roc.rs:32:13
   |
32 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/rocr.rs:32:13
   |
32 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
 --> src/indicators/round.rs:7:9
  |
7 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/round.rs:20:13
   |
20 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/round.rs:15:9
   |
15 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/rsi.rs:35:13
   |
35 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
 --> src/indicators/sin.rs:7:9
  |
7 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/sin.rs:20:13
   |
20 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/sin.rs:15:9
   |
15 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: unused variable: `options`
 --> src/indicators/sinh.rs:7:9
  |
7 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/sinh.rs:20:13
   |
20 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/sinh.rs:15:9
   |
15 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/sma.rs:48:13
   |
48 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
   --> src/indicators/sma.rs:133:13
    |
133 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `options`
 --> src/indicators/sqrt.rs:7:9
  |
7 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/sqrt.rs:20:13
   |
20 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/sqrt.rs:15:9
   |
15 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/stddev.rs:36:13
   |
36 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/stderr.rs:37:13
   |
37 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `bar` is never read
  --> src/indicators/stoch.rs:64:13
   |
64 |     let mut bar: libc::c_double = 0.;
   |             ^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/stoch.rs:67:13
   |
67 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
  --> src/indicators/stoch.rs:68:13
   |
68 |     let mut j: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/stochrsi.rs:48:13
   |
48 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
   --> src/indicators/stochrsi.rs:111:21
    |
111 |             let mut j: libc::c_int = 0;
    |                     ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `j_0` is never read
   --> src/indicators/stochrsi.rs:129:21
    |
129 |             let mut j_0: libc::c_int = 0;
    |                     ^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/sub.rs:12:13
   |
12 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
 --> src/indicators/sub.rs:6:9
  |
6 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: unused variable: `options`
  --> src/indicators/sub.rs:23:9
   |
23 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/sum.rs:33:13
   |
33 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
 --> src/indicators/tan.rs:7:9
  |
7 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/tan.rs:20:13
   |
20 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/tan.rs:15:9
   |
15 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/tanh.rs:14:13
   |
14 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
 --> src/indicators/tanh.rs:9:9
  |
9 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: unused variable: `options`
  --> src/indicators/tanh.rs:25:9
   |
25 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/tema.rs:39:13
   |
39 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
 --> src/indicators/todeg.rs:4:9
  |
4 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/todeg.rs:17:13
   |
17 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/todeg.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/torad.rs:11:13
   |
11 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
 --> src/indicators/torad.rs:6:9
  |
6 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: unused variable: `options`
  --> src/indicators/torad.rs:25:9
   |
25 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: unused variable: `options`
 --> src/indicators/tr.rs:6:42
  |
6 | pub unsafe extern "C" fn ti_tr_start(mut options: *const libc::c_double) -> libc::c_int {
  |                                          ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `truerange` is never read
  --> src/indicators/tr.rs:20:13
   |
20 |     let mut truerange: libc::c_double = 0.;
   |             ^^^^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/tr.rs:26:13
   |
26 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/tr.rs:13:9
   |
13 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/trima.rs:57:13
   |
57 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/trix.rs:53:13
   |
53 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
 --> src/indicators/trunc.rs:4:9
  |
4 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/trunc.rs:17:13
   |
17 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/trunc.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/tsf.rs:37:13
   |
37 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
 --> src/indicators/typprice.rs:4:9
  |
4 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/typprice.rs:19:13
   |
19 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/typprice.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/ultosc.rs:62:13
   |
62 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/var.rs:35:13
   |
35 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `bar` is never read
  --> src/indicators/vhf.rs:38:13
   |
38 |     let mut bar: libc::c_double = 0.;
   |             ^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/vhf.rs:40:13
   |
40 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
  --> src/indicators/vhf.rs:41:13
   |
41 |     let mut j: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `c` is never read
  --> src/indicators/vhf.rs:43:13
   |
43 |     let mut c: libc::c_double = 0.;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/vidya.rs:52:13
   |
52 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/volatility.rs:37:13
   |
37 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/vosc.rs:42:13
   |
42 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/vwma.rs:35:13
   |
35 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/wad.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/wad.rs:32:13
   |
32 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
 --> src/indicators/wcprice.rs:4:9
  |
4 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/wcprice.rs:19:13
   |
19 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/wcprice.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: value assigned to `i` is never read
  --> src/indicators/wilders.rs:34:13
   |
34 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `bar` is never read
  --> src/indicators/willr.rs:39:13
   |
39 |     let mut bar: libc::c_double = 0.;
   |             ^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/willr.rs:40:13
   |
40 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
  --> src/indicators/willr.rs:41:13
   |
41 |     let mut j: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/wma.rs:36:13
   |
36 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/zlema.rs:40:13
   |
40 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
   --> src/templates/candles.rs:306:13
    |
306 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
   --> src/templates/candles.rs:327:13
    |
327 |         let upper: TC_REAL = *high.offset(i as isize) - top;
    |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
   --> src/templates/candles.rs:328:13
    |
328 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
    |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_body`
   --> src/templates/candles.rs:329:13
    |
329 |         let avg_body: TC_REAL = avg_body_sum * div;
    |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_body`

warning: unused variable: `avg_total`
   --> src/templates/candles.rs:330:13
    |
330 |         let avg_total: TC_REAL = avg_total_sum * div;
    |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: variable does not need to be mutable
   --> src/benchmark.rs:214:9
    |
214 |     let mut open: *mut libc::c_double = (in_0[0 as libc::c_int as usize]).as_mut_ptr();
    |         ----^^^^
    |         |
    |         help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
   --> src/benchmark.rs:215:9
    |
215 |     let mut high: *mut libc::c_double = (in_0[1 as libc::c_int as usize]).as_mut_ptr();
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:216:9
    |
216 |     let mut low: *mut libc::c_double = (in_0[2 as libc::c_int as usize]).as_mut_ptr();
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:217:9
    |
217 |     let mut close: *mut libc::c_double = (in_0[3 as libc::c_int as usize]).as_mut_ptr();
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:218:9
    |
218 |     let mut volume: *mut libc::c_double = (in_0[4 as libc::c_int as usize]).as_mut_ptr();
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:387:5
    |
387 |     mut info: *const ti_indicator_info,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:388:5
    |
388 |     mut inputs: *mut *mut libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:442:5
    |
442 |     mut info: *const ti_indicator_info,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:443:5
    |
443 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:444:5
    |
444 |     mut goal: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:502:5
    |
502 |     mut info: *const ti_indicator_info,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:503:5
    |
503 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:504:5
    |
504 |     mut goal: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:562:5
    |
562 |     mut info: *const ti_indicator_info,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:563:5
    |
563 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:564:5
    |
564 |     mut goal: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:697:5
    |
697 |     mut info: *const ti_indicator_info,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:698:5
    |
698 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:699:5
    |
699 |     mut goal: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:783:5
    |
783 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:784:5
    |
784 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:785:5
    |
785 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:791:5
    |
791 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:792:5
    |
792 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:793:5
    |
793 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:803:5
    |
803 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:804:5
    |
804 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:805:5
    |
805 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:813:5
    |
813 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:814:5
    |
814 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:815:5
    |
815 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:822:5
    |
822 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:823:5
    |
823 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:824:5
    |
824 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:831:5
    |
831 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:832:5
    |
832 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:833:5
    |
833 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:841:5
    |
841 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:842:5
    |
842 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:843:5
    |
843 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:850:5
    |
850 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:851:5
    |
851 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:852:5
    |
852 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:865:5
    |
865 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:866:5
    |
866 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:867:5
    |
867 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:879:5
    |
879 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:880:5
    |
880 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:881:5
    |
881 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:888:5
    |
888 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:889:5
    |
889 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:890:5
    |
890 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:897:5
    |
897 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:898:5
    |
898 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:899:5
    |
899 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:906:5
    |
906 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:907:5
    |
907 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:908:5
    |
908 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:918:5
    |
918 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:919:5
    |
919 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:920:5
    |
920 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:932:5
    |
932 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:933:5
    |
933 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:934:5
    |
934 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:941:5
    |
941 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:942:5
    |
942 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:943:5
    |
943 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:954:5
    |
954 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:955:5
    |
955 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:956:5
    |
956 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:963:5
    |
963 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:964:5
    |
964 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:965:5
    |
965 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:973:5
    |
973 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:974:5
    |
974 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:975:5
    |
975 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:985:5
    |
985 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:986:5
    |
986 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:987:5
    |
987 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:996:5
    |
996 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:997:5
    |
997 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:998:5
    |
998 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1005:5
     |
1005 |     mut period: libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1006:5
     |
1006 |     mut options: *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1007:5
     |
1007 |     mut ti: libc::c_int,
     |     ----^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1017:5
     |
1017 |     mut period: libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1018:5
     |
1018 |     mut options: *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1019:5
     |
1019 |     mut ti: libc::c_int,
     |     ----^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1030:5
     |
1030 |     mut a: libc::c_double,
     |     ----^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1036:5
     |
1036 |     mut info: *const ti_indicator_info,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1037:5
     |
1037 |     mut what: *const libc::c_char,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1038:5
     |
1038 |     mut compare: *mut [libc::c_double; 4000],
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1040:9
     |
1040 |     let mut remap: [libc::c_int; 5] = [
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1062:13
     |
1062 |         let mut end: libc::c_int = 4000 as libc::c_int - ind_offset;
     |             ----^^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1066:21
     |
1066 |                 let mut a: libc::c_double = out[j
     |                     ----^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1069:21
     |
1069 |                 let mut b: libc::c_double = (*compare
     |                     ----^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1074:21
     |
1074 |                 let mut diff: libc::c_double = fabs(a - b);
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1106:5
     |
1106 |     mut log: *mut FILE,
     |     ----^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1107:5
     |
1107 |     mut info: *const ti_indicator_info,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1108:5
     |
1108 |     mut run_info: *const libc::c_void,
     |     ----^^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1109:5
     |
1109 |     mut fun: run_fun,
     |     ----^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1110:5
     |
1110 |     mut name: *const libc::c_char,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1502:5
     |
1502 |     mut log: *mut FILE,
     |     ----^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1503:5
     |
1503 |     mut info: *const ti_indicator_info,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1629:5
     |
1629 |     mut log: *mut FILE,
     |     ----^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1630:5
     |
1630 |     mut info: *const tc_candle_info,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1632:9
     |
1632 |     let mut name: *const libc::c_char = b"ti\0" as *const u8 as *const libc::c_char;
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1633:9
     |
1633 |     let mut pattern: tc_set = (*info).pattern;
     |         ----^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1720:5
     |
1720 |     mut log: *mut FILE,
     |     ----^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1721:5
     |
1721 |     mut info: *const tc_candle_info,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1760:5
     |
1760 |     mut argc: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1761:5
     |
1761 |     mut argv: *mut *mut libc::c_char,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1809:13
     |
1809 |         let mut log: *mut FILE = fopen(
     |             ----^^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1861:17
     |
1861 |             let mut init = tc_candle_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/cli.rs:108:36
    |
108 | pub unsafe extern "C" fn next_line(mut fp: *mut FILE) -> *mut libc::c_char {
    |                                    ----^^
    |                                    |
    |                                    help: remove this `mut`

warning: variable does not need to be mutable
   --> src/cli.rs:125:5
    |
125 |     mut fp: *mut FILE,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/cli.rs:126:5
    |
126 |     mut s: *mut libc::c_double,
    |     ----^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/cli.rs:128:9
    |
128 |     let mut line: *mut libc::c_char = next_line(fp);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/cli.rs:157:5
    |
157 |     mut name: *const libc::c_char,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/cli.rs:158:5
    |
158 |     mut in_0: *const libc::c_char,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/cli.rs:159:5
    |
159 |     mut out: *const libc::c_char,
    |     ----^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/cli.rs:161:9
    |
161 |     let mut info: *const ti_indicator_info = ti_find_indicator(name);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/cli.rs:171:9
    |
171 |     let mut fin: *mut FILE = fopen(in_0, b"r\0" as *const u8 as *const libc::c_char);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/cli.rs:181:9
    |
181 |     let mut line: *mut libc::c_char = next_line(fin);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/cli.rs:294:9
    |
294 |     let mut fout: *mut FILE = fopen(out, b"w\0" as *const u8 as *const libc::c_char);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/cli.rs:343:5
    |
343 |     mut argc: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/cli.rs:344:5
    |
344 |     mut argv: *mut *mut libc::c_char,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/cli.rs:352:9
    |
352 |     let mut name: *const libc::c_char = *argv.offset(1 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/cli.rs:353:9
    |
353 |     let mut in_0: *const libc::c_char = *argv.offset(2 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/cli.rs:354:9
    |
354 |     let mut out: *const libc::c_char = *argv.offset(3 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/fuzzer.rs:259:5
    |
259 |     mut info: *const ti_indicator_info,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/fuzzer.rs:260:5
    |
260 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/fuzzer.rs:261:5
    |
261 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/fuzzer.rs:262:5
    |
262 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/fuzzer.rs:263:5
    |
263 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/fuzzer.rs:360:43
    |
360 | pub unsafe extern "C" fn stress_indicator(mut info: *const ti_indicator_info) {
    |                                           ----^^^^
    |                                           |
    |                                           help: remove this `mut`

warning: variable does not need to be mutable
   --> src/fuzzer.rs:621:40
    |
621 | pub unsafe extern "C" fn stress_candle(mut info: *const tc_candle_info) {
    |                                        ----^^^^
    |                                        |
    |                                        help: remove this `mut`

warning: variable does not need to be mutable
   --> src/fuzzer.rs:649:9
    |
649 |     let mut output: *mut tc_result = tc_result_new();
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/fuzzer.rs:684:17
    |
684 |             let mut hit: tc_hit = tc_result_get(output, i);
    |                 ----^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/fuzzer.rs:729:17
    |
729 |             let mut patterns: tc_set = tc_result_at(output, i_0);
    |                 ----^^^^^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/fuzzer.rs:783:5
    |
783 |     mut argc: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/fuzzer.rs:784:5
    |
784 |     mut argv: *mut *mut libc::c_char,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/fuzzer.rs:788:13
    |
788 |         let mut ind_info: *const ti_indicator_info = ti_find_indicator(
    |             ----^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/fuzzer.rs:794:13
    |
794 |         let mut cnd_info: *const tc_candle_info = tc_find_candle(
    |             ----^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/sample.rs:209:5
    |
209 |     mut argc: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/sample.rs:210:5
    |
210 |     mut argv: *mut *mut libc::c_char,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/sample.rs:458:9
    |
458 |     let mut start: libc::c_int = ((*info).start)
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/sample.rs:472:13
    |
472 |         let mut bad: libc::c_int = 0 as libc::c_int;
    |             ----^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/candles.rs:86:13
   |
86 |         let mut init = tc_config {
   |             ----^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:103:17
    |
103 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:120:17
    |
120 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:137:17
    |
137 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:154:17
    |
154 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:171:17
    |
171 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:188:17
    |
188 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:205:17
    |
205 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:222:17
    |
222 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:239:17
    |
239 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:256:17
    |
256 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:273:17
    |
273 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:290:17
    |
290 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:307:17
    |
307 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:324:17
    |
324 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:341:17
    |
341 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:358:17
    |
358 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:375:17
    |
375 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:392:17
    |
392 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:409:17
    |
409 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:426:17
    |
426 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:443:17
    |
443 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:460:17
    |
460 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:477:17
    |
477 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:494:17
    |
494 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:511:17
    |
511 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:528:17
    |
528 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:545:17
    |
545 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:557:5
    |
557 |     mut name: *const libc::c_char,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:578:38
    |
578 | pub unsafe extern "C" fn tc_get_info(mut pattern: tc_set) -> *const tc_candle_info {
    |                                      ----^^^^^^^
    |                                      |
    |                                      help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:582:9
    |
582 |     let mut k: tc_set = pattern & !pattern.wrapping_sub(1 as libc::c_int as tc_set);
    |         ----^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:601:51
    |
601 | pub unsafe extern "C" fn tc_config_set_to_default(mut config: *mut tc_config) {
    |                                                   ----^^^^^^
    |                                                   |
    |                                                   help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:610:9
    |
610 |     let mut k: *mut tc_result = malloc(
    |         ----^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:629:41
    |
629 | pub unsafe extern "C" fn tc_result_free(mut result: *mut tc_result) {
    |                                         ----^^^^^^
    |                                         |
    |                                         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:637:42
    |
637 | pub unsafe extern "C" fn tc_result_count(mut result: *const tc_result) -> libc::c_int {
    |                                          ----^^^^^^
    |                                          |
    |                                          help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:642:5
    |
642 |     mut result: *const tc_result,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:648:5
    |
648 |     mut result: *const tc_result,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:649:5
    |
649 |     mut index: libc::c_int,
    |     ----^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:654:9
    |
654 |     let mut hit: tc_hit = {
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:655:13
    |
655 |         let mut init = tc_hit {
    |             ----^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:665:5
    |
665 |     mut result: *const tc_result,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:666:5
    |
666 |     mut index: libc::c_int,
    |     ----^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:711:5
    |
711 |     mut hit: tc_hit,
    |     ----^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:734:13
    |
734 |         let mut hits: *mut tc_hit = realloc(
    |             ----^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:751:5
    |
751 |     mut patterns: tc_set,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:752:5
    |
752 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:753:5
    |
753 |     mut inputs: *const *const TC_REAL,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:754:5
    |
754 |     mut options: *const tc_config,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:755:5
    |
755 |     mut output: *mut tc_result,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:840:9
    |
840 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:841:9
    |
841 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:842:9
    |
842 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:843:9
    |
843 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:899:21
    |
899 |                 let mut init = tc_hit {
    |                     ----^^^^
    |                     |
    |                     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:930:21
    |
930 |                 let mut init = tc_hit {
    |                     ----^^^^
    |                     |
    |                     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:947:21
    |
947 |                 let mut init = tc_hit {
    |                     ----^^^^
    |                     |
    |                     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:964:21
    |
964 |                 let mut init = tc_hit {
    |                     ----^^^^
    |                     |
    |                     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:983:21
    |
983 |                 let mut init = tc_hit {
    |                     ----^^^^
    |                     |
    |                     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:999:21
    |
999 |                 let mut init = tc_hit {
    |                     ----^^^^
    |                     |
    |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1017:21
     |
1017 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1037:21
     |
1037 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1057:21
     |
1057 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1111:21
     |
1111 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1165:21
     |
1165 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1183:21
     |
1183 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1201:21
     |
1201 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1227:21
     |
1227 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1253:21
     |
1253 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1284:21
     |
1284 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1302:21
     |
1302 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1320:21
     |
1320 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1374:21
     |
1374 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1428:21
     |
1428 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1459:21
     |
1459 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1479:21
     |
1479 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1497:21
     |
1497 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1551:21
     |
1551 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1605:21
     |
1605 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1624:21
     |
1624 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1651:5
     |
1651 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1652:5
     |
1652 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1653:5
     |
1653 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1654:5
     |
1654 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1656:9
     |
1656 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1657:9
     |
1657 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1658:9
     |
1658 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1659:9
     |
1659 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1714:21
     |
1714 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1741:5
     |
1741 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1742:5
     |
1742 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1743:5
     |
1743 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1744:5
     |
1744 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1746:9
     |
1746 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1747:9
     |
1747 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1748:9
     |
1748 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1749:9
     |
1749 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1804:21
     |
1804 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1831:5
     |
1831 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1832:5
     |
1832 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1833:5
     |
1833 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1834:5
     |
1834 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1836:9
     |
1836 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1837:9
     |
1837 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1838:9
     |
1838 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1839:9
     |
1839 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1880:21
     |
1880 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1907:5
     |
1907 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1908:5
     |
1908 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1909:5
     |
1909 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1910:5
     |
1910 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1912:9
     |
1912 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1913:9
     |
1913 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1914:9
     |
1914 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1915:9
     |
1915 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1956:21
     |
1956 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1983:5
     |
1983 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1984:5
     |
1984 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1985:5
     |
1985 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1986:5
     |
1986 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1988:9
     |
1988 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1989:9
     |
1989 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1990:9
     |
1990 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1991:9
     |
1991 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2034:21
     |
2034 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2061:5
     |
2061 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2062:5
     |
2062 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2063:5
     |
2063 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2064:5
     |
2064 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2066:9
     |
2066 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2067:9
     |
2067 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2068:9
     |
2068 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2069:9
     |
2069 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2109:21
     |
2109 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2136:5
     |
2136 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2137:5
     |
2137 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2138:5
     |
2138 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2139:5
     |
2139 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2141:9
     |
2141 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2142:9
     |
2142 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2143:9
     |
2143 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2144:9
     |
2144 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2186:21
     |
2186 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2213:5
     |
2213 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2214:5
     |
2214 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2215:5
     |
2215 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2216:5
     |
2216 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2218:9
     |
2218 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2219:9
     |
2219 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2220:9
     |
2220 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2221:9
     |
2221 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2264:21
     |
2264 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2291:5
     |
2291 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2292:5
     |
2292 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2293:5
     |
2293 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2294:5
     |
2294 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2296:9
     |
2296 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2297:9
     |
2297 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2298:9
     |
2298 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2299:9
     |
2299 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2342:21
     |
2342 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2369:5
     |
2369 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2370:5
     |
2370 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2371:5
     |
2371 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2372:5
     |
2372 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2374:9
     |
2374 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2375:9
     |
2375 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2376:9
     |
2376 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2377:9
     |
2377 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2455:21
     |
2455 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2482:5
     |
2482 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2483:5
     |
2483 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2484:5
     |
2484 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2485:5
     |
2485 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2487:9
     |
2487 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2488:9
     |
2488 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2489:9
     |
2489 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2490:9
     |
2490 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2568:21
     |
2568 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2595:5
     |
2595 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2596:5
     |
2596 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2597:5
     |
2597 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2598:5
     |
2598 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2600:9
     |
2600 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2601:9
     |
2601 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2602:9
     |
2602 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2603:9
     |
2603 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2645:21
     |
2645 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2672:5
     |
2672 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2673:5
     |
2673 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2674:5
     |
2674 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2675:5
     |
2675 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2677:9
     |
2677 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2678:9
     |
2678 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2679:9
     |
2679 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2680:9
     |
2680 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2722:21
     |
2722 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2749:5
     |
2749 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2750:5
     |
2750 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2751:5
     |
2751 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2752:5
     |
2752 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2754:9
     |
2754 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2755:9
     |
2755 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2756:9
     |
2756 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2757:9
     |
2757 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2807:21
     |
2807 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2834:5
     |
2834 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2835:5
     |
2835 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2836:5
     |
2836 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2837:5
     |
2837 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2839:9
     |
2839 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2840:9
     |
2840 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2841:9
     |
2841 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2842:9
     |
2842 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2892:21
     |
2892 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2919:5
     |
2919 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2920:5
     |
2920 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2921:5
     |
2921 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2922:5
     |
2922 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2924:9
     |
2924 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2925:9
     |
2925 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2926:9
     |
2926 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2927:9
     |
2927 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2982:21
     |
2982 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3009:5
     |
3009 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3010:5
     |
3010 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3011:5
     |
3011 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3012:5
     |
3012 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3014:9
     |
3014 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3015:9
     |
3015 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3016:9
     |
3016 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3017:9
     |
3017 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3059:21
     |
3059 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3086:5
     |
3086 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3087:5
     |
3087 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3088:5
     |
3088 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3089:5
     |
3089 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3091:9
     |
3091 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3092:9
     |
3092 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3093:9
     |
3093 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3094:9
     |
3094 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3136:21
     |
3136 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3163:5
     |
3163 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3164:5
     |
3164 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3165:5
     |
3165 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3166:5
     |
3166 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3168:9
     |
3168 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3169:9
     |
3169 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3170:9
     |
3170 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3171:9
     |
3171 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3249:21
     |
3249 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3276:5
     |
3276 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3277:5
     |
3277 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3278:5
     |
3278 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3279:5
     |
3279 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3281:9
     |
3281 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3282:9
     |
3282 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3283:9
     |
3283 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3284:9
     |
3284 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3362:21
     |
3362 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3389:5
     |
3389 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3390:5
     |
3390 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3391:5
     |
3391 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3392:5
     |
3392 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3394:9
     |
3394 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3395:9
     |
3395 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3396:9
     |
3396 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3397:9
     |
3397 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3452:21
     |
3452 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3479:5
     |
3479 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3480:5
     |
3480 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3481:5
     |
3481 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3482:5
     |
3482 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3484:9
     |
3484 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3485:9
     |
3485 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3486:9
     |
3486 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3487:9
     |
3487 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3531:21
     |
3531 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3558:5
     |
3558 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3559:5
     |
3559 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3560:5
     |
3560 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3561:5
     |
3561 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3563:9
     |
3563 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3564:9
     |
3564 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3565:9
     |
3565 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3566:9
     |
3566 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3608:21
     |
3608 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3635:5
     |
3635 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3636:5
     |
3636 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3637:5
     |
3637 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3638:5
     |
3638 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3640:9
     |
3640 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3641:9
     |
3641 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3642:9
     |
3642 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3643:9
     |
3643 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3721:21
     |
3721 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3748:5
     |
3748 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3749:5
     |
3749 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3750:5
     |
3750 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3751:5
     |
3751 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3753:9
     |
3753 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3754:9
     |
3754 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3755:9
     |
3755 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3756:9
     |
3756 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3834:21
     |
3834 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3861:5
     |
3861 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3862:5
     |
3862 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3863:5
     |
3863 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3864:5
     |
3864 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3866:9
     |
3866 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3867:9
     |
3867 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3868:9
     |
3868 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3869:9
     |
3869 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3912:21
     |
3912 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/example1.rs:20:38
   |
20 | pub unsafe extern "C" fn print_array(mut p: *const libc::c_double, size: libc::c_int) {
   |                                      ----^
   |                                      |
   |                                      help: remove this `mut`

warning: variable does not need to be mutable
  --> src/example1.rs:66:9
   |
66 |     let mut data_out: *mut libc::c_double = malloc(
   |         ----^^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/example1.rs:85:9
   |
85 |     let mut error: libc::c_int = ti_sma(
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators_rs.rs:837:17
    |
837 |             let mut init = ti_indicator_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators_rs.rs:920:17
    |
920 |             let mut init = ti_indicator_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:1002:17
     |
1002 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:1085:17
     |
1085 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:1167:17
     |
1167 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:1250:17
     |
1250 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:1333:17
     |
1333 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:1416:17
     |
1416 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:1498:17
     |
1498 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:1581:17
     |
1581 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:1663:17
     |
1663 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:1745:17
     |
1745 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:1827:17
     |
1827 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:1909:17
     |
1909 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:2015:17
     |
2015 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:2097:17
     |
2097 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:2179:17
     |
2179 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:2261:17
     |
2261 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:2344:17
     |
2344 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:2426:17
     |
2426 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:2509:17
     |
2509 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:2591:17
     |
2591 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:2674:17
     |
2674 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:2756:17
     |
2756 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:2838:17
     |
2838 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:2920:17
     |
2920 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:3002:17
     |
3002 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:3085:17
     |
3085 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:3168:17
     |
3168 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:3250:17
     |
3250 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:3332:17
     |
3332 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:3415:17
     |
3415 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:3498:17
     |
3498 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:3580:17
     |
3580 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:3663:17
     |
3663 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:3745:17
     |
3745 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:3827:17
     |
3827 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:3909:17
     |
3909 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:3991:17
     |
3991 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:4073:17
     |
4073 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:4155:17
     |
4155 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:4238:17
     |
4238 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:4321:17
     |
4321 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:4403:17
     |
4403 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:4485:17
     |
4485 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:4568:17
     |
4568 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:4651:17
     |
4651 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:4733:17
     |
4733 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:4815:17
     |
4815 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:4898:17
     |
4898 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:4981:17
     |
4981 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:5063:17
     |
5063 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:5153:17
     |
5153 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:5236:17
     |
5236 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:5318:17
     |
5318 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:5400:17
     |
5400 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:5490:17
     |
5490 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:5572:17
     |
5572 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:5654:17
     |
5654 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:5737:17
     |
5737 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:5820:17
     |
5820 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:5903:17
     |
5903 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:5985:17
     |
5985 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:6068:17
     |
6068 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:6150:17
     |
6150 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:6233:17
     |
6233 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:6315:17
     |
6315 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:6397:17
     |
6397 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:6479:17
     |
6479 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:6561:17
     |
6561 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:6644:17
     |
6644 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:6726:17
     |
6726 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:6809:17
     |
6809 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:6908:17
     |
6908 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:6990:17
     |
6990 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:7073:17
     |
7073 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:7156:17
     |
7156 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:7239:17
     |
7239 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:7321:17
     |
7321 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:7403:17
     |
7403 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:7485:17
     |
7485 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:7567:17
     |
7567 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:7650:17
     |
7650 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:7733:17
     |
7733 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:7816:17
     |
7816 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:7899:17
     |
7899 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:7981:17
     |
7981 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:8064:17
     |
8064 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:8146:17
     |
8146 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:8228:17
     |
8228 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:8310:17
     |
8310 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:8392:17
     |
8392 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:8474:17
     |
8474 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:8556:17
     |
8556 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:8639:17
     |
8639 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:8722:17
     |
8722 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:8805:17
     |
8805 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:8887:17
     |
8887 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:8970:17
     |
8970 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:9053:17
     |
9053 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:9135:17
     |
9135 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:9217:17
     |
9217 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:9299:17
     |
9299 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:9382:17
     |
9382 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:9465:17
     |
9465 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:9539:5
     |
9539 |     mut stream: *mut ti_stream,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:9540:5
     |
9540 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:9541:5
     |
9541 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:9542:5
     |
9542 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:9549:5
     |
9549 |     mut stream: *mut ti_stream,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:9555:5
     |
9555 |     mut stream: *mut ti_stream,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:9560:41
     |
9560 | pub unsafe extern "C" fn ti_stream_free(mut stream: *mut ti_stream) {
     |                                         ----^^^^^^
     |                                         |
     |                                         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:9566:5
     |
9566 |     mut name: *const libc::c_char,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/smoke.rs:349:5
    |
349 |     mut a: *mut libc::c_double,
    |     ----^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/smoke.rs:350:5
    |
350 |     mut b: *mut libc::c_double,
    |     ----^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/smoke.rs:351:5
    |
351 |     mut size_a: libc::c_int,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/smoke.rs:352:5
    |
352 |     mut size_b: libc::c_int,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/smoke.rs:405:36
    |
405 | pub unsafe extern "C" fn next_line(mut fp: *mut FILE) -> *mut libc::c_char {
    |                                    ----^^
    |                                    |
    |                                    help: remove this `mut`

warning: variable does not need to be mutable
   --> src/smoke.rs:422:5
    |
422 |     mut fp: *mut FILE,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/smoke.rs:423:5
    |
423 |     mut s: *mut libc::c_double,
    |     ----^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/smoke.rs:425:9
    |
425 |     let mut line: *mut libc::c_char = next_line(fp);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/smoke.rs:465:5
    |
465 |     mut fp: *mut FILE,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/smoke.rs:466:5
    |
466 |     mut name: *const libc::c_char,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/smoke.rs:467:5
    |
467 |     mut count: libc::c_int,
    |     ----^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/smoke.rs:469:9
    |
469 |     let mut info: *const ti_indicator_info = ti_find_indicator(name);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/smoke.rs:880:39
    |
880 | pub unsafe extern "C" fn test_candles(mut fp: *mut FILE, mut count: libc::c_int) {
    |                                       ----^^
    |                                       |
    |                                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/smoke.rs:880:58
    |
880 | pub unsafe extern "C" fn test_candles(mut fp: *mut FILE, mut count: libc::c_int) {
    |                                                          ----^^^^^
    |                                                          |
    |                                                          help: remove this `mut`

warning: variable does not need to be mutable
   --> src/smoke.rs:921:9
    |
921 |     let mut output: *mut tc_result = tc_result_new();
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/smoke.rs:949:13
    |
949 |         let mut info: *const tc_candle_info = tc_find_candle(name);
    |             ----^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/smoke.rs:1010:31
     |
1010 | pub unsafe extern "C" fn test(mut fname: *const libc::c_char, mut count: libc::c_int) {
     |                               ----^^^^^
     |                               |
     |                               help: remove this `mut`

warning: variable does not need to be mutable
    --> src/smoke.rs:1010:63
     |
1010 | pub unsafe extern "C" fn test(mut fname: *const libc::c_char, mut count: libc::c_int) {
     |                                                               ----^^^^^
     |                                                               |
     |                                                               help: remove this `mut`

warning: variable does not need to be mutable
    --> src/smoke.rs:1012:9
     |
1012 |     let mut fp: *mut FILE = fopen(fname, b"r\0" as *const u8 as *const libc::c_char);
     |         ----^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/smoke.rs:1048:17
     |
1048 |             let mut name: *mut libc::c_char = strtok(
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/smoke.rs:1482:13
     |
1482 |         let mut init = s {
     |             ----^^^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/smoke.rs:1484:21
     |
1484 |                 let mut init = C2RustUnnamed {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:167:5
    |
167 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:173:5
    |
173 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:174:5
    |
174 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:175:5
    |
175 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:176:5
    |
176 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:178:9
    |
178 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:179:9
    |
179 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:191:5
    |
191 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:197:5
    |
197 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:198:5
    |
198 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:199:5
    |
199 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:200:5
    |
200 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:202:9
    |
202 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:203:9
    |
203 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:214:38
    |
214 | pub unsafe extern "C" fn ti_ad_start(mut options: *const libc::c_double) -> libc::c_int {
    |                                      ----^^^^^^^
    |                                      |
    |                                      help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:219:5
    |
219 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:220:5
    |
220 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:221:5
    |
221 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:222:5
    |
222 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:224:9
    |
224 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:225:9
    |
225 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:226:9
    |
226 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:227:9
    |
227 |     let mut volume: *const libc::c_double = *inputs.offset(3 as libc::c_int as isize);
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:228:9
    |
228 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:248:5
    |
248 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:254:5
    |
254 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:255:5
    |
255 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:256:5
    |
256 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:257:5
    |
257 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:259:9
    |
259 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:260:9
    |
260 |     let mut in2: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:261:9
    |
261 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:273:5
    |
273 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:279:5
    |
279 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:280:5
    |
280 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:281:5
    |
281 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:282:5
    |
282 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:284:9
    |
284 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:285:9
    |
285 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:286:9
    |
286 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:287:9
    |
287 |     let mut volume: *const libc::c_double = *inputs.offset(3 as libc::c_int as isize);
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:356:5
    |
356 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:363:5
    |
363 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:364:5
    |
364 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:365:5
    |
365 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:366:5
    |
366 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:368:9
    |
368 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:369:9
    |
369 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:406:9
    |
406 |     let mut di_up: libc::c_double = dmup;
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:407:9
    |
407 |     let mut di_down: libc::c_double = dmdown;
    |         ----^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:408:9
    |
408 |     let mut dm_diff: libc::c_double = fabs(di_up - di_down);
    |         ----^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:409:9
    |
409 |     let mut dm_sum: libc::c_double = di_up + di_down;
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:410:9
    |
410 |     let mut dx: libc::c_double = dm_diff / dm_sum * 100 as libc::c_int as libc::c_double;
    |         ----^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:430:13
    |
430 |         let mut di_up_0: libc::c_double = dmup;
    |             ----^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:431:13
    |
431 |         let mut di_down_0: libc::c_double = dmdown;
    |             ----^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:432:13
    |
432 |         let mut dm_diff_0: libc::c_double = fabs(di_up_0 - di_down_0);
    |             ----^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:433:13
    |
433 |         let mut dm_sum_0: libc::c_double = di_up_0 + di_down_0;
    |             ----^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:434:13
    |
434 |         let mut dx_0: libc::c_double = dm_diff_0 / dm_sum_0
    |             ----^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:473:5
    |
473 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:480:5
    |
480 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:481:5
    |
481 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:482:5
    |
482 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:483:5
    |
483 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:485:9
    |
485 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:486:9
    |
486 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:523:9
    |
523 |     let mut di_up: libc::c_double = dmup;
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:524:9
    |
524 |     let mut di_down: libc::c_double = dmdown;
    |         ----^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:525:9
    |
525 |     let mut dm_diff: libc::c_double = fabs(di_up - di_down);
    |         ----^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:526:9
    |
526 |     let mut dm_sum: libc::c_double = di_up + di_down;
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:527:9
    |
527 |     let mut dx: libc::c_double = dm_diff / dm_sum * 100 as libc::c_int as libc::c_double;
    |         ----^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:549:13
    |
549 |         let mut di_up_0: libc::c_double = dmup;
    |             ----^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:550:13
    |
550 |         let mut di_down_0: libc::c_double = dmdown;
    |             ----^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:551:13
    |
551 |         let mut dm_diff_0: libc::c_double = fabs(di_up_0 - di_down_0);
    |             ----^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:552:13
    |
552 |         let mut dm_sum_0: libc::c_double = di_up_0 + di_down_0;
    |             ----^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:553:13
    |
553 |         let mut dx_0: libc::c_double = dm_diff_0 / dm_sum_0
    |             ----^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:608:38
    |
608 | pub unsafe extern "C" fn ti_ao_start(mut options: *const libc::c_double) -> libc::c_int {
    |                                      ----^^^^^^^
    |                                      |
    |                                      help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:613:5
    |
613 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:614:5
    |
614 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:615:5
    |
615 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:616:5
    |
616 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:618:9
    |
618 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:619:9
    |
619 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:632:13
    |
632 |         let mut hl: libc::c_double = 0.5f64
    |             ----^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:646:13
    |
646 |         let mut hl_0: libc::c_double = 0.5f64
    |             ----^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:685:5
    |
685 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:691:5
    |
691 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:692:5
    |
692 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:693:5
    |
693 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:694:5
    |
694 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:696:9
    |
696 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:714:9
    |
714 |     let mut short_per: libc::c_double = 2 as libc::c_int as libc::c_double
    |         ----^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:716:9
    |
716 |     let mut long_per: libc::c_double = 2 as libc::c_int as libc::c_double
    |         ----^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:753:5
    |
753 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:759:5
    |
759 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:760:5
    |
760 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:761:5
    |
761 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:762:5
    |
762 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:764:9
    |
764 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:765:9
    |
765 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:875:5
    |
875 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:881:5
    |
881 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:882:5
    |
882 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:883:5
    |
883 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:884:5
    |
884 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:886:9
    |
886 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:887:9
    |
887 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:975:5
    |
975 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:981:5
    |
981 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:982:5
    |
982 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:983:5
    |
983 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:984:5
    |
984 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:986:9
    |
986 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:987:9
    |
987 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:999:5
    |
999 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1005:5
     |
1005 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1006:5
     |
1006 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1007:5
     |
1007 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1008:5
     |
1008 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1010:9
     |
1010 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1011:9
     |
1011 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1023:5
     |
1023 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1029:5
     |
1029 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1030:5
     |
1030 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1031:5
     |
1031 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1032:5
     |
1032 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1034:9
     |
1034 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1035:9
     |
1035 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1036:9
     |
1036 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1118:5
     |
1118 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1119:5
     |
1119 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1120:5
     |
1120 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1121:5
     |
1121 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1132:9
     |
1132 |     let mut truerange: *mut libc::c_double = malloc(
     |         ----^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1179:5
     |
1179 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1180:5
     |
1180 |     mut stream_in: *mut *mut ti_stream,
     |     ----^^^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1200:5
     |
1200 |     mut stream_in: *mut ti_stream,
     |     ----^^^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1201:5
     |
1201 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1202:5
     |
1202 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1203:5
     |
1203 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1206:9
     |
1206 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1207:9
     |
1207 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1208:9
     |
1208 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1290:45
     |
1290 | pub unsafe extern "C" fn ti_atr_stream_free(mut stream: *mut ti_stream) {
     |                                             ----^^^^^^
     |                                             |
     |                                             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1295:5
     |
1295 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1301:5
     |
1301 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1302:5
     |
1302 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1303:5
     |
1303 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1304:5
     |
1304 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1306:9
     |
1306 |     let mut open: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1307:9
     |
1307 |     let mut high: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1308:9
     |
1308 |     let mut low: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1309:9
     |
1309 |     let mut close: *const libc::c_double = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1310:9
     |
1310 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1326:5
     |
1326 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1332:5
     |
1332 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1333:5
     |
1333 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1334:5
     |
1334 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1335:5
     |
1335 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1337:9
     |
1337 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1446:5
     |
1446 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1452:5
     |
1452 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1453:5
     |
1453 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1454:5
     |
1454 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1455:5
     |
1455 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1457:9
     |
1457 |     let mut open: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1458:9
     |
1458 |     let mut high: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1459:9
     |
1459 |     let mut low: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1460:9
     |
1460 |     let mut close: *const libc::c_double = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1461:9
     |
1461 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1465:13
     |
1465 |         let mut hl: libc::c_double = *high.offset(i as isize) - *low.offset(i as isize);
     |             ----^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1481:5
     |
1481 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1488:5
     |
1488 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1489:5
     |
1489 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1490:5
     |
1490 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1491:5
     |
1491 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1493:9
     |
1493 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1494:9
     |
1494 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1495:9
     |
1495 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1563:5
     |
1563 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1569:5
     |
1569 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1570:5
     |
1570 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1571:5
     |
1571 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1572:5
     |
1572 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1574:9
     |
1574 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1575:9
     |
1575 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1587:5
     |
1587 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1593:5
     |
1593 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1594:5
     |
1594 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1595:5
     |
1595 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1596:5
     |
1596 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1598:9
     |
1598 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1703:5
     |
1703 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1709:5
     |
1709 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1710:5
     |
1710 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1711:5
     |
1711 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1712:5
     |
1712 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1714:9
     |
1714 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1715:9
     |
1715 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1727:5
     |
1727 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1733:5
     |
1733 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1734:5
     |
1734 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1735:5
     |
1735 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1736:5
     |
1736 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1738:9
     |
1738 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1739:9
     |
1739 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1751:5
     |
1751 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1757:5
     |
1757 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1758:5
     |
1758 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1759:5
     |
1759 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1760:5
     |
1760 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1762:9
     |
1762 |     let mut a: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1763:9
     |
1763 |     let mut b: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1784:5
     |
1784 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1790:5
     |
1790 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1791:5
     |
1791 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1792:5
     |
1792 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1793:5
     |
1793 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1795:9
     |
1795 |     let mut a: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1796:9
     |
1796 |     let mut b: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1814:5
     |
1814 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1821:5
     |
1821 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1822:5
     |
1822 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1823:5
     |
1823 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1824:5
     |
1824 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1826:9
     |
1826 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1827:9
     |
1827 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1892:5
     |
1892 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1898:5
     |
1898 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1899:5
     |
1899 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1900:5
     |
1900 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1901:5
     |
1901 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1903:9
     |
1903 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1913:13
     |
1913 |         let mut d: libc::c_double = *output.offset(-(1 as libc::c_int) as isize) - scale;
     |             ----^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1928:5
     |
1928 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1935:5
     |
1935 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1936:5
     |
1936 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1937:5
     |
1937 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1938:5
     |
1938 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1940:9
     |
1940 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1992:38
     |
1992 | pub unsafe extern "C" fn ti_di_start(mut options: *const libc::c_double) -> libc::c_int {
     |                                      ----^^^^^^^
     |                                      |
     |                                      help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1997:5
     |
1997 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1998:5
     |
1998 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1999:5
     |
1999 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2000:5
     |
2000 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2002:9
     |
2002 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2003:9
     |
2003 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2004:9
     |
2004 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2142:5
     |
2142 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2148:5
     |
2148 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2149:5
     |
2149 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2150:5
     |
2150 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2151:5
     |
2151 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2153:9
     |
2153 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2154:9
     |
2154 |     let mut in2: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2155:9
     |
2155 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2166:38
     |
2166 | pub unsafe extern "C" fn ti_dm_start(mut options: *const libc::c_double) -> libc::c_int {
     |                                      ----^^^^^^^
     |                                      |
     |                                      help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2171:5
     |
2171 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2172:5
     |
2172 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2173:5
     |
2173 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2174:5
     |
2174 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2176:9
     |
2176 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2177:9
     |
2177 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2284:5
     |
2284 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2290:5
     |
2290 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2291:5
     |
2291 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2292:5
     |
2292 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2293:5
     |
2293 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2295:9
     |
2295 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2347:38
     |
2347 | pub unsafe extern "C" fn ti_dx_start(mut options: *const libc::c_double) -> libc::c_int {
     |                                      ----^^^^^^^
     |                                      |
     |                                      help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2352:5
     |
2352 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2353:5
     |
2353 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2354:5
     |
2354 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2355:5
     |
2355 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2357:9
     |
2357 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2358:9
     |
2358 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2393:9
     |
2393 |     let mut di_up: libc::c_double = dmup;
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2394:9
     |
2394 |     let mut di_down: libc::c_double = dmdown;
     |         ----^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2395:9
     |
2395 |     let mut dm_diff: libc::c_double = fabs(di_up - di_down);
     |         ----^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2396:9
     |
2396 |     let mut dm_sum: libc::c_double = di_up + di_down;
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2397:9
     |
2397 |     let mut dx: libc::c_double = dm_diff / dm_sum * 100 as libc::c_int as libc::c_double;
     |         ----^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2419:13
     |
2419 |         let mut di_up_0: libc::c_double = dmup;
     |             ----^^^^^^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2420:13
     |
2420 |         let mut di_down_0: libc::c_double = dmdown;
     |             ----^^^^^^^^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2421:13
     |
2421 |         let mut dm_diff_0: libc::c_double = fabs(di_up_0 - di_down_0);
     |             ----^^^^^^^^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2422:13
     |
2422 |         let mut dm_sum_0: libc::c_double = di_up_0 + di_down_0;
     |             ----^^^^^^^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2423:13
     |
2423 |         let mut dx_0: libc::c_double = dm_diff_0 / dm_sum_0
     |             ----^^^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2452:5
     |
2452 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2458:5
     |
2458 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2459:5
     |
2459 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2460:5
     |
2460 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2461:5
     |
2461 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2463:9
     |
2463 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2473:13
     |
2473 |         let mut d: libc::c_double = *output.offset(-(1 as libc::c_int) as isize) * scale;
     |             ----^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2488:5
     |
2488 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2494:5
     |
2494 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2495:5
     |
2495 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2496:5
     |
2496 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2497:5
     |
2497 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2499:9
     |
2499 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2545:5
     |
2545 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2551:5
     |
2551 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2552:5
     |
2552 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2553:5
     |
2553 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2554:5
     |
2554 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2556:9
     |
2556 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2557:9
     |
2557 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2558:9
     |
2558 |     let mut volume: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2568:13
     |
2568 |         let mut hl: libc::c_double = (*high.offset(i as isize) + *low.offset(i as isize))
     |             ----^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2570:13
     |
2570 |         let mut br: libc::c_double = *volume.offset(i as isize) / 10000.0f64
     |             ----^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2600:5
     |
2600 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2606:5
     |
2606 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2607:5
     |
2607 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2608:5
     |
2608 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2609:5
     |
2609 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2611:9
     |
2611 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2612:9
     |
2612 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2624:5
     |
2624 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2630:5
     |
2630 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2631:5
     |
2631 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2632:5
     |
2632 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2633:5
     |
2633 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2635:9
     |
2635 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2636:9
     |
2636 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2765:5
     |
2765 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2771:5
     |
2771 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2772:5
     |
2772 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2773:5
     |
2773 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2774:5
     |
2774 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2776:9
     |
2776 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2777:9
     |
2777 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2789:5
     |
2789 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2795:5
     |
2795 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2796:5
     |
2796 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2797:5
     |
2797 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2798:5
     |
2798 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2800:9
     |
2800 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2867:5
     |
2867 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2875:5
     |
2875 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2876:5
     |
2876 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2877:5
     |
2877 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2878:5
     |
2878 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2880:9
     |
2880 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2979:5
     |
2979 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2985:5
     |
2985 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2986:5
     |
2986 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2987:5
     |
2987 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2988:5
     |
2988 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2990:9
     |
2990 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3073:5
     |
3073 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3079:5
     |
3079 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3080:5
     |
3080 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3081:5
     |
3081 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3082:5
     |
3082 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3084:9
     |
3084 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3085:9
     |
3085 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3086:9
     |
3086 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3087:9
     |
3087 |     let mut volume: *const libc::c_double = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3170:5
     |
3170 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3176:5
     |
3176 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3177:5
     |
3177 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3178:5
     |
3178 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3179:5
     |
3179 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3181:9
     |
3181 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3220:5
     |
3220 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3226:5
     |
3226 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3227:5
     |
3227 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3228:5
     |
3228 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3229:5
     |
3229 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3231:9
     |
3231 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3293:5
     |
3293 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3299:5
     |
3299 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3300:5
     |
3300 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3301:5
     |
3301 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3302:5
     |
3302 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3304:9
     |
3304 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3366:5
     |
3366 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3372:5
     |
3372 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3373:5
     |
3373 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3374:5
     |
3374 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3375:5
     |
3375 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3377:9
     |
3377 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3436:38
     |
3436 | pub unsafe extern "C" fn ti_ln_start(mut options: *const libc::c_double) -> libc::c_int {
     |                                      ----^^^^^^^
     |                                      |
     |                                      help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3441:5
     |
3441 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3442:5
     |
3442 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3443:5
     |
3443 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3444:5
     |
3444 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3446:9
     |
3446 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3447:9
     |
3447 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3459:5
     |
3459 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3465:5
     |
3465 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3466:5
     |
3466 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3467:5
     |
3467 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3468:5
     |
3468 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3470:9
     |
3470 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3471:9
     |
3471 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3483:5
     |
3483 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3491:5
     |
3491 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3492:5
     |
3492 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3493:5
     |
3493 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3494:5
     |
3494 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3496:9
     |
3496 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3525:9
     |
3525 |     let mut signal_per: libc::c_double = 2 as libc::c_int as libc::c_double
     |         ----^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3613:5
     |
3613 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3619:5
     |
3619 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3620:5
     |
3620 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3621:5
     |
3621 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3622:5
     |
3622 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3624:9
     |
3624 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3625:9
     |
3625 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3626:9
     |
3626 |     let mut volume: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3662:5
     |
3662 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3664:9
     |
3664 |     let mut sum_p: libc::c_int = *options.offset(0 as libc::c_int as isize)
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3670:5
     |
3670 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3671:5
     |
3671 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3672:5
     |
3672 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3673:5
     |
3673 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3675:9
     |
3675 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3676:9
     |
3676 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3695:13
     |
3695 |         let mut hl: libc::c_double = *high.offset(i as isize) - *low.offset(i as isize);
     |             ----^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3746:5
     |
3746 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3752:5
     |
3752 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3753:5
     |
3753 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3754:5
     |
3754 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3755:5
     |
3755 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3757:9
     |
3757 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3822:5
     |
3822 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3823:5
     |
3823 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3824:5
     |
3824 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3825:5
     |
3825 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3827:9
     |
3827 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3859:38
     |
3859 | pub unsafe extern "C" fn ti_md_start(mut options: *const libc::c_double) -> libc::c_int {
     |                                      ----^^^^^^^
     |                                      |
     |                                      help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3864:5
     |
3864 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3865:5
     |
3865 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3866:5
     |
3866 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3867:5
     |
3867 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3869:9
     |
3869 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3926:5
     |
3926 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3932:5
     |
3932 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3933:5
     |
3933 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3934:5
     |
3934 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3935:5
     |
3935 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3937:9
     |
3937 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3938:9
     |
3938 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3939:9
     |
3939 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3954:5
     |
3954 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3960:5
     |
3960 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3961:5
     |
3961 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3962:5
     |
3962 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3963:5
     |
3963 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3965:9
     |
3965 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3966:9
     |
3966 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3967:9
     |
3967 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3968:9
     |
3968 |     let mut volume: *const libc::c_double = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4087:5
     |
4087 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4093:5
     |
4093 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4094:5
     |
4094 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4095:5
     |
4095 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4096:5
     |
4096 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4098:9
     |
4098 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4163:5
     |
4163 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4164:5
     |
4164 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4165:5
     |
4165 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4166:5
     |
4166 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4168:9
     |
4168 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4218:5
     |
4218 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4224:5
     |
4224 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4225:5
     |
4225 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4226:5
     |
4226 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4227:5
     |
4227 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4229:9
     |
4229 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4268:5
     |
4268 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4274:5
     |
4274 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4275:5
     |
4275 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4276:5
     |
4276 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4277:5
     |
4277 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4279:9
     |
4279 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4376:5
     |
4376 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4382:5
     |
4382 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4383:5
     |
4383 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4384:5
     |
4384 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4385:5
     |
4385 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4387:9
     |
4387 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4388:9
     |
4388 |     let mut in2: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4389:9
     |
4389 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4401:5
     |
4401 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4407:5
     |
4407 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4408:5
     |
4408 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4409:5
     |
4409 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4410:5
     |
4410 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4412:9
     |
4412 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4413:9
     |
4413 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4414:9
     |
4414 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4498:5
     |
4498 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4504:5
     |
4504 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4505:5
     |
4505 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4506:5
     |
4506 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4507:5
     |
4507 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4509:9
     |
4509 |     let mut close: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4510:9
     |
4510 |     let mut volume: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4555:5
     |
4555 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4561:5
     |
4561 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4562:5
     |
4562 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4563:5
     |
4563 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4564:5
     |
4564 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4566:9
     |
4566 |     let mut close: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4567:9
     |
4567 |     let mut volume: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4593:5
     |
4593 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4599:5
     |
4599 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4600:5
     |
4600 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4601:5
     |
4601 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4602:5
     |
4602 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4604:9
     |
4604 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4622:9
     |
4622 |     let mut short_per: libc::c_double = 2 as libc::c_int as libc::c_double
     |         ----^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4624:9
     |
4624 |     let mut long_per: libc::c_double = 2 as libc::c_int as libc::c_double
     |         ----^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4661:5
     |
4661 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4667:5
     |
4667 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4668:5
     |
4668 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4669:5
     |
4669 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4670:5
     |
4670 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4672:9
     |
4672 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4673:9
     |
4673 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4785:5
     |
4785 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4791:5
     |
4791 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4792:5
     |
4792 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4793:5
     |
4793 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4794:5
     |
4794 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4796:9
     |
4796 |     let mut close: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4797:9
     |
4797 |     let mut volume: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4842:5
     |
4842 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4848:5
     |
4848 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4849:5
     |
4849 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4850:5
     |
4850 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4851:5
     |
4851 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4853:9
     |
4853 |     let mut open: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4854:9
     |
4854 |     let mut close: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4908:5
     |
4908 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4914:5
     |
4914 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4915:5
     |
4915 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4916:5
     |
4916 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4917:5
     |
4917 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4919:9
     |
4919 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4959:5
     |
4959 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4965:5
     |
4965 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4966:5
     |
4966 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4967:5
     |
4967 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4968:5
     |
4968 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4970:9
     |
4970 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5009:5
     |
5009 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5015:5
     |
5015 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5016:5
     |
5016 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5017:5
     |
5017 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5018:5
     |
5018 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5020:9
     |
5020 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5021:9
     |
5021 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5033:5
     |
5033 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5039:5
     |
5039 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5040:5
     |
5040 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5041:5
     |
5041 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5042:5
     |
5042 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5044:9
     |
5044 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5128:5
     |
5128 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5134:5
     |
5134 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5135:5
     |
5135 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5136:5
     |
5136 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5137:5
     |
5137 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5139:9
     |
5139 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5140:9
     |
5140 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5152:5
     |
5152 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5158:5
     |
5158 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5159:5
     |
5159 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5160:5
     |
5160 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5161:5
     |
5161 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5163:9
     |
5163 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5164:9
     |
5164 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5176:5
     |
5176 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5182:5
     |
5182 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5183:5
     |
5183 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5184:5
     |
5184 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5185:5
     |
5185 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5187:9
     |
5187 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5239:5
     |
5239 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5240:5
     |
5240 |     mut stream_in: *mut *mut ti_stream,
     |     ----^^^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5243:9
     |
5243 |     let mut period: libc::c_int = *options.offset(0 as libc::c_int as isize)
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5268:5
     |
5268 |     mut stream_in: *mut ti_stream,
     |     ----^^^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5269:5
     |
5269 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5270:5
     |
5270 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5271:5
     |
5271 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5275:9
     |
5275 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5276:9
     |
5276 |     let mut period: libc::c_int = (*stream).period;
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5278:9
     |
5278 |     let mut per: libc::c_double = (*stream).per;
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5281:9
     |
5281 |     let mut buffer: *mut libc::c_double = ((*stream).buffer).as_mut_ptr();
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5325:45
     |
5325 | pub unsafe extern "C" fn ti_sma_stream_free(mut stream: *mut ti_stream) {
     |                                             ----^^^^^^
     |                                             |
     |                                             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5330:5
     |
5330 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5336:5
     |
5336 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5337:5
     |
5337 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5338:5
     |
5338 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5339:5
     |
5339 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5341:9
     |
5341 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5342:9
     |
5342 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5354:5
     |
5354 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5360:5
     |
5360 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5361:5
     |
5361 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5362:5
     |
5362 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5363:5
     |
5363 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5365:9
     |
5365 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5431:5
     |
5431 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5437:5
     |
5437 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5438:5
     |
5438 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5439:5
     |
5439 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5440:5
     |
5440 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5442:9
     |
5442 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5509:5
     |
5509 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5518:5
     |
5518 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5519:5
     |
5519 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5520:5
     |
5520 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5521:5
     |
5521 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5523:9
     |
5523 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5524:9
     |
5524 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5525:9
     |
5525 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5687:5
     |
5687 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5694:5
     |
5694 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5695:5
     |
5695 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5696:5
     |
5696 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5697:5
     |
5697 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5699:9
     |
5699 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5848:5
     |
5848 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5854:5
     |
5854 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5855:5
     |
5855 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5856:5
     |
5856 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5857:5
     |
5857 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5859:9
     |
5859 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5860:9
     |
5860 |     let mut in2: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5861:9
     |
5861 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5873:5
     |
5873 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5879:5
     |
5879 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5880:5
     |
5880 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5881:5
     |
5881 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5882:5
     |
5882 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5884:9
     |
5884 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5935:5
     |
5935 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5941:5
     |
5941 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5942:5
     |
5942 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5943:5
     |
5943 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5944:5
     |
5944 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5946:9
     |
5946 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5947:9
     |
5947 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5959:5
     |
5959 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5965:5
     |
5965 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5966:5
     |
5966 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5967:5
     |
5967 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5968:5
     |
5968 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5970:9
     |
5970 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5971:9
     |
5971 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5983:5
     |
5983 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5990:5
     |
5990 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5991:5
     |
5991 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5992:5
     |
5992 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5993:5
     |
5993 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5995:9
     |
5995 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6056:5
     |
6056 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6062:5
     |
6062 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6063:5
     |
6063 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6064:5
     |
6064 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6065:5
     |
6065 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6067:9
     |
6067 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6068:9
     |
6068 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6083:5
     |
6083 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6089:5
     |
6089 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6090:5
     |
6090 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6091:5
     |
6091 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6092:5
     |
6092 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6094:9
     |
6094 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6095:9
     |
6095 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6109:38
     |
6109 | pub unsafe extern "C" fn ti_tr_start(mut options: *const libc::c_double) -> libc::c_int {
     |                                      ----^^^^^^^
     |                                      |
     |                                      help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6114:5
     |
6114 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6115:5
     |
6115 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6116:5
     |
6116 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6117:5
     |
6117 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6119:9
     |
6119 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6120:9
     |
6120 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6121:9
     |
6121 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6122:9
     |
6122 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6153:5
     |
6153 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6159:5
     |
6159 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6160:5
     |
6160 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6161:5
     |
6161 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6162:5
     |
6162 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6164:9
     |
6164 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6176:9
     |
6176 |     let mut weights: libc::c_double = 1 as libc::c_int as libc::c_double
     |         ----^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6261:5
     |
6261 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6268:5
     |
6268 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6269:5
     |
6269 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6270:5
     |
6270 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6271:5
     |
6271 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6273:9
     |
6273 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6352:5
     |
6352 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6358:5
     |
6358 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6359:5
     |
6359 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6360:5
     |
6360 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6361:5
     |
6361 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6363:9
     |
6363 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6364:9
     |
6364 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6379:5
     |
6379 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6385:5
     |
6385 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6386:5
     |
6386 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6387:5
     |
6387 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6388:5
     |
6388 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6390:9
     |
6390 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6452:5
     |
6452 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6458:5
     |
6458 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6459:5
     |
6459 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6460:5
     |
6460 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6461:5
     |
6461 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6463:9
     |
6463 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6464:9
     |
6464 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6465:9
     |
6465 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6466:9
     |
6466 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6482:5
     |
6482 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6488:5
     |
6488 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6489:5
     |
6489 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6490:5
     |
6490 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6491:5
     |
6491 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6493:9
     |
6493 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6494:9
     |
6494 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6495:9
     |
6495 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6624:5
     |
6624 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6630:5
     |
6630 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6631:5
     |
6631 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6632:5
     |
6632 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6633:5
     |
6633 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6635:9
     |
6635 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6693:5
     |
6693 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6699:5
     |
6699 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6700:5
     |
6700 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6701:5
     |
6701 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6702:5
     |
6702 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6704:9
     |
6704 |     let mut in_0: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6813:5
     |
6813 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6819:5
     |
6819 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6820:5
     |
6820 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6821:5
     |
6821 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6822:5
     |
6822 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6824:9
     |
6824 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6870:13
     |
6870 |         let mut short_stddev: libc::c_double = sqrt(
     |             ----^^^^^^^^^^^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6873:13
     |
6873 |         let mut long_stddev: libc::c_double = sqrt(
     |             ----^^^^^^^^^^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6900:13
     |
6900 |         let mut short_stddev_0: libc::c_double = sqrt(
     |             ----^^^^^^^^^^^^^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6903:13
     |
6903 |         let mut long_stddev_0: libc::c_double = sqrt(
     |             ----^^^^^^^^^^^^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6939:5
     |
6939 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6945:5
     |
6945 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6946:5
     |
6946 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6947:5
     |
6947 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6948:5
     |
6948 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6950:9
     |
6950 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7013:5
     |
7013 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7019:5
     |
7019 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7020:5
     |
7020 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7021:5
     |
7021 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7022:5
     |
7022 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7024:9
     |
7024 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7093:5
     |
7093 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7099:5
     |
7099 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7100:5
     |
7100 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7101:5
     |
7101 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7102:5
     |
7102 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7104:9
     |
7104 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7105:9
     |
7105 |     let mut volume: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7162:5
     |
7162 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7168:5
     |
7168 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7169:5
     |
7169 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7170:5
     |
7170 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7171:5
     |
7171 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7173:9
     |
7173 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7174:9
     |
7174 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7175:9
     |
7175 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7231:5
     |
7231 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7237:5
     |
7237 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7238:5
     |
7238 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7239:5
     |
7239 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7240:5
     |
7240 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7242:9
     |
7242 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7243:9
     |
7243 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7244:9
     |
7244 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7245:9
     |
7245 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7261:5
     |
7261 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7267:5
     |
7267 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7268:5
     |
7268 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7269:5
     |
7269 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7270:5
     |
7270 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7272:9
     |
7272 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7324:5
     |
7324 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7330:5
     |
7330 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7331:5
     |
7331 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7332:5
     |
7332 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7333:5
     |
7333 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7335:9
     |
7335 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7336:9
     |
7336 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7337:9
     |
7337 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7432:5
     |
7432 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7438:5
     |
7438 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7439:5
     |
7439 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7440:5
     |
7440 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7441:5
     |
7441 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7443:9
     |
7443 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7498:5
     |
7498 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7505:5
     |
7505 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7506:5
     |
7506 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7507:5
     |
7507 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7508:5
     |
7508 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7510:9
     |
7510 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7529:13
     |
7529 |         let mut c: libc::c_double = *input.offset(i as isize);
     |             ----^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7530:13
     |
7530 |         let mut l: libc::c_double = *input.offset((i - lag) as isize);
     |             ----^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7558:40
     |
7558 | pub unsafe extern "C" fn ti_buffer_new(mut size: libc::c_int) -> *mut ti_buffer {
     |                                        ----^^^^
     |                                        |
     |                                        help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7572:41
     |
7572 | pub unsafe extern "C" fn ti_buffer_free(mut buffer: *mut ti_buffer) {
     |                                         ----^^^^^^
     |                                         |
     |                                         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7591:17
     |
7591 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7674:17
     |
7674 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7756:17
     |
7756 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7839:17
     |
7839 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7921:17
     |
7921 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:8004:17
     |
8004 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:8087:17
     |
8087 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:8170:17
     |
8170 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:8252:17
     |
8252 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:8335:17
     |
8335 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:8417:17
     |
8417 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:8499:17
     |
8499 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:8581:17
     |
8581 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:8663:17
     |
8663 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:8769:17
     |
8769 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:8851:17
     |
8851 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:8933:17
     |
8933 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:9015:17
     |
9015 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:9098:17
     |
9098 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:9180:17
     |
9180 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:9263:17
     |
9263 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:9345:17
     |
9345 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:9428:17
     |
9428 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:9510:17
     |
9510 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:9592:17
     |
9592 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:9674:17
     |
9674 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:9756:17
     |
9756 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:9839:17
     |
9839 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:9922:17
     |
9922 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:10004:17
      |
10004 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:10086:17
      |
10086 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:10169:17
      |
10169 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:10252:17
      |
10252 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:10334:17
      |
10334 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:10417:17
      |
10417 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:10499:17
      |
10499 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:10581:17
      |
10581 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:10663:17
      |
10663 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:10745:17
      |
10745 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:10827:17
      |
10827 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:10909:17
      |
10909 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:10992:17
      |
10992 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:11075:17
      |
11075 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:11157:17
      |
11157 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:11239:17
      |
11239 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:11322:17
      |
11322 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:11405:17
      |
11405 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:11487:17
      |
11487 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:11569:17
      |
11569 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:11652:17
      |
11652 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:11735:17
      |
11735 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:11817:17
      |
11817 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:11907:17
      |
11907 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:11990:17
      |
11990 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:12072:17
      |
12072 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:12154:17
      |
12154 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:12244:17
      |
12244 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:12326:17
      |
12326 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:12408:17
      |
12408 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:12491:17
      |
12491 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:12574:17
      |
12574 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:12657:17
      |
12657 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:12739:17
      |
12739 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:12822:17
      |
12822 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:12904:17
      |
12904 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:12987:17
      |
12987 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:13069:17
      |
13069 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:13151:17
      |
13151 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:13233:17
      |
13233 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:13315:17
      |
13315 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:13398:17
      |
13398 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:13480:17
      |
13480 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:13563:17
      |
13563 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:13662:17
      |
13662 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:13744:17
      |
13744 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:13827:17
      |
13827 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:13910:17
      |
13910 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:13993:17
      |
13993 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:14075:17
      |
14075 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:14157:17
      |
14157 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:14239:17
      |
14239 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:14321:17
      |
14321 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:14404:17
      |
14404 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:14487:17
      |
14487 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:14570:17
      |
14570 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:14653:17
      |
14653 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:14735:17
      |
14735 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:14818:17
      |
14818 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:14900:17
      |
14900 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:14982:17
      |
14982 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:15064:17
      |
15064 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:15146:17
      |
15146 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:15228:17
      |
15228 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:15310:17
      |
15310 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:15393:17
      |
15393 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:15476:17
      |
15476 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:15559:17
      |
15559 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:15641:17
      |
15641 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:15724:17
      |
15724 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:15807:17
      |
15807 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:15889:17
      |
15889 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:15971:17
      |
15971 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16053:17
      |
16053 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16136:17
      |
16136 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16219:17
      |
16219 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16293:5
      |
16293 |     mut stream: *mut ti_stream,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16294:5
      |
16294 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16295:5
      |
16295 |     mut inputs: *const *const libc::c_double,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16296:5
      |
16296 |     mut outputs: *const *mut libc::c_double,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16303:5
      |
16303 |     mut stream: *mut ti_stream,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16309:5
      |
16309 |     mut stream: *mut ti_stream,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16314:41
      |
16314 | pub unsafe extern "C" fn ti_stream_free(mut stream: *mut ti_stream) {
      |                                         ----^^^^^^
      |                                         |
      |                                         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16320:5
      |
16320 |     mut name: *const libc::c_char,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16355:13
      |
16355 |         let mut init = tc_config {
      |             ----^^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16372:17
      |
16372 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16389:17
      |
16389 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16406:17
      |
16406 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16423:17
      |
16423 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16440:17
      |
16440 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16457:17
      |
16457 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16474:17
      |
16474 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16491:17
      |
16491 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16508:17
      |
16508 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16525:17
      |
16525 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16542:17
      |
16542 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16559:17
      |
16559 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16576:17
      |
16576 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16593:17
      |
16593 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16610:17
      |
16610 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16627:17
      |
16627 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16644:17
      |
16644 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16661:17
      |
16661 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16678:17
      |
16678 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16695:17
      |
16695 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16712:17
      |
16712 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16729:17
      |
16729 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16746:17
      |
16746 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16763:17
      |
16763 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16780:17
      |
16780 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16797:17
      |
16797 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16814:17
      |
16814 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16826:5
      |
16826 |     mut name: *const libc::c_char,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16847:38
      |
16847 | pub unsafe extern "C" fn tc_get_info(mut pattern: tc_set) -> *const tc_candle_info {
      |                                      ----^^^^^^^
      |                                      |
      |                                      help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16851:9
      |
16851 |     let mut k: tc_set = pattern & !pattern.wrapping_sub(1 as libc::c_int as tc_set);
      |         ----^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16870:51
      |
16870 | pub unsafe extern "C" fn tc_config_set_to_default(mut config: *mut tc_config) {
      |                                                   ----^^^^^^
      |                                                   |
      |                                                   help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16879:9
      |
16879 |     let mut k: *mut tc_result = malloc(
      |         ----^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16898:41
      |
16898 | pub unsafe extern "C" fn tc_result_free(mut result: *mut tc_result) {
      |                                         ----^^^^^^
      |                                         |
      |                                         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16906:42
      |
16906 | pub unsafe extern "C" fn tc_result_count(mut result: *const tc_result) -> libc::c_int {
      |                                          ----^^^^^^
      |                                          |
      |                                          help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16911:5
      |
16911 |     mut result: *const tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16917:5
      |
16917 |     mut result: *const tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16918:5
      |
16918 |     mut index: libc::c_int,
      |     ----^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16923:9
      |
16923 |     let mut hit: tc_hit = {
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16924:13
      |
16924 |         let mut init = tc_hit {
      |             ----^^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16934:5
      |
16934 |     mut result: *const tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16935:5
      |
16935 |     mut index: libc::c_int,
      |     ----^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16980:5
      |
16980 |     mut hit: tc_hit,
      |     ----^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17003:13
      |
17003 |         let mut hits: *mut tc_hit = realloc(
      |             ----^^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17020:5
      |
17020 |     mut patterns: tc_set,
      |     ----^^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17021:5
      |
17021 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17022:5
      |
17022 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17023:5
      |
17023 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17024:5
      |
17024 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17109:9
      |
17109 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17110:9
      |
17110 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17111:9
      |
17111 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17112:9
      |
17112 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17168:21
      |
17168 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17199:21
      |
17199 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17216:21
      |
17216 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17233:21
      |
17233 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17252:21
      |
17252 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17268:21
      |
17268 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17286:21
      |
17286 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17306:21
      |
17306 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17326:21
      |
17326 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17380:21
      |
17380 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17434:21
      |
17434 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17452:21
      |
17452 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17470:21
      |
17470 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17496:21
      |
17496 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17522:21
      |
17522 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17553:21
      |
17553 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17571:21
      |
17571 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17589:21
      |
17589 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17643:21
      |
17643 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17697:21
      |
17697 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17728:21
      |
17728 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17748:21
      |
17748 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17766:21
      |
17766 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17820:21
      |
17820 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17874:21
      |
17874 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17893:21
      |
17893 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17920:5
      |
17920 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17921:5
      |
17921 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17922:5
      |
17922 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17923:5
      |
17923 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17925:9
      |
17925 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17926:9
      |
17926 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17927:9
      |
17927 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17928:9
      |
17928 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17983:21
      |
17983 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18010:5
      |
18010 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18011:5
      |
18011 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18012:5
      |
18012 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18013:5
      |
18013 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18015:9
      |
18015 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18016:9
      |
18016 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18017:9
      |
18017 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18018:9
      |
18018 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18073:21
      |
18073 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18100:5
      |
18100 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18101:5
      |
18101 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18102:5
      |
18102 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18103:5
      |
18103 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18105:9
      |
18105 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18106:9
      |
18106 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18107:9
      |
18107 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18108:9
      |
18108 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18149:21
      |
18149 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18176:5
      |
18176 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18177:5
      |
18177 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18178:5
      |
18178 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18179:5
      |
18179 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18181:9
      |
18181 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18182:9
      |
18182 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18183:9
      |
18183 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18184:9
      |
18184 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18225:21
      |
18225 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18252:5
      |
18252 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18253:5
      |
18253 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18254:5
      |
18254 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18255:5
      |
18255 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18257:9
      |
18257 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18258:9
      |
18258 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18259:9
      |
18259 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18260:9
      |
18260 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18303:21
      |
18303 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18330:5
      |
18330 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18331:5
      |
18331 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18332:5
      |
18332 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18333:5
      |
18333 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18335:9
      |
18335 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18336:9
      |
18336 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18337:9
      |
18337 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18338:9
      |
18338 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18378:21
      |
18378 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18405:5
      |
18405 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18406:5
      |
18406 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18407:5
      |
18407 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18408:5
      |
18408 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18410:9
      |
18410 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18411:9
      |
18411 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18412:9
      |
18412 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18413:9
      |
18413 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18455:21
      |
18455 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18482:5
      |
18482 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18483:5
      |
18483 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18484:5
      |
18484 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18485:5
      |
18485 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18487:9
      |
18487 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18488:9
      |
18488 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18489:9
      |
18489 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18490:9
      |
18490 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18533:21
      |
18533 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18560:5
      |
18560 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18561:5
      |
18561 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18562:5
      |
18562 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18563:5
      |
18563 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18565:9
      |
18565 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18566:9
      |
18566 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18567:9
      |
18567 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18568:9
      |
18568 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18611:21
      |
18611 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18638:5
      |
18638 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18639:5
      |
18639 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18640:5
      |
18640 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18641:5
      |
18641 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18643:9
      |
18643 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18644:9
      |
18644 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18645:9
      |
18645 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18646:9
      |
18646 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18724:21
      |
18724 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18751:5
      |
18751 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18752:5
      |
18752 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18753:5
      |
18753 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18754:5
      |
18754 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18756:9
      |
18756 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18757:9
      |
18757 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18758:9
      |
18758 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18759:9
      |
18759 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18837:21
      |
18837 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18864:5
      |
18864 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18865:5
      |
18865 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18866:5
      |
18866 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18867:5
      |
18867 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18869:9
      |
18869 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18870:9
      |
18870 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18871:9
      |
18871 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18872:9
      |
18872 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18914:21
      |
18914 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18941:5
      |
18941 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18942:5
      |
18942 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18943:5
      |
18943 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18944:5
      |
18944 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18946:9
      |
18946 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18947:9
      |
18947 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18948:9
      |
18948 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18949:9
      |
18949 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18991:21
      |
18991 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19018:5
      |
19018 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19019:5
      |
19019 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19020:5
      |
19020 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19021:5
      |
19021 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19023:9
      |
19023 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19024:9
      |
19024 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19025:9
      |
19025 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19026:9
      |
19026 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19076:21
      |
19076 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19103:5
      |
19103 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19104:5
      |
19104 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19105:5
      |
19105 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19106:5
      |
19106 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19108:9
      |
19108 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19109:9
      |
19109 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19110:9
      |
19110 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19111:9
      |
19111 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19161:21
      |
19161 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19188:5
      |
19188 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19189:5
      |
19189 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19190:5
      |
19190 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19191:5
      |
19191 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19193:9
      |
19193 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19194:9
      |
19194 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19195:9
      |
19195 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19196:9
      |
19196 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19251:21
      |
19251 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19278:5
      |
19278 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19279:5
      |
19279 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19280:5
      |
19280 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19281:5
      |
19281 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19283:9
      |
19283 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19284:9
      |
19284 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19285:9
      |
19285 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19286:9
      |
19286 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19328:21
      |
19328 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19355:5
      |
19355 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19356:5
      |
19356 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19357:5
      |
19357 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19358:5
      |
19358 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19360:9
      |
19360 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19361:9
      |
19361 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19362:9
      |
19362 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19363:9
      |
19363 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19405:21
      |
19405 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19432:5
      |
19432 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19433:5
      |
19433 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19434:5
      |
19434 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19435:5
      |
19435 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19437:9
      |
19437 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19438:9
      |
19438 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19439:9
      |
19439 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19440:9
      |
19440 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19518:21
      |
19518 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19545:5
      |
19545 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19546:5
      |
19546 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19547:5
      |
19547 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19548:5
      |
19548 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19550:9
      |
19550 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19551:9
      |
19551 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19552:9
      |
19552 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19553:9
      |
19553 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19631:21
      |
19631 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19658:5
      |
19658 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19659:5
      |
19659 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19660:5
      |
19660 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19661:5
      |
19661 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19663:9
      |
19663 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19664:9
      |
19664 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19665:9
      |
19665 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19666:9
      |
19666 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19721:21
      |
19721 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19748:5
      |
19748 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19749:5
      |
19749 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19750:5
      |
19750 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19751:5
      |
19751 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19753:9
      |
19753 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19754:9
      |
19754 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19755:9
      |
19755 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19756:9
      |
19756 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19800:21
      |
19800 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19827:5
      |
19827 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19828:5
      |
19828 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19829:5
      |
19829 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19830:5
      |
19830 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19832:9
      |
19832 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19833:9
      |
19833 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19834:9
      |
19834 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19835:9
      |
19835 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19877:21
      |
19877 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19904:5
      |
19904 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19905:5
      |
19905 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19906:5
      |
19906 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19907:5
      |
19907 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19909:9
      |
19909 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19910:9
      |
19910 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19911:9
      |
19911 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19912:9
      |
19912 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19990:21
      |
19990 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:20017:5
      |
20017 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:20018:5
      |
20018 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:20019:5
      |
20019 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:20020:5
      |
20020 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:20022:9
      |
20022 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:20023:9
      |
20023 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:20024:9
      |
20024 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:20025:9
      |
20025 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:20103:21
      |
20103 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:20130:5
      |
20130 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:20131:5
      |
20131 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:20132:5
      |
20132 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:20133:5
      |
20133 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:20135:9
      |
20135 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:20136:9
      |
20136 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:20137:9
      |
20137 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:20138:9
      |
20138 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:20181:21
      |
20181 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/abands.rs:25:5
   |
25 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/abands.rs:32:5
   |
32 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/abands.rs:33:5
   |
33 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/abands.rs:34:5
   |
34 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/abands.rs:35:5
   |
35 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/abands.rs:37:9
   |
37 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/abands.rs:38:9
   |
38 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/abands.rs:39:9
   |
39 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/abands.rs:51:9
   |
51 |     let mut per: libc::c_double = 1.0f64 / period as libc::c_double;
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/abands.rs:57:13
   |
57 |         let mut mult: libc::c_double = 4.0f64
   |             ----^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/abands.rs:60:13
   |
60 |         let mut high_val: libc::c_double = (1.0f64 + mult) * *high.offset(i as isize);
   |             ----^^^^^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/abands.rs:76:13
   |
76 |         let mut low_val: libc::c_double = (1.0f64 - mult) * *low.offset(i as isize);
   |             ----^^^^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/abands.rs:107:13
    |
107 |         let mut mult_0: libc::c_double = 4.0f64
    |             ----^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/abands.rs:110:13
    |
110 |         let mut high_val_0: libc::c_double = (1.0f64 + mult_0)
    |             ----^^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/abands.rs:127:13
    |
127 |         let mut low_val_0: libc::c_double = (1.0f64 - mult_0)
    |             ----^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/abands.rs:202:5
    |
202 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/abands.rs:203:5
    |
203 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/abands.rs:204:5
    |
204 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/abands.rs:205:5
    |
205 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/abands.rs:207:9
    |
207 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/abands.rs:208:9
    |
208 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/abands.rs:209:9
    |
209 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/alma.rs:21:5
   |
21 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/alma.rs:28:5
   |
28 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/alma.rs:29:5
   |
29 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/alma.rs:30:5
   |
30 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/alma.rs:31:5
   |
31 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/alma.rs:33:9
   |
33 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/alma.rs:54:9
   |
54 |     let mut weights: *mut libc::c_double = malloc(
   |         ----^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/ce.rs:52:38
   |
52 | pub unsafe extern "C" fn ti_ce_start(mut options: *const libc::c_double) -> libc::c_int {
   |                                      ----^^^^^^^
   |                                      |
   |                                      help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/ce.rs:57:5
   |
57 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/ce.rs:58:5
   |
58 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/ce.rs:59:5
   |
59 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/ce.rs:60:5
   |
60 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/ce.rs:62:9
   |
62 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/ce.rs:63:9
   |
63 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/ce.rs:64:9
   |
64 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/ce.rs:78:9
   |
78 |     let mut truerange: libc::c_double = 0.;
   |         ----^^^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:166:5
    |
166 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:167:5
    |
167 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:168:5
    |
168 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:169:5
    |
169 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:200:13
    |
200 |         let mut HP: libc::c_double = *max.offset(i as isize);
    |             ----^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:204:13
    |
204 |         let mut LP: libc::c_double = *min.offset(i as isize);
    |             ----^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:218:5
    |
218 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:219:5
    |
219 |     mut stream_in: *mut *mut ti_stream,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:265:44
    |
265 | pub unsafe extern "C" fn ti_ce_stream_free(mut stream: *mut ti_stream) {
    |                                            ----^^^^^^
    |                                            |
    |                                            help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:270:5
    |
270 |     mut stream_in: *mut ti_stream,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:271:5
    |
271 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:272:5
    |
272 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:273:5
    |
273 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:277:9
    |
277 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:278:9
    |
278 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:279:9
    |
279 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:296:13
    |
296 |         let mut end_idx: libc::c_int = ((*LP_HP).end_idx + 1 as libc::c_int)
    |             ----^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:381:13
    |
381 |         let mut end_idx_0: libc::c_int = ((*LP_HP).end_idx + 1 as libc::c_int)
    |             ----^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:478:13
    |
478 |         let mut end_idx_1: libc::c_int = ((*LP_HP).end_idx + 1 as libc::c_int)
    |             ----^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/cmf.rs:15:5
   |
15 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/cmf.rs:21:5
   |
21 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/cmf.rs:22:5
   |
22 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/cmf.rs:23:5
   |
23 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/cmf.rs:24:5
   |
24 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/cmf.rs:26:9
   |
26 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/cmf.rs:27:9
   |
27 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/cmf.rs:28:9
   |
28 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/cmf.rs:29:9
   |
29 |     let mut volume: *const libc::c_double = *inputs.offset(3 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/copp.rs:87:5
   |
87 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/copp.rs:97:5
   |
97 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/copp.rs:98:5
   |
98 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/copp.rs:99:5
   |
99 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/copp.rs:100:5
    |
100 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/copp.rs:102:9
    |
102 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/copp.rs:159:9
    |
159 |     let mut denominator: libc::c_double = 1.0f64
    |         ----^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/copp.rs:352:5
    |
352 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/copp.rs:353:5
    |
353 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/copp.rs:354:5
    |
354 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/copp.rs:355:5
    |
355 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/copp.rs:376:9
    |
376 |     let mut roc_short_len: libc::c_int = size - ti_roc_start(&roc_shorter_period);
    |         ----^^^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/copp.rs:381:9
    |
381 |     let mut roc_long_len: libc::c_int = size - ti_roc_start(&roc_longer_period);
    |         ----^^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/copp.rs:386:9
    |
386 |     let mut interm: *mut libc::c_double = malloc(
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/copp.rs:413:46
    |
413 | pub unsafe extern "C" fn ti_copp_stream_free(mut stream: *mut ti_stream) {
    |                                              ----^^^^^^
    |                                              |
    |                                              help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/copp.rs:418:5
    |
418 |     mut stream_in: *mut ti_stream,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/copp.rs:419:5
    |
419 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/copp.rs:420:5
    |
420 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/copp.rs:421:5
    |
421 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/copp.rs:425:9
    |
425 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/copp.rs:430:9
    |
430 |     let mut denominator: libc::c_double = (*stream).state.denominator;
    |         ----^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/copp.rs:431:9
    |
431 |     let mut rocs_per: libc::c_double = (*stream).state.rocs_per;
    |         ----^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/dc.rs:53:38
   |
53 | pub unsafe extern "C" fn ti_dc_start(mut options: *const libc::c_double) -> libc::c_int {
   |                                      ----^^^^^^^
   |                                      |
   |                                      help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/dc.rs:59:5
   |
59 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/dc.rs:60:5
   |
60 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/dc.rs:61:5
   |
61 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/dc.rs:62:5
   |
62 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/dc.rs:79:44
   |
79 | pub unsafe extern "C" fn ti_dc_stream_free(mut stream: *mut ti_stream) {
   |                                            ----^^^^^^
   |                                            |
   |                                            help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/dc.rs:84:5
   |
84 |     mut stream_in: *mut ti_stream,
   |     ----^^^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/dc.rs:85:5
   |
85 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/dc.rs:86:5
   |
86 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/dc.rs:87:5
   |
87 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/dc.rs:91:9
   |
91 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/fi.rs:23:38
   |
23 | pub unsafe extern "C" fn ti_fi_start(mut options: *const libc::c_double) -> libc::c_int {
   |                                      ----^^^^^^^
   |                                      |
   |                                      help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/fi.rs:28:5
   |
28 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/fi.rs:29:5
   |
29 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/fi.rs:30:5
   |
30 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/fi.rs:31:5
   |
31 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/fi.rs:33:9
   |
33 |     let mut close: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/fi.rs:34:9
   |
34 |     let mut volume: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/fi.rs:62:5
   |
62 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/fi.rs:63:5
   |
63 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/fi.rs:64:5
   |
64 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/fi.rs:65:5
   |
65 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/fi.rs:67:9
   |
67 |     let mut close: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/fi.rs:68:9
   |
68 |     let mut volume: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/fi.rs:90:44
   |
90 | pub unsafe extern "C" fn ti_fi_stream_free(mut stream: *mut ti_stream) {
   |                                            ----^^^^^^
   |                                            |
   |                                            help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/fi.rs:95:5
   |
95 |     mut stream_in: *mut ti_stream,
   |     ----^^^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/fi.rs:96:5
   |
96 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/fi.rs:97:5
   |
97 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/fi.rs:98:5
   |
98 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/fi.rs:102:9
    |
102 |     let mut close: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/fi.rs:103:9
    |
103 |     let mut volume: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/fi.rs:105:9
    |
105 |     let mut per: libc::c_double = (*stream).per;
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/ikhts.rs:29:5
   |
29 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/ikhts.rs:35:5
   |
35 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/ikhts.rs:36:5
   |
36 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/ikhts.rs:37:5
   |
37 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/ikhts.rs:38:5
   |
38 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/ikhts.rs:49:9
   |
49 |     let mut buff: *mut libc::c_double = malloc(
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/kc.rs:41:38
   |
41 | pub unsafe extern "C" fn ti_kc_start(mut options: *const libc::c_double) -> libc::c_int {
   |                                      ----^^^^^^^
   |                                      |
   |                                      help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/kc.rs:46:5
   |
46 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/kc.rs:47:5
   |
47 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/kc.rs:48:5
   |
48 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/kc.rs:49:5
   |
49 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/kc.rs:51:9
   |
51 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/kc.rs:52:9
   |
52 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/kc.rs:53:9
   |
53 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/kc.rs:76:9
   |
76 |     let mut truerange: libc::c_double = 0.;
   |         ----^^^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/kc.rs:98:5
   |
98 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/kc.rs:99:5
   |
99 |     mut stream_in: *mut *mut ti_stream,
   |     ----^^^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/kc.rs:145:44
    |
145 | pub unsafe extern "C" fn ti_kc_stream_free(mut stream: *mut ti_stream) {
    |                                            ----^^^^^^
    |                                            |
    |                                            help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/kc.rs:150:5
    |
150 |     mut stream_in: *mut ti_stream,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/kc.rs:151:5
    |
151 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/kc.rs:152:5
    |
152 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/kc.rs:153:5
    |
153 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/kc.rs:159:9
    |
159 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/kc.rs:160:9
    |
160 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/kc.rs:161:9
    |
161 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/kst.rs:30:5
   |
30 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/kst.rs:37:5
   |
37 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/kst.rs:38:5
   |
38 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/kst.rs:39:5
   |
39 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/kst.rs:40:5
   |
40 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/kst.rs:42:9
   |
42 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/kst.rs:75:9
   |
75 |     let mut per1: libc::c_double = 2.0f64 / (ma1 + 1 as libc::c_int) as libc::c_double;
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/kst.rs:76:9
   |
76 |     let mut per2: libc::c_double = 2.0f64 / (ma2 + 1 as libc::c_int) as libc::c_double;
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/kst.rs:77:9
   |
77 |     let mut per3: libc::c_double = 2.0f64 / (ma3 + 1 as libc::c_int) as libc::c_double;
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/kst.rs:78:9
   |
78 |     let mut per4: libc::c_double = 2.0f64 / (ma4 + 1 as libc::c_int) as libc::c_double;
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/kst.rs:79:9
   |
79 |     let mut per_signal: libc::c_double = 2.0f64 / (9.0f64 + 1.0f64);
   |         ----^^^^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/kst.rs:188:5
    |
188 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/kst.rs:189:5
    |
189 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/kst.rs:190:5
    |
190 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/kst.rs:191:5
    |
191 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/kst.rs:194:9
    |
194 |     let mut roc: *const libc::c_double = options;
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/kst.rs:195:9
    |
195 |     let mut ma: *const libc::c_double = options.offset(4 as libc::c_int as isize);
    |         ----^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/mama.rs:181:5
    |
181 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/mama.rs:187:5
    |
187 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/mama.rs:188:5
    |
188 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/mama.rs:189:5
    |
189 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/mama.rs:190:5
    |
190 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/mama.rs:192:9
    |
192 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/mama.rs:205:9
    |
205 |     let mut price: *const libc::c_double = real;
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1372:5
     |
1372 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1373:5
     |
1373 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1374:5
     |
1374 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1375:5
     |
1375 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1377:9
     |
1377 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1390:9
     |
1390 |     let mut price: *const libc::c_double = real;
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1392:9
     |
1392 |     let mut smooth: *mut libc::c_double = calloc(
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1396:9
     |
1396 |     let mut detrender: *mut libc::c_double = calloc(
     |         ----^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1400:9
     |
1400 |     let mut I1: *mut libc::c_double = calloc(
     |         ----^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1404:9
     |
1404 |     let mut Q1: *mut libc::c_double = calloc(
     |         ----^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1408:9
     |
1408 |     let mut jI: *mut libc::c_double = calloc(
     |         ----^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1412:9
     |
1412 |     let mut jQ: *mut libc::c_double = calloc(
     |         ----^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1416:9
     |
1416 |     let mut I2: *mut libc::c_double = calloc(
     |         ----^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1420:9
     |
1420 |     let mut Q2: *mut libc::c_double = calloc(
     |         ----^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1424:9
     |
1424 |     let mut Re: *mut libc::c_double = calloc(
     |         ----^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1428:9
     |
1428 |     let mut Im: *mut libc::c_double = calloc(
     |         ----^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1432:9
     |
1432 |     let mut period: *mut libc::c_double = calloc(
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1436:9
     |
1436 |     let mut smoothperiod: *mut libc::c_double = calloc(
     |         ----^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1440:9
     |
1440 |     let mut phase: *mut libc::c_double = calloc(
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1444:9
     |
1444 |     let mut deltaphase: *mut libc::c_double = calloc(
     |         ----^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1448:9
     |
1448 |     let mut alpha: *mut libc::c_double = calloc(
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1625:5
     |
1625 |     mut stream_in: *mut ti_stream,
     |     ----^^^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1626:5
     |
1626 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1627:5
     |
1627 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1628:5
     |
1628 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1632:9
     |
1632 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1637:9
     |
1637 |     let mut price: *const libc::c_double = real;
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:2721:46
     |
2721 | pub unsafe extern "C" fn ti_mama_stream_free(mut stream: *mut ti_stream) {
     |                                              ----^^^^^^
     |                                              |
     |                                              help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pbands.rs:63:5
   |
63 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pbands.rs:70:5
   |
70 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pbands.rs:71:5
   |
71 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pbands.rs:72:5
   |
72 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pbands.rs:73:5
   |
73 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pbands.rs:75:9
   |
75 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pbands.rs:76:9
   |
76 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pbands.rs:77:9
   |
77 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:105:9
    |
105 |     let mut b: libc::c_double = (xy_sum / period as libc::c_double
    |         ----^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:138:13
    |
138 |         let mut b_0: libc::c_double = (xy_sum / period as libc::c_double
    |             ----^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:177:5
    |
177 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:178:5
    |
178 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:179:5
    |
179 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:180:5
    |
180 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:182:9
    |
182 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:183:9
    |
183 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:196:9
    |
196 |     let mut start: libc::c_int = ti_linregslope_start(options);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:243:48
    |
243 | pub unsafe extern "C" fn ti_pbands_stream_free(mut stream: *mut ti_stream) {
    |                                                ----^^^^^^
    |                                                |
    |                                                help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:248:5
    |
248 |     mut stream_in: *mut ti_stream,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:249:5
    |
249 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:250:5
    |
250 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:251:5
    |
251 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:254:9
    |
254 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:255:9
    |
255 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:256:9
    |
256 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:312:13
    |
312 |         let mut b: libc::c_double = (xy_sum / period as libc::c_double
    |             ----^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:408:13
    |
408 |         let mut b_0: libc::c_double = (xy_sum / period as libc::c_double
    |             ----^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pc.rs:57:38
   |
57 | pub unsafe extern "C" fn ti_pc_start(mut options: *const libc::c_double) -> libc::c_int {
   |                                      ----^^^^^^^
   |                                      |
   |                                      help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pc.rs:63:5
   |
63 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pc.rs:64:5
   |
64 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pc.rs:65:5
   |
65 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pc.rs:66:5
   |
66 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pc.rs:84:44
   |
84 | pub unsafe extern "C" fn ti_pc_stream_free(mut stream: *mut ti_stream) {
   |                                            ----^^^^^^
   |                                            |
   |                                            help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pc.rs:89:5
   |
89 |     mut stream_in: *mut ti_stream,
   |     ----^^^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pc.rs:90:5
   |
90 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pc.rs:91:5
   |
91 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pc.rs:92:5
   |
92 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pc.rs:96:9
   |
96 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pc.rs:97:9
   |
97 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pc.rs:100:9
    |
100 |     let mut period: libc::c_double = (*stream).options.period;
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pfe.rs:49:5
   |
49 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pfe.rs:56:5
   |
56 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pfe.rs:57:5
   |
57 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pfe.rs:58:5
   |
58 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pfe.rs:59:5
   |
59 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pfe.rs:61:9
   |
61 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pfe.rs:132:9
    |
132 |     let mut numer: libc::c_double = (if *real.offset(i as isize)
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pfe.rs:178:13
    |
178 |         let mut numer2: libc::c_double = (if *real.offset(i as isize)
    |             ----^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pfe.rs:241:5
    |
241 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pfe.rs:242:5
    |
242 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pfe.rs:243:5
    |
243 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pfe.rs:244:5
    |
244 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pfe.rs:246:9
    |
246 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pfe.rs:337:45
    |
337 | pub unsafe extern "C" fn ti_pfe_stream_free(mut stream: *mut ti_stream) {
    |                                             ----^^^^^^
    |                                             |
    |                                             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pfe.rs:342:5
    |
342 |     mut stream_in: *mut ti_stream,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pfe.rs:343:5
    |
343 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pfe.rs:344:5
    |
344 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pfe.rs:345:5
    |
345 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pfe.rs:348:9
    |
348 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pfe.rs:357:9
    |
357 |     let mut buffer: *mut [[libc::c_double; 2]; 0] = &mut (*stream).buffer;
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/posc.rs:71:5
   |
71 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/posc.rs:78:5
   |
78 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/posc.rs:79:5
   |
79 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/posc.rs:80:5
   |
80 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/posc.rs:81:5
   |
81 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/posc.rs:83:9
   |
83 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/posc.rs:84:9
   |
84 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/posc.rs:85:9
   |
85 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:116:9
    |
116 |     let mut b: libc::c_double = (xy_sum / period as libc::c_double
    |         ----^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:147:13
    |
147 |         let mut b_0: libc::c_double = (xy_sum / period as libc::c_double
    |             ----^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:173:13
    |
173 |         let mut osc: libc::c_double = (*close.offset(i as isize) - the_min_0)
    |             ----^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:187:5
    |
187 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:188:5
    |
188 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:189:5
    |
189 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:190:5
    |
190 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:192:9
    |
192 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:193:9
    |
193 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:207:9
    |
207 |     let mut start: libc::c_int = ti_linregslope_start(options);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:254:46
    |
254 | pub unsafe extern "C" fn ti_posc_stream_free(mut stream: *mut ti_stream) {
    |                                              ----^^^^^^
    |                                              |
    |                                              help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:259:5
    |
259 |     mut stream_in: *mut ti_stream,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:260:5
    |
260 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:261:5
    |
261 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:262:5
    |
262 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:265:9
    |
265 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:266:9
    |
266 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:267:9
    |
267 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:320:13
    |
320 |         let mut b: libc::c_double = (xy_sum / period as libc::c_double
    |             ----^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:412:13
    |
412 |         let mut b_0: libc::c_double = (xy_sum / period as libc::c_double
    |             ----^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:456:13
    |
456 |         let mut osc: libc::c_double = (*close.offset(i as isize) - the_min_0)
    |             ----^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rmi.rs:54:5
   |
54 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rmi.rs:62:5
   |
62 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rmi.rs:63:5
   |
63 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rmi.rs:64:5
   |
64 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rmi.rs:65:5
   |
65 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rmi.rs:67:9
   |
67 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rmi.rs:130:5
    |
130 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rmi.rs:131:5
    |
131 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rmi.rs:132:5
    |
132 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rmi.rs:133:5
    |
133 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rmi.rs:135:9
    |
135 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rmi.rs:149:9
    |
149 |     let mut start: libc::c_int = ti_rmi_start(options);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rmi.rs:212:45
    |
212 | pub unsafe extern "C" fn ti_rmi_stream_free(mut stream: *mut ti_stream) {
    |                                             ----^^^^^^
    |                                             |
    |                                             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rmi.rs:217:5
    |
217 |     mut stream_in: *mut ti_stream,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rmi.rs:218:5
    |
218 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rmi.rs:219:5
    |
219 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rmi.rs:220:5
    |
220 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rmi.rs:223:9
    |
223 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rmta.rs:14:5
   |
14 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rmta.rs:20:5
   |
20 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rmta.rs:21:5
   |
21 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rmta.rs:22:5
   |
22 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rmta.rs:23:5
   |
23 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rmta.rs:25:9
   |
25 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rmta.rs:44:13
   |
44 |         let mut next_b: libc::c_double = (1.0f64 - alpha) * b
   |             ----^^^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rmta.rs:54:13
   |
54 |         let mut next_b_0: libc::c_double = (1.0f64 - alpha) * b
   |             ----^^^^^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rvi.rs:50:5
   |
50 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rvi.rs:58:5
   |
58 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rvi.rs:59:5
   |
59 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rvi.rs:60:5
   |
60 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rvi.rs:61:5
   |
61 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rvi.rs:63:9
   |
63 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rvi.rs:96:9
   |
96 |     let mut b: libc::c_double = (xy_sum / stddev_period as libc::c_double
   |         ----^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:102:9
    |
102 |     let mut a: libc::c_double = y_sum / stddev_period as libc::c_double
    |         ----^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:104:9
    |
104 |     let mut higher: libc::c_double = *real.offset(i as isize)
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:125:13
    |
125 |         let mut b_0: libc::c_double = (xy_sum / stddev_period as libc::c_double
    |             ----^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:131:13
    |
131 |         let mut a_0: libc::c_double = y_sum / stddev_period as libc::c_double
    |             ----^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:133:13
    |
133 |         let mut higher_0: libc::c_double = *real.offset(i as isize)
    |             ----^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:159:45
    |
159 | pub unsafe extern "C" fn ti_rvi_stream_free(mut stream: *mut ti_stream) {
    |                                             ----^^^^^^
    |                                             |
    |                                             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:164:5
    |
164 |     mut stream_in: *mut ti_stream,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:165:5
    |
165 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:166:5
    |
166 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:167:5
    |
167 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:170:9
    |
170 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:179:9
    |
179 |     let mut x_sum: libc::c_double = (*stream).constants.x_sum;
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:180:9
    |
180 |     let mut xsq_sum: libc::c_double = (*stream).constants.xsq_sum;
    |         ----^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:206:13
    |
206 |         let mut b: libc::c_double = (xy_sum / stddev_period as libc::c_double
    |             ----^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:212:13
    |
212 |         let mut a: libc::c_double = y_sum / stddev_period as libc::c_double
    |             ----^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:214:13
    |
214 |         let mut higher: libc::c_double = *real.offset(i as isize)
    |             ----^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:256:13
    |
256 |         let mut b_0: libc::c_double = (xy_sum / stddev_period as libc::c_double
    |             ----^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:262:13
    |
262 |         let mut a_0: libc::c_double = y_sum / stddev_period as libc::c_double
    |             ----^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:264:13
    |
264 |         let mut higher_0: libc::c_double = *real.offset(i as isize)
    |             ----^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/smi.rs:72:5
   |
72 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/smi.rs:80:5
   |
80 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/smi.rs:81:5
   |
81 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/smi.rs:82:5
   |
82 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/smi.rs:83:5
   |
83 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/smi.rs:85:9
   |
85 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/smi.rs:86:9
   |
86 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/smi.rs:87:9
   |
87 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/smi.rs:215:5
    |
215 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/smi.rs:216:5
    |
216 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/smi.rs:217:5
    |
217 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/smi.rs:218:5
    |
218 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/smi.rs:220:9
    |
220 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/smi.rs:221:9
    |
221 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/smi.rs:222:9
    |
222 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/smi.rs:226:9
    |
226 |     let mut smi: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/smi.rs:294:45
    |
294 | pub unsafe extern "C" fn ti_smi_stream_free(mut stream: *mut ti_stream) {
    |                                             ----^^^^^^
    |                                             |
    |                                             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/smi.rs:299:5
    |
299 |     mut stream_in: *mut ti_stream,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/smi.rs:300:5
    |
300 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/smi.rs:301:5
    |
301 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/smi.rs:302:5
    |
302 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/smi.rs:305:9
    |
305 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/smi.rs:306:9
    |
306 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/smi.rs:307:9
    |
307 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/tsi.rs:52:5
   |
52 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/tsi.rs:58:5
   |
58 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/tsi.rs:59:5
   |
59 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/tsi.rs:60:5
   |
60 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/tsi.rs:61:5
   |
61 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/tsi.rs:63:9
   |
63 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/tsi.rs:133:5
    |
133 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/tsi.rs:134:5
    |
134 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/tsi.rs:135:5
    |
135 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/tsi.rs:136:5
    |
136 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/tsi.rs:151:9
    |
151 |     let mut outsize: libc::c_int = size - ti_mom_start(&mut _one);
    |         ----^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/tsi.rs:191:45
    |
191 | pub unsafe extern "C" fn ti_tsi_stream_free(mut stream: *mut ti_stream) {
    |                                             ----^^^^^^
    |                                             |
    |                                             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/tsi.rs:196:5
    |
196 |     mut stream_in: *mut ti_stream,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/tsi.rs:197:5
    |
197 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/tsi.rs:198:5
    |
198 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/tsi.rs:199:5
    |
199 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/tsi.rs:202:9
    |
202 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/vwap.rs:60:5
   |
60 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/vwap.rs:66:5
   |
66 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/vwap.rs:67:5
   |
67 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/vwap.rs:68:5
   |
68 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/vwap.rs:69:5
   |
69 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/vwap.rs:71:9
   |
71 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/vwap.rs:72:9
   |
72 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/vwap.rs:73:9
   |
73 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/vwap.rs:74:9
   |
74 |     let mut volume: *const libc::c_double = *inputs.offset(3 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/vwap.rs:120:5
    |
120 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/vwap.rs:121:5
    |
121 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/vwap.rs:122:5
    |
122 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/vwap.rs:123:5
    |
123 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/vwap.rs:125:9
    |
125 |     let mut volume: *const libc::c_double = *inputs.offset(3 as libc::c_int as isize);
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/vwap.rs:131:9
    |
131 |     let mut outsize: libc::c_int = size - ti_typprice_start(&period);
    |         ----^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/vwap.rs:168:46
    |
168 | pub unsafe extern "C" fn ti_vwap_stream_free(mut stream: *mut ti_stream) {
    |                                              ----^^^^^^
    |                                              |
    |                                              help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/vwap.rs:173:5
    |
173 |     mut stream_in: *mut ti_stream,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/vwap.rs:174:5
    |
174 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/vwap.rs:175:5
    |
175 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/vwap.rs:176:5
    |
176 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/vwap.rs:179:9
    |
179 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/vwap.rs:180:9
    |
180 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/vwap.rs:181:9
    |
181 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/vwap.rs:182:9
    |
182 |     let mut volume: *const libc::c_double = *inputs.offset(3 as libc::c_int as isize);
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/abs.rs:7:5
  |
7 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/abs.rs:13:5
   |
13 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/abs.rs:14:5
   |
14 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/abs.rs:15:5
   |
15 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/abs.rs:16:5
   |
16 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/abs.rs:18:9
   |
18 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/abs.rs:19:9
   |
19 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/acos.rs:7:5
  |
7 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/acos.rs:13:5
   |
13 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/acos.rs:14:5
   |
14 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/acos.rs:15:5
   |
15 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/acos.rs:16:5
   |
16 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/acos.rs:18:9
   |
18 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/acos.rs:19:9
   |
19 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/ad.rs:3:38
  |
3 | pub unsafe extern "C" fn ti_ad_start(mut options: *const libc::c_double) -> libc::c_int {
  |                                      ----^^^^^^^
  |                                      |
  |                                      help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/ad.rs:8:5
  |
8 |     mut size: libc::c_int,
  |     ----^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/ad.rs:9:5
  |
9 |     mut inputs: *const *const libc::c_double,
  |     ----^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ad.rs:10:5
   |
10 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ad.rs:11:5
   |
11 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ad.rs:13:9
   |
13 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ad.rs:14:9
   |
14 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ad.rs:15:9
   |
15 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ad.rs:16:9
   |
16 |     let mut volume: *const libc::c_double = *inputs.offset(3 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ad.rs:17:9
   |
17 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/add.rs:4:5
  |
4 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/add.rs:10:5
   |
10 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/add.rs:11:5
   |
11 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/add.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/add.rs:13:5
   |
13 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/add.rs:15:9
   |
15 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/add.rs:16:9
   |
16 |     let mut in2: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/add.rs:17:9
   |
17 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adosc.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adosc.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adosc.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adosc.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adosc.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adosc.rs:23:9
   |
23 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adosc.rs:24:9
   |
24 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adosc.rs:25:9
   |
25 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adosc.rs:26:9
   |
26 |     let mut volume: *const libc::c_double = *inputs.offset(3 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adx.rs:13:5
   |
13 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adx.rs:20:5
   |
20 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adx.rs:21:5
   |
21 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adx.rs:22:5
   |
22 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adx.rs:23:5
   |
23 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adx.rs:25:9
   |
25 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adx.rs:26:9
   |
26 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adx.rs:63:9
   |
63 |     let mut di_up: libc::c_double = dmup;
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adx.rs:64:9
   |
64 |     let mut di_down: libc::c_double = dmdown;
   |         ----^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adx.rs:65:9
   |
65 |     let mut dm_diff: libc::c_double = fabs(di_up - di_down);
   |         ----^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adx.rs:66:9
   |
66 |     let mut dm_sum: libc::c_double = di_up + di_down;
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adx.rs:67:9
   |
67 |     let mut dx: libc::c_double = dm_diff / dm_sum * 100 as libc::c_int as libc::c_double;
   |         ----^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adx.rs:87:13
   |
87 |         let mut di_up_0: libc::c_double = dmup;
   |             ----^^^^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adx.rs:88:13
   |
88 |         let mut di_down_0: libc::c_double = dmdown;
   |             ----^^^^^^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adx.rs:89:13
   |
89 |         let mut dm_diff_0: libc::c_double = fabs(di_up_0 - di_down_0);
   |             ----^^^^^^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adx.rs:90:13
   |
90 |         let mut dm_sum_0: libc::c_double = di_up_0 + di_down_0;
   |             ----^^^^^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adx.rs:91:13
   |
91 |         let mut dx_0: libc::c_double = dm_diff_0 / dm_sum_0
   |             ----^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adxr.rs:24:5
   |
24 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adxr.rs:31:5
   |
31 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adxr.rs:32:5
   |
32 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adxr.rs:33:5
   |
33 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adxr.rs:34:5
   |
34 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adxr.rs:36:9
   |
36 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adxr.rs:37:9
   |
37 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adxr.rs:74:9
   |
74 |     let mut di_up: libc::c_double = dmup;
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adxr.rs:75:9
   |
75 |     let mut di_down: libc::c_double = dmdown;
   |         ----^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adxr.rs:76:9
   |
76 |     let mut dm_diff: libc::c_double = fabs(di_up - di_down);
   |         ----^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adxr.rs:77:9
   |
77 |     let mut dm_sum: libc::c_double = di_up + di_down;
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adxr.rs:78:9
   |
78 |     let mut dx: libc::c_double = dm_diff / dm_sum * 100 as libc::c_int as libc::c_double;
   |         ----^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/adxr.rs:100:13
    |
100 |         let mut di_up_0: libc::c_double = dmup;
    |             ----^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/adxr.rs:101:13
    |
101 |         let mut di_down_0: libc::c_double = dmdown;
    |             ----^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/adxr.rs:102:13
    |
102 |         let mut dm_diff_0: libc::c_double = fabs(di_up_0 - di_down_0);
    |             ----^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/adxr.rs:103:13
    |
103 |         let mut dm_sum_0: libc::c_double = di_up_0 + di_down_0;
    |             ----^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/adxr.rs:104:13
    |
104 |         let mut dx_0: libc::c_double = dm_diff_0 / dm_sum_0
    |             ----^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ao.rs:11:38
   |
11 | pub unsafe extern "C" fn ti_ao_start(mut options: *const libc::c_double) -> libc::c_int {
   |                                      ----^^^^^^^
   |                                      |
   |                                      help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ao.rs:16:5
   |
16 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ao.rs:17:5
   |
17 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ao.rs:18:5
   |
18 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ao.rs:19:5
   |
19 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ao.rs:21:9
   |
21 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ao.rs:22:9
   |
22 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ao.rs:35:13
   |
35 |         let mut hl: libc::c_double = 0.5f64
   |             ----^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ao.rs:49:13
   |
49 |         let mut hl_0: libc::c_double = 0.5f64
   |             ----^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/apo.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/apo.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/apo.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/apo.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/apo.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/apo.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/apo.rs:41:9
   |
41 |     let mut short_per: libc::c_double = 2 as libc::c_int as libc::c_double
   |         ----^^^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/apo.rs:43:9
   |
43 |     let mut long_per: libc::c_double = 2 as libc::c_int as libc::c_double
   |         ----^^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/aroon.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/aroon.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/aroon.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/aroon.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/aroon.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/aroon.rs:23:9
   |
23 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/aroon.rs:24:9
   |
24 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/aroonosc.rs:13:5
   |
13 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/aroonosc.rs:19:5
   |
19 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/aroonosc.rs:20:5
   |
20 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/aroonosc.rs:21:5
   |
21 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/aroonosc.rs:22:5
   |
22 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/aroonosc.rs:24:9
   |
24 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/aroonosc.rs:25:9
   |
25 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/asin.rs:7:5
  |
7 |     mut size: libc::c_int,
  |     ----^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/asin.rs:8:5
  |
8 |     mut inputs: *const *const libc::c_double,
  |     ----^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/asin.rs:9:5
  |
9 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/asin.rs:10:5
   |
10 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/asin.rs:12:9
   |
12 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/asin.rs:13:9
   |
13 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/asin.rs:25:5
   |
25 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/atan.rs:7:5
  |
7 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/atan.rs:13:5
   |
13 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/atan.rs:14:5
   |
14 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/atan.rs:15:5
   |
15 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/atan.rs:16:5
   |
16 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/atan.rs:18:9
   |
18 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/atan.rs:19:9
   |
19 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/atr.rs:40:5
   |
40 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/atr.rs:46:5
   |
46 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/atr.rs:47:5
   |
47 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/atr.rs:48:5
   |
48 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/atr.rs:49:5
   |
49 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/atr.rs:51:9
   |
51 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/atr.rs:52:9
   |
52 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/atr.rs:53:9
   |
53 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/atr.rs:135:5
    |
135 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/atr.rs:136:5
    |
136 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/atr.rs:137:5
    |
137 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/atr.rs:138:5
    |
138 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/atr.rs:149:9
    |
149 |     let mut truerange: *mut libc::c_double = malloc(
    |         ----^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/atr.rs:196:5
    |
196 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/atr.rs:197:5
    |
197 |     mut stream_in: *mut *mut ti_stream,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/atr.rs:217:5
    |
217 |     mut stream_in: *mut ti_stream,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/atr.rs:218:5
    |
218 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/atr.rs:219:5
    |
219 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/atr.rs:220:5
    |
220 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/atr.rs:223:9
    |
223 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/atr.rs:224:9
    |
224 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/atr.rs:225:9
    |
225 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/atr.rs:307:45
    |
307 | pub unsafe extern "C" fn ti_atr_stream_free(mut stream: *mut ti_stream) {
    |                                             ----^^^^^^
    |                                             |
    |                                             help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/avgprice.rs:4:5
  |
4 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/avgprice.rs:10:5
   |
10 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/avgprice.rs:11:5
   |
11 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/avgprice.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/avgprice.rs:13:5
   |
13 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/avgprice.rs:15:9
   |
15 |     let mut open: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/avgprice.rs:16:9
   |
16 |     let mut high: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/avgprice.rs:17:9
   |
17 |     let mut low: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/avgprice.rs:18:9
   |
18 |     let mut close: *const libc::c_double = *inputs.offset(3 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/avgprice.rs:19:9
   |
19 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/bbands.rs:13:5
   |
13 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/bbands.rs:19:5
   |
19 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/bbands.rs:20:5
   |
20 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/bbands.rs:21:5
   |
21 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/bbands.rs:22:5
   |
22 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/bbands.rs:24:9
   |
24 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/bop.rs:4:5
  |
4 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/bop.rs:10:5
   |
10 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/bop.rs:11:5
   |
11 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/bop.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/bop.rs:13:5
   |
13 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/bop.rs:15:9
   |
15 |     let mut open: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/bop.rs:16:9
   |
16 |     let mut high: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/bop.rs:17:9
   |
17 |     let mut low: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/bop.rs:18:9
   |
18 |     let mut close: *const libc::c_double = *inputs.offset(3 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/bop.rs:19:9
   |
19 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/bop.rs:23:13
   |
23 |         let mut hl: libc::c_double = *high.offset(i as isize) - *low.offset(i as isize);
   |             ----^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cci.rs:24:5
   |
24 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cci.rs:31:5
   |
31 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cci.rs:32:5
   |
32 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cci.rs:33:5
   |
33 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cci.rs:34:5
   |
34 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cci.rs:36:9
   |
36 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cci.rs:37:9
   |
37 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cci.rs:38:9
   |
38 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/ceil.rs:7:5
  |
7 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ceil.rs:13:5
   |
13 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ceil.rs:14:5
   |
14 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ceil.rs:15:5
   |
15 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ceil.rs:16:5
   |
16 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ceil.rs:18:9
   |
18 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ceil.rs:19:9
   |
19 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cmo.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cmo.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cmo.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cmo.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cmo.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cmo.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/cos.rs:7:5
  |
7 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cos.rs:13:5
   |
13 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cos.rs:14:5
   |
14 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cos.rs:15:5
   |
15 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cos.rs:16:5
   |
16 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cos.rs:18:9
   |
18 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cos.rs:19:9
   |
19 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/cosh.rs:7:5
  |
7 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cosh.rs:13:5
   |
13 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cosh.rs:14:5
   |
14 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cosh.rs:15:5
   |
15 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cosh.rs:16:5
   |
16 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cosh.rs:18:9
   |
18 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cosh.rs:19:9
   |
19 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/crossany.rs:4:5
  |
4 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/crossany.rs:10:5
   |
10 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/crossany.rs:11:5
   |
11 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/crossany.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/crossany.rs:13:5
   |
13 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/crossany.rs:15:9
   |
15 |     let mut a: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/crossany.rs:16:9
   |
16 |     let mut b: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/crossover.rs:4:5
  |
4 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/crossover.rs:10:5
   |
10 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/crossover.rs:11:5
   |
11 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/crossover.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/crossover.rs:13:5
   |
13 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/crossover.rs:15:9
   |
15 |     let mut a: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/crossover.rs:16:9
   |
16 |     let mut b: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cvi.rs:23:5
   |
23 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cvi.rs:30:5
   |
30 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cvi.rs:31:5
   |
31 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cvi.rs:32:5
   |
32 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cvi.rs:33:5
   |
33 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cvi.rs:35:9
   |
35 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cvi.rs:36:9
   |
36 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/decay.rs:4:5
  |
4 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/decay.rs:10:5
   |
10 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/decay.rs:11:5
   |
11 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/decay.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/decay.rs:13:5
   |
13 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/decay.rs:15:9
   |
15 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/decay.rs:25:13
   |
25 |         let mut d: libc::c_double = *output.offset(-(1 as libc::c_int) as isize) - scale;
   |             ----^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dema.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dema.rs:19:5
   |
19 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dema.rs:20:5
   |
20 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dema.rs:21:5
   |
21 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dema.rs:22:5
   |
22 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dema.rs:24:9
   |
24 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/di.rs:12:38
   |
12 | pub unsafe extern "C" fn ti_di_start(mut options: *const libc::c_double) -> libc::c_int {
   |                                      ----^^^^^^^
   |                                      |
   |                                      help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/di.rs:17:5
   |
17 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/di.rs:18:5
   |
18 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/di.rs:19:5
   |
19 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/di.rs:20:5
   |
20 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/di.rs:22:9
   |
22 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/di.rs:23:9
   |
23 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/di.rs:24:9
   |
24 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/div.rs:4:5
  |
4 |     mut size: libc::c_int,
  |     ----^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/div.rs:5:5
  |
5 |     mut inputs: *const *const libc::c_double,
  |     ----^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/div.rs:6:5
  |
6 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/div.rs:7:5
  |
7 |     mut outputs: *const *mut libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/div.rs:9:9
  |
9 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
  |         ----^^^
  |         |
  |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/div.rs:10:9
   |
10 |     let mut in2: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/div.rs:11:9
   |
11 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/div.rs:23:5
   |
23 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dm.rs:11:38
   |
11 | pub unsafe extern "C" fn ti_dm_start(mut options: *const libc::c_double) -> libc::c_int {
   |                                      ----^^^^^^^
   |                                      |
   |                                      help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dm.rs:16:5
   |
16 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dm.rs:17:5
   |
17 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dm.rs:18:5
   |
18 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dm.rs:19:5
   |
19 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dm.rs:21:9
   |
21 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dm.rs:22:9
   |
22 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dpo.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dpo.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dpo.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dpo.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dpo.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dpo.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dx.rs:12:38
   |
12 | pub unsafe extern "C" fn ti_dx_start(mut options: *const libc::c_double) -> libc::c_int {
   |                                      ----^^^^^^^
   |                                      |
   |                                      help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dx.rs:17:5
   |
17 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dx.rs:18:5
   |
18 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dx.rs:19:5
   |
19 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dx.rs:20:5
   |
20 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dx.rs:22:9
   |
22 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dx.rs:23:9
   |
23 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dx.rs:58:9
   |
58 |     let mut di_up: libc::c_double = dmup;
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dx.rs:59:9
   |
59 |     let mut di_down: libc::c_double = dmdown;
   |         ----^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dx.rs:60:9
   |
60 |     let mut dm_diff: libc::c_double = fabs(di_up - di_down);
   |         ----^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dx.rs:61:9
   |
61 |     let mut dm_sum: libc::c_double = di_up + di_down;
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dx.rs:62:9
   |
62 |     let mut dx: libc::c_double = dm_diff / dm_sum * 100 as libc::c_int as libc::c_double;
   |         ----^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dx.rs:84:13
   |
84 |         let mut di_up_0: libc::c_double = dmup;
   |             ----^^^^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dx.rs:85:13
   |
85 |         let mut di_down_0: libc::c_double = dmdown;
   |             ----^^^^^^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dx.rs:86:13
   |
86 |         let mut dm_diff_0: libc::c_double = fabs(di_up_0 - di_down_0);
   |             ----^^^^^^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dx.rs:87:13
   |
87 |         let mut dm_sum_0: libc::c_double = di_up_0 + di_down_0;
   |             ----^^^^^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dx.rs:88:13
   |
88 |         let mut dx_0: libc::c_double = dm_diff_0 / dm_sum_0
   |             ----^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/edecay.rs:4:5
  |
4 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/edecay.rs:10:5
   |
10 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/edecay.rs:11:5
   |
11 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/edecay.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/edecay.rs:13:5
   |
13 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/edecay.rs:15:9
   |
15 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/edecay.rs:25:13
   |
25 |         let mut d: libc::c_double = *output.offset(-(1 as libc::c_int) as isize) * scale;
   |             ----^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ema.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ema.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ema.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ema.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ema.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ema.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/emv.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/emv.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/emv.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/emv.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/emv.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/emv.rs:23:9
   |
23 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/emv.rs:24:9
   |
24 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/emv.rs:25:9
   |
25 |     let mut volume: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/emv.rs:35:13
   |
35 |         let mut hl: libc::c_double = (*high.offset(i as isize) + *low.offset(i as isize))
   |             ----^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/emv.rs:37:13
   |
37 |         let mut br: libc::c_double = *volume.offset(i as isize) / 10000.0f64
   |             ----^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/exp.rs:7:5
  |
7 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/exp.rs:13:5
   |
13 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/exp.rs:14:5
   |
14 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/exp.rs:15:5
   |
15 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/exp.rs:16:5
   |
16 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/exp.rs:18:9
   |
18 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/exp.rs:19:9
   |
19 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/fisher.rs:13:5
   |
13 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/fisher.rs:19:5
   |
19 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/fisher.rs:20:5
   |
20 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/fisher.rs:21:5
   |
21 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/fisher.rs:22:5
   |
22 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/fisher.rs:24:9
   |
24 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/fisher.rs:25:9
   |
25 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/floor.rs:7:5
  |
7 |     mut size: libc::c_int,
  |     ----^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/floor.rs:8:5
  |
8 |     mut inputs: *const *const libc::c_double,
  |     ----^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/floor.rs:9:5
  |
9 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/floor.rs:10:5
   |
10 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/floor.rs:12:9
   |
12 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/floor.rs:13:9
   |
13 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/floor.rs:25:5
   |
25 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/fosc.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/fosc.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/fosc.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/fosc.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/fosc.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/fosc.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/hma.rs:24:5
   |
24 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/hma.rs:32:5
   |
32 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/hma.rs:33:5
   |
33 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/hma.rs:34:5
   |
34 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/hma.rs:35:5
   |
35 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/hma.rs:37:9
   |
37 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/kama.rs:14:5
   |
14 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/kama.rs:20:5
   |
20 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/kama.rs:21:5
   |
21 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/kama.rs:22:5
   |
22 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/kama.rs:23:5
   |
23 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/kama.rs:25:9
   |
25 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/kvo.rs:13:5
   |
13 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/kvo.rs:19:5
   |
19 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/kvo.rs:20:5
   |
20 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/kvo.rs:21:5
   |
21 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/kvo.rs:22:5
   |
22 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/kvo.rs:24:9
   |
24 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/kvo.rs:25:9
   |
25 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/kvo.rs:26:9
   |
26 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/kvo.rs:27:9
   |
27 |     let mut volume: *const libc::c_double = *inputs.offset(3 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/lag.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/lag.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/lag.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/lag.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/lag.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/lag.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/linreg.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/linreg.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/linreg.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/linreg.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/linreg.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/linreg.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/linregintercept.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/linregintercept.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/linregintercept.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/linregintercept.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/linregintercept.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/linregintercept.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/linregslope.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/linregslope.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/linregslope.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/linregslope.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/linregslope.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/linregslope.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/ln.rs:7:5
  |
7 |     mut size: libc::c_int,
  |     ----^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/ln.rs:8:5
  |
8 |     mut inputs: *const *const libc::c_double,
  |     ----^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/ln.rs:9:5
  |
9 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ln.rs:10:5
   |
10 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ln.rs:12:9
   |
12 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ln.rs:13:9
   |
13 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ln.rs:24:38
   |
24 | pub unsafe extern "C" fn ti_ln_start(mut options: *const libc::c_double) -> libc::c_int {
   |                                      ----^^^^^^^
   |                                      |
   |                                      help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/log10.rs:7:5
  |
7 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/log10.rs:13:5
   |
13 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/log10.rs:14:5
   |
14 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/log10.rs:15:5
   |
15 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/log10.rs:16:5
   |
16 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/log10.rs:18:9
   |
18 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/log10.rs:19:9
   |
19 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/macd.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/macd.rs:20:5
   |
20 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/macd.rs:21:5
   |
21 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/macd.rs:22:5
   |
22 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/macd.rs:23:5
   |
23 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/macd.rs:25:9
   |
25 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/macd.rs:54:9
   |
54 |     let mut signal_per: libc::c_double = 2 as libc::c_int as libc::c_double
   |         ----^^^^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/marketfi.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/marketfi.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/marketfi.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/marketfi.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/marketfi.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/marketfi.rs:23:9
   |
23 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/marketfi.rs:24:9
   |
24 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/marketfi.rs:25:9
   |
25 |     let mut volume: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mass.rs:23:5
   |
23 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mass.rs:25:9
   |
25 |     let mut sum_p: libc::c_int = *options.offset(0 as libc::c_int as isize)
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mass.rs:31:5
   |
31 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mass.rs:32:5
   |
32 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mass.rs:33:5
   |
33 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mass.rs:34:5
   |
34 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mass.rs:36:9
   |
36 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mass.rs:37:9
   |
37 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mass.rs:56:13
   |
56 |         let mut hl: libc::c_double = *high.offset(i as isize) - *low.offset(i as isize);
   |             ----^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/max.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/max.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/max.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/max.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/max.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/max.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/max.rs:88:5
   |
88 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/max.rs:89:5
   |
89 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/max.rs:90:5
   |
90 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/max.rs:91:5
   |
91 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/max.rs:93:9
   |
93 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/md.rs:12:38
   |
12 | pub unsafe extern "C" fn ti_md_start(mut options: *const libc::c_double) -> libc::c_int {
   |                                      ----^^^^^^^
   |                                      |
   |                                      help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/md.rs:17:5
   |
17 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/md.rs:18:5
   |
18 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/md.rs:19:5
   |
19 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/md.rs:20:5
   |
20 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/md.rs:22:9
   |
22 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/medprice.rs:4:5
  |
4 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/medprice.rs:10:5
   |
10 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/medprice.rs:11:5
   |
11 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/medprice.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/medprice.rs:13:5
   |
13 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/medprice.rs:15:9
   |
15 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/medprice.rs:16:9
   |
16 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/medprice.rs:17:9
   |
17 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mfi.rs:23:5
   |
23 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mfi.rs:29:5
   |
29 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mfi.rs:30:5
   |
30 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mfi.rs:31:5
   |
31 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mfi.rs:32:5
   |
32 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mfi.rs:34:9
   |
34 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mfi.rs:35:9
   |
35 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mfi.rs:36:9
   |
36 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mfi.rs:37:9
   |
37 |     let mut volume: *const libc::c_double = *inputs.offset(3 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/min.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/min.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/min.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/min.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/min.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/min.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/min.rs:88:5
   |
88 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/min.rs:89:5
   |
89 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/min.rs:90:5
   |
90 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/min.rs:91:5
   |
91 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/min.rs:93:9
   |
93 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mom.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mom.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mom.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mom.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mom.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mom.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/msw.rs:16:5
   |
16 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/msw.rs:22:5
   |
22 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/msw.rs:23:5
   |
23 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/msw.rs:24:5
   |
24 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/msw.rs:25:5
   |
25 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/msw.rs:27:9
   |
27 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/mul.rs:4:5
  |
4 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mul.rs:10:5
   |
10 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mul.rs:11:5
   |
11 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mul.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mul.rs:13:5
   |
13 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mul.rs:15:9
   |
15 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mul.rs:16:9
   |
16 |     let mut in2: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mul.rs:17:9
   |
17 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/natr.rs:13:5
   |
13 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/natr.rs:19:5
   |
19 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/natr.rs:20:5
   |
20 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/natr.rs:21:5
   |
21 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/natr.rs:22:5
   |
22 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/natr.rs:24:9
   |
24 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/natr.rs:25:9
   |
25 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/natr.rs:26:9
   |
26 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/nvi.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/nvi.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/nvi.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/nvi.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/nvi.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/nvi.rs:23:9
   |
23 |     let mut close: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/nvi.rs:24:9
   |
24 |     let mut volume: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/obv.rs:4:5
  |
4 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/obv.rs:10:5
   |
10 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/obv.rs:11:5
   |
11 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/obv.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/obv.rs:13:5
   |
13 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/obv.rs:15:9
   |
15 |     let mut close: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/obv.rs:16:9
   |
16 |     let mut volume: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ppo.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ppo.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ppo.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ppo.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ppo.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ppo.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ppo.rs:41:9
   |
41 |     let mut short_per: libc::c_double = 2 as libc::c_int as libc::c_double
   |         ----^^^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ppo.rs:43:9
   |
43 |     let mut long_per: libc::c_double = 2 as libc::c_int as libc::c_double
   |         ----^^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/psar.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/psar.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/psar.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/psar.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/psar.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/psar.rs:23:9
   |
23 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/psar.rs:24:9
   |
24 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/pvi.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/pvi.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/pvi.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/pvi.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/pvi.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/pvi.rs:23:9
   |
23 |     let mut close: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/pvi.rs:24:9
   |
24 |     let mut volume: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/qstick.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/qstick.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/qstick.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/qstick.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/qstick.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/qstick.rs:23:9
   |
23 |     let mut open: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/qstick.rs:24:9
   |
24 |     let mut close: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/roc.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/roc.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/roc.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/roc.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/roc.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/roc.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/rocr.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/rocr.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/rocr.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/rocr.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/rocr.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/rocr.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/round.rs:7:5
  |
7 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/round.rs:13:5
   |
13 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/round.rs:14:5
   |
14 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/round.rs:15:5
   |
15 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/round.rs:16:5
   |
16 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/round.rs:18:9
   |
18 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/round.rs:19:9
   |
19 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/rsi.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/rsi.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/rsi.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/rsi.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/rsi.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/rsi.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/sin.rs:7:5
  |
7 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sin.rs:13:5
   |
13 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sin.rs:14:5
   |
14 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sin.rs:15:5
   |
15 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sin.rs:16:5
   |
16 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sin.rs:18:9
   |
18 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sin.rs:19:9
   |
19 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/sinh.rs:7:5
  |
7 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sinh.rs:13:5
   |
13 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sinh.rs:14:5
   |
14 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sinh.rs:15:5
   |
15 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sinh.rs:16:5
   |
16 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sinh.rs:18:9
   |
18 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sinh.rs:19:9
   |
19 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sma.rs:26:5
   |
26 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sma.rs:32:5
   |
32 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sma.rs:33:5
   |
33 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sma.rs:34:5
   |
34 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sma.rs:35:5
   |
35 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sma.rs:37:9
   |
37 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sma.rs:89:5
   |
89 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sma.rs:90:5
   |
90 |     mut stream_in: *mut *mut ti_stream,
   |     ----^^^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sma.rs:93:9
   |
93 |     let mut period: libc::c_int = *options.offset(0 as libc::c_int as isize)
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/sma.rs:118:5
    |
118 |     mut stream_in: *mut ti_stream,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/sma.rs:119:5
    |
119 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/sma.rs:120:5
    |
120 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/sma.rs:121:5
    |
121 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/sma.rs:125:9
    |
125 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/sma.rs:126:9
    |
126 |     let mut period: libc::c_int = (*stream).period;
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/sma.rs:128:9
    |
128 |     let mut per: libc::c_double = (*stream).per;
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/sma.rs:131:9
    |
131 |     let mut buffer: *mut libc::c_double = ((*stream).buffer).as_mut_ptr();
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/sma.rs:175:45
    |
175 | pub unsafe extern "C" fn ti_sma_stream_free(mut stream: *mut ti_stream) {
    |                                             ----^^^^^^
    |                                             |
    |                                             help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/sqrt.rs:7:5
  |
7 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sqrt.rs:13:5
   |
13 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sqrt.rs:14:5
   |
14 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sqrt.rs:15:5
   |
15 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sqrt.rs:16:5
   |
16 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sqrt.rs:18:9
   |
18 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sqrt.rs:19:9
   |
19 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stddev.rs:13:5
   |
13 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stddev.rs:19:5
   |
19 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stddev.rs:20:5
   |
20 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stddev.rs:21:5
   |
21 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stddev.rs:22:5
   |
22 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stddev.rs:24:9
   |
24 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stderr.rs:13:5
   |
13 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stderr.rs:19:5
   |
19 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stderr.rs:20:5
   |
20 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stderr.rs:21:5
   |
21 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stderr.rs:22:5
   |
22 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stderr.rs:24:9
   |
24 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stoch.rs:23:5
   |
23 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stoch.rs:32:5
   |
32 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stoch.rs:33:5
   |
33 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stoch.rs:34:5
   |
34 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stoch.rs:35:5
   |
35 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stoch.rs:37:9
   |
37 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stoch.rs:38:9
   |
38 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stoch.rs:39:9
   |
39 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stochrsi.rs:23:5
   |
23 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stochrsi.rs:30:5
   |
30 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stochrsi.rs:31:5
   |
31 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stochrsi.rs:32:5
   |
32 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stochrsi.rs:33:5
   |
33 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stochrsi.rs:35:9
   |
35 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/sub.rs:4:5
  |
4 |     mut size: libc::c_int,
  |     ----^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/sub.rs:5:5
  |
5 |     mut inputs: *const *const libc::c_double,
  |     ----^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/sub.rs:6:5
  |
6 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/sub.rs:7:5
  |
7 |     mut outputs: *const *mut libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/sub.rs:9:9
  |
9 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
  |         ----^^^
  |         |
  |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sub.rs:10:9
   |
10 |     let mut in2: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sub.rs:11:9
   |
11 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sub.rs:23:5
   |
23 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sum.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sum.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sum.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sum.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sum.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sum.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/tan.rs:7:5
  |
7 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tan.rs:13:5
   |
13 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tan.rs:14:5
   |
14 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tan.rs:15:5
   |
15 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tan.rs:16:5
   |
16 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tan.rs:18:9
   |
18 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tan.rs:19:9
   |
19 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/tanh.rs:7:5
  |
7 |     mut size: libc::c_int,
  |     ----^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/tanh.rs:8:5
  |
8 |     mut inputs: *const *const libc::c_double,
  |     ----^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/tanh.rs:9:5
  |
9 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tanh.rs:10:5
   |
10 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tanh.rs:12:9
   |
12 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tanh.rs:13:9
   |
13 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tanh.rs:25:5
   |
25 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tema.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tema.rs:19:5
   |
19 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tema.rs:20:5
   |
20 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tema.rs:21:5
   |
21 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tema.rs:22:5
   |
22 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tema.rs:24:9
   |
24 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/todeg.rs:4:5
  |
4 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/todeg.rs:10:5
   |
10 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/todeg.rs:11:5
   |
11 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/todeg.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/todeg.rs:13:5
   |
13 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/todeg.rs:15:9
   |
15 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/todeg.rs:16:9
   |
16 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/torad.rs:4:5
  |
4 |     mut size: libc::c_int,
  |     ----^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/torad.rs:5:5
  |
5 |     mut inputs: *const *const libc::c_double,
  |     ----^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/torad.rs:6:5
  |
6 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/torad.rs:7:5
  |
7 |     mut outputs: *const *mut libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/torad.rs:9:9
  |
9 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
  |         ----^^^
  |         |
  |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/torad.rs:10:9
   |
10 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/torad.rs:25:5
   |
25 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/tr.rs:6:38
  |
6 | pub unsafe extern "C" fn ti_tr_start(mut options: *const libc::c_double) -> libc::c_int {
  |                                      ----^^^^^^^
  |                                      |
  |                                      help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tr.rs:11:5
   |
11 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tr.rs:12:5
   |
12 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tr.rs:13:5
   |
13 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tr.rs:14:5
   |
14 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tr.rs:16:9
   |
16 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tr.rs:17:9
   |
17 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tr.rs:18:9
   |
18 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tr.rs:19:9
   |
19 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/trima.rs:18:5
   |
18 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/trima.rs:24:5
   |
24 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/trima.rs:25:5
   |
25 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/trima.rs:26:5
   |
26 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/trima.rs:27:5
   |
27 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/trima.rs:29:9
   |
29 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/trima.rs:41:9
   |
41 |     let mut weights: libc::c_double = 1 as libc::c_int as libc::c_double
   |         ----^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/trix.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/trix.rs:19:5
   |
19 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/trix.rs:20:5
   |
20 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/trix.rs:21:5
   |
21 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/trix.rs:22:5
   |
22 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/trix.rs:24:9
   |
24 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/trunc.rs:4:5
  |
4 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/trunc.rs:10:5
   |
10 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/trunc.rs:11:5
   |
11 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/trunc.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/trunc.rs:13:5
   |
13 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/trunc.rs:15:9
   |
15 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/trunc.rs:16:9
   |
16 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tsf.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tsf.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tsf.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tsf.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tsf.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tsf.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/typprice.rs:4:5
  |
4 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/typprice.rs:10:5
   |
10 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/typprice.rs:11:5
   |
11 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/typprice.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/typprice.rs:13:5
   |
13 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/typprice.rs:15:9
   |
15 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/typprice.rs:16:9
   |
16 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/typprice.rs:17:9
   |
17 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/typprice.rs:18:9
   |
18 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ultosc.rs:23:5
   |
23 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ultosc.rs:29:5
   |
29 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ultosc.rs:30:5
   |
30 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ultosc.rs:31:5
   |
31 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ultosc.rs:32:5
   |
32 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ultosc.rs:34:9
   |
34 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ultosc.rs:35:9
   |
35 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ultosc.rs:36:9
   |
36 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/var.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/var.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/var.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/var.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/var.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/var.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vhf.rs:13:5
   |
13 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vhf.rs:19:5
   |
19 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vhf.rs:20:5
   |
20 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vhf.rs:21:5
   |
21 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vhf.rs:22:5
   |
22 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vhf.rs:24:9
   |
24 |     let mut in_0: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vidya.rs:13:5
   |
13 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vidya.rs:19:5
   |
19 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vidya.rs:20:5
   |
20 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vidya.rs:21:5
   |
21 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vidya.rs:22:5
   |
22 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vidya.rs:24:9
   |
24 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vidya.rs:70:13
   |
70 |         let mut short_stddev: libc::c_double = sqrt(
   |             ----^^^^^^^^^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vidya.rs:73:13
   |
73 |         let mut long_stddev: libc::c_double = sqrt(
   |             ----^^^^^^^^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/vidya.rs:100:13
    |
100 |         let mut short_stddev_0: libc::c_double = sqrt(
    |             ----^^^^^^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/vidya.rs:103:13
    |
103 |         let mut long_stddev_0: libc::c_double = sqrt(
    |             ----^^^^^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/volatility.rs:13:5
   |
13 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/volatility.rs:19:5
   |
19 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/volatility.rs:20:5
   |
20 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/volatility.rs:21:5
   |
21 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/volatility.rs:22:5
   |
22 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/volatility.rs:24:9
   |
24 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vosc.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vosc.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vosc.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vosc.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vosc.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vosc.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vwma.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vwma.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vwma.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vwma.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vwma.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vwma.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vwma.rs:24:9
   |
24 |     let mut volume: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wad.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wad.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wad.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wad.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wad.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wad.rs:23:9
   |
23 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wad.rs:24:9
   |
24 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wad.rs:25:9
   |
25 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/wcprice.rs:4:5
  |
4 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wcprice.rs:10:5
   |
10 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wcprice.rs:11:5
   |
11 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wcprice.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wcprice.rs:13:5
   |
13 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wcprice.rs:15:9
   |
15 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wcprice.rs:16:9
   |
16 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wcprice.rs:17:9
   |
17 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wcprice.rs:18:9
   |
18 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wilders.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wilders.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wilders.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wilders.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wilders.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wilders.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/willr.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/willr.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/willr.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/willr.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/willr.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/willr.rs:23:9
   |
23 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/willr.rs:24:9
   |
24 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/willr.rs:25:9
   |
25 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wma.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wma.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wma.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wma.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wma.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wma.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/zlema.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/zlema.rs:19:5
   |
19 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/zlema.rs:20:5
   |
20 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/zlema.rs:21:5
   |
21 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/zlema.rs:22:5
   |
22 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/zlema.rs:24:9
   |
24 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/zlema.rs:43:13
   |
43 |         let mut c: libc::c_double = *input.offset(i as isize);
   |             ----^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/zlema.rs:44:13
   |
44 |         let mut l: libc::c_double = *input.offset((i - lag) as isize);
   |             ----^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/templates/candles.rs:75:13
   |
75 |         let mut init = tc_config {
   |             ----^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/templates/candles.rs:97:5
   |
97 |     mut name: *const libc::c_char,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:118:38
    |
118 | pub unsafe extern "C" fn tc_get_info(mut pattern: tc_set) -> *const tc_candle_info {
    |                                      ----^^^^^^^
    |                                      |
    |                                      help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:122:9
    |
122 |     let mut k: tc_set = pattern & !pattern.wrapping_sub(1 as libc::c_int as tc_set);
    |         ----^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:141:51
    |
141 | pub unsafe extern "C" fn tc_config_set_to_default(mut config: *mut tc_config) {
    |                                                   ----^^^^^^
    |                                                   |
    |                                                   help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:150:9
    |
150 |     let mut k: *mut tc_result = malloc(
    |         ----^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:169:41
    |
169 | pub unsafe extern "C" fn tc_result_free(mut result: *mut tc_result) {
    |                                         ----^^^^^^
    |                                         |
    |                                         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:177:42
    |
177 | pub unsafe extern "C" fn tc_result_count(mut result: *const tc_result) -> libc::c_int {
    |                                          ----^^^^^^
    |                                          |
    |                                          help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:182:5
    |
182 |     mut result: *const tc_result,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:188:5
    |
188 |     mut result: *const tc_result,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:189:5
    |
189 |     mut index: libc::c_int,
    |     ----^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:194:9
    |
194 |     let mut hit: tc_hit = {
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:195:13
    |
195 |         let mut init = tc_hit {
    |             ----^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:205:5
    |
205 |     mut result: *const tc_result,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:206:5
    |
206 |     mut index: libc::c_int,
    |     ----^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:283:5
    |
283 |     mut patterns: tc_set,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:284:5
    |
284 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:285:5
    |
285 |     mut inputs: *const *const TC_REAL,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:286:5
    |
286 |     mut options: *const tc_config,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:287:5
    |
287 |     mut output: *mut tc_result,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:292:9
    |
292 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:293:9
    |
293 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:294:9
    |
294 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:295:9
    |
295 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/templates/indicators.rs:60:5
   |
60 |     mut stream: *mut ti_stream,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/templates/indicators.rs:61:5
   |
61 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/templates/indicators.rs:62:5
   |
62 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/templates/indicators.rs:63:5
   |
63 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/templates/indicators.rs:70:5
   |
70 |     mut stream: *mut ti_stream,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/templates/indicators.rs:76:5
   |
76 |     mut stream: *mut ti_stream,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/templates/indicators.rs:81:41
   |
81 | pub unsafe extern "C" fn ti_stream_free(mut stream: *mut ti_stream) {
   |                                         ----^^^^^^
   |                                         |
   |                                         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/templates/indicators.rs:87:5
   |
87 |     mut name: *const libc::c_char,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/utils/buffer.rs:16:40
   |
16 | pub unsafe extern "C" fn ti_buffer_new(mut size: libc::c_int) -> *mut ti_buffer {
   |                                        ----^^^^
   |                                        |
   |                                        help: remove this `mut`

warning: variable does not need to be mutable
  --> src/utils/buffer.rs:30:41
   |
30 | pub unsafe extern "C" fn ti_buffer_free(mut buffer: *mut ti_buffer) {
   |                                         ----^^^^^^
   |                                         |
   |                                         help: remove this `mut`

warning: unnecessary `unsafe` block
   --> src/candles.rs:100:51
    |
100 | pub static mut tc_candles: [tc_candle_info; 27] = unsafe {
    |                                                   ^^^^^^ unnecessary `unsafe` block
    |
    = note: `#[warn(unused_unsafe)]` on by default

warning: unnecessary `unsafe` block
   --> src/indicators_rs.rs:834:58
    |
834 | pub static mut ti_indicators: [ti_indicator_info; 105] = unsafe {
    |                                                          ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
    --> src/tiamalgamation.rs:7588:58
     |
7588 | pub static mut ti_indicators: [ti_indicator_info; 105] = unsafe {
     |                                                          ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
     --> src/tiamalgamation.rs:16369:51
      |
16369 | pub static mut tc_candles: [tc_candle_info; 27] = unsafe {
      |                                                   ^^^^^^ unnecessary `unsafe` block

warning: function `memcpy` is never used
 --> src/beta/copp.rs:4:8
  |
4 |     fn memcpy(
  |        ^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: function `calloc` is never used
 --> src/beta/dc.rs:4:8
  |
4 |     fn calloc(_: libc::c_ulong, _: libc::c_ulong) -> *mut libc::c_void;
  |        ^^^^^^

warning: function `realloc` is never used
 --> src/beta/dc.rs:5:8
  |
5 |     fn realloc(_: *mut libc::c_void, _: libc::c_ulong) -> *mut libc::c_void;
  |        ^^^^^^^

warning: function `malloc` is never used
 --> src/beta/fi.rs:4:8
  |
4 |     fn malloc(_: libc::c_ulong) -> *mut libc::c_void;
  |        ^^^^^^

warning: function `memcpy` is never used
 --> src/beta/mama.rs:5:8
  |
5 |     fn memcpy(
  |        ^^^^^^

warning: function `calloc` is never used
 --> src/beta/pbands.rs:5:8
  |
5 |     fn calloc(_: libc::c_ulong, _: libc::c_ulong) -> *mut libc::c_void;
  |        ^^^^^^

warning: function `realloc` is never used
 --> src/beta/pbands.rs:6:8
  |
6 |     fn realloc(_: *mut libc::c_void, _: libc::c_ulong) -> *mut libc::c_void;
  |        ^^^^^^^

warning: function `calloc` is never used
 --> src/beta/pc.rs:4:8
  |
4 |     fn calloc(_: libc::c_ulong, _: libc::c_ulong) -> *mut libc::c_void;
  |        ^^^^^^

warning: function `realloc` is never used
 --> src/beta/pc.rs:5:8
  |
5 |     fn realloc(_: *mut libc::c_void, _: libc::c_ulong) -> *mut libc::c_void;
  |        ^^^^^^^

warning: function `malloc` is never used
  --> src/beta/pfe.rs:14:8
   |
14 |     fn malloc(_: libc::c_ulong) -> *mut libc::c_void;
   |        ^^^^^^

warning: function `calloc` is never used
 --> src/beta/posc.rs:5:8
  |
5 |     fn calloc(_: libc::c_ulong, _: libc::c_ulong) -> *mut libc::c_void;
  |        ^^^^^^

warning: function `realloc` is never used
 --> src/beta/posc.rs:6:8
  |
6 |     fn realloc(_: *mut libc::c_void, _: libc::c_ulong) -> *mut libc::c_void;
  |        ^^^^^^^

warning: function `calloc` is never used
 --> src/beta/rmi.rs:5:8
  |
5 |     fn calloc(_: libc::c_ulong, _: libc::c_ulong) -> *mut libc::c_void;
  |        ^^^^^^

warning: function `realloc` is never used
 --> src/beta/rmi.rs:6:8
  |
6 |     fn realloc(_: *mut libc::c_void, _: libc::c_ulong) -> *mut libc::c_void;
  |        ^^^^^^^

warning: function `calloc` is never used
 --> src/beta/rvi.rs:4:8
  |
4 |     fn calloc(_: libc::c_ulong, _: libc::c_ulong) -> *mut libc::c_void;
  |        ^^^^^^

warning: function `realloc` is never used
 --> src/beta/rvi.rs:5:8
  |
5 |     fn realloc(_: *mut libc::c_void, _: libc::c_ulong) -> *mut libc::c_void;
  |        ^^^^^^^

warning: function `calloc` is never used
 --> src/beta/smi.rs:5:8
  |
5 |     fn calloc(_: libc::c_ulong, _: libc::c_ulong) -> *mut libc::c_void;
  |        ^^^^^^

warning: function `realloc` is never used
 --> src/beta/smi.rs:6:8
  |
6 |     fn realloc(_: *mut libc::c_void, _: libc::c_ulong) -> *mut libc::c_void;
  |        ^^^^^^^

warning: function `calloc` is never used
 --> src/beta/vwap.rs:5:8
  |
5 |     fn calloc(_: libc::c_ulong, _: libc::c_ulong) -> *mut libc::c_void;
  |        ^^^^^^

warning: function `realloc` is never used
 --> src/beta/vwap.rs:6:8
  |
6 |     fn realloc(_: *mut libc::c_void, _: libc::c_ulong) -> *mut libc::c_void;
  |        ^^^^^^^

warning: unneeded `return` statement
   --> src/benchmark.rs:188:5
    |
188 | /     return strtol(
189 | |         __nptr,
190 | |         0 as *mut libc::c_void as *mut *mut libc::c_char,
191 | |         10 as libc::c_int,
192 | |     ) as libc::c_int;
    | |_____________________^
    |
    = note: `#[warn(clippy::needless_return)]` on by default
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
188 ~     strtol(
189 +         __nptr,
190 +         0 as *mut libc::c_void as *mut *mut libc::c_char,
191 +         10 as libc::c_int,
192 +     ) as libc::c_int
    |

warning: `0 as *mut _` detected
   --> src/benchmark.rs:190:9
    |
190 |         0 as *mut libc::c_void as *mut *mut libc::c_char,
    |         ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_void>()`
    |
    = note: `#[warn(clippy::zero_ptr)]` on by default
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/benchmark.rs:213:1
    |
213 | / pub unsafe extern "C" fn generate_inputs() {
214 | |     let mut open: *mut libc::c_double = (in_0[0 as libc::c_int as usize]).as_mut_ptr();
215 | |     let mut high: *mut libc::c_double = (in_0[1 as libc::c_int as usize]).as_mut_ptr();
216 | |     let mut low: *mut libc::c_double = (in_0[2 as libc::c_int as usize]).as_mut_ptr();
...   |
383 | |     *volume.offset(0 as libc::c_int as isize) = 0 as libc::c_int as libc::c_double;
384 | | }
    | |_^
    |
    = note: `#[warn(clippy::missing_safety_doc)]` on by default
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: statement with no effect
   --> src/benchmark.rs:381:9
    |
381 |         i;
    |         ^^
    |
    = note: `#[warn(clippy::no_effect)]` on by default
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/benchmark.rs:386:1
    |
386 | / pub unsafe extern "C" fn ti_setup(
387 | |     mut info: *const ti_indicator_info,
388 | |     mut inputs: *mut *mut libc::c_double,
389 | | ) {
...   |
436 | |     }
437 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
   --> src/benchmark.rs:418:17
    |
418 |             let ref mut fresh0 = *inputs.offset(j as isize);
    |             ----^^^^^^^^^^^^^^------------------------------ help: try: `let fresh0 = &mut (*inputs.offset(j as isize));`
    |
    = note: `#[warn(clippy::toplevel_ref_arg)]` on by default
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#toplevel_ref_arg

warning: statement with no effect
   --> src/benchmark.rs:435:9
    |
435 |         j;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/benchmark.rs:441:1
    |
441 | / pub unsafe extern "C" fn run_ti(
442 | |     mut info: *const ti_indicator_info,
443 | |     mut options: *mut libc::c_double,
444 | |     mut goal: libc::c_int,
...   |
496 | |     return 0 as libc::c_int;
497 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this boolean expression can be simplified
   --> src/benchmark.rs:482:15
    |
482 |     } else if !(goal == 2 as libc::c_int) {
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `goal != 2 as libc::c_int`
    |
    = note: `#[warn(clippy::nonminimal_bool)]` on by default
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
   --> src/benchmark.rs:496:5
    |
496 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/benchmark.rs:476:17
    |
476 |                 i;
    |                 ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/benchmark.rs:501:1
    |
501 | / pub unsafe extern "C" fn run_ti_ref(
502 | |     mut info: *const ti_indicator_info,
503 | |     mut options: *mut libc::c_double,
504 | |     mut goal: libc::c_int,
...   |
556 | |     return 0 as libc::c_int;
557 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this boolean expression can be simplified
   --> src/benchmark.rs:542:15
    |
542 |     } else if !(goal == 2 as libc::c_int) {
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `goal != 2 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
   --> src/benchmark.rs:556:5
    |
556 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/benchmark.rs:536:17
    |
536 |                 i;
    |                 ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/benchmark.rs:561:1
    |
561 | / pub unsafe extern "C" fn run_ti_stream1(
562 | |     mut info: *const ti_indicator_info,
563 | |     mut options: *mut libc::c_double,
564 | |     mut goal: libc::c_int,
...   |
691 | |     return 0 as libc::c_int;
692 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this boolean expression can be simplified
   --> src/benchmark.rs:677:15
    |
677 |     } else if !(goal == 2 as libc::c_int) {
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `goal != 2 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
   --> src/benchmark.rs:691:5
    |
691 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
   --> src/benchmark.rs:576:13
    |
576 |             0 as *mut libc::c_double,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/benchmark.rs:577:13
    |
577 |             0 as *mut libc::c_double,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/benchmark.rs:578:13
    |
578 |             0 as *mut libc::c_double,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/benchmark.rs:579:13
    |
579 |             0 as *mut libc::c_double,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/benchmark.rs:580:13
    |
580 |             0 as *mut libc::c_double,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/benchmark.rs:583:13
    |
583 |             0 as *mut libc::c_double,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/benchmark.rs:584:13
    |
584 |             0 as *mut libc::c_double,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/benchmark.rs:585:13
    |
585 |             0 as *mut libc::c_double,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/benchmark.rs:586:13
    |
586 |             0 as *mut libc::c_double,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/benchmark.rs:587:13
    |
587 |             0 as *mut libc::c_double,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/benchmark.rs:589:42
    |
589 |         let mut stream: *mut ti_stream = 0 as *mut ti_stream;
    |                                          ^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<ti_stream>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: statement with no effect
   --> src/benchmark.rs:627:17
    |
627 |                 j;
    |                 ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/benchmark.rs:645:17
    |
645 |                 j_0;
    |                 ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/benchmark.rs:667:21
    |
667 |                     j_1;
    |                     ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/benchmark.rs:672:13
    |
672 |             i;
    |             ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/benchmark.rs:696:1
    |
696 | / pub unsafe extern "C" fn run_ti_streamall(
697 | |     mut info: *const ti_indicator_info,
698 | |     mut options: *mut libc::c_double,
699 | |     mut goal: libc::c_int,
...   |
779 | |     return 0 as libc::c_int;
780 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this boolean expression can be simplified
   --> src/benchmark.rs:765:15
    |
765 |     } else if !(goal == 2 as libc::c_int) {
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `goal != 2 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
   --> src/benchmark.rs:779:5
    |
779 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
   --> src/benchmark.rs:710:42
    |
710 |         let mut stream: *mut ti_stream = 0 as *mut ti_stream;
    |                                          ^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<ti_stream>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: statement with no effect
   --> src/benchmark.rs:759:17
    |
759 |                 i;
    |                 ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/benchmark.rs:782:1
    |
782 | / pub unsafe extern "C" fn simple_option_setter(
783 | |     mut period: libc::c_double,
784 | |     mut options: *mut libc::c_double,
785 | |     mut ti: libc::c_int,
786 | | ) {
787 | |     *options.offset(0 as libc::c_int as isize) = period;
788 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/benchmark.rs:790:1
    |
790 | / pub unsafe extern "C" fn fast_slow_option_setter(
791 | |     mut period: libc::c_double,
792 | |     mut options: *mut libc::c_double,
793 | |     mut ti: libc::c_int,
...   |
799 | |         ) = period + 10 as libc::c_int as libc::c_double;
800 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/benchmark.rs:802:1
    |
802 | / pub unsafe extern "C" fn alma_option_setter(
803 | |     mut period: libc::c_double,
804 | |     mut options: *mut libc::c_double,
805 | |     mut ti: libc::c_int,
...   |
809 | |     *options.offset(2 as libc::c_int as isize) = 1 as libc::c_int as libc::c_double;
810 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/benchmark.rs:812:1
    |
812 | / pub unsafe extern "C" fn bbands_option_setter(
813 | |     mut period: libc::c_double,
814 | |     mut options: *mut libc::c_double,
815 | |     mut ti: libc::c_int,
...   |
818 | |     *options.offset(1 as libc::c_int as isize) = 1.0f64;
819 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/benchmark.rs:821:1
    |
821 | / pub unsafe extern "C" fn ce_option_setter(
822 | |     mut period: libc::c_double,
823 | |     mut options: *mut libc::c_double,
824 | |     mut ti: libc::c_int,
...   |
827 | |     *options.offset(1 as libc::c_int as isize) = 3 as libc::c_int as libc::c_double;
828 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/benchmark.rs:830:1
    |
830 | / pub unsafe extern "C" fn copp_option_setter(
831 | |     mut period: libc::c_double,
832 | |     mut options: *mut libc::c_double,
833 | |     mut ti: libc::c_int,
...   |
837 | |     *options.offset(2 as libc::c_int as isize) = period;
838 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/benchmark.rs:840:1
    |
840 | / pub unsafe extern "C" fn kc_option_setter(
841 | |     mut period: libc::c_double,
842 | |     mut options: *mut libc::c_double,
843 | |     mut ti: libc::c_int,
...   |
846 | |     *options.offset(1 as libc::c_int as isize) = 0.77f64;
847 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/benchmark.rs:849:1
    |
849 | / pub unsafe extern "C" fn kst_option_setter(
850 | |     mut period: libc::c_double,
851 | |     mut options: *mut libc::c_double,
852 | |     mut ti: libc::c_int,
...   |
861 | |     }
862 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
   --> src/benchmark.rs:856:13
    |
856 |         let ref mut fresh6 = *options.offset(i as isize);
    |         ----^^^^^^^^^^^^^^------------------------------- help: try: `let fresh6 = &mut (*options.offset(i as isize));`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#toplevel_ref_arg

warning: statement with no effect
   --> src/benchmark.rs:860:9
    |
860 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/benchmark.rs:864:1
    |
864 | / pub unsafe extern "C" fn macd_option_setter(
865 | |     mut period: libc::c_double,
866 | |     mut options: *mut libc::c_double,
867 | |     mut ti: libc::c_int,
...   |
875 | |         .offset(2 as libc::c_int as isize) = period + 1 as libc::c_int as libc::c_double;
876 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/benchmark.rs:878:1
    |
878 | / pub unsafe extern "C" fn mama_option_setter(
879 | |     mut period: libc::c_double,
880 | |     mut options: *mut libc::c_double,
881 | |     mut ti: libc::c_int,
...   |
884 | |     *options.offset(1 as libc::c_int as isize) = 0.05f64;
885 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/benchmark.rs:887:1
    |
887 | / pub unsafe extern "C" fn pfe_option_setter(
888 | |     mut period: libc::c_double,
889 | |     mut options: *mut libc::c_double,
890 | |     mut ti: libc::c_int,
...   |
893 | |     *options.offset(1 as libc::c_int as isize) = 5 as libc::c_int as libc::c_double;
894 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/benchmark.rs:896:1
    |
896 | / pub unsafe extern "C" fn posc_option_setter(
897 | |     mut period: libc::c_double,
898 | |     mut options: *mut libc::c_double,
899 | |     mut ti: libc::c_int,
...   |
902 | |     *options.offset(1 as libc::c_int as isize) = 3 as libc::c_int as libc::c_double;
903 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/benchmark.rs:905:1
    |
905 | / pub unsafe extern "C" fn ppo_option_setter(
906 | |     mut period: libc::c_double,
907 | |     mut options: *mut libc::c_double,
908 | |     mut ti: libc::c_int,
...   |
914 | |         ) = period + 10 as libc::c_int as libc::c_double;
915 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/benchmark.rs:917:1
    |
917 | / pub unsafe extern "C" fn psar_option_setter(
918 | |     mut period: libc::c_double,
919 | |     mut options: *mut libc::c_double,
920 | |     mut ti: libc::c_int,
...   |
928 | |         * 10 as libc::c_int as libc::c_double;
929 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/benchmark.rs:931:1
    |
931 | / pub unsafe extern "C" fn rmi_option_setter(
932 | |     mut period: libc::c_double,
933 | |     mut options: *mut libc::c_double,
934 | |     mut ti: libc::c_int,
...   |
937 | |     *options.offset(1 as libc::c_int as isize) = 3 as libc::c_int as libc::c_double;
938 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/benchmark.rs:940:1
    |
940 | / pub unsafe extern "C" fn rmta_option_setter(
941 | |     mut period: libc::c_double,
942 | |     mut options: *mut libc::c_double,
943 | |     mut ti: libc::c_int,
...   |
950 | |         - 2.0f64 / (period + 1 as libc::c_int as libc::c_double);
951 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/benchmark.rs:953:1
    |
953 | / pub unsafe extern "C" fn rvi_option_setter(
954 | |     mut period: libc::c_double,
955 | |     mut options: *mut libc::c_double,
956 | |     mut ti: libc::c_int,
...   |
959 | |     *options.offset(1 as libc::c_int as isize) = 10 as libc::c_int as libc::c_double;
960 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/benchmark.rs:962:1
    |
962 | / pub unsafe extern "C" fn smi_option_setter(
963 | |     mut period: libc::c_double,
964 | |     mut options: *mut libc::c_double,
965 | |     mut ti: libc::c_int,
...   |
969 | |     *options.offset(2 as libc::c_int as isize) = 3 as libc::c_int as libc::c_double;
970 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/benchmark.rs:972:1
    |
972 | / pub unsafe extern "C" fn stoch_option_setter(
973 | |     mut period: libc::c_double,
974 | |     mut options: *mut libc::c_double,
975 | |     mut ti: libc::c_int,
...   |
981 | |     }
982 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/benchmark.rs:984:1
    |
984 | / pub unsafe extern "C" fn stochrsi_option_setter(
985 | |     mut period: libc::c_double,
986 | |     mut options: *mut libc::c_double,
987 | |     mut ti: libc::c_int,
...   |
992 | |     *options.offset(3 as libc::c_int as isize) = 1 as libc::c_int as libc::c_double;
993 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
    --> src/benchmark.rs:995:1
     |
995  | / pub unsafe extern "C" fn tsi_option_setter(
996  | |     mut period: libc::c_double,
997  | |     mut options: *mut libc::c_double,
998  | |     mut ti: libc::c_int,
...    |
1001 | |     *options.offset(1 as libc::c_int as isize) = 3 as libc::c_int as libc::c_double;
1002 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
    --> src/benchmark.rs:1004:1
     |
1004 | / pub unsafe extern "C" fn ultosc_option_setter(
1005 | |     mut period: libc::c_double,
1006 | |     mut options: *mut libc::c_double,
1007 | |     mut ti: libc::c_int,
...    |
1013 | |         .offset(2 as libc::c_int as isize) = period * 4 as libc::c_int as libc::c_double;
1014 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
    --> src/benchmark.rs:1016:1
     |
1016 | / pub unsafe extern "C" fn vidya_option_setter(
1017 | |     mut period: libc::c_double,
1018 | |     mut options: *mut libc::c_double,
1019 | |     mut ti: libc::c_int,
...    |
1026 | |     *options.offset(2 as libc::c_int as isize) = 0.2f64;
1027 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
    --> src/benchmark.rs:1029:1
     |
1029 | / pub unsafe extern "C" fn stochrsi_output_adjust(
1030 | |     mut a: libc::c_double,
1031 | | ) -> libc::c_double {
1032 | |     return a * 0.01f64;
1033 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/benchmark.rs:1032:5
     |
1032 |     return a * 0.01f64;
     |     ^^^^^^^^^^^^^^^^^^^ help: remove `return`: `a * 0.01f64`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/benchmark.rs:1035:1
     |
1035 | / pub unsafe extern "C" fn check_outputs(
1036 | |     mut info: *const ti_indicator_info,
1037 | |     mut what: *const libc::c_char,
1038 | |     mut compare: *mut [libc::c_double; 4000],
...    |
1102 | |     }
1103 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this boolean expression can be simplified
    --> src/benchmark.rs:1063:12
     |
1063 |         if !(remap[j as usize] == -(1 as libc::c_int)) {
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `remap[j as usize] != -(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: statement with no effect
    --> src/benchmark.rs:1077:21
     |
1077 |                     fails;
     |                     ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/benchmark.rs:1096:21
     |
1096 |                     i;
     |                     ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/benchmark.rs:1101:9
     |
1101 |         j;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/benchmark.rs:1105:1
     |
1105 | / pub unsafe extern "C" fn bench_run(
1106 | |     mut log: *mut FILE,
1107 | |     mut info: *const ti_indicator_info,
1108 | |     mut run_info: *const libc::c_void,
...    |
1498 | |     }
1499 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: called `expect` on `options_setter` after checking its variant with `is_some`
    --> src/benchmark.rs:1430:21
     |
1429 |                   if options_setter.is_some() {
     |                   --------------------------- help: try: `if let Some(..) = options_setter`
1430 | /                     options_setter
1431 | |                         .expect(
1432 | |                             "non-null function pointer",
1433 | |                         )(
     | |_________________________^
     |
     = note: `#[warn(clippy::unnecessary_unwrap)]` on by default
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_unwrap

warning: `0 as *mut _` detected
    --> src/benchmark.rs:1422:13
     |
1422 |             0 as *mut libc::c_double,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: statement with no effect
    --> src/benchmark.rs:1453:17
     |
1453 |                 iterations;
     |                 ^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/benchmark.rs:1455:17
     |
1455 |                 period;
     |                 ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/benchmark.rs:1458:13
     |
1458 |             i;
     |             ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `0 as *mut _` detected
    --> src/benchmark.rs:1465:13
     |
1465 |             0 as *mut libc::c_double,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: statement with no effect
    --> src/benchmark.rs:1487:9
     |
1487 |         best;
     |         ^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/benchmark.rs:1501:1
     |
1501 | / pub unsafe extern "C" fn bench_indicator(
1502 | |     mut log: *mut FILE,
1503 | |     mut info: *const ti_indicator_info,
1504 | | ) {
...    |
1625 | |     printf(b"\n\0" as *const u8 as *const libc::c_char);
1626 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: statement with no effect
    --> src/benchmark.rs:1529:9
     |
1529 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/benchmark.rs:1628:1
     |
1628 | / pub unsafe extern "C" fn bench_run_candle(
1629 | |     mut log: *mut FILE,
1630 | |     mut info: *const tc_candle_info,
1631 | | ) {
...    |
1716 | |     }
1717 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: the function `tc_run` doesn't need a mutable reference
    --> src/benchmark.rs:1672:21
     |
1672 |                     &mut config,
     |                     ^^^^^^^^^^^
     |
     = note: `#[warn(clippy::unnecessary_mut_passed)]` on by default
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: statement with no effect
    --> src/benchmark.rs:1679:17
     |
1679 |                 iterations;
     |                 ^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/benchmark.rs:1681:17
     |
1681 |                 period;
     |                 ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/benchmark.rs:1684:13
     |
1684 |             i;
     |             ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/benchmark.rs:1705:9
     |
1705 |         best;
     |         ^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/benchmark.rs:1719:1
     |
1719 | / pub unsafe extern "C" fn bench_candle(
1720 | |     mut log: *mut FILE,
1721 | |     mut info: *const tc_candle_info,
1722 | | ) {
...    |
1757 | |     printf(b"\n\0" as *const u8 as *const libc::c_char);
1758 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this boolean expression can be simplified
    --> src/benchmark.rs:1840:20
     |
1840 |                   if !(strcmp(
     |  ____________________^
1841 | |                     (*ind_info).name,
1842 | |                     b"msw\0" as *const u8 as *const libc::c_char,
1843 | |                 ) == 0 as libc::c_int)
     | |______________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool
help: try
     |
1840 ~                 if strcmp(
1841 +                     (*ind_info).name,
1842 +                     b"msw\0" as *const u8 as *const libc::c_char,
1843 +                 ) != 0 as libc::c_int
     |

warning: unneeded `return` statement
    --> src/benchmark.rs:1879:5
     |
1879 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
    --> src/benchmark.rs:1792:29
     |
1792 |             bench_indicator(0 as *mut FILE, ind_info);
     |                             ^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<FILE>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
    --> src/benchmark.rs:1796:26
     |
1796 |             bench_candle(0 as *mut FILE, cnd_info);
     |                          ^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<FILE>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: returning the result of a `let` binding from a block
    --> src/benchmark.rs:1868:13
     |
1861 | /             let mut init = tc_candle_info {
1862 | |                 name: b"all\0" as *const u8 as *const libc::c_char,
1863 | |                 full_name: b"All Candle Patterns\0" as *const u8 as *const libc::c_char,
1864 | |                 pattern: (((1 as libc::c_long) << 26 as libc::c_int)
1865 | |                     - 1 as libc::c_int as libc::c_long) as tc_set,
1866 | |                 candle: None,
1867 | |             };
     | |______________- unnecessary `let` binding
1868 |               init
     |               ^^^^
     |
     = note: `#[warn(clippy::let_and_return)]` on by default
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1861 ~             
1862 ~             tc_candle_info {
1863 +                 name: b"all\0" as *const u8 as *const libc::c_char,
1864 +                 full_name: b"All Candle Patterns\0" as *const u8 as *const libc::c_char,
1865 +                 pattern: (((1 as libc::c_long) << 26 as libc::c_int)
1866 +                     - 1 as libc::c_int as libc::c_long) as tc_set,
1867 +                 candle: None,
1868 +             }
     |

warning: unneeded `return` statement
   --> src/cli.rs:105:5
    |
105 |     return strtod(__nptr, 0 as *mut libc::c_void as *mut *mut libc::c_char);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `strtod(__nptr, 0 as *mut libc::c_void as *mut *mut libc::c_char)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
   --> src/cli.rs:105:27
    |
105 |     return strtod(__nptr, 0 as *mut libc::c_void as *mut *mut libc::c_char);
    |                           ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/cli.rs:108:1
    |
108 | / pub unsafe extern "C" fn next_line(mut fp: *mut FILE) -> *mut libc::c_char {
109 | |     static mut buf: [libc::c_char; 131072] = [0; 131072];
110 | |     while !(fgets(buf.as_mut_ptr(), 131072 as libc::c_int, fp)).is_null() {
111 | |         if buf[0 as libc::c_int as usize] as libc::c_int == '#' as i32 {
...   |
121 | |     return 0 as *mut libc::c_char;
122 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/cli.rs:121:5
    |
121 |     return 0 as *mut libc::c_char;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as *mut libc::c_char`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
   --> src/cli.rs:121:12
    |
121 |     return 0 as *mut libc::c_char;
    |            ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/cli.rs:124:1
    |
124 | / pub unsafe extern "C" fn get_array(
125 | |     mut fp: *mut FILE,
126 | |     mut s: *mut libc::c_double,
127 | | ) -> libc::c_int {
...   |
153 | |     return inp.offset_from(s) as libc::c_long as libc::c_int;
154 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/cli.rs:153:5
    |
153 |     return inp.offset_from(s) as libc::c_long as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `inp.offset_from(s) as libc::c_long as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/cli.rs:144:9
    |
144 |         inp;
    |         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `0 as *mut _` detected
   --> src/cli.rs:146:13
    |
146 |             0 as *mut libc::c_char,
    |             ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/cli.rs:156:1
    |
156 | / pub unsafe extern "C" fn run(
157 | |     mut name: *const libc::c_char,
158 | |     mut in_0: *const libc::c_char,
159 | |     mut out: *const libc::c_char,
...   |
340 | |     }
341 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: statement with no effect
   --> src/cli.rs:192:13
    |
192 |             o;
    |             ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `0 as *mut _` detected
   --> src/cli.rs:194:17
    |
194 |                 0 as *mut libc::c_char,
    |                 ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/cli.rs:217:9
    |
217 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/cli.rs:218:9
    |
218 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/cli.rs:219:9
    |
219 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/cli.rs:220:9
    |
220 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/cli.rs:221:9
    |
221 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/cli.rs:222:9
    |
222 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/cli.rs:223:9
    |
223 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/cli.rs:224:9
    |
224 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/cli.rs:225:9
    |
225 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/cli.rs:226:9
    |
226 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/cli.rs:227:9
    |
227 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/cli.rs:228:9
    |
228 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/cli.rs:229:9
    |
229 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/cli.rs:230:9
    |
230 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/cli.rs:231:9
    |
231 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/cli.rs:232:9
    |
232 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/cli.rs:235:9
    |
235 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/cli.rs:236:9
    |
236 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/cli.rs:237:9
    |
237 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/cli.rs:238:9
    |
238 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/cli.rs:239:9
    |
239 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/cli.rs:240:9
    |
240 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/cli.rs:241:9
    |
241 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/cli.rs:242:9
    |
242 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/cli.rs:243:9
    |
243 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/cli.rs:244:9
    |
244 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/cli.rs:245:9
    |
245 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/cli.rs:246:9
    |
246 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/cli.rs:247:9
    |
247 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/cli.rs:248:9
    |
248 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/cli.rs:249:9
    |
249 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/cli.rs:250:9
    |
250 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: statement with no effect
   --> src/cli.rs:262:9
    |
262 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/cli.rs:273:9
    |
273 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/cli.rs:322:13
    |
322 |             j;
    |             ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/cli.rs:326:9
    |
326 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/cli.rs:333:9
    |
333 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/cli.rs:339:9
    |
339 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unneeded `return` statement
   --> src/cli.rs:356:5
    |
356 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/fuzzer.rs:217:1
    |
217 | / pub unsafe extern "C" fn banner() {
218 | |     printf(
219 | |         b"  ______ _    _ __________________ _____  \n\0" as *const u8
220 | |             as *const libc::c_char,
...   |
253 | |     );
254 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/fuzzer.rs:258:1
    |
258 | / pub unsafe extern "C" fn check_output(
259 | |     mut info: *const ti_indicator_info,
260 | |     mut size: libc::c_int,
261 | |     mut inputs: *const *const libc::c_double,
...   |
357 | |     }
358 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
   --> src/fuzzer.rs:279:13
    |
279 | /             match (*info).type_0 {
280 | |                 1 => {
281 | |                     if op > 4 as libc::c_int as libc::c_double
282 | |                         && op > max * 1.5f64 + 2 as libc::c_int as libc::c_double
...   |
350 | |                 _ => {}
351 | |             }
    | |_____________^
    |
    = note: `#[warn(clippy::single_match)]` on by default
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
    |
279 ~             if (*info).type_0 == 1 {
280 +                 if op > 4 as libc::c_int as libc::c_double
281 +                     && op > max * 1.5f64 + 2 as libc::c_int as libc::c_double
282 +                     || op < -(4 as libc::c_int) as libc::c_double
283 +                         && op < min * 0.5f64 - 3 as libc::c_int as libc::c_double
284 +                 {
285 +                     let mut k: libc::c_int = 0;
286 +                     let mut j: libc::c_int = 0;
287 +                     printf(b"\nInputs:\0" as *const u8 as *const libc::c_char);
288 +                     k = 0 as libc::c_int;
289 +                     while k < input_size {
290 +                         printf(
291 +                             b" %f\0" as *const u8 as *const libc::c_char,
292 +                             *(*inputs.offset(0 as libc::c_int as isize))
293 +                                 .offset(k as isize),
294 +                         );
295 +                         k += 1;
296 +                         k;
297 +                     }
298 +                     printf(b"\nOptions:\0" as *const u8 as *const libc::c_char);
299 +                     k = 0 as libc::c_int;
300 +                     while k < (*info).options {
301 +                         printf(
302 +                             b" %f\0" as *const u8 as *const libc::c_char,
303 +                             *options.offset(k as isize),
304 +                         );
305 +                         k += 1;
306 +                         k;
307 +                     }
308 +                     j = 0 as libc::c_int;
309 +                     while j < (*info).outputs {
310 +                         printf(
311 +                             b"\nOutput[%d]:\0" as *const u8 as *const libc::c_char,
312 +                             j,
313 +                         );
314 +                         k = 0 as libc::c_int;
315 +                         while k < input_size {
316 +                             printf(
317 +                                 b" %f\0" as *const u8 as *const libc::c_char,
318 +                                 *(*outputs.offset(j as isize)).offset(k as isize),
319 +                             );
320 +                             k += 1;
321 +                             k;
322 +                         }
323 +                         j += 1;
324 +                         j;
325 +                     }
326 +                     printf(
327 +                         b"\nERROR Output is out of range for input: input: %f output: %f\n\0"
328 +                             as *const u8 as *const libc::c_char,
329 +                         in_0,
330 +                         op,
331 +                     );
332 +                     errors_cnt += 1 as libc::c_int;
333 +                     if 0 as libc::c_int != 0 {} else {
334 +                         __assert_fail(
335 +                             b"0\0" as *const u8 as *const libc::c_char,
336 +                             b"fuzzer.c\0" as *const u8 as *const libc::c_char,
337 +                             102 as libc::c_int as libc::c_uint,
338 +                             (*::core::mem::transmute::<
339 +                                 &[u8; 106],
340 +                                 &[libc::c_char; 106],
341 +                             >(
342 +                                 b"void check_output(const ti_indicator_info *, int, const double *const *, const double *, double *const *)\0",
343 +                             ))
344 +                                 .as_ptr(),
345 +                         );
346 +                     };
347 +                 }
348 +             }
    |

warning: statement with no effect
   --> src/fuzzer.rs:297:29
    |
297 | ...                   k;
    |                       ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/fuzzer.rs:307:29
    |
307 | ...                   k;
    |                       ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/fuzzer.rs:322:33
    |
322 | ...                   k;
    |                       ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/fuzzer.rs:325:29
    |
325 | ...                   j;
    |                       ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/fuzzer.rs:353:13
    |
353 |             i;
    |             ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/fuzzer.rs:356:9
    |
356 |         o;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/fuzzer.rs:360:1
    |
360 | / pub unsafe extern "C" fn stress_indicator(mut info: *const ti_indicator_info) {
361 | |     let opt_count: libc::c_int = (*info).options;
362 | |     printf(
363 | |         b"%s (%s) (%d options)\n\0" as *const u8 as *const libc::c_char,
...   |
618 | |     };
619 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this boolean expression can be simplified
   --> src/fuzzer.rs:593:16
    |
593 |             if !(options_index[fresh0 as usize] == 0 as libc::c_int) {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `options_index[fresh0 as usize] != 0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this boolean expression can be simplified
   --> src/fuzzer.rs:597:12
    |
597 |         if !(j <= opt_count) {
    |            ^^^^^^^^^^^^^^^^^ help: try: `j > opt_count`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: `0 as *const _` detected
   --> src/fuzzer.rs:369:9
    |
369 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/fuzzer.rs:370:9
    |
370 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/fuzzer.rs:371:9
    |
371 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/fuzzer.rs:372:9
    |
372 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/fuzzer.rs:373:9
    |
373 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/fuzzer.rs:374:9
    |
374 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/fuzzer.rs:375:9
    |
375 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/fuzzer.rs:376:9
    |
376 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/fuzzer.rs:377:9
    |
377 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/fuzzer.rs:378:9
    |
378 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/fuzzer.rs:379:9
    |
379 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/fuzzer.rs:380:9
    |
380 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/fuzzer.rs:381:9
    |
381 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/fuzzer.rs:382:9
    |
382 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/fuzzer.rs:383:9
    |
383 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/fuzzer.rs:384:9
    |
384 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/fuzzer.rs:387:9
    |
387 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/fuzzer.rs:388:9
    |
388 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/fuzzer.rs:389:9
    |
389 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/fuzzer.rs:390:9
    |
390 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/fuzzer.rs:391:9
    |
391 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/fuzzer.rs:392:9
    |
392 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/fuzzer.rs:393:9
    |
393 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/fuzzer.rs:394:9
    |
394 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/fuzzer.rs:395:9
    |
395 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/fuzzer.rs:396:9
    |
396 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/fuzzer.rs:397:9
    |
397 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/fuzzer.rs:398:9
    |
398 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/fuzzer.rs:399:9
    |
399 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/fuzzer.rs:400:9
    |
400 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/fuzzer.rs:401:9
    |
401 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/fuzzer.rs:402:9
    |
402 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/fuzzer.rs:405:9
    |
405 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/fuzzer.rs:406:9
    |
406 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/fuzzer.rs:407:9
    |
407 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/fuzzer.rs:408:9
    |
408 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/fuzzer.rs:409:9
    |
409 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/fuzzer.rs:410:9
    |
410 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/fuzzer.rs:411:9
    |
411 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/fuzzer.rs:412:9
    |
412 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/fuzzer.rs:413:9
    |
413 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/fuzzer.rs:414:9
    |
414 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/fuzzer.rs:415:9
    |
415 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/fuzzer.rs:416:9
    |
416 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/fuzzer.rs:417:9
    |
417 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/fuzzer.rs:418:9
    |
418 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/fuzzer.rs:419:9
    |
419 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/fuzzer.rs:420:9
    |
420 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/fuzzer.rs:429:13
    |
429 |             0 as *mut libc::c_double
    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/fuzzer.rs:435:13
    |
435 |             0 as *mut libc::c_double
    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/fuzzer.rs:441:13
    |
441 |             0 as *mut libc::c_double
    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: statement with no effect
   --> src/fuzzer.rs:444:9
    |
444 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `0 as *mut _` detected
   --> src/fuzzer.rs:467:45
    |
467 |     let mut optionsd: *mut libc::c_double = 0 as *mut libc::c_double;
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: statement with no effect
   --> src/fuzzer.rs:483:9
    |
483 |         count;
    |         ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/fuzzer.rs:489:13
    |
489 |             j;
    |             ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `0 as *mut _` detected
   --> src/fuzzer.rs:548:50
    |
548 |                 let mut stream: *mut ti_stream = 0 as *mut ti_stream;
    |                                                  ^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<ti_stream>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: statement with no effect
   --> src/fuzzer.rs:575:25
    |
575 |                         repeat;
    |                         ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/fuzzer.rs:581:13
    |
581 |             s;
    |             ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: manual implementation of an assign operation
   --> src/fuzzer.rs:592:13
    |
592 |             j = j + 1;
    |             ^^^^^^^^^ help: replace it with: `j += 1`
    |
    = note: `#[warn(clippy::assign_op_pattern)]` on by default
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: unsafe function's docs miss `# Safety` section
   --> src/fuzzer.rs:621:1
    |
621 | / pub unsafe extern "C" fn stress_candle(mut info: *const tc_candle_info) {
622 | |     printf(
623 | |         b"%s (%s)\n\0" as *const u8 as *const libc::c_char,
624 | |         (*info).name,
...   |
780 | |     tc_result_free(output);
781 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: statement with no effect
   --> src/fuzzer.rs:725:13
    |
725 |             i;
    |             ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/fuzzer.rs:746:13
    |
746 |             i_0;
    |             ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/fuzzer.rs:778:9
    |
778 |         s;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unneeded `return` statement
   --> src/fuzzer.rs:822:5
    |
822 |     return if errors_cnt != 0 { 1 as libc::c_int } else { 0 as libc::c_int };
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `if errors_cnt != 0 { 1 as libc::c_int } else { 0 as libc::c_int }`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/sample.rs:60:5
   |
60 |     return strtod(__nptr, 0 as *mut libc::c_void as *mut *mut libc::c_char);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `strtod(__nptr, 0 as *mut libc::c_void as *mut *mut libc::c_char)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
  --> src/sample.rs:60:27
   |
60 |     return strtod(__nptr, 0 as *mut libc::c_void as *mut *mut libc::c_char);
   |                           ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unneeded `return` statement
   --> src/sample.rs:586:9
    |
586 |         return 0 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
   --> src/sample.rs:603:9
    |
603 |         return 1 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/sample.rs:267:17
    |
267 |                 i;
    |                 ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/sample.rs:283:17
    |
283 |                 i;
    |                 ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/sample.rs:299:17
    |
299 |                 i;
    |                 ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `0 as *const _` detected
   --> src/sample.rs:319:9
    |
319 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/sample.rs:320:9
    |
320 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/sample.rs:321:9
    |
321 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/sample.rs:322:9
    |
322 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/sample.rs:323:9
    |
323 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: statement with no effect
   --> src/sample.rs:405:9
    |
405 |         j;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `0 as *const _` detected
   --> src/sample.rs:415:9
    |
415 |         0 as *const libc::c_char,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: statement with no effect
   --> src/sample.rs:426:17
    |
426 |                 j;
    |                 ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/sample.rs:431:13
    |
431 |             alt;
    |             ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/sample.rs:449:17
    |
449 |                 k;
    |                 ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/sample.rs:456:9
    |
456 |         i_0;
    |         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/sample.rs:505:13
    |
505 |             i_1;
    |             ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/sample.rs:572:21
    |
572 |                     k_0;
    |                     ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/sample.rs:577:13
    |
577 |             i_1;
    |             ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/sample.rs:597:17
    |
597 |                 i_2;
    |                 ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/candles.rs:72:1
   |
72 | / pub unsafe extern "C" fn tc_version() -> *const libc::c_char {
73 | |     return b"0.9.2\0" as *const u8 as *const libc::c_char;
74 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/candles.rs:73:5
   |
73 |     return b"0.9.2\0" as *const u8 as *const libc::c_char;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `b"0.9.2\0" as *const u8 as *const libc::c_char`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/candles.rs:76:1
   |
76 | / pub unsafe extern "C" fn tc_build() -> libc::c_long {
77 | |     return 1743602909 as libc::c_int as libc::c_long;
78 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/candles.rs:77:5
   |
77 |     return 1743602909 as libc::c_int as libc::c_long;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1743602909 as libc::c_int as libc::c_long`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/candles.rs:80:1
   |
80 | / pub unsafe extern "C" fn tc_candle_count() -> libc::c_int {
81 | |     return 26 as libc::c_int;
82 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/candles.rs:81:5
   |
81 |     return 26 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `26 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/candles.rs:84:1
   |
84 | / pub unsafe extern "C" fn tc_config_default() -> *const tc_config {
85 | |     static mut default_config: tc_config = {
86 | |         let mut init = tc_config {
87 | |             period: 10 as libc::c_int,
...  |
97 | |     return &mut default_config;
98 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/candles.rs:97:5
   |
97 |     return &mut default_config;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `&mut default_config`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: returning the result of a `let` binding from a block
  --> src/candles.rs:95:9
   |
86 | /         let mut init = tc_config {
87 | |             period: 10 as libc::c_int,
88 | |             body_none: 0.05f64,
89 | |             body_short: 0.5f64,
...  |
93 | |             near: 0.3f64,
94 | |         };
   | |__________- unnecessary `let` binding
95 |           init
   |           ^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
   |
86 ~         
87 ~         tc_config {
88 +             period: 10 as libc::c_int,
89 +             body_none: 0.05f64,
90 +             body_short: 0.5f64,
91 +             body_long: 1.4f64,
92 +             wick_none: 0.05f64,
93 +             wick_long: 0.6f64,
94 +             near: 0.3f64,
95 +         }
   |

warning: returning the result of a `let` binding from a block
   --> src/candles.rs:117:13
    |
103 | /             let mut init = tc_candle_info {
104 | |                 name: b"abandoned_baby_bear\0" as *const u8 as *const libc::c_char,
105 | |                 full_name: b"Abandoned Baby Bear\0" as *const u8 as *const libc::c_char,
106 | |                 pattern: ((1 as libc::c_long) << 0 as libc::c_int) as tc_set,
...   |
115 | |                 ),
116 | |             };
    | |______________- unnecessary `let` binding
117 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
103 ~             
104 ~             tc_candle_info {
105 +                 name: b"abandoned_baby_bear\0" as *const u8 as *const libc::c_char,
106 +                 full_name: b"Abandoned Baby Bear\0" as *const u8 as *const libc::c_char,
107 +                 pattern: ((1 as libc::c_long) << 0 as libc::c_int) as tc_set,
108 +                 candle: Some(
109 +                     tc_abandoned_baby_bear
110 +                         as unsafe extern "C" fn(
111 +                             libc::c_int,
112 +                             *const *const TC_REAL,
113 +                             *const tc_config,
114 +                             *mut tc_result,
115 +                         ) -> libc::c_int,
116 +                 ),
117 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/candles.rs:134:13
    |
120 | /             let mut init = tc_candle_info {
121 | |                 name: b"abandoned_baby_bull\0" as *const u8 as *const libc::c_char,
122 | |                 full_name: b"Abandoned Baby Bull\0" as *const u8 as *const libc::c_char,
123 | |                 pattern: ((1 as libc::c_long) << 1 as libc::c_int) as tc_set,
...   |
132 | |                 ),
133 | |             };
    | |______________- unnecessary `let` binding
134 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
120 ~             
121 ~             tc_candle_info {
122 +                 name: b"abandoned_baby_bull\0" as *const u8 as *const libc::c_char,
123 +                 full_name: b"Abandoned Baby Bull\0" as *const u8 as *const libc::c_char,
124 +                 pattern: ((1 as libc::c_long) << 1 as libc::c_int) as tc_set,
125 +                 candle: Some(
126 +                     tc_abandoned_baby_bull
127 +                         as unsafe extern "C" fn(
128 +                             libc::c_int,
129 +                             *const *const TC_REAL,
130 +                             *const tc_config,
131 +                             *mut tc_result,
132 +                         ) -> libc::c_int,
133 +                 ),
134 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/candles.rs:151:13
    |
137 | /             let mut init = tc_candle_info {
138 | |                 name: b"big_black_candle\0" as *const u8 as *const libc::c_char,
139 | |                 full_name: b"Big Black Candle\0" as *const u8 as *const libc::c_char,
140 | |                 pattern: ((1 as libc::c_long) << 2 as libc::c_int) as tc_set,
...   |
149 | |                 ),
150 | |             };
    | |______________- unnecessary `let` binding
151 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
137 ~             
138 ~             tc_candle_info {
139 +                 name: b"big_black_candle\0" as *const u8 as *const libc::c_char,
140 +                 full_name: b"Big Black Candle\0" as *const u8 as *const libc::c_char,
141 +                 pattern: ((1 as libc::c_long) << 2 as libc::c_int) as tc_set,
142 +                 candle: Some(
143 +                     tc_big_black_candle
144 +                         as unsafe extern "C" fn(
145 +                             libc::c_int,
146 +                             *const *const TC_REAL,
147 +                             *const tc_config,
148 +                             *mut tc_result,
149 +                         ) -> libc::c_int,
150 +                 ),
151 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/candles.rs:168:13
    |
154 | /             let mut init = tc_candle_info {
155 | |                 name: b"big_white_candle\0" as *const u8 as *const libc::c_char,
156 | |                 full_name: b"Big White Candle\0" as *const u8 as *const libc::c_char,
157 | |                 pattern: ((1 as libc::c_long) << 3 as libc::c_int) as tc_set,
...   |
166 | |                 ),
167 | |             };
    | |______________- unnecessary `let` binding
168 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
154 ~             
155 ~             tc_candle_info {
156 +                 name: b"big_white_candle\0" as *const u8 as *const libc::c_char,
157 +                 full_name: b"Big White Candle\0" as *const u8 as *const libc::c_char,
158 +                 pattern: ((1 as libc::c_long) << 3 as libc::c_int) as tc_set,
159 +                 candle: Some(
160 +                     tc_big_white_candle
161 +                         as unsafe extern "C" fn(
162 +                             libc::c_int,
163 +                             *const *const TC_REAL,
164 +                             *const tc_config,
165 +                             *mut tc_result,
166 +                         ) -> libc::c_int,
167 +                 ),
168 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/candles.rs:185:13
    |
171 | /             let mut init = tc_candle_info {
172 | |                 name: b"black_marubozu\0" as *const u8 as *const libc::c_char,
173 | |                 full_name: b"Black Marubozu\0" as *const u8 as *const libc::c_char,
174 | |                 pattern: ((1 as libc::c_long) << 4 as libc::c_int) as tc_set,
...   |
183 | |                 ),
184 | |             };
    | |______________- unnecessary `let` binding
185 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
171 ~             
172 ~             tc_candle_info {
173 +                 name: b"black_marubozu\0" as *const u8 as *const libc::c_char,
174 +                 full_name: b"Black Marubozu\0" as *const u8 as *const libc::c_char,
175 +                 pattern: ((1 as libc::c_long) << 4 as libc::c_int) as tc_set,
176 +                 candle: Some(
177 +                     tc_black_marubozu
178 +                         as unsafe extern "C" fn(
179 +                             libc::c_int,
180 +                             *const *const TC_REAL,
181 +                             *const tc_config,
182 +                             *mut tc_result,
183 +                         ) -> libc::c_int,
184 +                 ),
185 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/candles.rs:202:13
    |
188 | /             let mut init = tc_candle_info {
189 | |                 name: b"doji\0" as *const u8 as *const libc::c_char,
190 | |                 full_name: b"Doji\0" as *const u8 as *const libc::c_char,
191 | |                 pattern: ((1 as libc::c_long) << 5 as libc::c_int) as tc_set,
...   |
200 | |                 ),
201 | |             };
    | |______________- unnecessary `let` binding
202 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
188 ~             
189 ~             tc_candle_info {
190 +                 name: b"doji\0" as *const u8 as *const libc::c_char,
191 +                 full_name: b"Doji\0" as *const u8 as *const libc::c_char,
192 +                 pattern: ((1 as libc::c_long) << 5 as libc::c_int) as tc_set,
193 +                 candle: Some(
194 +                     tc_doji
195 +                         as unsafe extern "C" fn(
196 +                             libc::c_int,
197 +                             *const *const TC_REAL,
198 +                             *const tc_config,
199 +                             *mut tc_result,
200 +                         ) -> libc::c_int,
201 +                 ),
202 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/candles.rs:219:13
    |
205 | /             let mut init = tc_candle_info {
206 | |                 name: b"dragonfly_doji\0" as *const u8 as *const libc::c_char,
207 | |                 full_name: b"Dragonfly Doji\0" as *const u8 as *const libc::c_char,
208 | |                 pattern: ((1 as libc::c_long) << 6 as libc::c_int) as tc_set,
...   |
217 | |                 ),
218 | |             };
    | |______________- unnecessary `let` binding
219 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
205 ~             
206 ~             tc_candle_info {
207 +                 name: b"dragonfly_doji\0" as *const u8 as *const libc::c_char,
208 +                 full_name: b"Dragonfly Doji\0" as *const u8 as *const libc::c_char,
209 +                 pattern: ((1 as libc::c_long) << 6 as libc::c_int) as tc_set,
210 +                 candle: Some(
211 +                     tc_dragonfly_doji
212 +                         as unsafe extern "C" fn(
213 +                             libc::c_int,
214 +                             *const *const TC_REAL,
215 +                             *const tc_config,
216 +                             *mut tc_result,
217 +                         ) -> libc::c_int,
218 +                 ),
219 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/candles.rs:236:13
    |
222 | /             let mut init = tc_candle_info {
223 | |                 name: b"engulfing_bear\0" as *const u8 as *const libc::c_char,
224 | |                 full_name: b"Engulfing Bear\0" as *const u8 as *const libc::c_char,
225 | |                 pattern: ((1 as libc::c_long) << 7 as libc::c_int) as tc_set,
...   |
234 | |                 ),
235 | |             };
    | |______________- unnecessary `let` binding
236 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
222 ~             
223 ~             tc_candle_info {
224 +                 name: b"engulfing_bear\0" as *const u8 as *const libc::c_char,
225 +                 full_name: b"Engulfing Bear\0" as *const u8 as *const libc::c_char,
226 +                 pattern: ((1 as libc::c_long) << 7 as libc::c_int) as tc_set,
227 +                 candle: Some(
228 +                     tc_engulfing_bear
229 +                         as unsafe extern "C" fn(
230 +                             libc::c_int,
231 +                             *const *const TC_REAL,
232 +                             *const tc_config,
233 +                             *mut tc_result,
234 +                         ) -> libc::c_int,
235 +                 ),
236 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/candles.rs:253:13
    |
239 | /             let mut init = tc_candle_info {
240 | |                 name: b"engulfing_bull\0" as *const u8 as *const libc::c_char,
241 | |                 full_name: b"Engulfing Bull\0" as *const u8 as *const libc::c_char,
242 | |                 pattern: ((1 as libc::c_long) << 8 as libc::c_int) as tc_set,
...   |
251 | |                 ),
252 | |             };
    | |______________- unnecessary `let` binding
253 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
239 ~             
240 ~             tc_candle_info {
241 +                 name: b"engulfing_bull\0" as *const u8 as *const libc::c_char,
242 +                 full_name: b"Engulfing Bull\0" as *const u8 as *const libc::c_char,
243 +                 pattern: ((1 as libc::c_long) << 8 as libc::c_int) as tc_set,
244 +                 candle: Some(
245 +                     tc_engulfing_bull
246 +                         as unsafe extern "C" fn(
247 +                             libc::c_int,
248 +                             *const *const TC_REAL,
249 +                             *const tc_config,
250 +                             *mut tc_result,
251 +                         ) -> libc::c_int,
252 +                 ),
253 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/candles.rs:270:13
    |
256 | /             let mut init = tc_candle_info {
257 | |                 name: b"evening_doji_star\0" as *const u8 as *const libc::c_char,
258 | |                 full_name: b"Evening Doji Star\0" as *const u8 as *const libc::c_char,
259 | |                 pattern: ((1 as libc::c_long) << 9 as libc::c_int) as tc_set,
...   |
268 | |                 ),
269 | |             };
    | |______________- unnecessary `let` binding
270 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
256 ~             
257 ~             tc_candle_info {
258 +                 name: b"evening_doji_star\0" as *const u8 as *const libc::c_char,
259 +                 full_name: b"Evening Doji Star\0" as *const u8 as *const libc::c_char,
260 +                 pattern: ((1 as libc::c_long) << 9 as libc::c_int) as tc_set,
261 +                 candle: Some(
262 +                     tc_evening_doji_star
263 +                         as unsafe extern "C" fn(
264 +                             libc::c_int,
265 +                             *const *const TC_REAL,
266 +                             *const tc_config,
267 +                             *mut tc_result,
268 +                         ) -> libc::c_int,
269 +                 ),
270 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/candles.rs:287:13
    |
273 | /             let mut init = tc_candle_info {
274 | |                 name: b"evening_star\0" as *const u8 as *const libc::c_char,
275 | |                 full_name: b"Evening Star\0" as *const u8 as *const libc::c_char,
276 | |                 pattern: ((1 as libc::c_long) << 10 as libc::c_int) as tc_set,
...   |
285 | |                 ),
286 | |             };
    | |______________- unnecessary `let` binding
287 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
273 ~             
274 ~             tc_candle_info {
275 +                 name: b"evening_star\0" as *const u8 as *const libc::c_char,
276 +                 full_name: b"Evening Star\0" as *const u8 as *const libc::c_char,
277 +                 pattern: ((1 as libc::c_long) << 10 as libc::c_int) as tc_set,
278 +                 candle: Some(
279 +                     tc_evening_star
280 +                         as unsafe extern "C" fn(
281 +                             libc::c_int,
282 +                             *const *const TC_REAL,
283 +                             *const tc_config,
284 +                             *mut tc_result,
285 +                         ) -> libc::c_int,
286 +                 ),
287 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/candles.rs:304:13
    |
290 | /             let mut init = tc_candle_info {
291 | |                 name: b"four_price_doji\0" as *const u8 as *const libc::c_char,
292 | |                 full_name: b"Four Price Doji\0" as *const u8 as *const libc::c_char,
293 | |                 pattern: ((1 as libc::c_long) << 11 as libc::c_int) as tc_set,
...   |
302 | |                 ),
303 | |             };
    | |______________- unnecessary `let` binding
304 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
290 ~             
291 ~             tc_candle_info {
292 +                 name: b"four_price_doji\0" as *const u8 as *const libc::c_char,
293 +                 full_name: b"Four Price Doji\0" as *const u8 as *const libc::c_char,
294 +                 pattern: ((1 as libc::c_long) << 11 as libc::c_int) as tc_set,
295 +                 candle: Some(
296 +                     tc_four_price_doji
297 +                         as unsafe extern "C" fn(
298 +                             libc::c_int,
299 +                             *const *const TC_REAL,
300 +                             *const tc_config,
301 +                             *mut tc_result,
302 +                         ) -> libc::c_int,
303 +                 ),
304 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/candles.rs:321:13
    |
307 | /             let mut init = tc_candle_info {
308 | |                 name: b"gravestone_doji\0" as *const u8 as *const libc::c_char,
309 | |                 full_name: b"Gravestone Doji\0" as *const u8 as *const libc::c_char,
310 | |                 pattern: ((1 as libc::c_long) << 12 as libc::c_int) as tc_set,
...   |
319 | |                 ),
320 | |             };
    | |______________- unnecessary `let` binding
321 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
307 ~             
308 ~             tc_candle_info {
309 +                 name: b"gravestone_doji\0" as *const u8 as *const libc::c_char,
310 +                 full_name: b"Gravestone Doji\0" as *const u8 as *const libc::c_char,
311 +                 pattern: ((1 as libc::c_long) << 12 as libc::c_int) as tc_set,
312 +                 candle: Some(
313 +                     tc_gravestone_doji
314 +                         as unsafe extern "C" fn(
315 +                             libc::c_int,
316 +                             *const *const TC_REAL,
317 +                             *const tc_config,
318 +                             *mut tc_result,
319 +                         ) -> libc::c_int,
320 +                 ),
321 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/candles.rs:338:13
    |
324 | /             let mut init = tc_candle_info {
325 | |                 name: b"hammer\0" as *const u8 as *const libc::c_char,
326 | |                 full_name: b"Hammer\0" as *const u8 as *const libc::c_char,
327 | |                 pattern: ((1 as libc::c_long) << 13 as libc::c_int) as tc_set,
...   |
336 | |                 ),
337 | |             };
    | |______________- unnecessary `let` binding
338 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
324 ~             
325 ~             tc_candle_info {
326 +                 name: b"hammer\0" as *const u8 as *const libc::c_char,
327 +                 full_name: b"Hammer\0" as *const u8 as *const libc::c_char,
328 +                 pattern: ((1 as libc::c_long) << 13 as libc::c_int) as tc_set,
329 +                 candle: Some(
330 +                     tc_hammer
331 +                         as unsafe extern "C" fn(
332 +                             libc::c_int,
333 +                             *const *const TC_REAL,
334 +                             *const tc_config,
335 +                             *mut tc_result,
336 +                         ) -> libc::c_int,
337 +                 ),
338 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/candles.rs:355:13
    |
341 | /             let mut init = tc_candle_info {
342 | |                 name: b"hanging_man\0" as *const u8 as *const libc::c_char,
343 | |                 full_name: b"Hanging Man\0" as *const u8 as *const libc::c_char,
344 | |                 pattern: ((1 as libc::c_long) << 14 as libc::c_int) as tc_set,
...   |
353 | |                 ),
354 | |             };
    | |______________- unnecessary `let` binding
355 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
341 ~             
342 ~             tc_candle_info {
343 +                 name: b"hanging_man\0" as *const u8 as *const libc::c_char,
344 +                 full_name: b"Hanging Man\0" as *const u8 as *const libc::c_char,
345 +                 pattern: ((1 as libc::c_long) << 14 as libc::c_int) as tc_set,
346 +                 candle: Some(
347 +                     tc_hanging_man
348 +                         as unsafe extern "C" fn(
349 +                             libc::c_int,
350 +                             *const *const TC_REAL,
351 +                             *const tc_config,
352 +                             *mut tc_result,
353 +                         ) -> libc::c_int,
354 +                 ),
355 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/candles.rs:372:13
    |
358 | /             let mut init = tc_candle_info {
359 | |                 name: b"inverted_hammer\0" as *const u8 as *const libc::c_char,
360 | |                 full_name: b"Inverted Hammer\0" as *const u8 as *const libc::c_char,
361 | |                 pattern: ((1 as libc::c_long) << 15 as libc::c_int) as tc_set,
...   |
370 | |                 ),
371 | |             };
    | |______________- unnecessary `let` binding
372 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
358 ~             
359 ~             tc_candle_info {
360 +                 name: b"inverted_hammer\0" as *const u8 as *const libc::c_char,
361 +                 full_name: b"Inverted Hammer\0" as *const u8 as *const libc::c_char,
362 +                 pattern: ((1 as libc::c_long) << 15 as libc::c_int) as tc_set,
363 +                 candle: Some(
364 +                     tc_inverted_hammer
365 +                         as unsafe extern "C" fn(
366 +                             libc::c_int,
367 +                             *const *const TC_REAL,
368 +                             *const tc_config,
369 +                             *mut tc_result,
370 +                         ) -> libc::c_int,
371 +                 ),
372 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/candles.rs:389:13
    |
375 | /             let mut init = tc_candle_info {
376 | |                 name: b"long_legged_doji\0" as *const u8 as *const libc::c_char,
377 | |                 full_name: b"Long Legged Doji\0" as *const u8 as *const libc::c_char,
378 | |                 pattern: ((1 as libc::c_long) << 16 as libc::c_int) as tc_set,
...   |
387 | |                 ),
388 | |             };
    | |______________- unnecessary `let` binding
389 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
375 ~             
376 ~             tc_candle_info {
377 +                 name: b"long_legged_doji\0" as *const u8 as *const libc::c_char,
378 +                 full_name: b"Long Legged Doji\0" as *const u8 as *const libc::c_char,
379 +                 pattern: ((1 as libc::c_long) << 16 as libc::c_int) as tc_set,
380 +                 candle: Some(
381 +                     tc_long_legged_doji
382 +                         as unsafe extern "C" fn(
383 +                             libc::c_int,
384 +                             *const *const TC_REAL,
385 +                             *const tc_config,
386 +                             *mut tc_result,
387 +                         ) -> libc::c_int,
388 +                 ),
389 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/candles.rs:406:13
    |
392 | /             let mut init = tc_candle_info {
393 | |                 name: b"marubozu\0" as *const u8 as *const libc::c_char,
394 | |                 full_name: b"Marubozu\0" as *const u8 as *const libc::c_char,
395 | |                 pattern: ((1 as libc::c_long) << 17 as libc::c_int) as tc_set,
...   |
404 | |                 ),
405 | |             };
    | |______________- unnecessary `let` binding
406 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
392 ~             
393 ~             tc_candle_info {
394 +                 name: b"marubozu\0" as *const u8 as *const libc::c_char,
395 +                 full_name: b"Marubozu\0" as *const u8 as *const libc::c_char,
396 +                 pattern: ((1 as libc::c_long) << 17 as libc::c_int) as tc_set,
397 +                 candle: Some(
398 +                     tc_marubozu
399 +                         as unsafe extern "C" fn(
400 +                             libc::c_int,
401 +                             *const *const TC_REAL,
402 +                             *const tc_config,
403 +                             *mut tc_result,
404 +                         ) -> libc::c_int,
405 +                 ),
406 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/candles.rs:423:13
    |
409 | /             let mut init = tc_candle_info {
410 | |                 name: b"morning_doji_star\0" as *const u8 as *const libc::c_char,
411 | |                 full_name: b"Morning Doji Star\0" as *const u8 as *const libc::c_char,
412 | |                 pattern: ((1 as libc::c_long) << 18 as libc::c_int) as tc_set,
...   |
421 | |                 ),
422 | |             };
    | |______________- unnecessary `let` binding
423 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
409 ~             
410 ~             tc_candle_info {
411 +                 name: b"morning_doji_star\0" as *const u8 as *const libc::c_char,
412 +                 full_name: b"Morning Doji Star\0" as *const u8 as *const libc::c_char,
413 +                 pattern: ((1 as libc::c_long) << 18 as libc::c_int) as tc_set,
414 +                 candle: Some(
415 +                     tc_morning_doji_star
416 +                         as unsafe extern "C" fn(
417 +                             libc::c_int,
418 +                             *const *const TC_REAL,
419 +                             *const tc_config,
420 +                             *mut tc_result,
421 +                         ) -> libc::c_int,
422 +                 ),
423 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/candles.rs:440:13
    |
426 | /             let mut init = tc_candle_info {
427 | |                 name: b"morning_star\0" as *const u8 as *const libc::c_char,
428 | |                 full_name: b"Morning Star\0" as *const u8 as *const libc::c_char,
429 | |                 pattern: ((1 as libc::c_long) << 19 as libc::c_int) as tc_set,
...   |
438 | |                 ),
439 | |             };
    | |______________- unnecessary `let` binding
440 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
426 ~             
427 ~             tc_candle_info {
428 +                 name: b"morning_star\0" as *const u8 as *const libc::c_char,
429 +                 full_name: b"Morning Star\0" as *const u8 as *const libc::c_char,
430 +                 pattern: ((1 as libc::c_long) << 19 as libc::c_int) as tc_set,
431 +                 candle: Some(
432 +                     tc_morning_star
433 +                         as unsafe extern "C" fn(
434 +                             libc::c_int,
435 +                             *const *const TC_REAL,
436 +                             *const tc_config,
437 +                             *mut tc_result,
438 +                         ) -> libc::c_int,
439 +                 ),
440 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/candles.rs:457:13
    |
443 | /             let mut init = tc_candle_info {
444 | |                 name: b"shooting_star\0" as *const u8 as *const libc::c_char,
445 | |                 full_name: b"Shooting Star\0" as *const u8 as *const libc::c_char,
446 | |                 pattern: ((1 as libc::c_long) << 20 as libc::c_int) as tc_set,
...   |
455 | |                 ),
456 | |             };
    | |______________- unnecessary `let` binding
457 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
443 ~             
444 ~             tc_candle_info {
445 +                 name: b"shooting_star\0" as *const u8 as *const libc::c_char,
446 +                 full_name: b"Shooting Star\0" as *const u8 as *const libc::c_char,
447 +                 pattern: ((1 as libc::c_long) << 20 as libc::c_int) as tc_set,
448 +                 candle: Some(
449 +                     tc_shooting_star
450 +                         as unsafe extern "C" fn(
451 +                             libc::c_int,
452 +                             *const *const TC_REAL,
453 +                             *const tc_config,
454 +                             *mut tc_result,
455 +                         ) -> libc::c_int,
456 +                 ),
457 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/candles.rs:474:13
    |
460 | /             let mut init = tc_candle_info {
461 | |                 name: b"spinning_top\0" as *const u8 as *const libc::c_char,
462 | |                 full_name: b"Spinning Top\0" as *const u8 as *const libc::c_char,
463 | |                 pattern: ((1 as libc::c_long) << 21 as libc::c_int) as tc_set,
...   |
472 | |                 ),
473 | |             };
    | |______________- unnecessary `let` binding
474 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
460 ~             
461 ~             tc_candle_info {
462 +                 name: b"spinning_top\0" as *const u8 as *const libc::c_char,
463 +                 full_name: b"Spinning Top\0" as *const u8 as *const libc::c_char,
464 +                 pattern: ((1 as libc::c_long) << 21 as libc::c_int) as tc_set,
465 +                 candle: Some(
466 +                     tc_spinning_top
467 +                         as unsafe extern "C" fn(
468 +                             libc::c_int,
469 +                             *const *const TC_REAL,
470 +                             *const tc_config,
471 +                             *mut tc_result,
472 +                         ) -> libc::c_int,
473 +                 ),
474 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/candles.rs:491:13
    |
477 | /             let mut init = tc_candle_info {
478 | |                 name: b"star\0" as *const u8 as *const libc::c_char,
479 | |                 full_name: b"Star\0" as *const u8 as *const libc::c_char,
480 | |                 pattern: ((1 as libc::c_long) << 22 as libc::c_int) as tc_set,
...   |
489 | |                 ),
490 | |             };
    | |______________- unnecessary `let` binding
491 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
477 ~             
478 ~             tc_candle_info {
479 +                 name: b"star\0" as *const u8 as *const libc::c_char,
480 +                 full_name: b"Star\0" as *const u8 as *const libc::c_char,
481 +                 pattern: ((1 as libc::c_long) << 22 as libc::c_int) as tc_set,
482 +                 candle: Some(
483 +                     tc_star
484 +                         as unsafe extern "C" fn(
485 +                             libc::c_int,
486 +                             *const *const TC_REAL,
487 +                             *const tc_config,
488 +                             *mut tc_result,
489 +                         ) -> libc::c_int,
490 +                 ),
491 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/candles.rs:508:13
    |
494 | /             let mut init = tc_candle_info {
495 | |                 name: b"three_black_crows\0" as *const u8 as *const libc::c_char,
496 | |                 full_name: b"Three Black Crows\0" as *const u8 as *const libc::c_char,
497 | |                 pattern: ((1 as libc::c_long) << 23 as libc::c_int) as tc_set,
...   |
506 | |                 ),
507 | |             };
    | |______________- unnecessary `let` binding
508 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
494 ~             
495 ~             tc_candle_info {
496 +                 name: b"three_black_crows\0" as *const u8 as *const libc::c_char,
497 +                 full_name: b"Three Black Crows\0" as *const u8 as *const libc::c_char,
498 +                 pattern: ((1 as libc::c_long) << 23 as libc::c_int) as tc_set,
499 +                 candle: Some(
500 +                     tc_three_black_crows
501 +                         as unsafe extern "C" fn(
502 +                             libc::c_int,
503 +                             *const *const TC_REAL,
504 +                             *const tc_config,
505 +                             *mut tc_result,
506 +                         ) -> libc::c_int,
507 +                 ),
508 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/candles.rs:525:13
    |
511 | /             let mut init = tc_candle_info {
512 | |                 name: b"three_white_soldiers\0" as *const u8 as *const libc::c_char,
513 | |                 full_name: b"Three White Soldiers\0" as *const u8 as *const libc::c_char,
514 | |                 pattern: ((1 as libc::c_long) << 24 as libc::c_int) as tc_set,
...   |
523 | |                 ),
524 | |             };
    | |______________- unnecessary `let` binding
525 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
511 ~             
512 ~             tc_candle_info {
513 +                 name: b"three_white_soldiers\0" as *const u8 as *const libc::c_char,
514 +                 full_name: b"Three White Soldiers\0" as *const u8 as *const libc::c_char,
515 +                 pattern: ((1 as libc::c_long) << 24 as libc::c_int) as tc_set,
516 +                 candle: Some(
517 +                     tc_three_white_soldiers
518 +                         as unsafe extern "C" fn(
519 +                             libc::c_int,
520 +                             *const *const TC_REAL,
521 +                             *const tc_config,
522 +                             *mut tc_result,
523 +                         ) -> libc::c_int,
524 +                 ),
525 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/candles.rs:542:13
    |
528 | /             let mut init = tc_candle_info {
529 | |                 name: b"white_marubozu\0" as *const u8 as *const libc::c_char,
530 | |                 full_name: b"White Marubozu\0" as *const u8 as *const libc::c_char,
531 | |                 pattern: ((1 as libc::c_long) << 25 as libc::c_int) as tc_set,
...   |
540 | |                 ),
541 | |             };
    | |______________- unnecessary `let` binding
542 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
528 ~             
529 ~             tc_candle_info {
530 +                 name: b"white_marubozu\0" as *const u8 as *const libc::c_char,
531 +                 full_name: b"White Marubozu\0" as *const u8 as *const libc::c_char,
532 +                 pattern: ((1 as libc::c_long) << 25 as libc::c_int) as tc_set,
533 +                 candle: Some(
534 +                     tc_white_marubozu
535 +                         as unsafe extern "C" fn(
536 +                             libc::c_int,
537 +                             *const *const TC_REAL,
538 +                             *const tc_config,
539 +                             *mut tc_result,
540 +                         ) -> libc::c_int,
541 +                 ),
542 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/candles.rs:551:13
    |
545 | /             let mut init = tc_candle_info {
546 | |                 name: 0 as *const libc::c_char,
547 | |                 full_name: 0 as *const libc::c_char,
548 | |                 pattern: 0 as libc::c_int as tc_set,
549 | |                 candle: None,
550 | |             };
    | |______________- unnecessary `let` binding
551 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
545 ~             
546 ~             tc_candle_info {
547 +                 name: 0 as *const libc::c_char,
548 +                 full_name: 0 as *const libc::c_char,
549 +                 pattern: 0 as libc::c_int as tc_set,
550 +                 candle: None,
551 +             }
    |

warning: unsafe function's docs miss `# Safety` section
   --> src/candles.rs:556:1
    |
556 | / pub unsafe extern "C" fn tc_find_candle(
557 | |     mut name: *const libc::c_char,
558 | | ) -> *const tc_candle_info {
559 | |     let mut imin: libc::c_int = 0 as libc::c_int;
...   |
575 | |     return 0 as *const tc_candle_info;
576 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/candles.rs:575:5
    |
575 |     return 0 as *const tc_candle_info;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as *const tc_candle_info`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `if` chain can be rewritten with `match`
   --> src/candles.rs:567:9
    |
567 | /         if c == 0 as libc::c_int {
568 | |             return tc_candles.as_mut_ptr().offset(i as isize)
569 | |         } else if c > 0 as libc::c_int {
570 | |             imin = i + 1 as libc::c_int;
571 | |         } else {
572 | |             imax = i - 1 as libc::c_int;
573 | |         }
    | |_________^
    |
    = note: `#[warn(clippy::comparison_chain)]` on by default
    = help: consider rewriting the `if` chain to use `cmp` and `match`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain

warning: `0 as *const _` detected
   --> src/candles.rs:575:12
    |
575 |     return 0 as *const tc_candle_info;
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<tc_candle_info>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/candles.rs:578:1
    |
578 | / pub unsafe extern "C" fn tc_get_info(mut pattern: tc_set) -> *const tc_candle_info {
579 | |     if pattern == 0 {
580 | |         return 0 as *const tc_candle_info;
581 | |     }
...   |
598 | |     return 0 as *const tc_candle_info;
599 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/candles.rs:598:5
    |
598 |     return 0 as *const tc_candle_info;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as *const tc_candle_info`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *const _` detected
   --> src/candles.rs:580:16
    |
580 |         return 0 as *const tc_candle_info;
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<tc_candle_info>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `if` chain can be rewritten with `match`
   --> src/candles.rs:590:9
    |
590 | /         if k == tc_candles[i as usize].pattern {
591 | |             return tc_candles.as_mut_ptr().offset(i as isize)
592 | |         } else if k > tc_candles[i as usize].pattern {
593 | |             imin = i + 1 as libc::c_int;
594 | |         } else {
595 | |             imax = i - 1 as libc::c_int;
596 | |         }
    | |_________^
    |
    = help: consider rewriting the `if` chain to use `cmp` and `match`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain

warning: `0 as *const _` detected
   --> src/candles.rs:598:12
    |
598 |     return 0 as *const tc_candle_info;
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<tc_candle_info>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/candles.rs:601:1
    |
601 | / pub unsafe extern "C" fn tc_config_set_to_default(mut config: *mut tc_config) {
602 | |     memcpy(
603 | |         config as *mut libc::c_void,
604 | |         tc_config_default() as *const libc::c_void,
605 | |         ::core::mem::size_of::<tc_config>() as libc::c_ulong,
606 | |     );
607 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/candles.rs:609:1
    |
609 | / pub unsafe extern "C" fn tc_result_new() -> *mut tc_result {
610 | |     let mut k: *mut tc_result = malloc(
611 | |         ::core::mem::size_of::<tc_result>() as libc::c_ulong,
612 | |     ) as *mut tc_result;
...   |
621 | |     return k;
622 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/candles.rs:621:5
    |
621 |     return k;
    |     ^^^^^^^^^ help: remove `return`: `k`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
   --> src/candles.rs:614:16
    |
614 |         return 0 as *mut tc_result;
    |                ^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<tc_result>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/candles.rs:629:1
    |
629 | / pub unsafe extern "C" fn tc_result_free(mut result: *mut tc_result) {
630 | |     if result.is_null() {
631 | |         return;
632 | |     }
633 | |     free((*result).hits as *mut libc::c_void);
634 | |     free(result as *mut libc::c_void);
635 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/candles.rs:637:1
    |
637 | / pub unsafe extern "C" fn tc_result_count(mut result: *const tc_result) -> libc::c_int {
638 | |     return (*result).count;
639 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/candles.rs:638:5
    |
638 |     return (*result).count;
    |     ^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `(*result).count`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/candles.rs:641:1
    |
641 | / pub unsafe extern "C" fn tc_result_pattern_count(
642 | |     mut result: *const tc_result,
643 | | ) -> libc::c_int {
644 | |     return (*result).pattern_count;
645 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/candles.rs:644:5
    |
644 |     return (*result).pattern_count;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `(*result).pattern_count`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/candles.rs:647:1
    |
647 | / pub unsafe extern "C" fn tc_result_get(
648 | |     mut result: *const tc_result,
649 | |     mut index: libc::c_int,
650 | | ) -> tc_hit {
...   |
661 | |     return hit;
662 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/candles.rs:661:5
    |
661 |     return hit;
    |     ^^^^^^^^^^^ help: remove `return`: `hit`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: returning the result of a `let` binding from a block
   --> src/candles.rs:659:9
    |
655 | /         let mut init = tc_hit {
656 | |             index: 0 as libc::c_int,
657 | |             patterns: 0,
658 | |         };
    | |__________- unnecessary `let` binding
659 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
655 ~         
656 ~         tc_hit {
657 +             index: 0 as libc::c_int,
658 +             patterns: 0,
659 +         }
    |

warning: unsafe function's docs miss `# Safety` section
   --> src/candles.rs:664:1
    |
664 | / pub unsafe extern "C" fn tc_result_at(
665 | |     mut result: *const tc_result,
666 | |     mut index: libc::c_int,
667 | | ) -> tc_set {
...   |
707 | |     return 0 as libc::c_int as tc_set;
708 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/candles.rs:707:5
    |
707 |     return 0 as libc::c_int as tc_set;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int as tc_set`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `if` chain can be rewritten with `match`
   --> src/candles.rs:699:9
    |
699 | /         if index == (*((*result).hits).offset(i as isize)).index {
700 | |             return (*((*result).hits).offset(i as isize)).patterns
701 | |         } else if index > (*((*result).hits).offset(i as isize)).index {
702 | |             imin = i + 1 as libc::c_int;
703 | |         } else {
704 | |             imax = i - 1 as libc::c_int;
705 | |         }
    | |_________^
    |
    = help: consider rewriting the `if` chain to use `cmp` and `match`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain

warning: unneeded `return` statement
   --> src/candles.rs:747:5
    |
747 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/candles.rs:714:5
    |
714 |     (*result).pattern_count;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/candles.rs:746:5
    |
746 |     (*result).count;
    |     ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/candles.rs:750:1
     |
750  | / pub unsafe extern "C" fn tc_run(
751  | |     mut patterns: tc_set,
752  | |     mut size: libc::c_int,
753  | |     mut inputs: *const *const TC_REAL,
...    |
1647 | |     return 0 as libc::c_int;
1648 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/candles.rs:1647:5
     |
1647 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/candles.rs:860:9
    |
860 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
   --> src/candles.rs:903:17
    |
899 | /                 let mut init = tc_hit {
900 | |                     index: i,
901 | |                     patterns: ((1 as libc::c_long) << 0 as libc::c_int) as tc_set,
902 | |                 };
    | |__________________- unnecessary `let` binding
903 |                   init
    |                   ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
899 ~                 
900 ~                 tc_hit {
901 +                     index: i,
902 +                     patterns: ((1 as libc::c_long) << 0 as libc::c_int) as tc_set,
903 +                 }
    |

warning: returning the result of a `let` binding from a block
   --> src/candles.rs:934:17
    |
930 | /                 let mut init = tc_hit {
931 | |                     index: i,
932 | |                     patterns: ((1 as libc::c_long) << 1 as libc::c_int) as tc_set,
933 | |                 };
    | |__________________- unnecessary `let` binding
934 |                   init
    |                   ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
930 ~                 
931 ~                 tc_hit {
932 +                     index: i,
933 +                     patterns: ((1 as libc::c_long) << 1 as libc::c_int) as tc_set,
934 +                 }
    |

warning: returning the result of a `let` binding from a block
   --> src/candles.rs:951:17
    |
947 | /                 let mut init = tc_hit {
948 | |                     index: i,
949 | |                     patterns: ((1 as libc::c_long) << 2 as libc::c_int) as tc_set,
950 | |                 };
    | |__________________- unnecessary `let` binding
951 |                   init
    |                   ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
947 ~                 
948 ~                 tc_hit {
949 +                     index: i,
950 +                     patterns: ((1 as libc::c_long) << 2 as libc::c_int) as tc_set,
951 +                 }
    |

warning: returning the result of a `let` binding from a block
   --> src/candles.rs:968:17
    |
964 | /                 let mut init = tc_hit {
965 | |                     index: i,
966 | |                     patterns: ((1 as libc::c_long) << 3 as libc::c_int) as tc_set,
967 | |                 };
    | |__________________- unnecessary `let` binding
968 |                   init
    |                   ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
964 ~                 
965 ~                 tc_hit {
966 +                     index: i,
967 +                     patterns: ((1 as libc::c_long) << 3 as libc::c_int) as tc_set,
968 +                 }
    |

warning: returning the result of a `let` binding from a block
   --> src/candles.rs:987:17
    |
983 | /                 let mut init = tc_hit {
984 | |                     index: i,
985 | |                     patterns: ((1 as libc::c_long) << 4 as libc::c_int) as tc_set,
986 | |                 };
    | |__________________- unnecessary `let` binding
987 |                   init
    |                   ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
983 ~                 
984 ~                 tc_hit {
985 +                     index: i,
986 +                     patterns: ((1 as libc::c_long) << 4 as libc::c_int) as tc_set,
987 +                 }
    |

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:1003:17
     |
999  | /                 let mut init = tc_hit {
1000 | |                     index: i,
1001 | |                     patterns: ((1 as libc::c_long) << 5 as libc::c_int) as tc_set,
1002 | |                 };
     | |__________________- unnecessary `let` binding
1003 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
999  ~                 
1000 ~                 tc_hit {
1001 +                     index: i,
1002 +                     patterns: ((1 as libc::c_long) << 5 as libc::c_int) as tc_set,
1003 +                 }
     |

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:1021:17
     |
1017 | /                 let mut init = tc_hit {
1018 | |                     index: i,
1019 | |                     patterns: ((1 as libc::c_long) << 6 as libc::c_int) as tc_set,
1020 | |                 };
     | |__________________- unnecessary `let` binding
1021 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1017 ~                 
1018 ~                 tc_hit {
1019 +                     index: i,
1020 +                     patterns: ((1 as libc::c_long) << 6 as libc::c_int) as tc_set,
1021 +                 }
     |

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:1041:17
     |
1037 | /                 let mut init = tc_hit {
1038 | |                     index: i,
1039 | |                     patterns: ((1 as libc::c_long) << 7 as libc::c_int) as tc_set,
1040 | |                 };
     | |__________________- unnecessary `let` binding
1041 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1037 ~                 
1038 ~                 tc_hit {
1039 +                     index: i,
1040 +                     patterns: ((1 as libc::c_long) << 7 as libc::c_int) as tc_set,
1041 +                 }
     |

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:1061:17
     |
1057 | /                 let mut init = tc_hit {
1058 | |                     index: i,
1059 | |                     patterns: ((1 as libc::c_long) << 8 as libc::c_int) as tc_set,
1060 | |                 };
     | |__________________- unnecessary `let` binding
1061 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1057 ~                 
1058 ~                 tc_hit {
1059 +                     index: i,
1060 +                     patterns: ((1 as libc::c_long) << 8 as libc::c_int) as tc_set,
1061 +                 }
     |

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:1115:17
     |
1111 | /                 let mut init = tc_hit {
1112 | |                     index: i,
1113 | |                     patterns: ((1 as libc::c_long) << 9 as libc::c_int) as tc_set,
1114 | |                 };
     | |__________________- unnecessary `let` binding
1115 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1111 ~                 
1112 ~                 tc_hit {
1113 +                     index: i,
1114 +                     patterns: ((1 as libc::c_long) << 9 as libc::c_int) as tc_set,
1115 +                 }
     |

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:1169:17
     |
1165 | /                 let mut init = tc_hit {
1166 | |                     index: i,
1167 | |                     patterns: ((1 as libc::c_long) << 10 as libc::c_int) as tc_set,
1168 | |                 };
     | |__________________- unnecessary `let` binding
1169 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1165 ~                 
1166 ~                 tc_hit {
1167 +                     index: i,
1168 +                     patterns: ((1 as libc::c_long) << 10 as libc::c_int) as tc_set,
1169 +                 }
     |

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:1187:17
     |
1183 | /                 let mut init = tc_hit {
1184 | |                     index: i,
1185 | |                     patterns: ((1 as libc::c_long) << 11 as libc::c_int) as tc_set,
1186 | |                 };
     | |__________________- unnecessary `let` binding
1187 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1183 ~                 
1184 ~                 tc_hit {
1185 +                     index: i,
1186 +                     patterns: ((1 as libc::c_long) << 11 as libc::c_int) as tc_set,
1187 +                 }
     |

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:1205:17
     |
1201 | /                 let mut init = tc_hit {
1202 | |                     index: i,
1203 | |                     patterns: ((1 as libc::c_long) << 12 as libc::c_int) as tc_set,
1204 | |                 };
     | |__________________- unnecessary `let` binding
1205 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1201 ~                 
1202 ~                 tc_hit {
1203 +                     index: i,
1204 +                     patterns: ((1 as libc::c_long) << 12 as libc::c_int) as tc_set,
1205 +                 }
     |

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:1231:17
     |
1227 | /                 let mut init = tc_hit {
1228 | |                     index: i,
1229 | |                     patterns: ((1 as libc::c_long) << 13 as libc::c_int) as tc_set,
1230 | |                 };
     | |__________________- unnecessary `let` binding
1231 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1227 ~                 
1228 ~                 tc_hit {
1229 +                     index: i,
1230 +                     patterns: ((1 as libc::c_long) << 13 as libc::c_int) as tc_set,
1231 +                 }
     |

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:1257:17
     |
1253 | /                 let mut init = tc_hit {
1254 | |                     index: i,
1255 | |                     patterns: ((1 as libc::c_long) << 14 as libc::c_int) as tc_set,
1256 | |                 };
     | |__________________- unnecessary `let` binding
1257 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1253 ~                 
1254 ~                 tc_hit {
1255 +                     index: i,
1256 +                     patterns: ((1 as libc::c_long) << 14 as libc::c_int) as tc_set,
1257 +                 }
     |

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:1288:17
     |
1284 | /                 let mut init = tc_hit {
1285 | |                     index: i,
1286 | |                     patterns: ((1 as libc::c_long) << 15 as libc::c_int) as tc_set,
1287 | |                 };
     | |__________________- unnecessary `let` binding
1288 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1284 ~                 
1285 ~                 tc_hit {
1286 +                     index: i,
1287 +                     patterns: ((1 as libc::c_long) << 15 as libc::c_int) as tc_set,
1288 +                 }
     |

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:1306:17
     |
1302 | /                 let mut init = tc_hit {
1303 | |                     index: i,
1304 | |                     patterns: ((1 as libc::c_long) << 16 as libc::c_int) as tc_set,
1305 | |                 };
     | |__________________- unnecessary `let` binding
1306 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1302 ~                 
1303 ~                 tc_hit {
1304 +                     index: i,
1305 +                     patterns: ((1 as libc::c_long) << 16 as libc::c_int) as tc_set,
1306 +                 }
     |

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:1324:17
     |
1320 | /                 let mut init = tc_hit {
1321 | |                     index: i,
1322 | |                     patterns: ((1 as libc::c_long) << 17 as libc::c_int) as tc_set,
1323 | |                 };
     | |__________________- unnecessary `let` binding
1324 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1320 ~                 
1321 ~                 tc_hit {
1322 +                     index: i,
1323 +                     patterns: ((1 as libc::c_long) << 17 as libc::c_int) as tc_set,
1324 +                 }
     |

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:1378:17
     |
1374 | /                 let mut init = tc_hit {
1375 | |                     index: i,
1376 | |                     patterns: ((1 as libc::c_long) << 18 as libc::c_int) as tc_set,
1377 | |                 };
     | |__________________- unnecessary `let` binding
1378 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1374 ~                 
1375 ~                 tc_hit {
1376 +                     index: i,
1377 +                     patterns: ((1 as libc::c_long) << 18 as libc::c_int) as tc_set,
1378 +                 }
     |

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:1432:17
     |
1428 | /                 let mut init = tc_hit {
1429 | |                     index: i,
1430 | |                     patterns: ((1 as libc::c_long) << 19 as libc::c_int) as tc_set,
1431 | |                 };
     | |__________________- unnecessary `let` binding
1432 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1428 ~                 
1429 ~                 tc_hit {
1430 +                     index: i,
1431 +                     patterns: ((1 as libc::c_long) << 19 as libc::c_int) as tc_set,
1432 +                 }
     |

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:1463:17
     |
1459 | /                 let mut init = tc_hit {
1460 | |                     index: i,
1461 | |                     patterns: ((1 as libc::c_long) << 20 as libc::c_int) as tc_set,
1462 | |                 };
     | |__________________- unnecessary `let` binding
1463 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1459 ~                 
1460 ~                 tc_hit {
1461 +                     index: i,
1462 +                     patterns: ((1 as libc::c_long) << 20 as libc::c_int) as tc_set,
1463 +                 }
     |

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:1483:17
     |
1479 | /                 let mut init = tc_hit {
1480 | |                     index: i,
1481 | |                     patterns: ((1 as libc::c_long) << 21 as libc::c_int) as tc_set,
1482 | |                 };
     | |__________________- unnecessary `let` binding
1483 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1479 ~                 
1480 ~                 tc_hit {
1481 +                     index: i,
1482 +                     patterns: ((1 as libc::c_long) << 21 as libc::c_int) as tc_set,
1483 +                 }
     |

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:1501:17
     |
1497 | /                 let mut init = tc_hit {
1498 | |                     index: i,
1499 | |                     patterns: ((1 as libc::c_long) << 22 as libc::c_int) as tc_set,
1500 | |                 };
     | |__________________- unnecessary `let` binding
1501 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1497 ~                 
1498 ~                 tc_hit {
1499 +                     index: i,
1500 +                     patterns: ((1 as libc::c_long) << 22 as libc::c_int) as tc_set,
1501 +                 }
     |

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:1555:17
     |
1551 | /                 let mut init = tc_hit {
1552 | |                     index: i,
1553 | |                     patterns: ((1 as libc::c_long) << 23 as libc::c_int) as tc_set,
1554 | |                 };
     | |__________________- unnecessary `let` binding
1555 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1551 ~                 
1552 ~                 tc_hit {
1553 +                     index: i,
1554 +                     patterns: ((1 as libc::c_long) << 23 as libc::c_int) as tc_set,
1555 +                 }
     |

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:1609:17
     |
1605 | /                 let mut init = tc_hit {
1606 | |                     index: i,
1607 | |                     patterns: ((1 as libc::c_long) << 24 as libc::c_int) as tc_set,
1608 | |                 };
     | |__________________- unnecessary `let` binding
1609 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1605 ~                 
1606 ~                 tc_hit {
1607 +                     index: i,
1608 +                     patterns: ((1 as libc::c_long) << 24 as libc::c_int) as tc_set,
1609 +                 }
     |

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:1628:17
     |
1624 | /                 let mut init = tc_hit {
1625 | |                     index: i,
1626 | |                     patterns: ((1 as libc::c_long) << 25 as libc::c_int) as tc_set,
1627 | |                 };
     | |__________________- unnecessary `let` binding
1628 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1624 ~                 
1625 ~                 tc_hit {
1626 +                     index: i,
1627 +                     patterns: ((1 as libc::c_long) << 25 as libc::c_int) as tc_set,
1628 +                 }
     |

warning: statement with no effect
    --> src/candles.rs:1645:9
     |
1645 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/candles.rs:1650:1
     |
1650 | / pub unsafe extern "C" fn tc_abandoned_baby_bear(
1651 | |     mut size: libc::c_int,
1652 | |     mut inputs: *const *const TC_REAL,
1653 | |     mut options: *const tc_config,
...    |
1737 | |     return 0 as libc::c_int;
1738 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/candles.rs:1737:5
     |
1737 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/candles.rs:1676:9
     |
1676 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:1718:17
     |
1714 | /                 let mut init = tc_hit {
1715 | |                     index: i,
1716 | |                     patterns: ((1 as libc::c_long) << 0 as libc::c_int) as tc_set,
1717 | |                 };
     | |__________________- unnecessary `let` binding
1718 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1714 ~                 
1715 ~                 tc_hit {
1716 +                     index: i,
1717 +                     patterns: ((1 as libc::c_long) << 0 as libc::c_int) as tc_set,
1718 +                 }
     |

warning: statement with no effect
    --> src/candles.rs:1735:9
     |
1735 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/candles.rs:1740:1
     |
1740 | / pub unsafe extern "C" fn tc_abandoned_baby_bull(
1741 | |     mut size: libc::c_int,
1742 | |     mut inputs: *const *const TC_REAL,
1743 | |     mut options: *const tc_config,
...    |
1827 | |     return 0 as libc::c_int;
1828 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/candles.rs:1827:5
     |
1827 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/candles.rs:1766:9
     |
1766 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:1808:17
     |
1804 | /                 let mut init = tc_hit {
1805 | |                     index: i,
1806 | |                     patterns: ((1 as libc::c_long) << 1 as libc::c_int) as tc_set,
1807 | |                 };
     | |__________________- unnecessary `let` binding
1808 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1804 ~                 
1805 ~                 tc_hit {
1806 +                     index: i,
1807 +                     patterns: ((1 as libc::c_long) << 1 as libc::c_int) as tc_set,
1808 +                 }
     |

warning: statement with no effect
    --> src/candles.rs:1825:9
     |
1825 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/candles.rs:1830:1
     |
1830 | / pub unsafe extern "C" fn tc_big_black_candle(
1831 | |     mut size: libc::c_int,
1832 | |     mut inputs: *const *const TC_REAL,
1833 | |     mut options: *const tc_config,
...    |
1903 | |     return 0 as libc::c_int;
1904 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/candles.rs:1903:5
     |
1903 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/candles.rs:1856:9
     |
1856 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:1884:17
     |
1880 | /                 let mut init = tc_hit {
1881 | |                     index: i,
1882 | |                     patterns: ((1 as libc::c_long) << 2 as libc::c_int) as tc_set,
1883 | |                 };
     | |__________________- unnecessary `let` binding
1884 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1880 ~                 
1881 ~                 tc_hit {
1882 +                     index: i,
1883 +                     patterns: ((1 as libc::c_long) << 2 as libc::c_int) as tc_set,
1884 +                 }
     |

warning: statement with no effect
    --> src/candles.rs:1901:9
     |
1901 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/candles.rs:1906:1
     |
1906 | / pub unsafe extern "C" fn tc_big_white_candle(
1907 | |     mut size: libc::c_int,
1908 | |     mut inputs: *const *const TC_REAL,
1909 | |     mut options: *const tc_config,
...    |
1979 | |     return 0 as libc::c_int;
1980 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/candles.rs:1979:5
     |
1979 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/candles.rs:1932:9
     |
1932 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:1960:17
     |
1956 | /                 let mut init = tc_hit {
1957 | |                     index: i,
1958 | |                     patterns: ((1 as libc::c_long) << 3 as libc::c_int) as tc_set,
1959 | |                 };
     | |__________________- unnecessary `let` binding
1960 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1956 ~                 
1957 ~                 tc_hit {
1958 +                     index: i,
1959 +                     patterns: ((1 as libc::c_long) << 3 as libc::c_int) as tc_set,
1960 +                 }
     |

warning: statement with no effect
    --> src/candles.rs:1977:9
     |
1977 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/candles.rs:1982:1
     |
1982 | / pub unsafe extern "C" fn tc_black_marubozu(
1983 | |     mut size: libc::c_int,
1984 | |     mut inputs: *const *const TC_REAL,
1985 | |     mut options: *const tc_config,
...    |
2057 | |     return 0 as libc::c_int;
2058 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/candles.rs:2057:5
     |
2057 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/candles.rs:2008:9
     |
2008 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:2038:17
     |
2034 | /                 let mut init = tc_hit {
2035 | |                     index: i,
2036 | |                     patterns: ((1 as libc::c_long) << 4 as libc::c_int) as tc_set,
2037 | |                 };
     | |__________________- unnecessary `let` binding
2038 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
2034 ~                 
2035 ~                 tc_hit {
2036 +                     index: i,
2037 +                     patterns: ((1 as libc::c_long) << 4 as libc::c_int) as tc_set,
2038 +                 }
     |

warning: statement with no effect
    --> src/candles.rs:2055:9
     |
2055 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/candles.rs:2060:1
     |
2060 | / pub unsafe extern "C" fn tc_doji(
2061 | |     mut size: libc::c_int,
2062 | |     mut inputs: *const *const TC_REAL,
2063 | |     mut options: *const tc_config,
...    |
2132 | |     return 0 as libc::c_int;
2133 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/candles.rs:2132:5
     |
2132 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/candles.rs:2086:9
     |
2086 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:2113:17
     |
2109 | /                 let mut init = tc_hit {
2110 | |                     index: i,
2111 | |                     patterns: ((1 as libc::c_long) << 5 as libc::c_int) as tc_set,
2112 | |                 };
     | |__________________- unnecessary `let` binding
2113 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
2109 ~                 
2110 ~                 tc_hit {
2111 +                     index: i,
2112 +                     patterns: ((1 as libc::c_long) << 5 as libc::c_int) as tc_set,
2113 +                 }
     |

warning: statement with no effect
    --> src/candles.rs:2130:9
     |
2130 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/candles.rs:2135:1
     |
2135 | / pub unsafe extern "C" fn tc_dragonfly_doji(
2136 | |     mut size: libc::c_int,
2137 | |     mut inputs: *const *const TC_REAL,
2138 | |     mut options: *const tc_config,
...    |
2209 | |     return 0 as libc::c_int;
2210 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/candles.rs:2209:5
     |
2209 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/candles.rs:2161:9
     |
2161 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:2190:17
     |
2186 | /                 let mut init = tc_hit {
2187 | |                     index: i,
2188 | |                     patterns: ((1 as libc::c_long) << 6 as libc::c_int) as tc_set,
2189 | |                 };
     | |__________________- unnecessary `let` binding
2190 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
2186 ~                 
2187 ~                 tc_hit {
2188 +                     index: i,
2189 +                     patterns: ((1 as libc::c_long) << 6 as libc::c_int) as tc_set,
2190 +                 }
     |

warning: statement with no effect
    --> src/candles.rs:2207:9
     |
2207 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/candles.rs:2212:1
     |
2212 | / pub unsafe extern "C" fn tc_engulfing_bear(
2213 | |     mut size: libc::c_int,
2214 | |     mut inputs: *const *const TC_REAL,
2215 | |     mut options: *const tc_config,
...    |
2287 | |     return 0 as libc::c_int;
2288 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/candles.rs:2287:5
     |
2287 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/candles.rs:2238:9
     |
2238 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:2268:17
     |
2264 | /                 let mut init = tc_hit {
2265 | |                     index: i,
2266 | |                     patterns: ((1 as libc::c_long) << 7 as libc::c_int) as tc_set,
2267 | |                 };
     | |__________________- unnecessary `let` binding
2268 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
2264 ~                 
2265 ~                 tc_hit {
2266 +                     index: i,
2267 +                     patterns: ((1 as libc::c_long) << 7 as libc::c_int) as tc_set,
2268 +                 }
     |

warning: statement with no effect
    --> src/candles.rs:2285:9
     |
2285 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/candles.rs:2290:1
     |
2290 | / pub unsafe extern "C" fn tc_engulfing_bull(
2291 | |     mut size: libc::c_int,
2292 | |     mut inputs: *const *const TC_REAL,
2293 | |     mut options: *const tc_config,
...    |
2365 | |     return 0 as libc::c_int;
2366 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/candles.rs:2365:5
     |
2365 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/candles.rs:2316:9
     |
2316 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:2346:17
     |
2342 | /                 let mut init = tc_hit {
2343 | |                     index: i,
2344 | |                     patterns: ((1 as libc::c_long) << 8 as libc::c_int) as tc_set,
2345 | |                 };
     | |__________________- unnecessary `let` binding
2346 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
2342 ~                 
2343 ~                 tc_hit {
2344 +                     index: i,
2345 +                     patterns: ((1 as libc::c_long) << 8 as libc::c_int) as tc_set,
2346 +                 }
     |

warning: statement with no effect
    --> src/candles.rs:2363:9
     |
2363 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/candles.rs:2368:1
     |
2368 | / pub unsafe extern "C" fn tc_evening_doji_star(
2369 | |     mut size: libc::c_int,
2370 | |     mut inputs: *const *const TC_REAL,
2371 | |     mut options: *const tc_config,
...    |
2478 | |     return 0 as libc::c_int;
2479 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/candles.rs:2478:5
     |
2478 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/candles.rs:2394:9
     |
2394 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:2459:17
     |
2455 | /                 let mut init = tc_hit {
2456 | |                     index: i,
2457 | |                     patterns: ((1 as libc::c_long) << 9 as libc::c_int) as tc_set,
2458 | |                 };
     | |__________________- unnecessary `let` binding
2459 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
2455 ~                 
2456 ~                 tc_hit {
2457 +                     index: i,
2458 +                     patterns: ((1 as libc::c_long) << 9 as libc::c_int) as tc_set,
2459 +                 }
     |

warning: statement with no effect
    --> src/candles.rs:2476:9
     |
2476 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/candles.rs:2481:1
     |
2481 | / pub unsafe extern "C" fn tc_evening_star(
2482 | |     mut size: libc::c_int,
2483 | |     mut inputs: *const *const TC_REAL,
2484 | |     mut options: *const tc_config,
...    |
2591 | |     return 0 as libc::c_int;
2592 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/candles.rs:2591:5
     |
2591 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/candles.rs:2507:9
     |
2507 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:2572:17
     |
2568 | /                 let mut init = tc_hit {
2569 | |                     index: i,
2570 | |                     patterns: ((1 as libc::c_long) << 10 as libc::c_int) as tc_set,
2571 | |                 };
     | |__________________- unnecessary `let` binding
2572 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
2568 ~                 
2569 ~                 tc_hit {
2570 +                     index: i,
2571 +                     patterns: ((1 as libc::c_long) << 10 as libc::c_int) as tc_set,
2572 +                 }
     |

warning: statement with no effect
    --> src/candles.rs:2589:9
     |
2589 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/candles.rs:2594:1
     |
2594 | / pub unsafe extern "C" fn tc_four_price_doji(
2595 | |     mut size: libc::c_int,
2596 | |     mut inputs: *const *const TC_REAL,
2597 | |     mut options: *const tc_config,
...    |
2668 | |     return 0 as libc::c_int;
2669 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/candles.rs:2668:5
     |
2668 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/candles.rs:2620:9
     |
2620 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:2649:17
     |
2645 | /                 let mut init = tc_hit {
2646 | |                     index: i,
2647 | |                     patterns: ((1 as libc::c_long) << 11 as libc::c_int) as tc_set,
2648 | |                 };
     | |__________________- unnecessary `let` binding
2649 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
2645 ~                 
2646 ~                 tc_hit {
2647 +                     index: i,
2648 +                     patterns: ((1 as libc::c_long) << 11 as libc::c_int) as tc_set,
2649 +                 }
     |

warning: statement with no effect
    --> src/candles.rs:2666:9
     |
2666 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/candles.rs:2671:1
     |
2671 | / pub unsafe extern "C" fn tc_gravestone_doji(
2672 | |     mut size: libc::c_int,
2673 | |     mut inputs: *const *const TC_REAL,
2674 | |     mut options: *const tc_config,
...    |
2745 | |     return 0 as libc::c_int;
2746 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/candles.rs:2745:5
     |
2745 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/candles.rs:2697:9
     |
2697 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:2726:17
     |
2722 | /                 let mut init = tc_hit {
2723 | |                     index: i,
2724 | |                     patterns: ((1 as libc::c_long) << 12 as libc::c_int) as tc_set,
2725 | |                 };
     | |__________________- unnecessary `let` binding
2726 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
2722 ~                 
2723 ~                 tc_hit {
2724 +                     index: i,
2725 +                     patterns: ((1 as libc::c_long) << 12 as libc::c_int) as tc_set,
2726 +                 }
     |

warning: statement with no effect
    --> src/candles.rs:2743:9
     |
2743 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/candles.rs:2748:1
     |
2748 | / pub unsafe extern "C" fn tc_hammer(
2749 | |     mut size: libc::c_int,
2750 | |     mut inputs: *const *const TC_REAL,
2751 | |     mut options: *const tc_config,
...    |
2830 | |     return 0 as libc::c_int;
2831 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/candles.rs:2830:5
     |
2830 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/candles.rs:2774:9
     |
2774 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:2811:17
     |
2807 | /                 let mut init = tc_hit {
2808 | |                     index: i,
2809 | |                     patterns: ((1 as libc::c_long) << 13 as libc::c_int) as tc_set,
2810 | |                 };
     | |__________________- unnecessary `let` binding
2811 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
2807 ~                 
2808 ~                 tc_hit {
2809 +                     index: i,
2810 +                     patterns: ((1 as libc::c_long) << 13 as libc::c_int) as tc_set,
2811 +                 }
     |

warning: statement with no effect
    --> src/candles.rs:2828:9
     |
2828 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/candles.rs:2833:1
     |
2833 | / pub unsafe extern "C" fn tc_hanging_man(
2834 | |     mut size: libc::c_int,
2835 | |     mut inputs: *const *const TC_REAL,
2836 | |     mut options: *const tc_config,
...    |
2915 | |     return 0 as libc::c_int;
2916 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/candles.rs:2915:5
     |
2915 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/candles.rs:2859:9
     |
2859 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:2896:17
     |
2892 | /                 let mut init = tc_hit {
2893 | |                     index: i,
2894 | |                     patterns: ((1 as libc::c_long) << 14 as libc::c_int) as tc_set,
2895 | |                 };
     | |__________________- unnecessary `let` binding
2896 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
2892 ~                 
2893 ~                 tc_hit {
2894 +                     index: i,
2895 +                     patterns: ((1 as libc::c_long) << 14 as libc::c_int) as tc_set,
2896 +                 }
     |

warning: statement with no effect
    --> src/candles.rs:2913:9
     |
2913 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/candles.rs:2918:1
     |
2918 | / pub unsafe extern "C" fn tc_inverted_hammer(
2919 | |     mut size: libc::c_int,
2920 | |     mut inputs: *const *const TC_REAL,
2921 | |     mut options: *const tc_config,
...    |
3005 | |     return 0 as libc::c_int;
3006 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/candles.rs:3005:5
     |
3005 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/candles.rs:2944:9
     |
2944 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:2986:17
     |
2982 | /                 let mut init = tc_hit {
2983 | |                     index: i,
2984 | |                     patterns: ((1 as libc::c_long) << 15 as libc::c_int) as tc_set,
2985 | |                 };
     | |__________________- unnecessary `let` binding
2986 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
2982 ~                 
2983 ~                 tc_hit {
2984 +                     index: i,
2985 +                     patterns: ((1 as libc::c_long) << 15 as libc::c_int) as tc_set,
2986 +                 }
     |

warning: statement with no effect
    --> src/candles.rs:3003:9
     |
3003 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/candles.rs:3008:1
     |
3008 | / pub unsafe extern "C" fn tc_long_legged_doji(
3009 | |     mut size: libc::c_int,
3010 | |     mut inputs: *const *const TC_REAL,
3011 | |     mut options: *const tc_config,
...    |
3082 | |     return 0 as libc::c_int;
3083 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/candles.rs:3082:5
     |
3082 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/candles.rs:3034:9
     |
3034 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:3063:17
     |
3059 | /                 let mut init = tc_hit {
3060 | |                     index: i,
3061 | |                     patterns: ((1 as libc::c_long) << 16 as libc::c_int) as tc_set,
3062 | |                 };
     | |__________________- unnecessary `let` binding
3063 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
3059 ~                 
3060 ~                 tc_hit {
3061 +                     index: i,
3062 +                     patterns: ((1 as libc::c_long) << 16 as libc::c_int) as tc_set,
3063 +                 }
     |

warning: statement with no effect
    --> src/candles.rs:3080:9
     |
3080 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/candles.rs:3085:1
     |
3085 | / pub unsafe extern "C" fn tc_marubozu(
3086 | |     mut size: libc::c_int,
3087 | |     mut inputs: *const *const TC_REAL,
3088 | |     mut options: *const tc_config,
...    |
3159 | |     return 0 as libc::c_int;
3160 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/candles.rs:3159:5
     |
3159 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/candles.rs:3111:9
     |
3111 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:3140:17
     |
3136 | /                 let mut init = tc_hit {
3137 | |                     index: i,
3138 | |                     patterns: ((1 as libc::c_long) << 17 as libc::c_int) as tc_set,
3139 | |                 };
     | |__________________- unnecessary `let` binding
3140 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
3136 ~                 
3137 ~                 tc_hit {
3138 +                     index: i,
3139 +                     patterns: ((1 as libc::c_long) << 17 as libc::c_int) as tc_set,
3140 +                 }
     |

warning: statement with no effect
    --> src/candles.rs:3157:9
     |
3157 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/candles.rs:3162:1
     |
3162 | / pub unsafe extern "C" fn tc_morning_doji_star(
3163 | |     mut size: libc::c_int,
3164 | |     mut inputs: *const *const TC_REAL,
3165 | |     mut options: *const tc_config,
...    |
3272 | |     return 0 as libc::c_int;
3273 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/candles.rs:3272:5
     |
3272 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/candles.rs:3188:9
     |
3188 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:3253:17
     |
3249 | /                 let mut init = tc_hit {
3250 | |                     index: i,
3251 | |                     patterns: ((1 as libc::c_long) << 18 as libc::c_int) as tc_set,
3252 | |                 };
     | |__________________- unnecessary `let` binding
3253 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
3249 ~                 
3250 ~                 tc_hit {
3251 +                     index: i,
3252 +                     patterns: ((1 as libc::c_long) << 18 as libc::c_int) as tc_set,
3253 +                 }
     |

warning: statement with no effect
    --> src/candles.rs:3270:9
     |
3270 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/candles.rs:3275:1
     |
3275 | / pub unsafe extern "C" fn tc_morning_star(
3276 | |     mut size: libc::c_int,
3277 | |     mut inputs: *const *const TC_REAL,
3278 | |     mut options: *const tc_config,
...    |
3385 | |     return 0 as libc::c_int;
3386 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/candles.rs:3385:5
     |
3385 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/candles.rs:3301:9
     |
3301 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:3366:17
     |
3362 | /                 let mut init = tc_hit {
3363 | |                     index: i,
3364 | |                     patterns: ((1 as libc::c_long) << 19 as libc::c_int) as tc_set,
3365 | |                 };
     | |__________________- unnecessary `let` binding
3366 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
3362 ~                 
3363 ~                 tc_hit {
3364 +                     index: i,
3365 +                     patterns: ((1 as libc::c_long) << 19 as libc::c_int) as tc_set,
3366 +                 }
     |

warning: statement with no effect
    --> src/candles.rs:3383:9
     |
3383 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/candles.rs:3388:1
     |
3388 | / pub unsafe extern "C" fn tc_shooting_star(
3389 | |     mut size: libc::c_int,
3390 | |     mut inputs: *const *const TC_REAL,
3391 | |     mut options: *const tc_config,
...    |
3475 | |     return 0 as libc::c_int;
3476 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/candles.rs:3475:5
     |
3475 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/candles.rs:3414:9
     |
3414 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:3456:17
     |
3452 | /                 let mut init = tc_hit {
3453 | |                     index: i,
3454 | |                     patterns: ((1 as libc::c_long) << 20 as libc::c_int) as tc_set,
3455 | |                 };
     | |__________________- unnecessary `let` binding
3456 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
3452 ~                 
3453 ~                 tc_hit {
3454 +                     index: i,
3455 +                     patterns: ((1 as libc::c_long) << 20 as libc::c_int) as tc_set,
3456 +                 }
     |

warning: statement with no effect
    --> src/candles.rs:3473:9
     |
3473 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/candles.rs:3478:1
     |
3478 | / pub unsafe extern "C" fn tc_spinning_top(
3479 | |     mut size: libc::c_int,
3480 | |     mut inputs: *const *const TC_REAL,
3481 | |     mut options: *const tc_config,
...    |
3554 | |     return 0 as libc::c_int;
3555 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/candles.rs:3554:5
     |
3554 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/candles.rs:3504:9
     |
3504 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:3535:17
     |
3531 | /                 let mut init = tc_hit {
3532 | |                     index: i,
3533 | |                     patterns: ((1 as libc::c_long) << 21 as libc::c_int) as tc_set,
3534 | |                 };
     | |__________________- unnecessary `let` binding
3535 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
3531 ~                 
3532 ~                 tc_hit {
3533 +                     index: i,
3534 +                     patterns: ((1 as libc::c_long) << 21 as libc::c_int) as tc_set,
3535 +                 }
     |

warning: statement with no effect
    --> src/candles.rs:3552:9
     |
3552 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/candles.rs:3557:1
     |
3557 | / pub unsafe extern "C" fn tc_star(
3558 | |     mut size: libc::c_int,
3559 | |     mut inputs: *const *const TC_REAL,
3560 | |     mut options: *const tc_config,
...    |
3631 | |     return 0 as libc::c_int;
3632 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/candles.rs:3631:5
     |
3631 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/candles.rs:3583:9
     |
3583 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:3612:17
     |
3608 | /                 let mut init = tc_hit {
3609 | |                     index: i,
3610 | |                     patterns: ((1 as libc::c_long) << 22 as libc::c_int) as tc_set,
3611 | |                 };
     | |__________________- unnecessary `let` binding
3612 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
3608 ~                 
3609 ~                 tc_hit {
3610 +                     index: i,
3611 +                     patterns: ((1 as libc::c_long) << 22 as libc::c_int) as tc_set,
3612 +                 }
     |

warning: statement with no effect
    --> src/candles.rs:3629:9
     |
3629 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/candles.rs:3634:1
     |
3634 | / pub unsafe extern "C" fn tc_three_black_crows(
3635 | |     mut size: libc::c_int,
3636 | |     mut inputs: *const *const TC_REAL,
3637 | |     mut options: *const tc_config,
...    |
3744 | |     return 0 as libc::c_int;
3745 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/candles.rs:3744:5
     |
3744 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/candles.rs:3660:9
     |
3660 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:3725:17
     |
3721 | /                 let mut init = tc_hit {
3722 | |                     index: i,
3723 | |                     patterns: ((1 as libc::c_long) << 23 as libc::c_int) as tc_set,
3724 | |                 };
     | |__________________- unnecessary `let` binding
3725 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
3721 ~                 
3722 ~                 tc_hit {
3723 +                     index: i,
3724 +                     patterns: ((1 as libc::c_long) << 23 as libc::c_int) as tc_set,
3725 +                 }
     |

warning: statement with no effect
    --> src/candles.rs:3742:9
     |
3742 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/candles.rs:3747:1
     |
3747 | / pub unsafe extern "C" fn tc_three_white_soldiers(
3748 | |     mut size: libc::c_int,
3749 | |     mut inputs: *const *const TC_REAL,
3750 | |     mut options: *const tc_config,
...    |
3857 | |     return 0 as libc::c_int;
3858 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/candles.rs:3857:5
     |
3857 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/candles.rs:3773:9
     |
3773 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:3838:17
     |
3834 | /                 let mut init = tc_hit {
3835 | |                     index: i,
3836 | |                     patterns: ((1 as libc::c_long) << 24 as libc::c_int) as tc_set,
3837 | |                 };
     | |__________________- unnecessary `let` binding
3838 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
3834 ~                 
3835 ~                 tc_hit {
3836 +                     index: i,
3837 +                     patterns: ((1 as libc::c_long) << 24 as libc::c_int) as tc_set,
3838 +                 }
     |

warning: statement with no effect
    --> src/candles.rs:3855:9
     |
3855 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/candles.rs:3860:1
     |
3860 | / pub unsafe extern "C" fn tc_white_marubozu(
3861 | |     mut size: libc::c_int,
3862 | |     mut inputs: *const *const TC_REAL,
3863 | |     mut options: *const tc_config,
...    |
3935 | |     return 0 as libc::c_int;
3936 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/candles.rs:3935:5
     |
3935 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/candles.rs:3886:9
     |
3886 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
    --> src/candles.rs:3916:17
     |
3912 | /                 let mut init = tc_hit {
3913 | |                     index: i,
3914 | |                     patterns: ((1 as libc::c_long) << 25 as libc::c_int) as tc_set,
3915 | |                 };
     | |__________________- unnecessary `let` binding
3916 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
3912 ~                 
3913 ~                 tc_hit {
3914 +                     index: i,
3915 +                     patterns: ((1 as libc::c_long) << 25 as libc::c_int) as tc_set,
3916 +                 }
     |

warning: statement with no effect
    --> src/candles.rs:3933:9
     |
3933 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/example1.rs:20:1
   |
20 | / pub unsafe extern "C" fn print_array(mut p: *const libc::c_double, size: libc::c_int) {
21 | |     let mut i: libc::c_int = 0;
22 | |     i = 0 as libc::c_int;
23 | |     while i < size {
...  |
31 | |     printf(b"\n\0" as *const u8 as *const libc::c_char);
32 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: statement with no effect
  --> src/example1.rs:29:9
   |
29 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unneeded `return` statement
   --> src/example1.rs:102:5
    |
102 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
   --> src/example2.rs:122:5
    |
122 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/example2.rs:83:13
   |
83 |             i;
   |             ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/example2.rs:99:13
   |
99 |             i;
   |             ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/example2.rs:115:13
    |
115 |             i;
    |             ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/example2.rs:120:9
    |
120 |         info;
    |         ^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators_rs.rs:822:1
    |
822 | / pub unsafe extern "C" fn ti_version() -> *const libc::c_char {
823 | |     return b"0.9.2\0" as *const u8 as *const libc::c_char;
824 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/indicators_rs.rs:823:5
    |
823 |     return b"0.9.2\0" as *const u8 as *const libc::c_char;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `b"0.9.2\0" as *const u8 as *const libc::c_char`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators_rs.rs:826:1
    |
826 | / pub unsafe extern "C" fn ti_build() -> libc::c_long {
827 | |     return 1743602909 as libc::c_int as libc::c_long;
828 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/indicators_rs.rs:827:5
    |
827 |     return 1743602909 as libc::c_int as libc::c_long;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1743602909 as libc::c_int as libc::c_long`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators_rs.rs:830:1
    |
830 | / pub unsafe extern "C" fn ti_indicator_count() -> libc::c_int {
831 | |     return 104 as libc::c_int;
832 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/indicators_rs.rs:831:5
    |
831 |     return 104 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `104 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: returning the result of a `let` binding from a block
   --> src/indicators_rs.rs:917:13
    |
837 | /             let mut init = ti_indicator_info {
838 | |                 name: b"abs\0" as *const u8 as *const libc::c_char,
839 | |                 full_name: b"Vector Absolute Value\0" as *const u8
840 | |                     as *const libc::c_char,
...   |
915 | |                 stream_free: None,
916 | |             };
    | |______________- unnecessary `let` binding
917 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
837 ~             
838 ~             ti_indicator_info {
839 +                 name: b"abs\0" as *const u8 as *const libc::c_char,
840 +                 full_name: b"Vector Absolute Value\0" as *const u8
841 +                     as *const libc::c_char,
842 +                 start: Some(
843 +                     ti_abs_start
844 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
845 +                 ),
846 +                 indicator: Some(
847 +                     ti_abs
848 +                         as unsafe extern "C" fn(
849 +                             libc::c_int,
850 +                             *const *const libc::c_double,
851 +                             *const libc::c_double,
852 +                             *const *mut libc::c_double,
853 +                         ) -> libc::c_int,
854 +                 ),
855 +                 indicator_ref: None,
856 +                 type_0: 4 as libc::c_int,
857 +                 inputs: 1 as libc::c_int,
858 +                 options: 0 as libc::c_int,
859 +                 outputs: 1 as libc::c_int,
860 +                 input_names: [
861 +                     b"real\0" as *const u8 as *const libc::c_char,
862 +                     0 as *const libc::c_char,
863 +                     0 as *const libc::c_char,
864 +                     0 as *const libc::c_char,
865 +                     0 as *const libc::c_char,
866 +                     0 as *const libc::c_char,
867 +                     0 as *const libc::c_char,
868 +                     0 as *const libc::c_char,
869 +                     0 as *const libc::c_char,
870 +                     0 as *const libc::c_char,
871 +                     0 as *const libc::c_char,
872 +                     0 as *const libc::c_char,
873 +                     0 as *const libc::c_char,
874 +                     0 as *const libc::c_char,
875 +                     0 as *const libc::c_char,
876 +                     0 as *const libc::c_char,
877 +                 ],
878 +                 option_names: [
879 +                     b"\0" as *const u8 as *const libc::c_char,
880 +                     0 as *const libc::c_char,
881 +                     0 as *const libc::c_char,
882 +                     0 as *const libc::c_char,
883 +                     0 as *const libc::c_char,
884 +                     0 as *const libc::c_char,
885 +                     0 as *const libc::c_char,
886 +                     0 as *const libc::c_char,
887 +                     0 as *const libc::c_char,
888 +                     0 as *const libc::c_char,
889 +                     0 as *const libc::c_char,
890 +                     0 as *const libc::c_char,
891 +                     0 as *const libc::c_char,
892 +                     0 as *const libc::c_char,
893 +                     0 as *const libc::c_char,
894 +                     0 as *const libc::c_char,
895 +                 ],
896 +                 output_names: [
897 +                     b"abs\0" as *const u8 as *const libc::c_char,
898 +                     0 as *const libc::c_char,
899 +                     0 as *const libc::c_char,
900 +                     0 as *const libc::c_char,
901 +                     0 as *const libc::c_char,
902 +                     0 as *const libc::c_char,
903 +                     0 as *const libc::c_char,
904 +                     0 as *const libc::c_char,
905 +                     0 as *const libc::c_char,
906 +                     0 as *const libc::c_char,
907 +                     0 as *const libc::c_char,
908 +                     0 as *const libc::c_char,
909 +                     0 as *const libc::c_char,
910 +                     0 as *const libc::c_char,
911 +                     0 as *const libc::c_char,
912 +                     0 as *const libc::c_char,
913 +                 ],
914 +                 stream_new: None,
915 +                 stream_run: None,
916 +                 stream_free: None,
917 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/indicators_rs.rs:999:13
    |
920 | /             let mut init = ti_indicator_info {
921 | |                 name: b"acos\0" as *const u8 as *const libc::c_char,
922 | |                 full_name: b"Vector Arccosine\0" as *const u8 as *const libc::c_char,
923 | |                 start: Some(
...   |
997 | |                 stream_free: None,
998 | |             };
    | |______________- unnecessary `let` binding
999 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
920 ~             
921 ~             ti_indicator_info {
922 +                 name: b"acos\0" as *const u8 as *const libc::c_char,
923 +                 full_name: b"Vector Arccosine\0" as *const u8 as *const libc::c_char,
924 +                 start: Some(
925 +                     ti_acos_start
926 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
927 +                 ),
928 +                 indicator: Some(
929 +                     ti_acos
930 +                         as unsafe extern "C" fn(
931 +                             libc::c_int,
932 +                             *const *const libc::c_double,
933 +                             *const libc::c_double,
934 +                             *const *mut libc::c_double,
935 +                         ) -> libc::c_int,
936 +                 ),
937 +                 indicator_ref: None,
938 +                 type_0: 4 as libc::c_int,
939 +                 inputs: 1 as libc::c_int,
940 +                 options: 0 as libc::c_int,
941 +                 outputs: 1 as libc::c_int,
942 +                 input_names: [
943 +                     b"real\0" as *const u8 as *const libc::c_char,
944 +                     0 as *const libc::c_char,
945 +                     0 as *const libc::c_char,
946 +                     0 as *const libc::c_char,
947 +                     0 as *const libc::c_char,
948 +                     0 as *const libc::c_char,
949 +                     0 as *const libc::c_char,
950 +                     0 as *const libc::c_char,
951 +                     0 as *const libc::c_char,
952 +                     0 as *const libc::c_char,
953 +                     0 as *const libc::c_char,
954 +                     0 as *const libc::c_char,
955 +                     0 as *const libc::c_char,
956 +                     0 as *const libc::c_char,
957 +                     0 as *const libc::c_char,
958 +                     0 as *const libc::c_char,
959 +                 ],
960 +                 option_names: [
961 +                     b"\0" as *const u8 as *const libc::c_char,
962 +                     0 as *const libc::c_char,
963 +                     0 as *const libc::c_char,
964 +                     0 as *const libc::c_char,
965 +                     0 as *const libc::c_char,
966 +                     0 as *const libc::c_char,
967 +                     0 as *const libc::c_char,
968 +                     0 as *const libc::c_char,
969 +                     0 as *const libc::c_char,
970 +                     0 as *const libc::c_char,
971 +                     0 as *const libc::c_char,
972 +                     0 as *const libc::c_char,
973 +                     0 as *const libc::c_char,
974 +                     0 as *const libc::c_char,
975 +                     0 as *const libc::c_char,
976 +                     0 as *const libc::c_char,
977 +                 ],
978 +                 output_names: [
979 +                     b"acos\0" as *const u8 as *const libc::c_char,
980 +                     0 as *const libc::c_char,
981 +                     0 as *const libc::c_char,
982 +                     0 as *const libc::c_char,
983 +                     0 as *const libc::c_char,
984 +                     0 as *const libc::c_char,
985 +                     0 as *const libc::c_char,
986 +                     0 as *const libc::c_char,
987 +                     0 as *const libc::c_char,
988 +                     0 as *const libc::c_char,
989 +                     0 as *const libc::c_char,
990 +                     0 as *const libc::c_char,
991 +                     0 as *const libc::c_char,
992 +                     0 as *const libc::c_char,
993 +                     0 as *const libc::c_char,
994 +                     0 as *const libc::c_char,
995 +                 ],
996 +                 stream_new: None,
997 +                 stream_run: None,
998 +                 stream_free: None,
999 +             }
    |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:1082:13
     |
1002 | /             let mut init = ti_indicator_info {
1003 | |                 name: b"ad\0" as *const u8 as *const libc::c_char,
1004 | |                 full_name: b"Accumulation/Distribution Line\0" as *const u8
1005 | |                     as *const libc::c_char,
...    |
1080 | |                 stream_free: None,
1081 | |             };
     | |______________- unnecessary `let` binding
1082 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1002 ~             
1003 ~             ti_indicator_info {
1004 +                 name: b"ad\0" as *const u8 as *const libc::c_char,
1005 +                 full_name: b"Accumulation/Distribution Line\0" as *const u8
1006 +                     as *const libc::c_char,
1007 +                 start: Some(
1008 +                     ti_ad_start
1009 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
1010 +                 ),
1011 +                 indicator: Some(
1012 +                     ti_ad
1013 +                         as unsafe extern "C" fn(
1014 +                             libc::c_int,
1015 +                             *const *const libc::c_double,
1016 +                             *const libc::c_double,
1017 +                             *const *mut libc::c_double,
1018 +                         ) -> libc::c_int,
1019 +                 ),
1020 +                 indicator_ref: None,
1021 +                 type_0: 2 as libc::c_int,
1022 +                 inputs: 4 as libc::c_int,
1023 +                 options: 0 as libc::c_int,
1024 +                 outputs: 1 as libc::c_int,
1025 +                 input_names: [
1026 +                     b"high\0" as *const u8 as *const libc::c_char,
1027 +                     b"low\0" as *const u8 as *const libc::c_char,
1028 +                     b"close\0" as *const u8 as *const libc::c_char,
1029 +                     b"volume\0" as *const u8 as *const libc::c_char,
1030 +                     0 as *const libc::c_char,
1031 +                     0 as *const libc::c_char,
1032 +                     0 as *const libc::c_char,
1033 +                     0 as *const libc::c_char,
1034 +                     0 as *const libc::c_char,
1035 +                     0 as *const libc::c_char,
1036 +                     0 as *const libc::c_char,
1037 +                     0 as *const libc::c_char,
1038 +                     0 as *const libc::c_char,
1039 +                     0 as *const libc::c_char,
1040 +                     0 as *const libc::c_char,
1041 +                     0 as *const libc::c_char,
1042 +                 ],
1043 +                 option_names: [
1044 +                     b"\0" as *const u8 as *const libc::c_char,
1045 +                     0 as *const libc::c_char,
1046 +                     0 as *const libc::c_char,
1047 +                     0 as *const libc::c_char,
1048 +                     0 as *const libc::c_char,
1049 +                     0 as *const libc::c_char,
1050 +                     0 as *const libc::c_char,
1051 +                     0 as *const libc::c_char,
1052 +                     0 as *const libc::c_char,
1053 +                     0 as *const libc::c_char,
1054 +                     0 as *const libc::c_char,
1055 +                     0 as *const libc::c_char,
1056 +                     0 as *const libc::c_char,
1057 +                     0 as *const libc::c_char,
1058 +                     0 as *const libc::c_char,
1059 +                     0 as *const libc::c_char,
1060 +                 ],
1061 +                 output_names: [
1062 +                     b"ad\0" as *const u8 as *const libc::c_char,
1063 +                     0 as *const libc::c_char,
1064 +                     0 as *const libc::c_char,
1065 +                     0 as *const libc::c_char,
1066 +                     0 as *const libc::c_char,
1067 +                     0 as *const libc::c_char,
1068 +                     0 as *const libc::c_char,
1069 +                     0 as *const libc::c_char,
1070 +                     0 as *const libc::c_char,
1071 +                     0 as *const libc::c_char,
1072 +                     0 as *const libc::c_char,
1073 +                     0 as *const libc::c_char,
1074 +                     0 as *const libc::c_char,
1075 +                     0 as *const libc::c_char,
1076 +                     0 as *const libc::c_char,
1077 +                     0 as *const libc::c_char,
1078 +                 ],
1079 +                 stream_new: None,
1080 +                 stream_run: None,
1081 +                 stream_free: None,
1082 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:1164:13
     |
1085 | /             let mut init = ti_indicator_info {
1086 | |                 name: b"add\0" as *const u8 as *const libc::c_char,
1087 | |                 full_name: b"Vector Addition\0" as *const u8 as *const libc::c_char,
1088 | |                 start: Some(
...    |
1162 | |                 stream_free: None,
1163 | |             };
     | |______________- unnecessary `let` binding
1164 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1085 ~             
1086 ~             ti_indicator_info {
1087 +                 name: b"add\0" as *const u8 as *const libc::c_char,
1088 +                 full_name: b"Vector Addition\0" as *const u8 as *const libc::c_char,
1089 +                 start: Some(
1090 +                     ti_add_start
1091 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
1092 +                 ),
1093 +                 indicator: Some(
1094 +                     ti_add
1095 +                         as unsafe extern "C" fn(
1096 +                             libc::c_int,
1097 +                             *const *const libc::c_double,
1098 +                             *const libc::c_double,
1099 +                             *const *mut libc::c_double,
1100 +                         ) -> libc::c_int,
1101 +                 ),
1102 +                 indicator_ref: None,
1103 +                 type_0: 4 as libc::c_int,
1104 +                 inputs: 2 as libc::c_int,
1105 +                 options: 0 as libc::c_int,
1106 +                 outputs: 1 as libc::c_int,
1107 +                 input_names: [
1108 +                     b"real\0" as *const u8 as *const libc::c_char,
1109 +                     b"real\0" as *const u8 as *const libc::c_char,
1110 +                     0 as *const libc::c_char,
1111 +                     0 as *const libc::c_char,
1112 +                     0 as *const libc::c_char,
1113 +                     0 as *const libc::c_char,
1114 +                     0 as *const libc::c_char,
1115 +                     0 as *const libc::c_char,
1116 +                     0 as *const libc::c_char,
1117 +                     0 as *const libc::c_char,
1118 +                     0 as *const libc::c_char,
1119 +                     0 as *const libc::c_char,
1120 +                     0 as *const libc::c_char,
1121 +                     0 as *const libc::c_char,
1122 +                     0 as *const libc::c_char,
1123 +                     0 as *const libc::c_char,
1124 +                 ],
1125 +                 option_names: [
1126 +                     b"\0" as *const u8 as *const libc::c_char,
1127 +                     0 as *const libc::c_char,
1128 +                     0 as *const libc::c_char,
1129 +                     0 as *const libc::c_char,
1130 +                     0 as *const libc::c_char,
1131 +                     0 as *const libc::c_char,
1132 +                     0 as *const libc::c_char,
1133 +                     0 as *const libc::c_char,
1134 +                     0 as *const libc::c_char,
1135 +                     0 as *const libc::c_char,
1136 +                     0 as *const libc::c_char,
1137 +                     0 as *const libc::c_char,
1138 +                     0 as *const libc::c_char,
1139 +                     0 as *const libc::c_char,
1140 +                     0 as *const libc::c_char,
1141 +                     0 as *const libc::c_char,
1142 +                 ],
1143 +                 output_names: [
1144 +                     b"add\0" as *const u8 as *const libc::c_char,
1145 +                     0 as *const libc::c_char,
1146 +                     0 as *const libc::c_char,
1147 +                     0 as *const libc::c_char,
1148 +                     0 as *const libc::c_char,
1149 +                     0 as *const libc::c_char,
1150 +                     0 as *const libc::c_char,
1151 +                     0 as *const libc::c_char,
1152 +                     0 as *const libc::c_char,
1153 +                     0 as *const libc::c_char,
1154 +                     0 as *const libc::c_char,
1155 +                     0 as *const libc::c_char,
1156 +                     0 as *const libc::c_char,
1157 +                     0 as *const libc::c_char,
1158 +                     0 as *const libc::c_char,
1159 +                     0 as *const libc::c_char,
1160 +                 ],
1161 +                 stream_new: None,
1162 +                 stream_run: None,
1163 +                 stream_free: None,
1164 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:1247:13
     |
1167 | /             let mut init = ti_indicator_info {
1168 | |                 name: b"adosc\0" as *const u8 as *const libc::c_char,
1169 | |                 full_name: b"Accumulation/Distribution Oscillator\0" as *const u8
1170 | |                     as *const libc::c_char,
...    |
1245 | |                 stream_free: None,
1246 | |             };
     | |______________- unnecessary `let` binding
1247 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1167 ~             
1168 ~             ti_indicator_info {
1169 +                 name: b"adosc\0" as *const u8 as *const libc::c_char,
1170 +                 full_name: b"Accumulation/Distribution Oscillator\0" as *const u8
1171 +                     as *const libc::c_char,
1172 +                 start: Some(
1173 +                     ti_adosc_start
1174 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
1175 +                 ),
1176 +                 indicator: Some(
1177 +                     ti_adosc
1178 +                         as unsafe extern "C" fn(
1179 +                             libc::c_int,
1180 +                             *const *const libc::c_double,
1181 +                             *const libc::c_double,
1182 +                             *const *mut libc::c_double,
1183 +                         ) -> libc::c_int,
1184 +                 ),
1185 +                 indicator_ref: None,
1186 +                 type_0: 2 as libc::c_int,
1187 +                 inputs: 4 as libc::c_int,
1188 +                 options: 2 as libc::c_int,
1189 +                 outputs: 1 as libc::c_int,
1190 +                 input_names: [
1191 +                     b"high\0" as *const u8 as *const libc::c_char,
1192 +                     b"low\0" as *const u8 as *const libc::c_char,
1193 +                     b"close\0" as *const u8 as *const libc::c_char,
1194 +                     b"volume\0" as *const u8 as *const libc::c_char,
1195 +                     0 as *const libc::c_char,
1196 +                     0 as *const libc::c_char,
1197 +                     0 as *const libc::c_char,
1198 +                     0 as *const libc::c_char,
1199 +                     0 as *const libc::c_char,
1200 +                     0 as *const libc::c_char,
1201 +                     0 as *const libc::c_char,
1202 +                     0 as *const libc::c_char,
1203 +                     0 as *const libc::c_char,
1204 +                     0 as *const libc::c_char,
1205 +                     0 as *const libc::c_char,
1206 +                     0 as *const libc::c_char,
1207 +                 ],
1208 +                 option_names: [
1209 +                     b"short_period\0" as *const u8 as *const libc::c_char,
1210 +                     b"long_period\0" as *const u8 as *const libc::c_char,
1211 +                     0 as *const libc::c_char,
1212 +                     0 as *const libc::c_char,
1213 +                     0 as *const libc::c_char,
1214 +                     0 as *const libc::c_char,
1215 +                     0 as *const libc::c_char,
1216 +                     0 as *const libc::c_char,
1217 +                     0 as *const libc::c_char,
1218 +                     0 as *const libc::c_char,
1219 +                     0 as *const libc::c_char,
1220 +                     0 as *const libc::c_char,
1221 +                     0 as *const libc::c_char,
1222 +                     0 as *const libc::c_char,
1223 +                     0 as *const libc::c_char,
1224 +                     0 as *const libc::c_char,
1225 +                 ],
1226 +                 output_names: [
1227 +                     b"adosc\0" as *const u8 as *const libc::c_char,
1228 +                     0 as *const libc::c_char,
1229 +                     0 as *const libc::c_char,
1230 +                     0 as *const libc::c_char,
1231 +                     0 as *const libc::c_char,
1232 +                     0 as *const libc::c_char,
1233 +                     0 as *const libc::c_char,
1234 +                     0 as *const libc::c_char,
1235 +                     0 as *const libc::c_char,
1236 +                     0 as *const libc::c_char,
1237 +                     0 as *const libc::c_char,
1238 +                     0 as *const libc::c_char,
1239 +                     0 as *const libc::c_char,
1240 +                     0 as *const libc::c_char,
1241 +                     0 as *const libc::c_char,
1242 +                     0 as *const libc::c_char,
1243 +                 ],
1244 +                 stream_new: None,
1245 +                 stream_run: None,
1246 +                 stream_free: None,
1247 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:1330:13
     |
1250 | /             let mut init = ti_indicator_info {
1251 | |                 name: b"adx\0" as *const u8 as *const libc::c_char,
1252 | |                 full_name: b"Average Directional Movement Index\0" as *const u8
1253 | |                     as *const libc::c_char,
...    |
1328 | |                 stream_free: None,
1329 | |             };
     | |______________- unnecessary `let` binding
1330 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1250 ~             
1251 ~             ti_indicator_info {
1252 +                 name: b"adx\0" as *const u8 as *const libc::c_char,
1253 +                 full_name: b"Average Directional Movement Index\0" as *const u8
1254 +                     as *const libc::c_char,
1255 +                 start: Some(
1256 +                     ti_adx_start
1257 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
1258 +                 ),
1259 +                 indicator: Some(
1260 +                     ti_adx
1261 +                         as unsafe extern "C" fn(
1262 +                             libc::c_int,
1263 +                             *const *const libc::c_double,
1264 +                             *const libc::c_double,
1265 +                             *const *mut libc::c_double,
1266 +                         ) -> libc::c_int,
1267 +                 ),
1268 +                 indicator_ref: None,
1269 +                 type_0: 2 as libc::c_int,
1270 +                 inputs: 2 as libc::c_int,
1271 +                 options: 1 as libc::c_int,
1272 +                 outputs: 1 as libc::c_int,
1273 +                 input_names: [
1274 +                     b"high\0" as *const u8 as *const libc::c_char,
1275 +                     b"low\0" as *const u8 as *const libc::c_char,
1276 +                     0 as *const libc::c_char,
1277 +                     0 as *const libc::c_char,
1278 +                     0 as *const libc::c_char,
1279 +                     0 as *const libc::c_char,
1280 +                     0 as *const libc::c_char,
1281 +                     0 as *const libc::c_char,
1282 +                     0 as *const libc::c_char,
1283 +                     0 as *const libc::c_char,
1284 +                     0 as *const libc::c_char,
1285 +                     0 as *const libc::c_char,
1286 +                     0 as *const libc::c_char,
1287 +                     0 as *const libc::c_char,
1288 +                     0 as *const libc::c_char,
1289 +                     0 as *const libc::c_char,
1290 +                 ],
1291 +                 option_names: [
1292 +                     b"period\0" as *const u8 as *const libc::c_char,
1293 +                     0 as *const libc::c_char,
1294 +                     0 as *const libc::c_char,
1295 +                     0 as *const libc::c_char,
1296 +                     0 as *const libc::c_char,
1297 +                     0 as *const libc::c_char,
1298 +                     0 as *const libc::c_char,
1299 +                     0 as *const libc::c_char,
1300 +                     0 as *const libc::c_char,
1301 +                     0 as *const libc::c_char,
1302 +                     0 as *const libc::c_char,
1303 +                     0 as *const libc::c_char,
1304 +                     0 as *const libc::c_char,
1305 +                     0 as *const libc::c_char,
1306 +                     0 as *const libc::c_char,
1307 +                     0 as *const libc::c_char,
1308 +                 ],
1309 +                 output_names: [
1310 +                     b"adx\0" as *const u8 as *const libc::c_char,
1311 +                     0 as *const libc::c_char,
1312 +                     0 as *const libc::c_char,
1313 +                     0 as *const libc::c_char,
1314 +                     0 as *const libc::c_char,
1315 +                     0 as *const libc::c_char,
1316 +                     0 as *const libc::c_char,
1317 +                     0 as *const libc::c_char,
1318 +                     0 as *const libc::c_char,
1319 +                     0 as *const libc::c_char,
1320 +                     0 as *const libc::c_char,
1321 +                     0 as *const libc::c_char,
1322 +                     0 as *const libc::c_char,
1323 +                     0 as *const libc::c_char,
1324 +                     0 as *const libc::c_char,
1325 +                     0 as *const libc::c_char,
1326 +                 ],
1327 +                 stream_new: None,
1328 +                 stream_run: None,
1329 +                 stream_free: None,
1330 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:1413:13
     |
1333 | /             let mut init = ti_indicator_info {
1334 | |                 name: b"adxr\0" as *const u8 as *const libc::c_char,
1335 | |                 full_name: b"Average Directional Movement Rating\0" as *const u8
1336 | |                     as *const libc::c_char,
...    |
1411 | |                 stream_free: None,
1412 | |             };
     | |______________- unnecessary `let` binding
1413 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1333 ~             
1334 ~             ti_indicator_info {
1335 +                 name: b"adxr\0" as *const u8 as *const libc::c_char,
1336 +                 full_name: b"Average Directional Movement Rating\0" as *const u8
1337 +                     as *const libc::c_char,
1338 +                 start: Some(
1339 +                     ti_adxr_start
1340 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
1341 +                 ),
1342 +                 indicator: Some(
1343 +                     ti_adxr
1344 +                         as unsafe extern "C" fn(
1345 +                             libc::c_int,
1346 +                             *const *const libc::c_double,
1347 +                             *const libc::c_double,
1348 +                             *const *mut libc::c_double,
1349 +                         ) -> libc::c_int,
1350 +                 ),
1351 +                 indicator_ref: None,
1352 +                 type_0: 2 as libc::c_int,
1353 +                 inputs: 2 as libc::c_int,
1354 +                 options: 1 as libc::c_int,
1355 +                 outputs: 1 as libc::c_int,
1356 +                 input_names: [
1357 +                     b"high\0" as *const u8 as *const libc::c_char,
1358 +                     b"low\0" as *const u8 as *const libc::c_char,
1359 +                     0 as *const libc::c_char,
1360 +                     0 as *const libc::c_char,
1361 +                     0 as *const libc::c_char,
1362 +                     0 as *const libc::c_char,
1363 +                     0 as *const libc::c_char,
1364 +                     0 as *const libc::c_char,
1365 +                     0 as *const libc::c_char,
1366 +                     0 as *const libc::c_char,
1367 +                     0 as *const libc::c_char,
1368 +                     0 as *const libc::c_char,
1369 +                     0 as *const libc::c_char,
1370 +                     0 as *const libc::c_char,
1371 +                     0 as *const libc::c_char,
1372 +                     0 as *const libc::c_char,
1373 +                 ],
1374 +                 option_names: [
1375 +                     b"period\0" as *const u8 as *const libc::c_char,
1376 +                     0 as *const libc::c_char,
1377 +                     0 as *const libc::c_char,
1378 +                     0 as *const libc::c_char,
1379 +                     0 as *const libc::c_char,
1380 +                     0 as *const libc::c_char,
1381 +                     0 as *const libc::c_char,
1382 +                     0 as *const libc::c_char,
1383 +                     0 as *const libc::c_char,
1384 +                     0 as *const libc::c_char,
1385 +                     0 as *const libc::c_char,
1386 +                     0 as *const libc::c_char,
1387 +                     0 as *const libc::c_char,
1388 +                     0 as *const libc::c_char,
1389 +                     0 as *const libc::c_char,
1390 +                     0 as *const libc::c_char,
1391 +                 ],
1392 +                 output_names: [
1393 +                     b"adxr\0" as *const u8 as *const libc::c_char,
1394 +                     0 as *const libc::c_char,
1395 +                     0 as *const libc::c_char,
1396 +                     0 as *const libc::c_char,
1397 +                     0 as *const libc::c_char,
1398 +                     0 as *const libc::c_char,
1399 +                     0 as *const libc::c_char,
1400 +                     0 as *const libc::c_char,
1401 +                     0 as *const libc::c_char,
1402 +                     0 as *const libc::c_char,
1403 +                     0 as *const libc::c_char,
1404 +                     0 as *const libc::c_char,
1405 +                     0 as *const libc::c_char,
1406 +                     0 as *const libc::c_char,
1407 +                     0 as *const libc::c_char,
1408 +                     0 as *const libc::c_char,
1409 +                 ],
1410 +                 stream_new: None,
1411 +                 stream_run: None,
1412 +                 stream_free: None,
1413 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:1495:13
     |
1416 | /             let mut init = ti_indicator_info {
1417 | |                 name: b"ao\0" as *const u8 as *const libc::c_char,
1418 | |                 full_name: b"Awesome Oscillator\0" as *const u8 as *const libc::c_char,
1419 | |                 start: Some(
...    |
1493 | |                 stream_free: None,
1494 | |             };
     | |______________- unnecessary `let` binding
1495 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1416 ~             
1417 ~             ti_indicator_info {
1418 +                 name: b"ao\0" as *const u8 as *const libc::c_char,
1419 +                 full_name: b"Awesome Oscillator\0" as *const u8 as *const libc::c_char,
1420 +                 start: Some(
1421 +                     ti_ao_start
1422 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
1423 +                 ),
1424 +                 indicator: Some(
1425 +                     ti_ao
1426 +                         as unsafe extern "C" fn(
1427 +                             libc::c_int,
1428 +                             *const *const libc::c_double,
1429 +                             *const libc::c_double,
1430 +                             *const *mut libc::c_double,
1431 +                         ) -> libc::c_int,
1432 +                 ),
1433 +                 indicator_ref: None,
1434 +                 type_0: 2 as libc::c_int,
1435 +                 inputs: 2 as libc::c_int,
1436 +                 options: 0 as libc::c_int,
1437 +                 outputs: 1 as libc::c_int,
1438 +                 input_names: [
1439 +                     b"high\0" as *const u8 as *const libc::c_char,
1440 +                     b"low\0" as *const u8 as *const libc::c_char,
1441 +                     0 as *const libc::c_char,
1442 +                     0 as *const libc::c_char,
1443 +                     0 as *const libc::c_char,
1444 +                     0 as *const libc::c_char,
1445 +                     0 as *const libc::c_char,
1446 +                     0 as *const libc::c_char,
1447 +                     0 as *const libc::c_char,
1448 +                     0 as *const libc::c_char,
1449 +                     0 as *const libc::c_char,
1450 +                     0 as *const libc::c_char,
1451 +                     0 as *const libc::c_char,
1452 +                     0 as *const libc::c_char,
1453 +                     0 as *const libc::c_char,
1454 +                     0 as *const libc::c_char,
1455 +                 ],
1456 +                 option_names: [
1457 +                     b"\0" as *const u8 as *const libc::c_char,
1458 +                     0 as *const libc::c_char,
1459 +                     0 as *const libc::c_char,
1460 +                     0 as *const libc::c_char,
1461 +                     0 as *const libc::c_char,
1462 +                     0 as *const libc::c_char,
1463 +                     0 as *const libc::c_char,
1464 +                     0 as *const libc::c_char,
1465 +                     0 as *const libc::c_char,
1466 +                     0 as *const libc::c_char,
1467 +                     0 as *const libc::c_char,
1468 +                     0 as *const libc::c_char,
1469 +                     0 as *const libc::c_char,
1470 +                     0 as *const libc::c_char,
1471 +                     0 as *const libc::c_char,
1472 +                     0 as *const libc::c_char,
1473 +                 ],
1474 +                 output_names: [
1475 +                     b"ao\0" as *const u8 as *const libc::c_char,
1476 +                     0 as *const libc::c_char,
1477 +                     0 as *const libc::c_char,
1478 +                     0 as *const libc::c_char,
1479 +                     0 as *const libc::c_char,
1480 +                     0 as *const libc::c_char,
1481 +                     0 as *const libc::c_char,
1482 +                     0 as *const libc::c_char,
1483 +                     0 as *const libc::c_char,
1484 +                     0 as *const libc::c_char,
1485 +                     0 as *const libc::c_char,
1486 +                     0 as *const libc::c_char,
1487 +                     0 as *const libc::c_char,
1488 +                     0 as *const libc::c_char,
1489 +                     0 as *const libc::c_char,
1490 +                     0 as *const libc::c_char,
1491 +                 ],
1492 +                 stream_new: None,
1493 +                 stream_run: None,
1494 +                 stream_free: None,
1495 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:1578:13
     |
1498 | /             let mut init = ti_indicator_info {
1499 | |                 name: b"apo\0" as *const u8 as *const libc::c_char,
1500 | |                 full_name: b"Absolute Price Oscillator\0" as *const u8
1501 | |                     as *const libc::c_char,
...    |
1576 | |                 stream_free: None,
1577 | |             };
     | |______________- unnecessary `let` binding
1578 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1498 ~             
1499 ~             ti_indicator_info {
1500 +                 name: b"apo\0" as *const u8 as *const libc::c_char,
1501 +                 full_name: b"Absolute Price Oscillator\0" as *const u8
1502 +                     as *const libc::c_char,
1503 +                 start: Some(
1504 +                     ti_apo_start
1505 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
1506 +                 ),
1507 +                 indicator: Some(
1508 +                     ti_apo
1509 +                         as unsafe extern "C" fn(
1510 +                             libc::c_int,
1511 +                             *const *const libc::c_double,
1512 +                             *const libc::c_double,
1513 +                             *const *mut libc::c_double,
1514 +                         ) -> libc::c_int,
1515 +                 ),
1516 +                 indicator_ref: None,
1517 +                 type_0: 2 as libc::c_int,
1518 +                 inputs: 1 as libc::c_int,
1519 +                 options: 2 as libc::c_int,
1520 +                 outputs: 1 as libc::c_int,
1521 +                 input_names: [
1522 +                     b"real\0" as *const u8 as *const libc::c_char,
1523 +                     0 as *const libc::c_char,
1524 +                     0 as *const libc::c_char,
1525 +                     0 as *const libc::c_char,
1526 +                     0 as *const libc::c_char,
1527 +                     0 as *const libc::c_char,
1528 +                     0 as *const libc::c_char,
1529 +                     0 as *const libc::c_char,
1530 +                     0 as *const libc::c_char,
1531 +                     0 as *const libc::c_char,
1532 +                     0 as *const libc::c_char,
1533 +                     0 as *const libc::c_char,
1534 +                     0 as *const libc::c_char,
1535 +                     0 as *const libc::c_char,
1536 +                     0 as *const libc::c_char,
1537 +                     0 as *const libc::c_char,
1538 +                 ],
1539 +                 option_names: [
1540 +                     b"short_period\0" as *const u8 as *const libc::c_char,
1541 +                     b"long_period\0" as *const u8 as *const libc::c_char,
1542 +                     0 as *const libc::c_char,
1543 +                     0 as *const libc::c_char,
1544 +                     0 as *const libc::c_char,
1545 +                     0 as *const libc::c_char,
1546 +                     0 as *const libc::c_char,
1547 +                     0 as *const libc::c_char,
1548 +                     0 as *const libc::c_char,
1549 +                     0 as *const libc::c_char,
1550 +                     0 as *const libc::c_char,
1551 +                     0 as *const libc::c_char,
1552 +                     0 as *const libc::c_char,
1553 +                     0 as *const libc::c_char,
1554 +                     0 as *const libc::c_char,
1555 +                     0 as *const libc::c_char,
1556 +                 ],
1557 +                 output_names: [
1558 +                     b"apo\0" as *const u8 as *const libc::c_char,
1559 +                     0 as *const libc::c_char,
1560 +                     0 as *const libc::c_char,
1561 +                     0 as *const libc::c_char,
1562 +                     0 as *const libc::c_char,
1563 +                     0 as *const libc::c_char,
1564 +                     0 as *const libc::c_char,
1565 +                     0 as *const libc::c_char,
1566 +                     0 as *const libc::c_char,
1567 +                     0 as *const libc::c_char,
1568 +                     0 as *const libc::c_char,
1569 +                     0 as *const libc::c_char,
1570 +                     0 as *const libc::c_char,
1571 +                     0 as *const libc::c_char,
1572 +                     0 as *const libc::c_char,
1573 +                     0 as *const libc::c_char,
1574 +                 ],
1575 +                 stream_new: None,
1576 +                 stream_run: None,
1577 +                 stream_free: None,
1578 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:1660:13
     |
1581 | /             let mut init = ti_indicator_info {
1582 | |                 name: b"aroon\0" as *const u8 as *const libc::c_char,
1583 | |                 full_name: b"Aroon\0" as *const u8 as *const libc::c_char,
1584 | |                 start: Some(
...    |
1658 | |                 stream_free: None,
1659 | |             };
     | |______________- unnecessary `let` binding
1660 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1581 ~             
1582 ~             ti_indicator_info {
1583 +                 name: b"aroon\0" as *const u8 as *const libc::c_char,
1584 +                 full_name: b"Aroon\0" as *const u8 as *const libc::c_char,
1585 +                 start: Some(
1586 +                     ti_aroon_start
1587 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
1588 +                 ),
1589 +                 indicator: Some(
1590 +                     ti_aroon
1591 +                         as unsafe extern "C" fn(
1592 +                             libc::c_int,
1593 +                             *const *const libc::c_double,
1594 +                             *const libc::c_double,
1595 +                             *const *mut libc::c_double,
1596 +                         ) -> libc::c_int,
1597 +                 ),
1598 +                 indicator_ref: None,
1599 +                 type_0: 2 as libc::c_int,
1600 +                 inputs: 2 as libc::c_int,
1601 +                 options: 1 as libc::c_int,
1602 +                 outputs: 2 as libc::c_int,
1603 +                 input_names: [
1604 +                     b"high\0" as *const u8 as *const libc::c_char,
1605 +                     b"low\0" as *const u8 as *const libc::c_char,
1606 +                     0 as *const libc::c_char,
1607 +                     0 as *const libc::c_char,
1608 +                     0 as *const libc::c_char,
1609 +                     0 as *const libc::c_char,
1610 +                     0 as *const libc::c_char,
1611 +                     0 as *const libc::c_char,
1612 +                     0 as *const libc::c_char,
1613 +                     0 as *const libc::c_char,
1614 +                     0 as *const libc::c_char,
1615 +                     0 as *const libc::c_char,
1616 +                     0 as *const libc::c_char,
1617 +                     0 as *const libc::c_char,
1618 +                     0 as *const libc::c_char,
1619 +                     0 as *const libc::c_char,
1620 +                 ],
1621 +                 option_names: [
1622 +                     b"period\0" as *const u8 as *const libc::c_char,
1623 +                     0 as *const libc::c_char,
1624 +                     0 as *const libc::c_char,
1625 +                     0 as *const libc::c_char,
1626 +                     0 as *const libc::c_char,
1627 +                     0 as *const libc::c_char,
1628 +                     0 as *const libc::c_char,
1629 +                     0 as *const libc::c_char,
1630 +                     0 as *const libc::c_char,
1631 +                     0 as *const libc::c_char,
1632 +                     0 as *const libc::c_char,
1633 +                     0 as *const libc::c_char,
1634 +                     0 as *const libc::c_char,
1635 +                     0 as *const libc::c_char,
1636 +                     0 as *const libc::c_char,
1637 +                     0 as *const libc::c_char,
1638 +                 ],
1639 +                 output_names: [
1640 +                     b"aroon_down\0" as *const u8 as *const libc::c_char,
1641 +                     b"aroon_up\0" as *const u8 as *const libc::c_char,
1642 +                     0 as *const libc::c_char,
1643 +                     0 as *const libc::c_char,
1644 +                     0 as *const libc::c_char,
1645 +                     0 as *const libc::c_char,
1646 +                     0 as *const libc::c_char,
1647 +                     0 as *const libc::c_char,
1648 +                     0 as *const libc::c_char,
1649 +                     0 as *const libc::c_char,
1650 +                     0 as *const libc::c_char,
1651 +                     0 as *const libc::c_char,
1652 +                     0 as *const libc::c_char,
1653 +                     0 as *const libc::c_char,
1654 +                     0 as *const libc::c_char,
1655 +                     0 as *const libc::c_char,
1656 +                 ],
1657 +                 stream_new: None,
1658 +                 stream_run: None,
1659 +                 stream_free: None,
1660 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:1742:13
     |
1663 | /             let mut init = ti_indicator_info {
1664 | |                 name: b"aroonosc\0" as *const u8 as *const libc::c_char,
1665 | |                 full_name: b"Aroon Oscillator\0" as *const u8 as *const libc::c_char,
1666 | |                 start: Some(
...    |
1740 | |                 stream_free: None,
1741 | |             };
     | |______________- unnecessary `let` binding
1742 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1663 ~             
1664 ~             ti_indicator_info {
1665 +                 name: b"aroonosc\0" as *const u8 as *const libc::c_char,
1666 +                 full_name: b"Aroon Oscillator\0" as *const u8 as *const libc::c_char,
1667 +                 start: Some(
1668 +                     ti_aroonosc_start
1669 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
1670 +                 ),
1671 +                 indicator: Some(
1672 +                     ti_aroonosc
1673 +                         as unsafe extern "C" fn(
1674 +                             libc::c_int,
1675 +                             *const *const libc::c_double,
1676 +                             *const libc::c_double,
1677 +                             *const *mut libc::c_double,
1678 +                         ) -> libc::c_int,
1679 +                 ),
1680 +                 indicator_ref: None,
1681 +                 type_0: 2 as libc::c_int,
1682 +                 inputs: 2 as libc::c_int,
1683 +                 options: 1 as libc::c_int,
1684 +                 outputs: 1 as libc::c_int,
1685 +                 input_names: [
1686 +                     b"high\0" as *const u8 as *const libc::c_char,
1687 +                     b"low\0" as *const u8 as *const libc::c_char,
1688 +                     0 as *const libc::c_char,
1689 +                     0 as *const libc::c_char,
1690 +                     0 as *const libc::c_char,
1691 +                     0 as *const libc::c_char,
1692 +                     0 as *const libc::c_char,
1693 +                     0 as *const libc::c_char,
1694 +                     0 as *const libc::c_char,
1695 +                     0 as *const libc::c_char,
1696 +                     0 as *const libc::c_char,
1697 +                     0 as *const libc::c_char,
1698 +                     0 as *const libc::c_char,
1699 +                     0 as *const libc::c_char,
1700 +                     0 as *const libc::c_char,
1701 +                     0 as *const libc::c_char,
1702 +                 ],
1703 +                 option_names: [
1704 +                     b"period\0" as *const u8 as *const libc::c_char,
1705 +                     0 as *const libc::c_char,
1706 +                     0 as *const libc::c_char,
1707 +                     0 as *const libc::c_char,
1708 +                     0 as *const libc::c_char,
1709 +                     0 as *const libc::c_char,
1710 +                     0 as *const libc::c_char,
1711 +                     0 as *const libc::c_char,
1712 +                     0 as *const libc::c_char,
1713 +                     0 as *const libc::c_char,
1714 +                     0 as *const libc::c_char,
1715 +                     0 as *const libc::c_char,
1716 +                     0 as *const libc::c_char,
1717 +                     0 as *const libc::c_char,
1718 +                     0 as *const libc::c_char,
1719 +                     0 as *const libc::c_char,
1720 +                 ],
1721 +                 output_names: [
1722 +                     b"aroonosc\0" as *const u8 as *const libc::c_char,
1723 +                     0 as *const libc::c_char,
1724 +                     0 as *const libc::c_char,
1725 +                     0 as *const libc::c_char,
1726 +                     0 as *const libc::c_char,
1727 +                     0 as *const libc::c_char,
1728 +                     0 as *const libc::c_char,
1729 +                     0 as *const libc::c_char,
1730 +                     0 as *const libc::c_char,
1731 +                     0 as *const libc::c_char,
1732 +                     0 as *const libc::c_char,
1733 +                     0 as *const libc::c_char,
1734 +                     0 as *const libc::c_char,
1735 +                     0 as *const libc::c_char,
1736 +                     0 as *const libc::c_char,
1737 +                     0 as *const libc::c_char,
1738 +                 ],
1739 +                 stream_new: None,
1740 +                 stream_run: None,
1741 +                 stream_free: None,
1742 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:1824:13
     |
1745 | /             let mut init = ti_indicator_info {
1746 | |                 name: b"asin\0" as *const u8 as *const libc::c_char,
1747 | |                 full_name: b"Vector Arcsine\0" as *const u8 as *const libc::c_char,
1748 | |                 start: Some(
...    |
1822 | |                 stream_free: None,
1823 | |             };
     | |______________- unnecessary `let` binding
1824 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1745 ~             
1746 ~             ti_indicator_info {
1747 +                 name: b"asin\0" as *const u8 as *const libc::c_char,
1748 +                 full_name: b"Vector Arcsine\0" as *const u8 as *const libc::c_char,
1749 +                 start: Some(
1750 +                     ti_asin_start
1751 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
1752 +                 ),
1753 +                 indicator: Some(
1754 +                     ti_asin
1755 +                         as unsafe extern "C" fn(
1756 +                             libc::c_int,
1757 +                             *const *const libc::c_double,
1758 +                             *const libc::c_double,
1759 +                             *const *mut libc::c_double,
1760 +                         ) -> libc::c_int,
1761 +                 ),
1762 +                 indicator_ref: None,
1763 +                 type_0: 4 as libc::c_int,
1764 +                 inputs: 1 as libc::c_int,
1765 +                 options: 0 as libc::c_int,
1766 +                 outputs: 1 as libc::c_int,
1767 +                 input_names: [
1768 +                     b"real\0" as *const u8 as *const libc::c_char,
1769 +                     0 as *const libc::c_char,
1770 +                     0 as *const libc::c_char,
1771 +                     0 as *const libc::c_char,
1772 +                     0 as *const libc::c_char,
1773 +                     0 as *const libc::c_char,
1774 +                     0 as *const libc::c_char,
1775 +                     0 as *const libc::c_char,
1776 +                     0 as *const libc::c_char,
1777 +                     0 as *const libc::c_char,
1778 +                     0 as *const libc::c_char,
1779 +                     0 as *const libc::c_char,
1780 +                     0 as *const libc::c_char,
1781 +                     0 as *const libc::c_char,
1782 +                     0 as *const libc::c_char,
1783 +                     0 as *const libc::c_char,
1784 +                 ],
1785 +                 option_names: [
1786 +                     b"\0" as *const u8 as *const libc::c_char,
1787 +                     0 as *const libc::c_char,
1788 +                     0 as *const libc::c_char,
1789 +                     0 as *const libc::c_char,
1790 +                     0 as *const libc::c_char,
1791 +                     0 as *const libc::c_char,
1792 +                     0 as *const libc::c_char,
1793 +                     0 as *const libc::c_char,
1794 +                     0 as *const libc::c_char,
1795 +                     0 as *const libc::c_char,
1796 +                     0 as *const libc::c_char,
1797 +                     0 as *const libc::c_char,
1798 +                     0 as *const libc::c_char,
1799 +                     0 as *const libc::c_char,
1800 +                     0 as *const libc::c_char,
1801 +                     0 as *const libc::c_char,
1802 +                 ],
1803 +                 output_names: [
1804 +                     b"asin\0" as *const u8 as *const libc::c_char,
1805 +                     0 as *const libc::c_char,
1806 +                     0 as *const libc::c_char,
1807 +                     0 as *const libc::c_char,
1808 +                     0 as *const libc::c_char,
1809 +                     0 as *const libc::c_char,
1810 +                     0 as *const libc::c_char,
1811 +                     0 as *const libc::c_char,
1812 +                     0 as *const libc::c_char,
1813 +                     0 as *const libc::c_char,
1814 +                     0 as *const libc::c_char,
1815 +                     0 as *const libc::c_char,
1816 +                     0 as *const libc::c_char,
1817 +                     0 as *const libc::c_char,
1818 +                     0 as *const libc::c_char,
1819 +                     0 as *const libc::c_char,
1820 +                 ],
1821 +                 stream_new: None,
1822 +                 stream_run: None,
1823 +                 stream_free: None,
1824 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:1906:13
     |
1827 | /             let mut init = ti_indicator_info {
1828 | |                 name: b"atan\0" as *const u8 as *const libc::c_char,
1829 | |                 full_name: b"Vector Arctangent\0" as *const u8 as *const libc::c_char,
1830 | |                 start: Some(
...    |
1904 | |                 stream_free: None,
1905 | |             };
     | |______________- unnecessary `let` binding
1906 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1827 ~             
1828 ~             ti_indicator_info {
1829 +                 name: b"atan\0" as *const u8 as *const libc::c_char,
1830 +                 full_name: b"Vector Arctangent\0" as *const u8 as *const libc::c_char,
1831 +                 start: Some(
1832 +                     ti_atan_start
1833 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
1834 +                 ),
1835 +                 indicator: Some(
1836 +                     ti_atan
1837 +                         as unsafe extern "C" fn(
1838 +                             libc::c_int,
1839 +                             *const *const libc::c_double,
1840 +                             *const libc::c_double,
1841 +                             *const *mut libc::c_double,
1842 +                         ) -> libc::c_int,
1843 +                 ),
1844 +                 indicator_ref: None,
1845 +                 type_0: 4 as libc::c_int,
1846 +                 inputs: 1 as libc::c_int,
1847 +                 options: 0 as libc::c_int,
1848 +                 outputs: 1 as libc::c_int,
1849 +                 input_names: [
1850 +                     b"real\0" as *const u8 as *const libc::c_char,
1851 +                     0 as *const libc::c_char,
1852 +                     0 as *const libc::c_char,
1853 +                     0 as *const libc::c_char,
1854 +                     0 as *const libc::c_char,
1855 +                     0 as *const libc::c_char,
1856 +                     0 as *const libc::c_char,
1857 +                     0 as *const libc::c_char,
1858 +                     0 as *const libc::c_char,
1859 +                     0 as *const libc::c_char,
1860 +                     0 as *const libc::c_char,
1861 +                     0 as *const libc::c_char,
1862 +                     0 as *const libc::c_char,
1863 +                     0 as *const libc::c_char,
1864 +                     0 as *const libc::c_char,
1865 +                     0 as *const libc::c_char,
1866 +                 ],
1867 +                 option_names: [
1868 +                     b"\0" as *const u8 as *const libc::c_char,
1869 +                     0 as *const libc::c_char,
1870 +                     0 as *const libc::c_char,
1871 +                     0 as *const libc::c_char,
1872 +                     0 as *const libc::c_char,
1873 +                     0 as *const libc::c_char,
1874 +                     0 as *const libc::c_char,
1875 +                     0 as *const libc::c_char,
1876 +                     0 as *const libc::c_char,
1877 +                     0 as *const libc::c_char,
1878 +                     0 as *const libc::c_char,
1879 +                     0 as *const libc::c_char,
1880 +                     0 as *const libc::c_char,
1881 +                     0 as *const libc::c_char,
1882 +                     0 as *const libc::c_char,
1883 +                     0 as *const libc::c_char,
1884 +                 ],
1885 +                 output_names: [
1886 +                     b"atan\0" as *const u8 as *const libc::c_char,
1887 +                     0 as *const libc::c_char,
1888 +                     0 as *const libc::c_char,
1889 +                     0 as *const libc::c_char,
1890 +                     0 as *const libc::c_char,
1891 +                     0 as *const libc::c_char,
1892 +                     0 as *const libc::c_char,
1893 +                     0 as *const libc::c_char,
1894 +                     0 as *const libc::c_char,
1895 +                     0 as *const libc::c_char,
1896 +                     0 as *const libc::c_char,
1897 +                     0 as *const libc::c_char,
1898 +                     0 as *const libc::c_char,
1899 +                     0 as *const libc::c_char,
1900 +                     0 as *const libc::c_char,
1901 +                     0 as *const libc::c_char,
1902 +                 ],
1903 +                 stream_new: None,
1904 +                 stream_run: None,
1905 +                 stream_free: None,
1906 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:2012:13
     |
1909 | /             let mut init = ti_indicator_info {
1910 | |                 name: b"atr\0" as *const u8 as *const libc::c_char,
1911 | |                 full_name: b"Average True Range\0" as *const u8 as *const libc::c_char,
1912 | |                 start: Some(
...    |
2010 | |                 ),
2011 | |             };
     | |______________- unnecessary `let` binding
2012 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1909 ~             
1910 ~             ti_indicator_info {
1911 +                 name: b"atr\0" as *const u8 as *const libc::c_char,
1912 +                 full_name: b"Average True Range\0" as *const u8 as *const libc::c_char,
1913 +                 start: Some(
1914 +                     ti_atr_start
1915 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
1916 +                 ),
1917 +                 indicator: Some(
1918 +                     ti_atr
1919 +                         as unsafe extern "C" fn(
1920 +                             libc::c_int,
1921 +                             *const *const libc::c_double,
1922 +                             *const libc::c_double,
1923 +                             *const *mut libc::c_double,
1924 +                         ) -> libc::c_int,
1925 +                 ),
1926 +                 indicator_ref: Some(
1927 +                     ti_atr_ref
1928 +                         as unsafe extern "C" fn(
1929 +                             libc::c_int,
1930 +                             *const *const libc::c_double,
1931 +                             *const libc::c_double,
1932 +                             *const *mut libc::c_double,
1933 +                         ) -> libc::c_int,
1934 +                 ),
1935 +                 type_0: 2 as libc::c_int,
1936 +                 inputs: 3 as libc::c_int,
1937 +                 options: 1 as libc::c_int,
1938 +                 outputs: 1 as libc::c_int,
1939 +                 input_names: [
1940 +                     b"high\0" as *const u8 as *const libc::c_char,
1941 +                     b"low\0" as *const u8 as *const libc::c_char,
1942 +                     b"close\0" as *const u8 as *const libc::c_char,
1943 +                     0 as *const libc::c_char,
1944 +                     0 as *const libc::c_char,
1945 +                     0 as *const libc::c_char,
1946 +                     0 as *const libc::c_char,
1947 +                     0 as *const libc::c_char,
1948 +                     0 as *const libc::c_char,
1949 +                     0 as *const libc::c_char,
1950 +                     0 as *const libc::c_char,
1951 +                     0 as *const libc::c_char,
1952 +                     0 as *const libc::c_char,
1953 +                     0 as *const libc::c_char,
1954 +                     0 as *const libc::c_char,
1955 +                     0 as *const libc::c_char,
1956 +                 ],
1957 +                 option_names: [
1958 +                     b"period\0" as *const u8 as *const libc::c_char,
1959 +                     0 as *const libc::c_char,
1960 +                     0 as *const libc::c_char,
1961 +                     0 as *const libc::c_char,
1962 +                     0 as *const libc::c_char,
1963 +                     0 as *const libc::c_char,
1964 +                     0 as *const libc::c_char,
1965 +                     0 as *const libc::c_char,
1966 +                     0 as *const libc::c_char,
1967 +                     0 as *const libc::c_char,
1968 +                     0 as *const libc::c_char,
1969 +                     0 as *const libc::c_char,
1970 +                     0 as *const libc::c_char,
1971 +                     0 as *const libc::c_char,
1972 +                     0 as *const libc::c_char,
1973 +                     0 as *const libc::c_char,
1974 +                 ],
1975 +                 output_names: [
1976 +                     b"atr\0" as *const u8 as *const libc::c_char,
1977 +                     0 as *const libc::c_char,
1978 +                     0 as *const libc::c_char,
1979 +                     0 as *const libc::c_char,
1980 +                     0 as *const libc::c_char,
1981 +                     0 as *const libc::c_char,
1982 +                     0 as *const libc::c_char,
1983 +                     0 as *const libc::c_char,
1984 +                     0 as *const libc::c_char,
1985 +                     0 as *const libc::c_char,
1986 +                     0 as *const libc::c_char,
1987 +                     0 as *const libc::c_char,
1988 +                     0 as *const libc::c_char,
1989 +                     0 as *const libc::c_char,
1990 +                     0 as *const libc::c_char,
1991 +                     0 as *const libc::c_char,
1992 +                 ],
1993 +                 stream_new: Some(
1994 +                     ti_atr_stream_new
1995 +                         as unsafe extern "C" fn(
1996 +                             *const libc::c_double,
1997 +                             *mut *mut ti_stream,
1998 +                         ) -> libc::c_int,
1999 +                 ),
2000 +                 stream_run: Some(
2001 +                     ti_atr_stream_run
2002 +                         as unsafe extern "C" fn(
2003 +                             *mut ti_stream,
2004 +                             libc::c_int,
2005 +                             *const *const libc::c_double,
2006 +                             *const *mut libc::c_double,
2007 +                         ) -> libc::c_int,
2008 +                 ),
2009 +                 stream_free: Some(
2010 +                     ti_atr_stream_free as unsafe extern "C" fn(*mut ti_stream) -> (),
2011 +                 ),
2012 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:2094:13
     |
2015 | /             let mut init = ti_indicator_info {
2016 | |                 name: b"avgprice\0" as *const u8 as *const libc::c_char,
2017 | |                 full_name: b"Average Price\0" as *const u8 as *const libc::c_char,
2018 | |                 start: Some(
...    |
2092 | |                 stream_free: None,
2093 | |             };
     | |______________- unnecessary `let` binding
2094 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
2015 ~             
2016 ~             ti_indicator_info {
2017 +                 name: b"avgprice\0" as *const u8 as *const libc::c_char,
2018 +                 full_name: b"Average Price\0" as *const u8 as *const libc::c_char,
2019 +                 start: Some(
2020 +                     ti_avgprice_start
2021 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
2022 +                 ),
2023 +                 indicator: Some(
2024 +                     ti_avgprice
2025 +                         as unsafe extern "C" fn(
2026 +                             libc::c_int,
2027 +                             *const *const libc::c_double,
2028 +                             *const libc::c_double,
2029 +                             *const *mut libc::c_double,
2030 +                         ) -> libc::c_int,
2031 +                 ),
2032 +                 indicator_ref: None,
2033 +                 type_0: 1 as libc::c_int,
2034 +                 inputs: 4 as libc::c_int,
2035 +                 options: 0 as libc::c_int,
2036 +                 outputs: 1 as libc::c_int,
2037 +                 input_names: [
2038 +                     b"open\0" as *const u8 as *const libc::c_char,
2039 +                     b"high\0" as *const u8 as *const libc::c_char,
2040 +                     b"low\0" as *const u8 as *const libc::c_char,
2041 +                     b"close\0" as *const u8 as *const libc::c_char,
2042 +                     0 as *const libc::c_char,
2043 +                     0 as *const libc::c_char,
2044 +                     0 as *const libc::c_char,
2045 +                     0 as *const libc::c_char,
2046 +                     0 as *const libc::c_char,
2047 +                     0 as *const libc::c_char,
2048 +                     0 as *const libc::c_char,
2049 +                     0 as *const libc::c_char,
2050 +                     0 as *const libc::c_char,
2051 +                     0 as *const libc::c_char,
2052 +                     0 as *const libc::c_char,
2053 +                     0 as *const libc::c_char,
2054 +                 ],
2055 +                 option_names: [
2056 +                     b"\0" as *const u8 as *const libc::c_char,
2057 +                     0 as *const libc::c_char,
2058 +                     0 as *const libc::c_char,
2059 +                     0 as *const libc::c_char,
2060 +                     0 as *const libc::c_char,
2061 +                     0 as *const libc::c_char,
2062 +                     0 as *const libc::c_char,
2063 +                     0 as *const libc::c_char,
2064 +                     0 as *const libc::c_char,
2065 +                     0 as *const libc::c_char,
2066 +                     0 as *const libc::c_char,
2067 +                     0 as *const libc::c_char,
2068 +                     0 as *const libc::c_char,
2069 +                     0 as *const libc::c_char,
2070 +                     0 as *const libc::c_char,
2071 +                     0 as *const libc::c_char,
2072 +                 ],
2073 +                 output_names: [
2074 +                     b"avgprice\0" as *const u8 as *const libc::c_char,
2075 +                     0 as *const libc::c_char,
2076 +                     0 as *const libc::c_char,
2077 +                     0 as *const libc::c_char,
2078 +                     0 as *const libc::c_char,
2079 +                     0 as *const libc::c_char,
2080 +                     0 as *const libc::c_char,
2081 +                     0 as *const libc::c_char,
2082 +                     0 as *const libc::c_char,
2083 +                     0 as *const libc::c_char,
2084 +                     0 as *const libc::c_char,
2085 +                     0 as *const libc::c_char,
2086 +                     0 as *const libc::c_char,
2087 +                     0 as *const libc::c_char,
2088 +                     0 as *const libc::c_char,
2089 +                     0 as *const libc::c_char,
2090 +                 ],
2091 +                 stream_new: None,
2092 +                 stream_run: None,
2093 +                 stream_free: None,
2094 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:2176:13
     |
2097 | /             let mut init = ti_indicator_info {
2098 | |                 name: b"bbands\0" as *const u8 as *const libc::c_char,
2099 | |                 full_name: b"Bollinger Bands\0" as *const u8 as *const libc::c_char,
2100 | |                 start: Some(
...    |
2174 | |                 stream_free: None,
2175 | |             };
     | |______________- unnecessary `let` binding
2176 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
2097 ~             
2098 ~             ti_indicator_info {
2099 +                 name: b"bbands\0" as *const u8 as *const libc::c_char,
2100 +                 full_name: b"Bollinger Bands\0" as *const u8 as *const libc::c_char,
2101 +                 start: Some(
2102 +                     ti_bbands_start
2103 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
2104 +                 ),
2105 +                 indicator: Some(
2106 +                     ti_bbands
2107 +                         as unsafe extern "C" fn(
2108 +                             libc::c_int,
2109 +                             *const *const libc::c_double,
2110 +                             *const libc::c_double,
2111 +                             *const *mut libc::c_double,
2112 +                         ) -> libc::c_int,
2113 +                 ),
2114 +                 indicator_ref: None,
2115 +                 type_0: 1 as libc::c_int,
2116 +                 inputs: 1 as libc::c_int,
2117 +                 options: 2 as libc::c_int,
2118 +                 outputs: 3 as libc::c_int,
2119 +                 input_names: [
2120 +                     b"real\0" as *const u8 as *const libc::c_char,
2121 +                     0 as *const libc::c_char,
2122 +                     0 as *const libc::c_char,
2123 +                     0 as *const libc::c_char,
2124 +                     0 as *const libc::c_char,
2125 +                     0 as *const libc::c_char,
2126 +                     0 as *const libc::c_char,
2127 +                     0 as *const libc::c_char,
2128 +                     0 as *const libc::c_char,
2129 +                     0 as *const libc::c_char,
2130 +                     0 as *const libc::c_char,
2131 +                     0 as *const libc::c_char,
2132 +                     0 as *const libc::c_char,
2133 +                     0 as *const libc::c_char,
2134 +                     0 as *const libc::c_char,
2135 +                     0 as *const libc::c_char,
2136 +                 ],
2137 +                 option_names: [
2138 +                     b"period\0" as *const u8 as *const libc::c_char,
2139 +                     b"stddev\0" as *const u8 as *const libc::c_char,
2140 +                     0 as *const libc::c_char,
2141 +                     0 as *const libc::c_char,
2142 +                     0 as *const libc::c_char,
2143 +                     0 as *const libc::c_char,
2144 +                     0 as *const libc::c_char,
2145 +                     0 as *const libc::c_char,
2146 +                     0 as *const libc::c_char,
2147 +                     0 as *const libc::c_char,
2148 +                     0 as *const libc::c_char,
2149 +                     0 as *const libc::c_char,
2150 +                     0 as *const libc::c_char,
2151 +                     0 as *const libc::c_char,
2152 +                     0 as *const libc::c_char,
2153 +                     0 as *const libc::c_char,
2154 +                 ],
2155 +                 output_names: [
2156 +                     b"bbands_lower\0" as *const u8 as *const libc::c_char,
2157 +                     b"bbands_middle\0" as *const u8 as *const libc::c_char,
2158 +                     b"bbands_upper\0" as *const u8 as *const libc::c_char,
2159 +                     0 as *const libc::c_char,
2160 +                     0 as *const libc::c_char,
2161 +                     0 as *const libc::c_char,
2162 +                     0 as *const libc::c_char,
2163 +                     0 as *const libc::c_char,
2164 +                     0 as *const libc::c_char,
2165 +                     0 as *const libc::c_char,
2166 +                     0 as *const libc::c_char,
2167 +                     0 as *const libc::c_char,
2168 +                     0 as *const libc::c_char,
2169 +                     0 as *const libc::c_char,
2170 +                     0 as *const libc::c_char,
2171 +                     0 as *const libc::c_char,
2172 +                 ],
2173 +                 stream_new: None,
2174 +                 stream_run: None,
2175 +                 stream_free: None,
2176 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:2258:13
     |
2179 | /             let mut init = ti_indicator_info {
2180 | |                 name: b"bop\0" as *const u8 as *const libc::c_char,
2181 | |                 full_name: b"Balance of Power\0" as *const u8 as *const libc::c_char,
2182 | |                 start: Some(
...    |
2256 | |                 stream_free: None,
2257 | |             };
     | |______________- unnecessary `let` binding
2258 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
2179 ~             
2180 ~             ti_indicator_info {
2181 +                 name: b"bop\0" as *const u8 as *const libc::c_char,
2182 +                 full_name: b"Balance of Power\0" as *const u8 as *const libc::c_char,
2183 +                 start: Some(
2184 +                     ti_bop_start
2185 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
2186 +                 ),
2187 +                 indicator: Some(
2188 +                     ti_bop
2189 +                         as unsafe extern "C" fn(
2190 +                             libc::c_int,
2191 +                             *const *const libc::c_double,
2192 +                             *const libc::c_double,
2193 +                             *const *mut libc::c_double,
2194 +                         ) -> libc::c_int,
2195 +                 ),
2196 +                 indicator_ref: None,
2197 +                 type_0: 2 as libc::c_int,
2198 +                 inputs: 4 as libc::c_int,
2199 +                 options: 0 as libc::c_int,
2200 +                 outputs: 1 as libc::c_int,
2201 +                 input_names: [
2202 +                     b"open\0" as *const u8 as *const libc::c_char,
2203 +                     b"high\0" as *const u8 as *const libc::c_char,
2204 +                     b"low\0" as *const u8 as *const libc::c_char,
2205 +                     b"close\0" as *const u8 as *const libc::c_char,
2206 +                     0 as *const libc::c_char,
2207 +                     0 as *const libc::c_char,
2208 +                     0 as *const libc::c_char,
2209 +                     0 as *const libc::c_char,
2210 +                     0 as *const libc::c_char,
2211 +                     0 as *const libc::c_char,
2212 +                     0 as *const libc::c_char,
2213 +                     0 as *const libc::c_char,
2214 +                     0 as *const libc::c_char,
2215 +                     0 as *const libc::c_char,
2216 +                     0 as *const libc::c_char,
2217 +                     0 as *const libc::c_char,
2218 +                 ],
2219 +                 option_names: [
2220 +                     b"\0" as *const u8 as *const libc::c_char,
2221 +                     0 as *const libc::c_char,
2222 +                     0 as *const libc::c_char,
2223 +                     0 as *const libc::c_char,
2224 +                     0 as *const libc::c_char,
2225 +                     0 as *const libc::c_char,
2226 +                     0 as *const libc::c_char,
2227 +                     0 as *const libc::c_char,
2228 +                     0 as *const libc::c_char,
2229 +                     0 as *const libc::c_char,
2230 +                     0 as *const libc::c_char,
2231 +                     0 as *const libc::c_char,
2232 +                     0 as *const libc::c_char,
2233 +                     0 as *const libc::c_char,
2234 +                     0 as *const libc::c_char,
2235 +                     0 as *const libc::c_char,
2236 +                 ],
2237 +                 output_names: [
2238 +                     b"bop\0" as *const u8 as *const libc::c_char,
2239 +                     0 as *const libc::c_char,
2240 +                     0 as *const libc::c_char,
2241 +                     0 as *const libc::c_char,
2242 +                     0 as *const libc::c_char,
2243 +                     0 as *const libc::c_char,
2244 +                     0 as *const libc::c_char,
2245 +                     0 as *const libc::c_char,
2246 +                     0 as *const libc::c_char,
2247 +                     0 as *const libc::c_char,
2248 +                     0 as *const libc::c_char,
2249 +                     0 as *const libc::c_char,
2250 +                     0 as *const libc::c_char,
2251 +                     0 as *const libc::c_char,
2252 +                     0 as *const libc::c_char,
2253 +                     0 as *const libc::c_char,
2254 +                 ],
2255 +                 stream_new: None,
2256 +                 stream_run: None,
2257 +                 stream_free: None,
2258 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:2341:13
     |
2261 | /             let mut init = ti_indicator_info {
2262 | |                 name: b"cci\0" as *const u8 as *const libc::c_char,
2263 | |                 full_name: b"Commodity Channel Index\0" as *const u8
2264 | |                     as *const libc::c_char,
...    |
2339 | |                 stream_free: None,
2340 | |             };
     | |______________- unnecessary `let` binding
2341 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
2261 ~             
2262 ~             ti_indicator_info {
2263 +                 name: b"cci\0" as *const u8 as *const libc::c_char,
2264 +                 full_name: b"Commodity Channel Index\0" as *const u8
2265 +                     as *const libc::c_char,
2266 +                 start: Some(
2267 +                     ti_cci_start
2268 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
2269 +                 ),
2270 +                 indicator: Some(
2271 +                     ti_cci
2272 +                         as unsafe extern "C" fn(
2273 +                             libc::c_int,
2274 +                             *const *const libc::c_double,
2275 +                             *const libc::c_double,
2276 +                             *const *mut libc::c_double,
2277 +                         ) -> libc::c_int,
2278 +                 ),
2279 +                 indicator_ref: None,
2280 +                 type_0: 2 as libc::c_int,
2281 +                 inputs: 3 as libc::c_int,
2282 +                 options: 1 as libc::c_int,
2283 +                 outputs: 1 as libc::c_int,
2284 +                 input_names: [
2285 +                     b"high\0" as *const u8 as *const libc::c_char,
2286 +                     b"low\0" as *const u8 as *const libc::c_char,
2287 +                     b"close\0" as *const u8 as *const libc::c_char,
2288 +                     0 as *const libc::c_char,
2289 +                     0 as *const libc::c_char,
2290 +                     0 as *const libc::c_char,
2291 +                     0 as *const libc::c_char,
2292 +                     0 as *const libc::c_char,
2293 +                     0 as *const libc::c_char,
2294 +                     0 as *const libc::c_char,
2295 +                     0 as *const libc::c_char,
2296 +                     0 as *const libc::c_char,
2297 +                     0 as *const libc::c_char,
2298 +                     0 as *const libc::c_char,
2299 +                     0 as *const libc::c_char,
2300 +                     0 as *const libc::c_char,
2301 +                 ],
2302 +                 option_names: [
2303 +                     b"period\0" as *const u8 as *const libc::c_char,
2304 +                     0 as *const libc::c_char,
2305 +                     0 as *const libc::c_char,
2306 +                     0 as *const libc::c_char,
2307 +                     0 as *const libc::c_char,
2308 +                     0 as *const libc::c_char,
2309 +                     0 as *const libc::c_char,
2310 +                     0 as *const libc::c_char,
2311 +                     0 as *const libc::c_char,
2312 +                     0 as *const libc::c_char,
2313 +                     0 as *const libc::c_char,
2314 +                     0 as *const libc::c_char,
2315 +                     0 as *const libc::c_char,
2316 +                     0 as *const libc::c_char,
2317 +                     0 as *const libc::c_char,
2318 +                     0 as *const libc::c_char,
2319 +                 ],
2320 +                 output_names: [
2321 +                     b"cci\0" as *const u8 as *const libc::c_char,
2322 +                     0 as *const libc::c_char,
2323 +                     0 as *const libc::c_char,
2324 +                     0 as *const libc::c_char,
2325 +                     0 as *const libc::c_char,
2326 +                     0 as *const libc::c_char,
2327 +                     0 as *const libc::c_char,
2328 +                     0 as *const libc::c_char,
2329 +                     0 as *const libc::c_char,
2330 +                     0 as *const libc::c_char,
2331 +                     0 as *const libc::c_char,
2332 +                     0 as *const libc::c_char,
2333 +                     0 as *const libc::c_char,
2334 +                     0 as *const libc::c_char,
2335 +                     0 as *const libc::c_char,
2336 +                     0 as *const libc::c_char,
2337 +                 ],
2338 +                 stream_new: None,
2339 +                 stream_run: None,
2340 +                 stream_free: None,
2341 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:2423:13
     |
2344 | /             let mut init = ti_indicator_info {
2345 | |                 name: b"ceil\0" as *const u8 as *const libc::c_char,
2346 | |                 full_name: b"Vector Ceiling\0" as *const u8 as *const libc::c_char,
2347 | |                 start: Some(
...    |
2421 | |                 stream_free: None,
2422 | |             };
     | |______________- unnecessary `let` binding
2423 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
2344 ~             
2345 ~             ti_indicator_info {
2346 +                 name: b"ceil\0" as *const u8 as *const libc::c_char,
2347 +                 full_name: b"Vector Ceiling\0" as *const u8 as *const libc::c_char,
2348 +                 start: Some(
2349 +                     ti_ceil_start
2350 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
2351 +                 ),
2352 +                 indicator: Some(
2353 +                     ti_ceil
2354 +                         as unsafe extern "C" fn(
2355 +                             libc::c_int,
2356 +                             *const *const libc::c_double,
2357 +                             *const libc::c_double,
2358 +                             *const *mut libc::c_double,
2359 +                         ) -> libc::c_int,
2360 +                 ),
2361 +                 indicator_ref: None,
2362 +                 type_0: 4 as libc::c_int,
2363 +                 inputs: 1 as libc::c_int,
2364 +                 options: 0 as libc::c_int,
2365 +                 outputs: 1 as libc::c_int,
2366 +                 input_names: [
2367 +                     b"real\0" as *const u8 as *const libc::c_char,
2368 +                     0 as *const libc::c_char,
2369 +                     0 as *const libc::c_char,
2370 +                     0 as *const libc::c_char,
2371 +                     0 as *const libc::c_char,
2372 +                     0 as *const libc::c_char,
2373 +                     0 as *const libc::c_char,
2374 +                     0 as *const libc::c_char,
2375 +                     0 as *const libc::c_char,
2376 +                     0 as *const libc::c_char,
2377 +                     0 as *const libc::c_char,
2378 +                     0 as *const libc::c_char,
2379 +                     0 as *const libc::c_char,
2380 +                     0 as *const libc::c_char,
2381 +                     0 as *const libc::c_char,
2382 +                     0 as *const libc::c_char,
2383 +                 ],
2384 +                 option_names: [
2385 +                     b"\0" as *const u8 as *const libc::c_char,
2386 +                     0 as *const libc::c_char,
2387 +                     0 as *const libc::c_char,
2388 +                     0 as *const libc::c_char,
2389 +                     0 as *const libc::c_char,
2390 +                     0 as *const libc::c_char,
2391 +                     0 as *const libc::c_char,
2392 +                     0 as *const libc::c_char,
2393 +                     0 as *const libc::c_char,
2394 +                     0 as *const libc::c_char,
2395 +                     0 as *const libc::c_char,
2396 +                     0 as *const libc::c_char,
2397 +                     0 as *const libc::c_char,
2398 +                     0 as *const libc::c_char,
2399 +                     0 as *const libc::c_char,
2400 +                     0 as *const libc::c_char,
2401 +                 ],
2402 +                 output_names: [
2403 +                     b"ceil\0" as *const u8 as *const libc::c_char,
2404 +                     0 as *const libc::c_char,
2405 +                     0 as *const libc::c_char,
2406 +                     0 as *const libc::c_char,
2407 +                     0 as *const libc::c_char,
2408 +                     0 as *const libc::c_char,
2409 +                     0 as *const libc::c_char,
2410 +                     0 as *const libc::c_char,
2411 +                     0 as *const libc::c_char,
2412 +                     0 as *const libc::c_char,
2413 +                     0 as *const libc::c_char,
2414 +                     0 as *const libc::c_char,
2415 +                     0 as *const libc::c_char,
2416 +                     0 as *const libc::c_char,
2417 +                     0 as *const libc::c_char,
2418 +                     0 as *const libc::c_char,
2419 +                 ],
2420 +                 stream_new: None,
2421 +                 stream_run: None,
2422 +                 stream_free: None,
2423 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:2506:13
     |
2426 | /             let mut init = ti_indicator_info {
2427 | |                 name: b"cmo\0" as *const u8 as *const libc::c_char,
2428 | |                 full_name: b"Chande Momentum Oscillator\0" as *const u8
2429 | |                     as *const libc::c_char,
...    |
2504 | |                 stream_free: None,
2505 | |             };
     | |______________- unnecessary `let` binding
2506 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
2426 ~             
2427 ~             ti_indicator_info {
2428 +                 name: b"cmo\0" as *const u8 as *const libc::c_char,
2429 +                 full_name: b"Chande Momentum Oscillator\0" as *const u8
2430 +                     as *const libc::c_char,
2431 +                 start: Some(
2432 +                     ti_cmo_start
2433 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
2434 +                 ),
2435 +                 indicator: Some(
2436 +                     ti_cmo
2437 +                         as unsafe extern "C" fn(
2438 +                             libc::c_int,
2439 +                             *const *const libc::c_double,
2440 +                             *const libc::c_double,
2441 +                             *const *mut libc::c_double,
2442 +                         ) -> libc::c_int,
2443 +                 ),
2444 +                 indicator_ref: None,
2445 +                 type_0: 2 as libc::c_int,
2446 +                 inputs: 1 as libc::c_int,
2447 +                 options: 1 as libc::c_int,
2448 +                 outputs: 1 as libc::c_int,
2449 +                 input_names: [
2450 +                     b"real\0" as *const u8 as *const libc::c_char,
2451 +                     0 as *const libc::c_char,
2452 +                     0 as *const libc::c_char,
2453 +                     0 as *const libc::c_char,
2454 +                     0 as *const libc::c_char,
2455 +                     0 as *const libc::c_char,
2456 +                     0 as *const libc::c_char,
2457 +                     0 as *const libc::c_char,
2458 +                     0 as *const libc::c_char,
2459 +                     0 as *const libc::c_char,
2460 +                     0 as *const libc::c_char,
2461 +                     0 as *const libc::c_char,
2462 +                     0 as *const libc::c_char,
2463 +                     0 as *const libc::c_char,
2464 +                     0 as *const libc::c_char,
2465 +                     0 as *const libc::c_char,
2466 +                 ],
2467 +                 option_names: [
2468 +                     b"period\0" as *const u8 as *const libc::c_char,
2469 +                     0 as *const libc::c_char,
2470 +                     0 as *const libc::c_char,
2471 +                     0 as *const libc::c_char,
2472 +                     0 as *const libc::c_char,
2473 +                     0 as *const libc::c_char,
2474 +                     0 as *const libc::c_char,
2475 +                     0 as *const libc::c_char,
2476 +                     0 as *const libc::c_char,
2477 +                     0 as *const libc::c_char,
2478 +                     0 as *const libc::c_char,
2479 +                     0 as *const libc::c_char,
2480 +                     0 as *const libc::c_char,
2481 +                     0 as *const libc::c_char,
2482 +                     0 as *const libc::c_char,
2483 +                     0 as *const libc::c_char,
2484 +                 ],
2485 +                 output_names: [
2486 +                     b"cmo\0" as *const u8 as *const libc::c_char,
2487 +                     0 as *const libc::c_char,
2488 +                     0 as *const libc::c_char,
2489 +                     0 as *const libc::c_char,
2490 +                     0 as *const libc::c_char,
2491 +                     0 as *const libc::c_char,
2492 +                     0 as *const libc::c_char,
2493 +                     0 as *const libc::c_char,
2494 +                     0 as *const libc::c_char,
2495 +                     0 as *const libc::c_char,
2496 +                     0 as *const libc::c_char,
2497 +                     0 as *const libc::c_char,
2498 +                     0 as *const libc::c_char,
2499 +                     0 as *const libc::c_char,
2500 +                     0 as *const libc::c_char,
2501 +                     0 as *const libc::c_char,
2502 +                 ],
2503 +                 stream_new: None,
2504 +                 stream_run: None,
2505 +                 stream_free: None,
2506 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:2588:13
     |
2509 | /             let mut init = ti_indicator_info {
2510 | |                 name: b"cos\0" as *const u8 as *const libc::c_char,
2511 | |                 full_name: b"Vector Cosine\0" as *const u8 as *const libc::c_char,
2512 | |                 start: Some(
...    |
2586 | |                 stream_free: None,
2587 | |             };
     | |______________- unnecessary `let` binding
2588 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
2509 ~             
2510 ~             ti_indicator_info {
2511 +                 name: b"cos\0" as *const u8 as *const libc::c_char,
2512 +                 full_name: b"Vector Cosine\0" as *const u8 as *const libc::c_char,
2513 +                 start: Some(
2514 +                     ti_cos_start
2515 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
2516 +                 ),
2517 +                 indicator: Some(
2518 +                     ti_cos
2519 +                         as unsafe extern "C" fn(
2520 +                             libc::c_int,
2521 +                             *const *const libc::c_double,
2522 +                             *const libc::c_double,
2523 +                             *const *mut libc::c_double,
2524 +                         ) -> libc::c_int,
2525 +                 ),
2526 +                 indicator_ref: None,
2527 +                 type_0: 4 as libc::c_int,
2528 +                 inputs: 1 as libc::c_int,
2529 +                 options: 0 as libc::c_int,
2530 +                 outputs: 1 as libc::c_int,
2531 +                 input_names: [
2532 +                     b"real\0" as *const u8 as *const libc::c_char,
2533 +                     0 as *const libc::c_char,
2534 +                     0 as *const libc::c_char,
2535 +                     0 as *const libc::c_char,
2536 +                     0 as *const libc::c_char,
2537 +                     0 as *const libc::c_char,
2538 +                     0 as *const libc::c_char,
2539 +                     0 as *const libc::c_char,
2540 +                     0 as *const libc::c_char,
2541 +                     0 as *const libc::c_char,
2542 +                     0 as *const libc::c_char,
2543 +                     0 as *const libc::c_char,
2544 +                     0 as *const libc::c_char,
2545 +                     0 as *const libc::c_char,
2546 +                     0 as *const libc::c_char,
2547 +                     0 as *const libc::c_char,
2548 +                 ],
2549 +                 option_names: [
2550 +                     b"\0" as *const u8 as *const libc::c_char,
2551 +                     0 as *const libc::c_char,
2552 +                     0 as *const libc::c_char,
2553 +                     0 as *const libc::c_char,
2554 +                     0 as *const libc::c_char,
2555 +                     0 as *const libc::c_char,
2556 +                     0 as *const libc::c_char,
2557 +                     0 as *const libc::c_char,
2558 +                     0 as *const libc::c_char,
2559 +                     0 as *const libc::c_char,
2560 +                     0 as *const libc::c_char,
2561 +                     0 as *const libc::c_char,
2562 +                     0 as *const libc::c_char,
2563 +                     0 as *const libc::c_char,
2564 +                     0 as *const libc::c_char,
2565 +                     0 as *const libc::c_char,
2566 +                 ],
2567 +                 output_names: [
2568 +                     b"cos\0" as *const u8 as *const libc::c_char,
2569 +                     0 as *const libc::c_char,
2570 +                     0 as *const libc::c_char,
2571 +                     0 as *const libc::c_char,
2572 +                     0 as *const libc::c_char,
2573 +                     0 as *const libc::c_char,
2574 +                     0 as *const libc::c_char,
2575 +                     0 as *const libc::c_char,
2576 +                     0 as *const libc::c_char,
2577 +                     0 as *const libc::c_char,
2578 +                     0 as *const libc::c_char,
2579 +                     0 as *const libc::c_char,
2580 +                     0 as *const libc::c_char,
2581 +                     0 as *const libc::c_char,
2582 +                     0 as *const libc::c_char,
2583 +                     0 as *const libc::c_char,
2584 +                 ],
2585 +                 stream_new: None,
2586 +                 stream_run: None,
2587 +                 stream_free: None,
2588 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:2671:13
     |
2591 | /             let mut init = ti_indicator_info {
2592 | |                 name: b"cosh\0" as *const u8 as *const libc::c_char,
2593 | |                 full_name: b"Vector Hyperbolic Cosine\0" as *const u8
2594 | |                     as *const libc::c_char,
...    |
2669 | |                 stream_free: None,
2670 | |             };
     | |______________- unnecessary `let` binding
2671 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
2591 ~             
2592 ~             ti_indicator_info {
2593 +                 name: b"cosh\0" as *const u8 as *const libc::c_char,
2594 +                 full_name: b"Vector Hyperbolic Cosine\0" as *const u8
2595 +                     as *const libc::c_char,
2596 +                 start: Some(
2597 +                     ti_cosh_start
2598 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
2599 +                 ),
2600 +                 indicator: Some(
2601 +                     ti_cosh
2602 +                         as unsafe extern "C" fn(
2603 +                             libc::c_int,
2604 +                             *const *const libc::c_double,
2605 +                             *const libc::c_double,
2606 +                             *const *mut libc::c_double,
2607 +                         ) -> libc::c_int,
2608 +                 ),
2609 +                 indicator_ref: None,
2610 +                 type_0: 4 as libc::c_int,
2611 +                 inputs: 1 as libc::c_int,
2612 +                 options: 0 as libc::c_int,
2613 +                 outputs: 1 as libc::c_int,
2614 +                 input_names: [
2615 +                     b"real\0" as *const u8 as *const libc::c_char,
2616 +                     0 as *const libc::c_char,
2617 +                     0 as *const libc::c_char,
2618 +                     0 as *const libc::c_char,
2619 +                     0 as *const libc::c_char,
2620 +                     0 as *const libc::c_char,
2621 +                     0 as *const libc::c_char,
2622 +                     0 as *const libc::c_char,
2623 +                     0 as *const libc::c_char,
2624 +                     0 as *const libc::c_char,
2625 +                     0 as *const libc::c_char,
2626 +                     0 as *const libc::c_char,
2627 +                     0 as *const libc::c_char,
2628 +                     0 as *const libc::c_char,
2629 +                     0 as *const libc::c_char,
2630 +                     0 as *const libc::c_char,
2631 +                 ],
2632 +                 option_names: [
2633 +                     b"\0" as *const u8 as *const libc::c_char,
2634 +                     0 as *const libc::c_char,
2635 +                     0 as *const libc::c_char,
2636 +                     0 as *const libc::c_char,
2637 +                     0 as *const libc::c_char,
2638 +                     0 as *const libc::c_char,
2639 +                     0 as *const libc::c_char,
2640 +                     0 as *const libc::c_char,
2641 +                     0 as *const libc::c_char,
2642 +                     0 as *const libc::c_char,
2643 +                     0 as *const libc::c_char,
2644 +                     0 as *const libc::c_char,
2645 +                     0 as *const libc::c_char,
2646 +                     0 as *const libc::c_char,
2647 +                     0 as *const libc::c_char,
2648 +                     0 as *const libc::c_char,
2649 +                 ],
2650 +                 output_names: [
2651 +                     b"cosh\0" as *const u8 as *const libc::c_char,
2652 +                     0 as *const libc::c_char,
2653 +                     0 as *const libc::c_char,
2654 +                     0 as *const libc::c_char,
2655 +                     0 as *const libc::c_char,
2656 +                     0 as *const libc::c_char,
2657 +                     0 as *const libc::c_char,
2658 +                     0 as *const libc::c_char,
2659 +                     0 as *const libc::c_char,
2660 +                     0 as *const libc::c_char,
2661 +                     0 as *const libc::c_char,
2662 +                     0 as *const libc::c_char,
2663 +                     0 as *const libc::c_char,
2664 +                     0 as *const libc::c_char,
2665 +                     0 as *const libc::c_char,
2666 +                     0 as *const libc::c_char,
2667 +                 ],
2668 +                 stream_new: None,
2669 +                 stream_run: None,
2670 +                 stream_free: None,
2671 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:2753:13
     |
2674 | /             let mut init = ti_indicator_info {
2675 | |                 name: b"crossany\0" as *const u8 as *const libc::c_char,
2676 | |                 full_name: b"Crossany\0" as *const u8 as *const libc::c_char,
2677 | |                 start: Some(
...    |
2751 | |                 stream_free: None,
2752 | |             };
     | |______________- unnecessary `let` binding
2753 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
2674 ~             
2675 ~             ti_indicator_info {
2676 +                 name: b"crossany\0" as *const u8 as *const libc::c_char,
2677 +                 full_name: b"Crossany\0" as *const u8 as *const libc::c_char,
2678 +                 start: Some(
2679 +                     ti_crossany_start
2680 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
2681 +                 ),
2682 +                 indicator: Some(
2683 +                     ti_crossany
2684 +                         as unsafe extern "C" fn(
2685 +                             libc::c_int,
2686 +                             *const *const libc::c_double,
2687 +                             *const libc::c_double,
2688 +                             *const *mut libc::c_double,
2689 +                         ) -> libc::c_int,
2690 +                 ),
2691 +                 indicator_ref: None,
2692 +                 type_0: 3 as libc::c_int,
2693 +                 inputs: 2 as libc::c_int,
2694 +                 options: 0 as libc::c_int,
2695 +                 outputs: 1 as libc::c_int,
2696 +                 input_names: [
2697 +                     b"real\0" as *const u8 as *const libc::c_char,
2698 +                     b"real\0" as *const u8 as *const libc::c_char,
2699 +                     0 as *const libc::c_char,
2700 +                     0 as *const libc::c_char,
2701 +                     0 as *const libc::c_char,
2702 +                     0 as *const libc::c_char,
2703 +                     0 as *const libc::c_char,
2704 +                     0 as *const libc::c_char,
2705 +                     0 as *const libc::c_char,
2706 +                     0 as *const libc::c_char,
2707 +                     0 as *const libc::c_char,
2708 +                     0 as *const libc::c_char,
2709 +                     0 as *const libc::c_char,
2710 +                     0 as *const libc::c_char,
2711 +                     0 as *const libc::c_char,
2712 +                     0 as *const libc::c_char,
2713 +                 ],
2714 +                 option_names: [
2715 +                     b"\0" as *const u8 as *const libc::c_char,
2716 +                     0 as *const libc::c_char,
2717 +                     0 as *const libc::c_char,
2718 +                     0 as *const libc::c_char,
2719 +                     0 as *const libc::c_char,
2720 +                     0 as *const libc::c_char,
2721 +                     0 as *const libc::c_char,
2722 +                     0 as *const libc::c_char,
2723 +                     0 as *const libc::c_char,
2724 +                     0 as *const libc::c_char,
2725 +                     0 as *const libc::c_char,
2726 +                     0 as *const libc::c_char,
2727 +                     0 as *const libc::c_char,
2728 +                     0 as *const libc::c_char,
2729 +                     0 as *const libc::c_char,
2730 +                     0 as *const libc::c_char,
2731 +                 ],
2732 +                 output_names: [
2733 +                     b"crossany\0" as *const u8 as *const libc::c_char,
2734 +                     0 as *const libc::c_char,
2735 +                     0 as *const libc::c_char,
2736 +                     0 as *const libc::c_char,
2737 +                     0 as *const libc::c_char,
2738 +                     0 as *const libc::c_char,
2739 +                     0 as *const libc::c_char,
2740 +                     0 as *const libc::c_char,
2741 +                     0 as *const libc::c_char,
2742 +                     0 as *const libc::c_char,
2743 +                     0 as *const libc::c_char,
2744 +                     0 as *const libc::c_char,
2745 +                     0 as *const libc::c_char,
2746 +                     0 as *const libc::c_char,
2747 +                     0 as *const libc::c_char,
2748 +                     0 as *const libc::c_char,
2749 +                 ],
2750 +                 stream_new: None,
2751 +                 stream_run: None,
2752 +                 stream_free: None,
2753 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:2835:13
     |
2756 | /             let mut init = ti_indicator_info {
2757 | |                 name: b"crossover\0" as *const u8 as *const libc::c_char,
2758 | |                 full_name: b"Crossover\0" as *const u8 as *const libc::c_char,
2759 | |                 start: Some(
...    |
2833 | |                 stream_free: None,
2834 | |             };
     | |______________- unnecessary `let` binding
2835 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
2756 ~             
2757 ~             ti_indicator_info {
2758 +                 name: b"crossover\0" as *const u8 as *const libc::c_char,
2759 +                 full_name: b"Crossover\0" as *const u8 as *const libc::c_char,
2760 +                 start: Some(
2761 +                     ti_crossover_start
2762 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
2763 +                 ),
2764 +                 indicator: Some(
2765 +                     ti_crossover
2766 +                         as unsafe extern "C" fn(
2767 +                             libc::c_int,
2768 +                             *const *const libc::c_double,
2769 +                             *const libc::c_double,
2770 +                             *const *mut libc::c_double,
2771 +                         ) -> libc::c_int,
2772 +                 ),
2773 +                 indicator_ref: None,
2774 +                 type_0: 3 as libc::c_int,
2775 +                 inputs: 2 as libc::c_int,
2776 +                 options: 0 as libc::c_int,
2777 +                 outputs: 1 as libc::c_int,
2778 +                 input_names: [
2779 +                     b"real\0" as *const u8 as *const libc::c_char,
2780 +                     b"real\0" as *const u8 as *const libc::c_char,
2781 +                     0 as *const libc::c_char,
2782 +                     0 as *const libc::c_char,
2783 +                     0 as *const libc::c_char,
2784 +                     0 as *const libc::c_char,
2785 +                     0 as *const libc::c_char,
2786 +                     0 as *const libc::c_char,
2787 +                     0 as *const libc::c_char,
2788 +                     0 as *const libc::c_char,
2789 +                     0 as *const libc::c_char,
2790 +                     0 as *const libc::c_char,
2791 +                     0 as *const libc::c_char,
2792 +                     0 as *const libc::c_char,
2793 +                     0 as *const libc::c_char,
2794 +                     0 as *const libc::c_char,
2795 +                 ],
2796 +                 option_names: [
2797 +                     b"\0" as *const u8 as *const libc::c_char,
2798 +                     0 as *const libc::c_char,
2799 +                     0 as *const libc::c_char,
2800 +                     0 as *const libc::c_char,
2801 +                     0 as *const libc::c_char,
2802 +                     0 as *const libc::c_char,
2803 +                     0 as *const libc::c_char,
2804 +                     0 as *const libc::c_char,
2805 +                     0 as *const libc::c_char,
2806 +                     0 as *const libc::c_char,
2807 +                     0 as *const libc::c_char,
2808 +                     0 as *const libc::c_char,
2809 +                     0 as *const libc::c_char,
2810 +                     0 as *const libc::c_char,
2811 +                     0 as *const libc::c_char,
2812 +                     0 as *const libc::c_char,
2813 +                 ],
2814 +                 output_names: [
2815 +                     b"crossover\0" as *const u8 as *const libc::c_char,
2816 +                     0 as *const libc::c_char,
2817 +                     0 as *const libc::c_char,
2818 +                     0 as *const libc::c_char,
2819 +                     0 as *const libc::c_char,
2820 +                     0 as *const libc::c_char,
2821 +                     0 as *const libc::c_char,
2822 +                     0 as *const libc::c_char,
2823 +                     0 as *const libc::c_char,
2824 +                     0 as *const libc::c_char,
2825 +                     0 as *const libc::c_char,
2826 +                     0 as *const libc::c_char,
2827 +                     0 as *const libc::c_char,
2828 +                     0 as *const libc::c_char,
2829 +                     0 as *const libc::c_char,
2830 +                     0 as *const libc::c_char,
2831 +                 ],
2832 +                 stream_new: None,
2833 +                 stream_run: None,
2834 +                 stream_free: None,
2835 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:2917:13
     |
2838 | /             let mut init = ti_indicator_info {
2839 | |                 name: b"cvi\0" as *const u8 as *const libc::c_char,
2840 | |                 full_name: b"Chaikins Volatility\0" as *const u8 as *const libc::c_char,
2841 | |                 start: Some(
...    |
2915 | |                 stream_free: None,
2916 | |             };
     | |______________- unnecessary `let` binding
2917 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
2838 ~             
2839 ~             ti_indicator_info {
2840 +                 name: b"cvi\0" as *const u8 as *const libc::c_char,
2841 +                 full_name: b"Chaikins Volatility\0" as *const u8 as *const libc::c_char,
2842 +                 start: Some(
2843 +                     ti_cvi_start
2844 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
2845 +                 ),
2846 +                 indicator: Some(
2847 +                     ti_cvi
2848 +                         as unsafe extern "C" fn(
2849 +                             libc::c_int,
2850 +                             *const *const libc::c_double,
2851 +                             *const libc::c_double,
2852 +                             *const *mut libc::c_double,
2853 +                         ) -> libc::c_int,
2854 +                 ),
2855 +                 indicator_ref: None,
2856 +                 type_0: 2 as libc::c_int,
2857 +                 inputs: 2 as libc::c_int,
2858 +                 options: 1 as libc::c_int,
2859 +                 outputs: 1 as libc::c_int,
2860 +                 input_names: [
2861 +                     b"high\0" as *const u8 as *const libc::c_char,
2862 +                     b"low\0" as *const u8 as *const libc::c_char,
2863 +                     0 as *const libc::c_char,
2864 +                     0 as *const libc::c_char,
2865 +                     0 as *const libc::c_char,
2866 +                     0 as *const libc::c_char,
2867 +                     0 as *const libc::c_char,
2868 +                     0 as *const libc::c_char,
2869 +                     0 as *const libc::c_char,
2870 +                     0 as *const libc::c_char,
2871 +                     0 as *const libc::c_char,
2872 +                     0 as *const libc::c_char,
2873 +                     0 as *const libc::c_char,
2874 +                     0 as *const libc::c_char,
2875 +                     0 as *const libc::c_char,
2876 +                     0 as *const libc::c_char,
2877 +                 ],
2878 +                 option_names: [
2879 +                     b"period\0" as *const u8 as *const libc::c_char,
2880 +                     0 as *const libc::c_char,
2881 +                     0 as *const libc::c_char,
2882 +                     0 as *const libc::c_char,
2883 +                     0 as *const libc::c_char,
2884 +                     0 as *const libc::c_char,
2885 +                     0 as *const libc::c_char,
2886 +                     0 as *const libc::c_char,
2887 +                     0 as *const libc::c_char,
2888 +                     0 as *const libc::c_char,
2889 +                     0 as *const libc::c_char,
2890 +                     0 as *const libc::c_char,
2891 +                     0 as *const libc::c_char,
2892 +                     0 as *const libc::c_char,
2893 +                     0 as *const libc::c_char,
2894 +                     0 as *const libc::c_char,
2895 +                 ],
2896 +                 output_names: [
2897 +                     b"cvi\0" as *const u8 as *const libc::c_char,
2898 +                     0 as *const libc::c_char,
2899 +                     0 as *const libc::c_char,
2900 +                     0 as *const libc::c_char,
2901 +                     0 as *const libc::c_char,
2902 +                     0 as *const libc::c_char,
2903 +                     0 as *const libc::c_char,
2904 +                     0 as *const libc::c_char,
2905 +                     0 as *const libc::c_char,
2906 +                     0 as *const libc::c_char,
2907 +                     0 as *const libc::c_char,
2908 +                     0 as *const libc::c_char,
2909 +                     0 as *const libc::c_char,
2910 +                     0 as *const libc::c_char,
2911 +                     0 as *const libc::c_char,
2912 +                     0 as *const libc::c_char,
2913 +                 ],
2914 +                 stream_new: None,
2915 +                 stream_run: None,
2916 +                 stream_free: None,
2917 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:2999:13
     |
2920 | /             let mut init = ti_indicator_info {
2921 | |                 name: b"decay\0" as *const u8 as *const libc::c_char,
2922 | |                 full_name: b"Linear Decay\0" as *const u8 as *const libc::c_char,
2923 | |                 start: Some(
...    |
2997 | |                 stream_free: None,
2998 | |             };
     | |______________- unnecessary `let` binding
2999 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
2920 ~             
2921 ~             ti_indicator_info {
2922 +                 name: b"decay\0" as *const u8 as *const libc::c_char,
2923 +                 full_name: b"Linear Decay\0" as *const u8 as *const libc::c_char,
2924 +                 start: Some(
2925 +                     ti_decay_start
2926 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
2927 +                 ),
2928 +                 indicator: Some(
2929 +                     ti_decay
2930 +                         as unsafe extern "C" fn(
2931 +                             libc::c_int,
2932 +                             *const *const libc::c_double,
2933 +                             *const libc::c_double,
2934 +                             *const *mut libc::c_double,
2935 +                         ) -> libc::c_int,
2936 +                 ),
2937 +                 indicator_ref: None,
2938 +                 type_0: 3 as libc::c_int,
2939 +                 inputs: 1 as libc::c_int,
2940 +                 options: 1 as libc::c_int,
2941 +                 outputs: 1 as libc::c_int,
2942 +                 input_names: [
2943 +                     b"real\0" as *const u8 as *const libc::c_char,
2944 +                     0 as *const libc::c_char,
2945 +                     0 as *const libc::c_char,
2946 +                     0 as *const libc::c_char,
2947 +                     0 as *const libc::c_char,
2948 +                     0 as *const libc::c_char,
2949 +                     0 as *const libc::c_char,
2950 +                     0 as *const libc::c_char,
2951 +                     0 as *const libc::c_char,
2952 +                     0 as *const libc::c_char,
2953 +                     0 as *const libc::c_char,
2954 +                     0 as *const libc::c_char,
2955 +                     0 as *const libc::c_char,
2956 +                     0 as *const libc::c_char,
2957 +                     0 as *const libc::c_char,
2958 +                     0 as *const libc::c_char,
2959 +                 ],
2960 +                 option_names: [
2961 +                     b"period\0" as *const u8 as *const libc::c_char,
2962 +                     0 as *const libc::c_char,
2963 +                     0 as *const libc::c_char,
2964 +                     0 as *const libc::c_char,
2965 +                     0 as *const libc::c_char,
2966 +                     0 as *const libc::c_char,
2967 +                     0 as *const libc::c_char,
2968 +                     0 as *const libc::c_char,
2969 +                     0 as *const libc::c_char,
2970 +                     0 as *const libc::c_char,
2971 +                     0 as *const libc::c_char,
2972 +                     0 as *const libc::c_char,
2973 +                     0 as *const libc::c_char,
2974 +                     0 as *const libc::c_char,
2975 +                     0 as *const libc::c_char,
2976 +                     0 as *const libc::c_char,
2977 +                 ],
2978 +                 output_names: [
2979 +                     b"decay\0" as *const u8 as *const libc::c_char,
2980 +                     0 as *const libc::c_char,
2981 +                     0 as *const libc::c_char,
2982 +                     0 as *const libc::c_char,
2983 +                     0 as *const libc::c_char,
2984 +                     0 as *const libc::c_char,
2985 +                     0 as *const libc::c_char,
2986 +                     0 as *const libc::c_char,
2987 +                     0 as *const libc::c_char,
2988 +                     0 as *const libc::c_char,
2989 +                     0 as *const libc::c_char,
2990 +                     0 as *const libc::c_char,
2991 +                     0 as *const libc::c_char,
2992 +                     0 as *const libc::c_char,
2993 +                     0 as *const libc::c_char,
2994 +                     0 as *const libc::c_char,
2995 +                 ],
2996 +                 stream_new: None,
2997 +                 stream_run: None,
2998 +                 stream_free: None,
2999 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:3082:13
     |
3002 | /             let mut init = ti_indicator_info {
3003 | |                 name: b"dema\0" as *const u8 as *const libc::c_char,
3004 | |                 full_name: b"Double Exponential Moving Average\0" as *const u8
3005 | |                     as *const libc::c_char,
...    |
3080 | |                 stream_free: None,
3081 | |             };
     | |______________- unnecessary `let` binding
3082 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
3002 ~             
3003 ~             ti_indicator_info {
3004 +                 name: b"dema\0" as *const u8 as *const libc::c_char,
3005 +                 full_name: b"Double Exponential Moving Average\0" as *const u8
3006 +                     as *const libc::c_char,
3007 +                 start: Some(
3008 +                     ti_dema_start
3009 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
3010 +                 ),
3011 +                 indicator: Some(
3012 +                     ti_dema
3013 +                         as unsafe extern "C" fn(
3014 +                             libc::c_int,
3015 +                             *const *const libc::c_double,
3016 +                             *const libc::c_double,
3017 +                             *const *mut libc::c_double,
3018 +                         ) -> libc::c_int,
3019 +                 ),
3020 +                 indicator_ref: None,
3021 +                 type_0: 1 as libc::c_int,
3022 +                 inputs: 1 as libc::c_int,
3023 +                 options: 1 as libc::c_int,
3024 +                 outputs: 1 as libc::c_int,
3025 +                 input_names: [
3026 +                     b"real\0" as *const u8 as *const libc::c_char,
3027 +                     0 as *const libc::c_char,
3028 +                     0 as *const libc::c_char,
3029 +                     0 as *const libc::c_char,
3030 +                     0 as *const libc::c_char,
3031 +                     0 as *const libc::c_char,
3032 +                     0 as *const libc::c_char,
3033 +                     0 as *const libc::c_char,
3034 +                     0 as *const libc::c_char,
3035 +                     0 as *const libc::c_char,
3036 +                     0 as *const libc::c_char,
3037 +                     0 as *const libc::c_char,
3038 +                     0 as *const libc::c_char,
3039 +                     0 as *const libc::c_char,
3040 +                     0 as *const libc::c_char,
3041 +                     0 as *const libc::c_char,
3042 +                 ],
3043 +                 option_names: [
3044 +                     b"period\0" as *const u8 as *const libc::c_char,
3045 +                     0 as *const libc::c_char,
3046 +                     0 as *const libc::c_char,
3047 +                     0 as *const libc::c_char,
3048 +                     0 as *const libc::c_char,
3049 +                     0 as *const libc::c_char,
3050 +                     0 as *const libc::c_char,
3051 +                     0 as *const libc::c_char,
3052 +                     0 as *const libc::c_char,
3053 +                     0 as *const libc::c_char,
3054 +                     0 as *const libc::c_char,
3055 +                     0 as *const libc::c_char,
3056 +                     0 as *const libc::c_char,
3057 +                     0 as *const libc::c_char,
3058 +                     0 as *const libc::c_char,
3059 +                     0 as *const libc::c_char,
3060 +                 ],
3061 +                 output_names: [
3062 +                     b"dema\0" as *const u8 as *const libc::c_char,
3063 +                     0 as *const libc::c_char,
3064 +                     0 as *const libc::c_char,
3065 +                     0 as *const libc::c_char,
3066 +                     0 as *const libc::c_char,
3067 +                     0 as *const libc::c_char,
3068 +                     0 as *const libc::c_char,
3069 +                     0 as *const libc::c_char,
3070 +                     0 as *const libc::c_char,
3071 +                     0 as *const libc::c_char,
3072 +                     0 as *const libc::c_char,
3073 +                     0 as *const libc::c_char,
3074 +                     0 as *const libc::c_char,
3075 +                     0 as *const libc::c_char,
3076 +                     0 as *const libc::c_char,
3077 +                     0 as *const libc::c_char,
3078 +                 ],
3079 +                 stream_new: None,
3080 +                 stream_run: None,
3081 +                 stream_free: None,
3082 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:3165:13
     |
3085 | /             let mut init = ti_indicator_info {
3086 | |                 name: b"di\0" as *const u8 as *const libc::c_char,
3087 | |                 full_name: b"Directional Indicator\0" as *const u8
3088 | |                     as *const libc::c_char,
...    |
3163 | |                 stream_free: None,
3164 | |             };
     | |______________- unnecessary `let` binding
3165 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
3085 ~             
3086 ~             ti_indicator_info {
3087 +                 name: b"di\0" as *const u8 as *const libc::c_char,
3088 +                 full_name: b"Directional Indicator\0" as *const u8
3089 +                     as *const libc::c_char,
3090 +                 start: Some(
3091 +                     ti_di_start
3092 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
3093 +                 ),
3094 +                 indicator: Some(
3095 +                     ti_di
3096 +                         as unsafe extern "C" fn(
3097 +                             libc::c_int,
3098 +                             *const *const libc::c_double,
3099 +                             *const libc::c_double,
3100 +                             *const *mut libc::c_double,
3101 +                         ) -> libc::c_int,
3102 +                 ),
3103 +                 indicator_ref: None,
3104 +                 type_0: 2 as libc::c_int,
3105 +                 inputs: 3 as libc::c_int,
3106 +                 options: 1 as libc::c_int,
3107 +                 outputs: 2 as libc::c_int,
3108 +                 input_names: [
3109 +                     b"high\0" as *const u8 as *const libc::c_char,
3110 +                     b"low\0" as *const u8 as *const libc::c_char,
3111 +                     b"close\0" as *const u8 as *const libc::c_char,
3112 +                     0 as *const libc::c_char,
3113 +                     0 as *const libc::c_char,
3114 +                     0 as *const libc::c_char,
3115 +                     0 as *const libc::c_char,
3116 +                     0 as *const libc::c_char,
3117 +                     0 as *const libc::c_char,
3118 +                     0 as *const libc::c_char,
3119 +                     0 as *const libc::c_char,
3120 +                     0 as *const libc::c_char,
3121 +                     0 as *const libc::c_char,
3122 +                     0 as *const libc::c_char,
3123 +                     0 as *const libc::c_char,
3124 +                     0 as *const libc::c_char,
3125 +                 ],
3126 +                 option_names: [
3127 +                     b"period\0" as *const u8 as *const libc::c_char,
3128 +                     0 as *const libc::c_char,
3129 +                     0 as *const libc::c_char,
3130 +                     0 as *const libc::c_char,
3131 +                     0 as *const libc::c_char,
3132 +                     0 as *const libc::c_char,
3133 +                     0 as *const libc::c_char,
3134 +                     0 as *const libc::c_char,
3135 +                     0 as *const libc::c_char,
3136 +                     0 as *const libc::c_char,
3137 +                     0 as *const libc::c_char,
3138 +                     0 as *const libc::c_char,
3139 +                     0 as *const libc::c_char,
3140 +                     0 as *const libc::c_char,
3141 +                     0 as *const libc::c_char,
3142 +                     0 as *const libc::c_char,
3143 +                 ],
3144 +                 output_names: [
3145 +                     b"plus_di\0" as *const u8 as *const libc::c_char,
3146 +                     b"minus_di\0" as *const u8 as *const libc::c_char,
3147 +                     0 as *const libc::c_char,
3148 +                     0 as *const libc::c_char,
3149 +                     0 as *const libc::c_char,
3150 +                     0 as *const libc::c_char,
3151 +                     0 as *const libc::c_char,
3152 +                     0 as *const libc::c_char,
3153 +                     0 as *const libc::c_char,
3154 +                     0 as *const libc::c_char,
3155 +                     0 as *const libc::c_char,
3156 +                     0 as *const libc::c_char,
3157 +                     0 as *const libc::c_char,
3158 +                     0 as *const libc::c_char,
3159 +                     0 as *const libc::c_char,
3160 +                     0 as *const libc::c_char,
3161 +                 ],
3162 +                 stream_new: None,
3163 +                 stream_run: None,
3164 +                 stream_free: None,
3165 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:3247:13
     |
3168 | /             let mut init = ti_indicator_info {
3169 | |                 name: b"div\0" as *const u8 as *const libc::c_char,
3170 | |                 full_name: b"Vector Division\0" as *const u8 as *const libc::c_char,
3171 | |                 start: Some(
...    |
3245 | |                 stream_free: None,
3246 | |             };
     | |______________- unnecessary `let` binding
3247 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
3168 ~             
3169 ~             ti_indicator_info {
3170 +                 name: b"div\0" as *const u8 as *const libc::c_char,
3171 +                 full_name: b"Vector Division\0" as *const u8 as *const libc::c_char,
3172 +                 start: Some(
3173 +                     ti_div_start
3174 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
3175 +                 ),
3176 +                 indicator: Some(
3177 +                     ti_div
3178 +                         as unsafe extern "C" fn(
3179 +                             libc::c_int,
3180 +                             *const *const libc::c_double,
3181 +                             *const libc::c_double,
3182 +                             *const *mut libc::c_double,
3183 +                         ) -> libc::c_int,
3184 +                 ),
3185 +                 indicator_ref: None,
3186 +                 type_0: 4 as libc::c_int,
3187 +                 inputs: 2 as libc::c_int,
3188 +                 options: 0 as libc::c_int,
3189 +                 outputs: 1 as libc::c_int,
3190 +                 input_names: [
3191 +                     b"real\0" as *const u8 as *const libc::c_char,
3192 +                     b"real\0" as *const u8 as *const libc::c_char,
3193 +                     0 as *const libc::c_char,
3194 +                     0 as *const libc::c_char,
3195 +                     0 as *const libc::c_char,
3196 +                     0 as *const libc::c_char,
3197 +                     0 as *const libc::c_char,
3198 +                     0 as *const libc::c_char,
3199 +                     0 as *const libc::c_char,
3200 +                     0 as *const libc::c_char,
3201 +                     0 as *const libc::c_char,
3202 +                     0 as *const libc::c_char,
3203 +                     0 as *const libc::c_char,
3204 +                     0 as *const libc::c_char,
3205 +                     0 as *const libc::c_char,
3206 +                     0 as *const libc::c_char,
3207 +                 ],
3208 +                 option_names: [
3209 +                     b"\0" as *const u8 as *const libc::c_char,
3210 +                     0 as *const libc::c_char,
3211 +                     0 as *const libc::c_char,
3212 +                     0 as *const libc::c_char,
3213 +                     0 as *const libc::c_char,
3214 +                     0 as *const libc::c_char,
3215 +                     0 as *const libc::c_char,
3216 +                     0 as *const libc::c_char,
3217 +                     0 as *const libc::c_char,
3218 +                     0 as *const libc::c_char,
3219 +                     0 as *const libc::c_char,
3220 +                     0 as *const libc::c_char,
3221 +                     0 as *const libc::c_char,
3222 +                     0 as *const libc::c_char,
3223 +                     0 as *const libc::c_char,
3224 +                     0 as *const libc::c_char,
3225 +                 ],
3226 +                 output_names: [
3227 +                     b"div\0" as *const u8 as *const libc::c_char,
3228 +                     0 as *const libc::c_char,
3229 +                     0 as *const libc::c_char,
3230 +                     0 as *const libc::c_char,
3231 +                     0 as *const libc::c_char,
3232 +                     0 as *const libc::c_char,
3233 +                     0 as *const libc::c_char,
3234 +                     0 as *const libc::c_char,
3235 +                     0 as *const libc::c_char,
3236 +                     0 as *const libc::c_char,
3237 +                     0 as *const libc::c_char,
3238 +                     0 as *const libc::c_char,
3239 +                     0 as *const libc::c_char,
3240 +                     0 as *const libc::c_char,
3241 +                     0 as *const libc::c_char,
3242 +                     0 as *const libc::c_char,
3243 +                 ],
3244 +                 stream_new: None,
3245 +                 stream_run: None,
3246 +                 stream_free: None,
3247 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:3329:13
     |
3250 | /             let mut init = ti_indicator_info {
3251 | |                 name: b"dm\0" as *const u8 as *const libc::c_char,
3252 | |                 full_name: b"Directional Movement\0" as *const u8 as *const libc::c_char,
3253 | |                 start: Some(
...    |
3327 | |                 stream_free: None,
3328 | |             };
     | |______________- unnecessary `let` binding
3329 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
3250 ~             
3251 ~             ti_indicator_info {
3252 +                 name: b"dm\0" as *const u8 as *const libc::c_char,
3253 +                 full_name: b"Directional Movement\0" as *const u8 as *const libc::c_char,
3254 +                 start: Some(
3255 +                     ti_dm_start
3256 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
3257 +                 ),
3258 +                 indicator: Some(
3259 +                     ti_dm
3260 +                         as unsafe extern "C" fn(
3261 +                             libc::c_int,
3262 +                             *const *const libc::c_double,
3263 +                             *const libc::c_double,
3264 +                             *const *mut libc::c_double,
3265 +                         ) -> libc::c_int,
3266 +                 ),
3267 +                 indicator_ref: None,
3268 +                 type_0: 2 as libc::c_int,
3269 +                 inputs: 2 as libc::c_int,
3270 +                 options: 1 as libc::c_int,
3271 +                 outputs: 2 as libc::c_int,
3272 +                 input_names: [
3273 +                     b"high\0" as *const u8 as *const libc::c_char,
3274 +                     b"low\0" as *const u8 as *const libc::c_char,
3275 +                     0 as *const libc::c_char,
3276 +                     0 as *const libc::c_char,
3277 +                     0 as *const libc::c_char,
3278 +                     0 as *const libc::c_char,
3279 +                     0 as *const libc::c_char,
3280 +                     0 as *const libc::c_char,
3281 +                     0 as *const libc::c_char,
3282 +                     0 as *const libc::c_char,
3283 +                     0 as *const libc::c_char,
3284 +                     0 as *const libc::c_char,
3285 +                     0 as *const libc::c_char,
3286 +                     0 as *const libc::c_char,
3287 +                     0 as *const libc::c_char,
3288 +                     0 as *const libc::c_char,
3289 +                 ],
3290 +                 option_names: [
3291 +                     b"period\0" as *const u8 as *const libc::c_char,
3292 +                     0 as *const libc::c_char,
3293 +                     0 as *const libc::c_char,
3294 +                     0 as *const libc::c_char,
3295 +                     0 as *const libc::c_char,
3296 +                     0 as *const libc::c_char,
3297 +                     0 as *const libc::c_char,
3298 +                     0 as *const libc::c_char,
3299 +                     0 as *const libc::c_char,
3300 +                     0 as *const libc::c_char,
3301 +                     0 as *const libc::c_char,
3302 +                     0 as *const libc::c_char,
3303 +                     0 as *const libc::c_char,
3304 +                     0 as *const libc::c_char,
3305 +                     0 as *const libc::c_char,
3306 +                     0 as *const libc::c_char,
3307 +                 ],
3308 +                 output_names: [
3309 +                     b"plus_dm\0" as *const u8 as *const libc::c_char,
3310 +                     b"minus_dm\0" as *const u8 as *const libc::c_char,
3311 +                     0 as *const libc::c_char,
3312 +                     0 as *const libc::c_char,
3313 +                     0 as *const libc::c_char,
3314 +                     0 as *const libc::c_char,
3315 +                     0 as *const libc::c_char,
3316 +                     0 as *const libc::c_char,
3317 +                     0 as *const libc::c_char,
3318 +                     0 as *const libc::c_char,
3319 +                     0 as *const libc::c_char,
3320 +                     0 as *const libc::c_char,
3321 +                     0 as *const libc::c_char,
3322 +                     0 as *const libc::c_char,
3323 +                     0 as *const libc::c_char,
3324 +                     0 as *const libc::c_char,
3325 +                 ],
3326 +                 stream_new: None,
3327 +                 stream_run: None,
3328 +                 stream_free: None,
3329 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:3412:13
     |
3332 | /             let mut init = ti_indicator_info {
3333 | |                 name: b"dpo\0" as *const u8 as *const libc::c_char,
3334 | |                 full_name: b"Detrended Price Oscillator\0" as *const u8
3335 | |                     as *const libc::c_char,
...    |
3410 | |                 stream_free: None,
3411 | |             };
     | |______________- unnecessary `let` binding
3412 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
3332 ~             
3333 ~             ti_indicator_info {
3334 +                 name: b"dpo\0" as *const u8 as *const libc::c_char,
3335 +                 full_name: b"Detrended Price Oscillator\0" as *const u8
3336 +                     as *const libc::c_char,
3337 +                 start: Some(
3338 +                     ti_dpo_start
3339 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
3340 +                 ),
3341 +                 indicator: Some(
3342 +                     ti_dpo
3343 +                         as unsafe extern "C" fn(
3344 +                             libc::c_int,
3345 +                             *const *const libc::c_double,
3346 +                             *const libc::c_double,
3347 +                             *const *mut libc::c_double,
3348 +                         ) -> libc::c_int,
3349 +                 ),
3350 +                 indicator_ref: None,
3351 +                 type_0: 2 as libc::c_int,
3352 +                 inputs: 1 as libc::c_int,
3353 +                 options: 1 as libc::c_int,
3354 +                 outputs: 1 as libc::c_int,
3355 +                 input_names: [
3356 +                     b"real\0" as *const u8 as *const libc::c_char,
3357 +                     0 as *const libc::c_char,
3358 +                     0 as *const libc::c_char,
3359 +                     0 as *const libc::c_char,
3360 +                     0 as *const libc::c_char,
3361 +                     0 as *const libc::c_char,
3362 +                     0 as *const libc::c_char,
3363 +                     0 as *const libc::c_char,
3364 +                     0 as *const libc::c_char,
3365 +                     0 as *const libc::c_char,
3366 +                     0 as *const libc::c_char,
3367 +                     0 as *const libc::c_char,
3368 +                     0 as *const libc::c_char,
3369 +                     0 as *const libc::c_char,
3370 +                     0 as *const libc::c_char,
3371 +                     0 as *const libc::c_char,
3372 +                 ],
3373 +                 option_names: [
3374 +                     b"period\0" as *const u8 as *const libc::c_char,
3375 +                     0 as *const libc::c_char,
3376 +                     0 as *const libc::c_char,
3377 +                     0 as *const libc::c_char,
3378 +                     0 as *const libc::c_char,
3379 +                     0 as *const libc::c_char,
3380 +                     0 as *const libc::c_char,
3381 +                     0 as *const libc::c_char,
3382 +                     0 as *const libc::c_char,
3383 +                     0 as *const libc::c_char,
3384 +                     0 as *const libc::c_char,
3385 +                     0 as *const libc::c_char,
3386 +                     0 as *const libc::c_char,
3387 +                     0 as *const libc::c_char,
3388 +                     0 as *const libc::c_char,
3389 +                     0 as *const libc::c_char,
3390 +                 ],
3391 +                 output_names: [
3392 +                     b"dpo\0" as *const u8 as *const libc::c_char,
3393 +                     0 as *const libc::c_char,
3394 +                     0 as *const libc::c_char,
3395 +                     0 as *const libc::c_char,
3396 +                     0 as *const libc::c_char,
3397 +                     0 as *const libc::c_char,
3398 +                     0 as *const libc::c_char,
3399 +                     0 as *const libc::c_char,
3400 +                     0 as *const libc::c_char,
3401 +                     0 as *const libc::c_char,
3402 +                     0 as *const libc::c_char,
3403 +                     0 as *const libc::c_char,
3404 +                     0 as *const libc::c_char,
3405 +                     0 as *const libc::c_char,
3406 +                     0 as *const libc::c_char,
3407 +                     0 as *const libc::c_char,
3408 +                 ],
3409 +                 stream_new: None,
3410 +                 stream_run: None,
3411 +                 stream_free: None,
3412 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:3495:13
     |
3415 | /             let mut init = ti_indicator_info {
3416 | |                 name: b"dx\0" as *const u8 as *const libc::c_char,
3417 | |                 full_name: b"Directional Movement Index\0" as *const u8
3418 | |                     as *const libc::c_char,
...    |
3493 | |                 stream_free: None,
3494 | |             };
     | |______________- unnecessary `let` binding
3495 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
3415 ~             
3416 ~             ti_indicator_info {
3417 +                 name: b"dx\0" as *const u8 as *const libc::c_char,
3418 +                 full_name: b"Directional Movement Index\0" as *const u8
3419 +                     as *const libc::c_char,
3420 +                 start: Some(
3421 +                     ti_dx_start
3422 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
3423 +                 ),
3424 +                 indicator: Some(
3425 +                     ti_dx
3426 +                         as unsafe extern "C" fn(
3427 +                             libc::c_int,
3428 +                             *const *const libc::c_double,
3429 +                             *const libc::c_double,
3430 +                             *const *mut libc::c_double,
3431 +                         ) -> libc::c_int,
3432 +                 ),
3433 +                 indicator_ref: None,
3434 +                 type_0: 2 as libc::c_int,
3435 +                 inputs: 2 as libc::c_int,
3436 +                 options: 1 as libc::c_int,
3437 +                 outputs: 1 as libc::c_int,
3438 +                 input_names: [
3439 +                     b"high\0" as *const u8 as *const libc::c_char,
3440 +                     b"low\0" as *const u8 as *const libc::c_char,
3441 +                     0 as *const libc::c_char,
3442 +                     0 as *const libc::c_char,
3443 +                     0 as *const libc::c_char,
3444 +                     0 as *const libc::c_char,
3445 +                     0 as *const libc::c_char,
3446 +                     0 as *const libc::c_char,
3447 +                     0 as *const libc::c_char,
3448 +                     0 as *const libc::c_char,
3449 +                     0 as *const libc::c_char,
3450 +                     0 as *const libc::c_char,
3451 +                     0 as *const libc::c_char,
3452 +                     0 as *const libc::c_char,
3453 +                     0 as *const libc::c_char,
3454 +                     0 as *const libc::c_char,
3455 +                 ],
3456 +                 option_names: [
3457 +                     b"period\0" as *const u8 as *const libc::c_char,
3458 +                     0 as *const libc::c_char,
3459 +                     0 as *const libc::c_char,
3460 +                     0 as *const libc::c_char,
3461 +                     0 as *const libc::c_char,
3462 +                     0 as *const libc::c_char,
3463 +                     0 as *const libc::c_char,
3464 +                     0 as *const libc::c_char,
3465 +                     0 as *const libc::c_char,
3466 +                     0 as *const libc::c_char,
3467 +                     0 as *const libc::c_char,
3468 +                     0 as *const libc::c_char,
3469 +                     0 as *const libc::c_char,
3470 +                     0 as *const libc::c_char,
3471 +                     0 as *const libc::c_char,
3472 +                     0 as *const libc::c_char,
3473 +                 ],
3474 +                 output_names: [
3475 +                     b"dx\0" as *const u8 as *const libc::c_char,
3476 +                     0 as *const libc::c_char,
3477 +                     0 as *const libc::c_char,
3478 +                     0 as *const libc::c_char,
3479 +                     0 as *const libc::c_char,
3480 +                     0 as *const libc::c_char,
3481 +                     0 as *const libc::c_char,
3482 +                     0 as *const libc::c_char,
3483 +                     0 as *const libc::c_char,
3484 +                     0 as *const libc::c_char,
3485 +                     0 as *const libc::c_char,
3486 +                     0 as *const libc::c_char,
3487 +                     0 as *const libc::c_char,
3488 +                     0 as *const libc::c_char,
3489 +                     0 as *const libc::c_char,
3490 +                     0 as *const libc::c_char,
3491 +                 ],
3492 +                 stream_new: None,
3493 +                 stream_run: None,
3494 +                 stream_free: None,
3495 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:3577:13
     |
3498 | /             let mut init = ti_indicator_info {
3499 | |                 name: b"edecay\0" as *const u8 as *const libc::c_char,
3500 | |                 full_name: b"Exponential Decay\0" as *const u8 as *const libc::c_char,
3501 | |                 start: Some(
...    |
3575 | |                 stream_free: None,
3576 | |             };
     | |______________- unnecessary `let` binding
3577 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
3498 ~             
3499 ~             ti_indicator_info {
3500 +                 name: b"edecay\0" as *const u8 as *const libc::c_char,
3501 +                 full_name: b"Exponential Decay\0" as *const u8 as *const libc::c_char,
3502 +                 start: Some(
3503 +                     ti_edecay_start
3504 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
3505 +                 ),
3506 +                 indicator: Some(
3507 +                     ti_edecay
3508 +                         as unsafe extern "C" fn(
3509 +                             libc::c_int,
3510 +                             *const *const libc::c_double,
3511 +                             *const libc::c_double,
3512 +                             *const *mut libc::c_double,
3513 +                         ) -> libc::c_int,
3514 +                 ),
3515 +                 indicator_ref: None,
3516 +                 type_0: 3 as libc::c_int,
3517 +                 inputs: 1 as libc::c_int,
3518 +                 options: 1 as libc::c_int,
3519 +                 outputs: 1 as libc::c_int,
3520 +                 input_names: [
3521 +                     b"real\0" as *const u8 as *const libc::c_char,
3522 +                     0 as *const libc::c_char,
3523 +                     0 as *const libc::c_char,
3524 +                     0 as *const libc::c_char,
3525 +                     0 as *const libc::c_char,
3526 +                     0 as *const libc::c_char,
3527 +                     0 as *const libc::c_char,
3528 +                     0 as *const libc::c_char,
3529 +                     0 as *const libc::c_char,
3530 +                     0 as *const libc::c_char,
3531 +                     0 as *const libc::c_char,
3532 +                     0 as *const libc::c_char,
3533 +                     0 as *const libc::c_char,
3534 +                     0 as *const libc::c_char,
3535 +                     0 as *const libc::c_char,
3536 +                     0 as *const libc::c_char,
3537 +                 ],
3538 +                 option_names: [
3539 +                     b"period\0" as *const u8 as *const libc::c_char,
3540 +                     0 as *const libc::c_char,
3541 +                     0 as *const libc::c_char,
3542 +                     0 as *const libc::c_char,
3543 +                     0 as *const libc::c_char,
3544 +                     0 as *const libc::c_char,
3545 +                     0 as *const libc::c_char,
3546 +                     0 as *const libc::c_char,
3547 +                     0 as *const libc::c_char,
3548 +                     0 as *const libc::c_char,
3549 +                     0 as *const libc::c_char,
3550 +                     0 as *const libc::c_char,
3551 +                     0 as *const libc::c_char,
3552 +                     0 as *const libc::c_char,
3553 +                     0 as *const libc::c_char,
3554 +                     0 as *const libc::c_char,
3555 +                 ],
3556 +                 output_names: [
3557 +                     b"edecay\0" as *const u8 as *const libc::c_char,
3558 +                     0 as *const libc::c_char,
3559 +                     0 as *const libc::c_char,
3560 +                     0 as *const libc::c_char,
3561 +                     0 as *const libc::c_char,
3562 +                     0 as *const libc::c_char,
3563 +                     0 as *const libc::c_char,
3564 +                     0 as *const libc::c_char,
3565 +                     0 as *const libc::c_char,
3566 +                     0 as *const libc::c_char,
3567 +                     0 as *const libc::c_char,
3568 +                     0 as *const libc::c_char,
3569 +                     0 as *const libc::c_char,
3570 +                     0 as *const libc::c_char,
3571 +                     0 as *const libc::c_char,
3572 +                     0 as *const libc::c_char,
3573 +                 ],
3574 +                 stream_new: None,
3575 +                 stream_run: None,
3576 +                 stream_free: None,
3577 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:3660:13
     |
3580 | /             let mut init = ti_indicator_info {
3581 | |                 name: b"ema\0" as *const u8 as *const libc::c_char,
3582 | |                 full_name: b"Exponential Moving Average\0" as *const u8
3583 | |                     as *const libc::c_char,
...    |
3658 | |                 stream_free: None,
3659 | |             };
     | |______________- unnecessary `let` binding
3660 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
3580 ~             
3581 ~             ti_indicator_info {
3582 +                 name: b"ema\0" as *const u8 as *const libc::c_char,
3583 +                 full_name: b"Exponential Moving Average\0" as *const u8
3584 +                     as *const libc::c_char,
3585 +                 start: Some(
3586 +                     ti_ema_start
3587 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
3588 +                 ),
3589 +                 indicator: Some(
3590 +                     ti_ema
3591 +                         as unsafe extern "C" fn(
3592 +                             libc::c_int,
3593 +                             *const *const libc::c_double,
3594 +                             *const libc::c_double,
3595 +                             *const *mut libc::c_double,
3596 +                         ) -> libc::c_int,
3597 +                 ),
3598 +                 indicator_ref: None,
3599 +                 type_0: 1 as libc::c_int,
3600 +                 inputs: 1 as libc::c_int,
3601 +                 options: 1 as libc::c_int,
3602 +                 outputs: 1 as libc::c_int,
3603 +                 input_names: [
3604 +                     b"real\0" as *const u8 as *const libc::c_char,
3605 +                     0 as *const libc::c_char,
3606 +                     0 as *const libc::c_char,
3607 +                     0 as *const libc::c_char,
3608 +                     0 as *const libc::c_char,
3609 +                     0 as *const libc::c_char,
3610 +                     0 as *const libc::c_char,
3611 +                     0 as *const libc::c_char,
3612 +                     0 as *const libc::c_char,
3613 +                     0 as *const libc::c_char,
3614 +                     0 as *const libc::c_char,
3615 +                     0 as *const libc::c_char,
3616 +                     0 as *const libc::c_char,
3617 +                     0 as *const libc::c_char,
3618 +                     0 as *const libc::c_char,
3619 +                     0 as *const libc::c_char,
3620 +                 ],
3621 +                 option_names: [
3622 +                     b"period\0" as *const u8 as *const libc::c_char,
3623 +                     0 as *const libc::c_char,
3624 +                     0 as *const libc::c_char,
3625 +                     0 as *const libc::c_char,
3626 +                     0 as *const libc::c_char,
3627 +                     0 as *const libc::c_char,
3628 +                     0 as *const libc::c_char,
3629 +                     0 as *const libc::c_char,
3630 +                     0 as *const libc::c_char,
3631 +                     0 as *const libc::c_char,
3632 +                     0 as *const libc::c_char,
3633 +                     0 as *const libc::c_char,
3634 +                     0 as *const libc::c_char,
3635 +                     0 as *const libc::c_char,
3636 +                     0 as *const libc::c_char,
3637 +                     0 as *const libc::c_char,
3638 +                 ],
3639 +                 output_names: [
3640 +                     b"ema\0" as *const u8 as *const libc::c_char,
3641 +                     0 as *const libc::c_char,
3642 +                     0 as *const libc::c_char,
3643 +                     0 as *const libc::c_char,
3644 +                     0 as *const libc::c_char,
3645 +                     0 as *const libc::c_char,
3646 +                     0 as *const libc::c_char,
3647 +                     0 as *const libc::c_char,
3648 +                     0 as *const libc::c_char,
3649 +                     0 as *const libc::c_char,
3650 +                     0 as *const libc::c_char,
3651 +                     0 as *const libc::c_char,
3652 +                     0 as *const libc::c_char,
3653 +                     0 as *const libc::c_char,
3654 +                     0 as *const libc::c_char,
3655 +                     0 as *const libc::c_char,
3656 +                 ],
3657 +                 stream_new: None,
3658 +                 stream_run: None,
3659 +                 stream_free: None,
3660 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:3742:13
     |
3663 | /             let mut init = ti_indicator_info {
3664 | |                 name: b"emv\0" as *const u8 as *const libc::c_char,
3665 | |                 full_name: b"Ease of Movement\0" as *const u8 as *const libc::c_char,
3666 | |                 start: Some(
...    |
3740 | |                 stream_free: None,
3741 | |             };
     | |______________- unnecessary `let` binding
3742 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
3663 ~             
3664 ~             ti_indicator_info {
3665 +                 name: b"emv\0" as *const u8 as *const libc::c_char,
3666 +                 full_name: b"Ease of Movement\0" as *const u8 as *const libc::c_char,
3667 +                 start: Some(
3668 +                     ti_emv_start
3669 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
3670 +                 ),
3671 +                 indicator: Some(
3672 +                     ti_emv
3673 +                         as unsafe extern "C" fn(
3674 +                             libc::c_int,
3675 +                             *const *const libc::c_double,
3676 +                             *const libc::c_double,
3677 +                             *const *mut libc::c_double,
3678 +                         ) -> libc::c_int,
3679 +                 ),
3680 +                 indicator_ref: None,
3681 +                 type_0: 2 as libc::c_int,
3682 +                 inputs: 3 as libc::c_int,
3683 +                 options: 0 as libc::c_int,
3684 +                 outputs: 1 as libc::c_int,
3685 +                 input_names: [
3686 +                     b"high\0" as *const u8 as *const libc::c_char,
3687 +                     b"low\0" as *const u8 as *const libc::c_char,
3688 +                     b"volume\0" as *const u8 as *const libc::c_char,
3689 +                     0 as *const libc::c_char,
3690 +                     0 as *const libc::c_char,
3691 +                     0 as *const libc::c_char,
3692 +                     0 as *const libc::c_char,
3693 +                     0 as *const libc::c_char,
3694 +                     0 as *const libc::c_char,
3695 +                     0 as *const libc::c_char,
3696 +                     0 as *const libc::c_char,
3697 +                     0 as *const libc::c_char,
3698 +                     0 as *const libc::c_char,
3699 +                     0 as *const libc::c_char,
3700 +                     0 as *const libc::c_char,
3701 +                     0 as *const libc::c_char,
3702 +                 ],
3703 +                 option_names: [
3704 +                     b"\0" as *const u8 as *const libc::c_char,
3705 +                     0 as *const libc::c_char,
3706 +                     0 as *const libc::c_char,
3707 +                     0 as *const libc::c_char,
3708 +                     0 as *const libc::c_char,
3709 +                     0 as *const libc::c_char,
3710 +                     0 as *const libc::c_char,
3711 +                     0 as *const libc::c_char,
3712 +                     0 as *const libc::c_char,
3713 +                     0 as *const libc::c_char,
3714 +                     0 as *const libc::c_char,
3715 +                     0 as *const libc::c_char,
3716 +                     0 as *const libc::c_char,
3717 +                     0 as *const libc::c_char,
3718 +                     0 as *const libc::c_char,
3719 +                     0 as *const libc::c_char,
3720 +                 ],
3721 +                 output_names: [
3722 +                     b"emv\0" as *const u8 as *const libc::c_char,
3723 +                     0 as *const libc::c_char,
3724 +                     0 as *const libc::c_char,
3725 +                     0 as *const libc::c_char,
3726 +                     0 as *const libc::c_char,
3727 +                     0 as *const libc::c_char,
3728 +                     0 as *const libc::c_char,
3729 +                     0 as *const libc::c_char,
3730 +                     0 as *const libc::c_char,
3731 +                     0 as *const libc::c_char,
3732 +                     0 as *const libc::c_char,
3733 +                     0 as *const libc::c_char,
3734 +                     0 as *const libc::c_char,
3735 +                     0 as *const libc::c_char,
3736 +                     0 as *const libc::c_char,
3737 +                     0 as *const libc::c_char,
3738 +                 ],
3739 +                 stream_new: None,
3740 +                 stream_run: None,
3741 +                 stream_free: None,
3742 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:3824:13
     |
3745 | /             let mut init = ti_indicator_info {
3746 | |                 name: b"exp\0" as *const u8 as *const libc::c_char,
3747 | |                 full_name: b"Vector Exponential\0" as *const u8 as *const libc::c_char,
3748 | |                 start: Some(
...    |
3822 | |                 stream_free: None,
3823 | |             };
     | |______________- unnecessary `let` binding
3824 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
3745 ~             
3746 ~             ti_indicator_info {
3747 +                 name: b"exp\0" as *const u8 as *const libc::c_char,
3748 +                 full_name: b"Vector Exponential\0" as *const u8 as *const libc::c_char,
3749 +                 start: Some(
3750 +                     ti_exp_start
3751 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
3752 +                 ),
3753 +                 indicator: Some(
3754 +                     ti_exp
3755 +                         as unsafe extern "C" fn(
3756 +                             libc::c_int,
3757 +                             *const *const libc::c_double,
3758 +                             *const libc::c_double,
3759 +                             *const *mut libc::c_double,
3760 +                         ) -> libc::c_int,
3761 +                 ),
3762 +                 indicator_ref: None,
3763 +                 type_0: 4 as libc::c_int,
3764 +                 inputs: 1 as libc::c_int,
3765 +                 options: 0 as libc::c_int,
3766 +                 outputs: 1 as libc::c_int,
3767 +                 input_names: [
3768 +                     b"real\0" as *const u8 as *const libc::c_char,
3769 +                     0 as *const libc::c_char,
3770 +                     0 as *const libc::c_char,
3771 +                     0 as *const libc::c_char,
3772 +                     0 as *const libc::c_char,
3773 +                     0 as *const libc::c_char,
3774 +                     0 as *const libc::c_char,
3775 +                     0 as *const libc::c_char,
3776 +                     0 as *const libc::c_char,
3777 +                     0 as *const libc::c_char,
3778 +                     0 as *const libc::c_char,
3779 +                     0 as *const libc::c_char,
3780 +                     0 as *const libc::c_char,
3781 +                     0 as *const libc::c_char,
3782 +                     0 as *const libc::c_char,
3783 +                     0 as *const libc::c_char,
3784 +                 ],
3785 +                 option_names: [
3786 +                     b"\0" as *const u8 as *const libc::c_char,
3787 +                     0 as *const libc::c_char,
3788 +                     0 as *const libc::c_char,
3789 +                     0 as *const libc::c_char,
3790 +                     0 as *const libc::c_char,
3791 +                     0 as *const libc::c_char,
3792 +                     0 as *const libc::c_char,
3793 +                     0 as *const libc::c_char,
3794 +                     0 as *const libc::c_char,
3795 +                     0 as *const libc::c_char,
3796 +                     0 as *const libc::c_char,
3797 +                     0 as *const libc::c_char,
3798 +                     0 as *const libc::c_char,
3799 +                     0 as *const libc::c_char,
3800 +                     0 as *const libc::c_char,
3801 +                     0 as *const libc::c_char,
3802 +                 ],
3803 +                 output_names: [
3804 +                     b"exp\0" as *const u8 as *const libc::c_char,
3805 +                     0 as *const libc::c_char,
3806 +                     0 as *const libc::c_char,
3807 +                     0 as *const libc::c_char,
3808 +                     0 as *const libc::c_char,
3809 +                     0 as *const libc::c_char,
3810 +                     0 as *const libc::c_char,
3811 +                     0 as *const libc::c_char,
3812 +                     0 as *const libc::c_char,
3813 +                     0 as *const libc::c_char,
3814 +                     0 as *const libc::c_char,
3815 +                     0 as *const libc::c_char,
3816 +                     0 as *const libc::c_char,
3817 +                     0 as *const libc::c_char,
3818 +                     0 as *const libc::c_char,
3819 +                     0 as *const libc::c_char,
3820 +                 ],
3821 +                 stream_new: None,
3822 +                 stream_run: None,
3823 +                 stream_free: None,
3824 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:3906:13
     |
3827 | /             let mut init = ti_indicator_info {
3828 | |                 name: b"fisher\0" as *const u8 as *const libc::c_char,
3829 | |                 full_name: b"Fisher Transform\0" as *const u8 as *const libc::c_char,
3830 | |                 start: Some(
...    |
3904 | |                 stream_free: None,
3905 | |             };
     | |______________- unnecessary `let` binding
3906 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
3827 ~             
3828 ~             ti_indicator_info {
3829 +                 name: b"fisher\0" as *const u8 as *const libc::c_char,
3830 +                 full_name: b"Fisher Transform\0" as *const u8 as *const libc::c_char,
3831 +                 start: Some(
3832 +                     ti_fisher_start
3833 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
3834 +                 ),
3835 +                 indicator: Some(
3836 +                     ti_fisher
3837 +                         as unsafe extern "C" fn(
3838 +                             libc::c_int,
3839 +                             *const *const libc::c_double,
3840 +                             *const libc::c_double,
3841 +                             *const *mut libc::c_double,
3842 +                         ) -> libc::c_int,
3843 +                 ),
3844 +                 indicator_ref: None,
3845 +                 type_0: 2 as libc::c_int,
3846 +                 inputs: 2 as libc::c_int,
3847 +                 options: 1 as libc::c_int,
3848 +                 outputs: 2 as libc::c_int,
3849 +                 input_names: [
3850 +                     b"high\0" as *const u8 as *const libc::c_char,
3851 +                     b"low\0" as *const u8 as *const libc::c_char,
3852 +                     0 as *const libc::c_char,
3853 +                     0 as *const libc::c_char,
3854 +                     0 as *const libc::c_char,
3855 +                     0 as *const libc::c_char,
3856 +                     0 as *const libc::c_char,
3857 +                     0 as *const libc::c_char,
3858 +                     0 as *const libc::c_char,
3859 +                     0 as *const libc::c_char,
3860 +                     0 as *const libc::c_char,
3861 +                     0 as *const libc::c_char,
3862 +                     0 as *const libc::c_char,
3863 +                     0 as *const libc::c_char,
3864 +                     0 as *const libc::c_char,
3865 +                     0 as *const libc::c_char,
3866 +                 ],
3867 +                 option_names: [
3868 +                     b"period\0" as *const u8 as *const libc::c_char,
3869 +                     0 as *const libc::c_char,
3870 +                     0 as *const libc::c_char,
3871 +                     0 as *const libc::c_char,
3872 +                     0 as *const libc::c_char,
3873 +                     0 as *const libc::c_char,
3874 +                     0 as *const libc::c_char,
3875 +                     0 as *const libc::c_char,
3876 +                     0 as *const libc::c_char,
3877 +                     0 as *const libc::c_char,
3878 +                     0 as *const libc::c_char,
3879 +                     0 as *const libc::c_char,
3880 +                     0 as *const libc::c_char,
3881 +                     0 as *const libc::c_char,
3882 +                     0 as *const libc::c_char,
3883 +                     0 as *const libc::c_char,
3884 +                 ],
3885 +                 output_names: [
3886 +                     b"fisher\0" as *const u8 as *const libc::c_char,
3887 +                     b"fisher_signal\0" as *const u8 as *const libc::c_char,
3888 +                     0 as *const libc::c_char,
3889 +                     0 as *const libc::c_char,
3890 +                     0 as *const libc::c_char,
3891 +                     0 as *const libc::c_char,
3892 +                     0 as *const libc::c_char,
3893 +                     0 as *const libc::c_char,
3894 +                     0 as *const libc::c_char,
3895 +                     0 as *const libc::c_char,
3896 +                     0 as *const libc::c_char,
3897 +                     0 as *const libc::c_char,
3898 +                     0 as *const libc::c_char,
3899 +                     0 as *const libc::c_char,
3900 +                     0 as *const libc::c_char,
3901 +                     0 as *const libc::c_char,
3902 +                 ],
3903 +                 stream_new: None,
3904 +                 stream_run: None,
3905 +                 stream_free: None,
3906 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:3988:13
     |
3909 | /             let mut init = ti_indicator_info {
3910 | |                 name: b"floor\0" as *const u8 as *const libc::c_char,
3911 | |                 full_name: b"Vector Floor\0" as *const u8 as *const libc::c_char,
3912 | |                 start: Some(
...    |
3986 | |                 stream_free: None,
3987 | |             };
     | |______________- unnecessary `let` binding
3988 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
3909 ~             
3910 ~             ti_indicator_info {
3911 +                 name: b"floor\0" as *const u8 as *const libc::c_char,
3912 +                 full_name: b"Vector Floor\0" as *const u8 as *const libc::c_char,
3913 +                 start: Some(
3914 +                     ti_floor_start
3915 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
3916 +                 ),
3917 +                 indicator: Some(
3918 +                     ti_floor
3919 +                         as unsafe extern "C" fn(
3920 +                             libc::c_int,
3921 +                             *const *const libc::c_double,
3922 +                             *const libc::c_double,
3923 +                             *const *mut libc::c_double,
3924 +                         ) -> libc::c_int,
3925 +                 ),
3926 +                 indicator_ref: None,
3927 +                 type_0: 4 as libc::c_int,
3928 +                 inputs: 1 as libc::c_int,
3929 +                 options: 0 as libc::c_int,
3930 +                 outputs: 1 as libc::c_int,
3931 +                 input_names: [
3932 +                     b"real\0" as *const u8 as *const libc::c_char,
3933 +                     0 as *const libc::c_char,
3934 +                     0 as *const libc::c_char,
3935 +                     0 as *const libc::c_char,
3936 +                     0 as *const libc::c_char,
3937 +                     0 as *const libc::c_char,
3938 +                     0 as *const libc::c_char,
3939 +                     0 as *const libc::c_char,
3940 +                     0 as *const libc::c_char,
3941 +                     0 as *const libc::c_char,
3942 +                     0 as *const libc::c_char,
3943 +                     0 as *const libc::c_char,
3944 +                     0 as *const libc::c_char,
3945 +                     0 as *const libc::c_char,
3946 +                     0 as *const libc::c_char,
3947 +                     0 as *const libc::c_char,
3948 +                 ],
3949 +                 option_names: [
3950 +                     b"\0" as *const u8 as *const libc::c_char,
3951 +                     0 as *const libc::c_char,
3952 +                     0 as *const libc::c_char,
3953 +                     0 as *const libc::c_char,
3954 +                     0 as *const libc::c_char,
3955 +                     0 as *const libc::c_char,
3956 +                     0 as *const libc::c_char,
3957 +                     0 as *const libc::c_char,
3958 +                     0 as *const libc::c_char,
3959 +                     0 as *const libc::c_char,
3960 +                     0 as *const libc::c_char,
3961 +                     0 as *const libc::c_char,
3962 +                     0 as *const libc::c_char,
3963 +                     0 as *const libc::c_char,
3964 +                     0 as *const libc::c_char,
3965 +                     0 as *const libc::c_char,
3966 +                 ],
3967 +                 output_names: [
3968 +                     b"floor\0" as *const u8 as *const libc::c_char,
3969 +                     0 as *const libc::c_char,
3970 +                     0 as *const libc::c_char,
3971 +                     0 as *const libc::c_char,
3972 +                     0 as *const libc::c_char,
3973 +                     0 as *const libc::c_char,
3974 +                     0 as *const libc::c_char,
3975 +                     0 as *const libc::c_char,
3976 +                     0 as *const libc::c_char,
3977 +                     0 as *const libc::c_char,
3978 +                     0 as *const libc::c_char,
3979 +                     0 as *const libc::c_char,
3980 +                     0 as *const libc::c_char,
3981 +                     0 as *const libc::c_char,
3982 +                     0 as *const libc::c_char,
3983 +                     0 as *const libc::c_char,
3984 +                 ],
3985 +                 stream_new: None,
3986 +                 stream_run: None,
3987 +                 stream_free: None,
3988 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:4070:13
     |
3991 | /             let mut init = ti_indicator_info {
3992 | |                 name: b"fosc\0" as *const u8 as *const libc::c_char,
3993 | |                 full_name: b"Forecast Oscillator\0" as *const u8 as *const libc::c_char,
3994 | |                 start: Some(
...    |
4068 | |                 stream_free: None,
4069 | |             };
     | |______________- unnecessary `let` binding
4070 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
3991 ~             
3992 ~             ti_indicator_info {
3993 +                 name: b"fosc\0" as *const u8 as *const libc::c_char,
3994 +                 full_name: b"Forecast Oscillator\0" as *const u8 as *const libc::c_char,
3995 +                 start: Some(
3996 +                     ti_fosc_start
3997 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
3998 +                 ),
3999 +                 indicator: Some(
4000 +                     ti_fosc
4001 +                         as unsafe extern "C" fn(
4002 +                             libc::c_int,
4003 +                             *const *const libc::c_double,
4004 +                             *const libc::c_double,
4005 +                             *const *mut libc::c_double,
4006 +                         ) -> libc::c_int,
4007 +                 ),
4008 +                 indicator_ref: None,
4009 +                 type_0: 2 as libc::c_int,
4010 +                 inputs: 1 as libc::c_int,
4011 +                 options: 1 as libc::c_int,
4012 +                 outputs: 1 as libc::c_int,
4013 +                 input_names: [
4014 +                     b"real\0" as *const u8 as *const libc::c_char,
4015 +                     0 as *const libc::c_char,
4016 +                     0 as *const libc::c_char,
4017 +                     0 as *const libc::c_char,
4018 +                     0 as *const libc::c_char,
4019 +                     0 as *const libc::c_char,
4020 +                     0 as *const libc::c_char,
4021 +                     0 as *const libc::c_char,
4022 +                     0 as *const libc::c_char,
4023 +                     0 as *const libc::c_char,
4024 +                     0 as *const libc::c_char,
4025 +                     0 as *const libc::c_char,
4026 +                     0 as *const libc::c_char,
4027 +                     0 as *const libc::c_char,
4028 +                     0 as *const libc::c_char,
4029 +                     0 as *const libc::c_char,
4030 +                 ],
4031 +                 option_names: [
4032 +                     b"period\0" as *const u8 as *const libc::c_char,
4033 +                     0 as *const libc::c_char,
4034 +                     0 as *const libc::c_char,
4035 +                     0 as *const libc::c_char,
4036 +                     0 as *const libc::c_char,
4037 +                     0 as *const libc::c_char,
4038 +                     0 as *const libc::c_char,
4039 +                     0 as *const libc::c_char,
4040 +                     0 as *const libc::c_char,
4041 +                     0 as *const libc::c_char,
4042 +                     0 as *const libc::c_char,
4043 +                     0 as *const libc::c_char,
4044 +                     0 as *const libc::c_char,
4045 +                     0 as *const libc::c_char,
4046 +                     0 as *const libc::c_char,
4047 +                     0 as *const libc::c_char,
4048 +                 ],
4049 +                 output_names: [
4050 +                     b"fosc\0" as *const u8 as *const libc::c_char,
4051 +                     0 as *const libc::c_char,
4052 +                     0 as *const libc::c_char,
4053 +                     0 as *const libc::c_char,
4054 +                     0 as *const libc::c_char,
4055 +                     0 as *const libc::c_char,
4056 +                     0 as *const libc::c_char,
4057 +                     0 as *const libc::c_char,
4058 +                     0 as *const libc::c_char,
4059 +                     0 as *const libc::c_char,
4060 +                     0 as *const libc::c_char,
4061 +                     0 as *const libc::c_char,
4062 +                     0 as *const libc::c_char,
4063 +                     0 as *const libc::c_char,
4064 +                     0 as *const libc::c_char,
4065 +                     0 as *const libc::c_char,
4066 +                 ],
4067 +                 stream_new: None,
4068 +                 stream_run: None,
4069 +                 stream_free: None,
4070 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:4152:13
     |
4073 | /             let mut init = ti_indicator_info {
4074 | |                 name: b"hma\0" as *const u8 as *const libc::c_char,
4075 | |                 full_name: b"Hull Moving Average\0" as *const u8 as *const libc::c_char,
4076 | |                 start: Some(
...    |
4150 | |                 stream_free: None,
4151 | |             };
     | |______________- unnecessary `let` binding
4152 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
4073 ~             
4074 ~             ti_indicator_info {
4075 +                 name: b"hma\0" as *const u8 as *const libc::c_char,
4076 +                 full_name: b"Hull Moving Average\0" as *const u8 as *const libc::c_char,
4077 +                 start: Some(
4078 +                     ti_hma_start
4079 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
4080 +                 ),
4081 +                 indicator: Some(
4082 +                     ti_hma
4083 +                         as unsafe extern "C" fn(
4084 +                             libc::c_int,
4085 +                             *const *const libc::c_double,
4086 +                             *const libc::c_double,
4087 +                             *const *mut libc::c_double,
4088 +                         ) -> libc::c_int,
4089 +                 ),
4090 +                 indicator_ref: None,
4091 +                 type_0: 1 as libc::c_int,
4092 +                 inputs: 1 as libc::c_int,
4093 +                 options: 1 as libc::c_int,
4094 +                 outputs: 1 as libc::c_int,
4095 +                 input_names: [
4096 +                     b"real\0" as *const u8 as *const libc::c_char,
4097 +                     0 as *const libc::c_char,
4098 +                     0 as *const libc::c_char,
4099 +                     0 as *const libc::c_char,
4100 +                     0 as *const libc::c_char,
4101 +                     0 as *const libc::c_char,
4102 +                     0 as *const libc::c_char,
4103 +                     0 as *const libc::c_char,
4104 +                     0 as *const libc::c_char,
4105 +                     0 as *const libc::c_char,
4106 +                     0 as *const libc::c_char,
4107 +                     0 as *const libc::c_char,
4108 +                     0 as *const libc::c_char,
4109 +                     0 as *const libc::c_char,
4110 +                     0 as *const libc::c_char,
4111 +                     0 as *const libc::c_char,
4112 +                 ],
4113 +                 option_names: [
4114 +                     b"period\0" as *const u8 as *const libc::c_char,
4115 +                     0 as *const libc::c_char,
4116 +                     0 as *const libc::c_char,
4117 +                     0 as *const libc::c_char,
4118 +                     0 as *const libc::c_char,
4119 +                     0 as *const libc::c_char,
4120 +                     0 as *const libc::c_char,
4121 +                     0 as *const libc::c_char,
4122 +                     0 as *const libc::c_char,
4123 +                     0 as *const libc::c_char,
4124 +                     0 as *const libc::c_char,
4125 +                     0 as *const libc::c_char,
4126 +                     0 as *const libc::c_char,
4127 +                     0 as *const libc::c_char,
4128 +                     0 as *const libc::c_char,
4129 +                     0 as *const libc::c_char,
4130 +                 ],
4131 +                 output_names: [
4132 +                     b"hma\0" as *const u8 as *const libc::c_char,
4133 +                     0 as *const libc::c_char,
4134 +                     0 as *const libc::c_char,
4135 +                     0 as *const libc::c_char,
4136 +                     0 as *const libc::c_char,
4137 +                     0 as *const libc::c_char,
4138 +                     0 as *const libc::c_char,
4139 +                     0 as *const libc::c_char,
4140 +                     0 as *const libc::c_char,
4141 +                     0 as *const libc::c_char,
4142 +                     0 as *const libc::c_char,
4143 +                     0 as *const libc::c_char,
4144 +                     0 as *const libc::c_char,
4145 +                     0 as *const libc::c_char,
4146 +                     0 as *const libc::c_char,
4147 +                     0 as *const libc::c_char,
4148 +                 ],
4149 +                 stream_new: None,
4150 +                 stream_run: None,
4151 +                 stream_free: None,
4152 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:4235:13
     |
4155 | /             let mut init = ti_indicator_info {
4156 | |                 name: b"kama\0" as *const u8 as *const libc::c_char,
4157 | |                 full_name: b"Kaufman Adaptive Moving Average\0" as *const u8
4158 | |                     as *const libc::c_char,
...    |
4233 | |                 stream_free: None,
4234 | |             };
     | |______________- unnecessary `let` binding
4235 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
4155 ~             
4156 ~             ti_indicator_info {
4157 +                 name: b"kama\0" as *const u8 as *const libc::c_char,
4158 +                 full_name: b"Kaufman Adaptive Moving Average\0" as *const u8
4159 +                     as *const libc::c_char,
4160 +                 start: Some(
4161 +                     ti_kama_start
4162 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
4163 +                 ),
4164 +                 indicator: Some(
4165 +                     ti_kama
4166 +                         as unsafe extern "C" fn(
4167 +                             libc::c_int,
4168 +                             *const *const libc::c_double,
4169 +                             *const libc::c_double,
4170 +                             *const *mut libc::c_double,
4171 +                         ) -> libc::c_int,
4172 +                 ),
4173 +                 indicator_ref: None,
4174 +                 type_0: 1 as libc::c_int,
4175 +                 inputs: 1 as libc::c_int,
4176 +                 options: 1 as libc::c_int,
4177 +                 outputs: 1 as libc::c_int,
4178 +                 input_names: [
4179 +                     b"real\0" as *const u8 as *const libc::c_char,
4180 +                     0 as *const libc::c_char,
4181 +                     0 as *const libc::c_char,
4182 +                     0 as *const libc::c_char,
4183 +                     0 as *const libc::c_char,
4184 +                     0 as *const libc::c_char,
4185 +                     0 as *const libc::c_char,
4186 +                     0 as *const libc::c_char,
4187 +                     0 as *const libc::c_char,
4188 +                     0 as *const libc::c_char,
4189 +                     0 as *const libc::c_char,
4190 +                     0 as *const libc::c_char,
4191 +                     0 as *const libc::c_char,
4192 +                     0 as *const libc::c_char,
4193 +                     0 as *const libc::c_char,
4194 +                     0 as *const libc::c_char,
4195 +                 ],
4196 +                 option_names: [
4197 +                     b"period\0" as *const u8 as *const libc::c_char,
4198 +                     0 as *const libc::c_char,
4199 +                     0 as *const libc::c_char,
4200 +                     0 as *const libc::c_char,
4201 +                     0 as *const libc::c_char,
4202 +                     0 as *const libc::c_char,
4203 +                     0 as *const libc::c_char,
4204 +                     0 as *const libc::c_char,
4205 +                     0 as *const libc::c_char,
4206 +                     0 as *const libc::c_char,
4207 +                     0 as *const libc::c_char,
4208 +                     0 as *const libc::c_char,
4209 +                     0 as *const libc::c_char,
4210 +                     0 as *const libc::c_char,
4211 +                     0 as *const libc::c_char,
4212 +                     0 as *const libc::c_char,
4213 +                 ],
4214 +                 output_names: [
4215 +                     b"kama\0" as *const u8 as *const libc::c_char,
4216 +                     0 as *const libc::c_char,
4217 +                     0 as *const libc::c_char,
4218 +                     0 as *const libc::c_char,
4219 +                     0 as *const libc::c_char,
4220 +                     0 as *const libc::c_char,
4221 +                     0 as *const libc::c_char,
4222 +                     0 as *const libc::c_char,
4223 +                     0 as *const libc::c_char,
4224 +                     0 as *const libc::c_char,
4225 +                     0 as *const libc::c_char,
4226 +                     0 as *const libc::c_char,
4227 +                     0 as *const libc::c_char,
4228 +                     0 as *const libc::c_char,
4229 +                     0 as *const libc::c_char,
4230 +                     0 as *const libc::c_char,
4231 +                 ],
4232 +                 stream_new: None,
4233 +                 stream_run: None,
4234 +                 stream_free: None,
4235 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:4318:13
     |
4238 | /             let mut init = ti_indicator_info {
4239 | |                 name: b"kvo\0" as *const u8 as *const libc::c_char,
4240 | |                 full_name: b"Klinger Volume Oscillator\0" as *const u8
4241 | |                     as *const libc::c_char,
...    |
4316 | |                 stream_free: None,
4317 | |             };
     | |______________- unnecessary `let` binding
4318 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
4238 ~             
4239 ~             ti_indicator_info {
4240 +                 name: b"kvo\0" as *const u8 as *const libc::c_char,
4241 +                 full_name: b"Klinger Volume Oscillator\0" as *const u8
4242 +                     as *const libc::c_char,
4243 +                 start: Some(
4244 +                     ti_kvo_start
4245 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
4246 +                 ),
4247 +                 indicator: Some(
4248 +                     ti_kvo
4249 +                         as unsafe extern "C" fn(
4250 +                             libc::c_int,
4251 +                             *const *const libc::c_double,
4252 +                             *const libc::c_double,
4253 +                             *const *mut libc::c_double,
4254 +                         ) -> libc::c_int,
4255 +                 ),
4256 +                 indicator_ref: None,
4257 +                 type_0: 2 as libc::c_int,
4258 +                 inputs: 4 as libc::c_int,
4259 +                 options: 2 as libc::c_int,
4260 +                 outputs: 1 as libc::c_int,
4261 +                 input_names: [
4262 +                     b"high\0" as *const u8 as *const libc::c_char,
4263 +                     b"low\0" as *const u8 as *const libc::c_char,
4264 +                     b"close\0" as *const u8 as *const libc::c_char,
4265 +                     b"volume\0" as *const u8 as *const libc::c_char,
4266 +                     0 as *const libc::c_char,
4267 +                     0 as *const libc::c_char,
4268 +                     0 as *const libc::c_char,
4269 +                     0 as *const libc::c_char,
4270 +                     0 as *const libc::c_char,
4271 +                     0 as *const libc::c_char,
4272 +                     0 as *const libc::c_char,
4273 +                     0 as *const libc::c_char,
4274 +                     0 as *const libc::c_char,
4275 +                     0 as *const libc::c_char,
4276 +                     0 as *const libc::c_char,
4277 +                     0 as *const libc::c_char,
4278 +                 ],
4279 +                 option_names: [
4280 +                     b"short_period\0" as *const u8 as *const libc::c_char,
4281 +                     b"long_period\0" as *const u8 as *const libc::c_char,
4282 +                     0 as *const libc::c_char,
4283 +                     0 as *const libc::c_char,
4284 +                     0 as *const libc::c_char,
4285 +                     0 as *const libc::c_char,
4286 +                     0 as *const libc::c_char,
4287 +                     0 as *const libc::c_char,
4288 +                     0 as *const libc::c_char,
4289 +                     0 as *const libc::c_char,
4290 +                     0 as *const libc::c_char,
4291 +                     0 as *const libc::c_char,
4292 +                     0 as *const libc::c_char,
4293 +                     0 as *const libc::c_char,
4294 +                     0 as *const libc::c_char,
4295 +                     0 as *const libc::c_char,
4296 +                 ],
4297 +                 output_names: [
4298 +                     b"kvo\0" as *const u8 as *const libc::c_char,
4299 +                     0 as *const libc::c_char,
4300 +                     0 as *const libc::c_char,
4301 +                     0 as *const libc::c_char,
4302 +                     0 as *const libc::c_char,
4303 +                     0 as *const libc::c_char,
4304 +                     0 as *const libc::c_char,
4305 +                     0 as *const libc::c_char,
4306 +                     0 as *const libc::c_char,
4307 +                     0 as *const libc::c_char,
4308 +                     0 as *const libc::c_char,
4309 +                     0 as *const libc::c_char,
4310 +                     0 as *const libc::c_char,
4311 +                     0 as *const libc::c_char,
4312 +                     0 as *const libc::c_char,
4313 +                     0 as *const libc::c_char,
4314 +                 ],
4315 +                 stream_new: None,
4316 +                 stream_run: None,
4317 +                 stream_free: None,
4318 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:4400:13
     |
4321 | /             let mut init = ti_indicator_info {
4322 | |                 name: b"lag\0" as *const u8 as *const libc::c_char,
4323 | |                 full_name: b"Lag\0" as *const u8 as *const libc::c_char,
4324 | |                 start: Some(
...    |
4398 | |                 stream_free: None,
4399 | |             };
     | |______________- unnecessary `let` binding
4400 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
4321 ~             
4322 ~             ti_indicator_info {
4323 +                 name: b"lag\0" as *const u8 as *const libc::c_char,
4324 +                 full_name: b"Lag\0" as *const u8 as *const libc::c_char,
4325 +                 start: Some(
4326 +                     ti_lag_start
4327 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
4328 +                 ),
4329 +                 indicator: Some(
4330 +                     ti_lag
4331 +                         as unsafe extern "C" fn(
4332 +                             libc::c_int,
4333 +                             *const *const libc::c_double,
4334 +                             *const libc::c_double,
4335 +                             *const *mut libc::c_double,
4336 +                         ) -> libc::c_int,
4337 +                 ),
4338 +                 indicator_ref: None,
4339 +                 type_0: 3 as libc::c_int,
4340 +                 inputs: 1 as libc::c_int,
4341 +                 options: 1 as libc::c_int,
4342 +                 outputs: 1 as libc::c_int,
4343 +                 input_names: [
4344 +                     b"real\0" as *const u8 as *const libc::c_char,
4345 +                     0 as *const libc::c_char,
4346 +                     0 as *const libc::c_char,
4347 +                     0 as *const libc::c_char,
4348 +                     0 as *const libc::c_char,
4349 +                     0 as *const libc::c_char,
4350 +                     0 as *const libc::c_char,
4351 +                     0 as *const libc::c_char,
4352 +                     0 as *const libc::c_char,
4353 +                     0 as *const libc::c_char,
4354 +                     0 as *const libc::c_char,
4355 +                     0 as *const libc::c_char,
4356 +                     0 as *const libc::c_char,
4357 +                     0 as *const libc::c_char,
4358 +                     0 as *const libc::c_char,
4359 +                     0 as *const libc::c_char,
4360 +                 ],
4361 +                 option_names: [
4362 +                     b"period\0" as *const u8 as *const libc::c_char,
4363 +                     0 as *const libc::c_char,
4364 +                     0 as *const libc::c_char,
4365 +                     0 as *const libc::c_char,
4366 +                     0 as *const libc::c_char,
4367 +                     0 as *const libc::c_char,
4368 +                     0 as *const libc::c_char,
4369 +                     0 as *const libc::c_char,
4370 +                     0 as *const libc::c_char,
4371 +                     0 as *const libc::c_char,
4372 +                     0 as *const libc::c_char,
4373 +                     0 as *const libc::c_char,
4374 +                     0 as *const libc::c_char,
4375 +                     0 as *const libc::c_char,
4376 +                     0 as *const libc::c_char,
4377 +                     0 as *const libc::c_char,
4378 +                 ],
4379 +                 output_names: [
4380 +                     b"lag\0" as *const u8 as *const libc::c_char,
4381 +                     0 as *const libc::c_char,
4382 +                     0 as *const libc::c_char,
4383 +                     0 as *const libc::c_char,
4384 +                     0 as *const libc::c_char,
4385 +                     0 as *const libc::c_char,
4386 +                     0 as *const libc::c_char,
4387 +                     0 as *const libc::c_char,
4388 +                     0 as *const libc::c_char,
4389 +                     0 as *const libc::c_char,
4390 +                     0 as *const libc::c_char,
4391 +                     0 as *const libc::c_char,
4392 +                     0 as *const libc::c_char,
4393 +                     0 as *const libc::c_char,
4394 +                     0 as *const libc::c_char,
4395 +                     0 as *const libc::c_char,
4396 +                 ],
4397 +                 stream_new: None,
4398 +                 stream_run: None,
4399 +                 stream_free: None,
4400 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:4482:13
     |
4403 | /             let mut init = ti_indicator_info {
4404 | |                 name: b"linreg\0" as *const u8 as *const libc::c_char,
4405 | |                 full_name: b"Linear Regression\0" as *const u8 as *const libc::c_char,
4406 | |                 start: Some(
...    |
4480 | |                 stream_free: None,
4481 | |             };
     | |______________- unnecessary `let` binding
4482 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
4403 ~             
4404 ~             ti_indicator_info {
4405 +                 name: b"linreg\0" as *const u8 as *const libc::c_char,
4406 +                 full_name: b"Linear Regression\0" as *const u8 as *const libc::c_char,
4407 +                 start: Some(
4408 +                     ti_linreg_start
4409 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
4410 +                 ),
4411 +                 indicator: Some(
4412 +                     ti_linreg
4413 +                         as unsafe extern "C" fn(
4414 +                             libc::c_int,
4415 +                             *const *const libc::c_double,
4416 +                             *const libc::c_double,
4417 +                             *const *mut libc::c_double,
4418 +                         ) -> libc::c_int,
4419 +                 ),
4420 +                 indicator_ref: None,
4421 +                 type_0: 1 as libc::c_int,
4422 +                 inputs: 1 as libc::c_int,
4423 +                 options: 1 as libc::c_int,
4424 +                 outputs: 1 as libc::c_int,
4425 +                 input_names: [
4426 +                     b"real\0" as *const u8 as *const libc::c_char,
4427 +                     0 as *const libc::c_char,
4428 +                     0 as *const libc::c_char,
4429 +                     0 as *const libc::c_char,
4430 +                     0 as *const libc::c_char,
4431 +                     0 as *const libc::c_char,
4432 +                     0 as *const libc::c_char,
4433 +                     0 as *const libc::c_char,
4434 +                     0 as *const libc::c_char,
4435 +                     0 as *const libc::c_char,
4436 +                     0 as *const libc::c_char,
4437 +                     0 as *const libc::c_char,
4438 +                     0 as *const libc::c_char,
4439 +                     0 as *const libc::c_char,
4440 +                     0 as *const libc::c_char,
4441 +                     0 as *const libc::c_char,
4442 +                 ],
4443 +                 option_names: [
4444 +                     b"period\0" as *const u8 as *const libc::c_char,
4445 +                     0 as *const libc::c_char,
4446 +                     0 as *const libc::c_char,
4447 +                     0 as *const libc::c_char,
4448 +                     0 as *const libc::c_char,
4449 +                     0 as *const libc::c_char,
4450 +                     0 as *const libc::c_char,
4451 +                     0 as *const libc::c_char,
4452 +                     0 as *const libc::c_char,
4453 +                     0 as *const libc::c_char,
4454 +                     0 as *const libc::c_char,
4455 +                     0 as *const libc::c_char,
4456 +                     0 as *const libc::c_char,
4457 +                     0 as *const libc::c_char,
4458 +                     0 as *const libc::c_char,
4459 +                     0 as *const libc::c_char,
4460 +                 ],
4461 +                 output_names: [
4462 +                     b"linreg\0" as *const u8 as *const libc::c_char,
4463 +                     0 as *const libc::c_char,
4464 +                     0 as *const libc::c_char,
4465 +                     0 as *const libc::c_char,
4466 +                     0 as *const libc::c_char,
4467 +                     0 as *const libc::c_char,
4468 +                     0 as *const libc::c_char,
4469 +                     0 as *const libc::c_char,
4470 +                     0 as *const libc::c_char,
4471 +                     0 as *const libc::c_char,
4472 +                     0 as *const libc::c_char,
4473 +                     0 as *const libc::c_char,
4474 +                     0 as *const libc::c_char,
4475 +                     0 as *const libc::c_char,
4476 +                     0 as *const libc::c_char,
4477 +                     0 as *const libc::c_char,
4478 +                 ],
4479 +                 stream_new: None,
4480 +                 stream_run: None,
4481 +                 stream_free: None,
4482 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:4565:13
     |
4485 | /             let mut init = ti_indicator_info {
4486 | |                 name: b"linregintercept\0" as *const u8 as *const libc::c_char,
4487 | |                 full_name: b"Linear Regression Intercept\0" as *const u8
4488 | |                     as *const libc::c_char,
...    |
4563 | |                 stream_free: None,
4564 | |             };
     | |______________- unnecessary `let` binding
4565 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
4485 ~             
4486 ~             ti_indicator_info {
4487 +                 name: b"linregintercept\0" as *const u8 as *const libc::c_char,
4488 +                 full_name: b"Linear Regression Intercept\0" as *const u8
4489 +                     as *const libc::c_char,
4490 +                 start: Some(
4491 +                     ti_linregintercept_start
4492 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
4493 +                 ),
4494 +                 indicator: Some(
4495 +                     ti_linregintercept
4496 +                         as unsafe extern "C" fn(
4497 +                             libc::c_int,
4498 +                             *const *const libc::c_double,
4499 +                             *const libc::c_double,
4500 +                             *const *mut libc::c_double,
4501 +                         ) -> libc::c_int,
4502 +                 ),
4503 +                 indicator_ref: None,
4504 +                 type_0: 2 as libc::c_int,
4505 +                 inputs: 1 as libc::c_int,
4506 +                 options: 1 as libc::c_int,
4507 +                 outputs: 1 as libc::c_int,
4508 +                 input_names: [
4509 +                     b"real\0" as *const u8 as *const libc::c_char,
4510 +                     0 as *const libc::c_char,
4511 +                     0 as *const libc::c_char,
4512 +                     0 as *const libc::c_char,
4513 +                     0 as *const libc::c_char,
4514 +                     0 as *const libc::c_char,
4515 +                     0 as *const libc::c_char,
4516 +                     0 as *const libc::c_char,
4517 +                     0 as *const libc::c_char,
4518 +                     0 as *const libc::c_char,
4519 +                     0 as *const libc::c_char,
4520 +                     0 as *const libc::c_char,
4521 +                     0 as *const libc::c_char,
4522 +                     0 as *const libc::c_char,
4523 +                     0 as *const libc::c_char,
4524 +                     0 as *const libc::c_char,
4525 +                 ],
4526 +                 option_names: [
4527 +                     b"period\0" as *const u8 as *const libc::c_char,
4528 +                     0 as *const libc::c_char,
4529 +                     0 as *const libc::c_char,
4530 +                     0 as *const libc::c_char,
4531 +                     0 as *const libc::c_char,
4532 +                     0 as *const libc::c_char,
4533 +                     0 as *const libc::c_char,
4534 +                     0 as *const libc::c_char,
4535 +                     0 as *const libc::c_char,
4536 +                     0 as *const libc::c_char,
4537 +                     0 as *const libc::c_char,
4538 +                     0 as *const libc::c_char,
4539 +                     0 as *const libc::c_char,
4540 +                     0 as *const libc::c_char,
4541 +                     0 as *const libc::c_char,
4542 +                     0 as *const libc::c_char,
4543 +                 ],
4544 +                 output_names: [
4545 +                     b"linregintercept\0" as *const u8 as *const libc::c_char,
4546 +                     0 as *const libc::c_char,
4547 +                     0 as *const libc::c_char,
4548 +                     0 as *const libc::c_char,
4549 +                     0 as *const libc::c_char,
4550 +                     0 as *const libc::c_char,
4551 +                     0 as *const libc::c_char,
4552 +                     0 as *const libc::c_char,
4553 +                     0 as *const libc::c_char,
4554 +                     0 as *const libc::c_char,
4555 +                     0 as *const libc::c_char,
4556 +                     0 as *const libc::c_char,
4557 +                     0 as *const libc::c_char,
4558 +                     0 as *const libc::c_char,
4559 +                     0 as *const libc::c_char,
4560 +                     0 as *const libc::c_char,
4561 +                 ],
4562 +                 stream_new: None,
4563 +                 stream_run: None,
4564 +                 stream_free: None,
4565 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:4648:13
     |
4568 | /             let mut init = ti_indicator_info {
4569 | |                 name: b"linregslope\0" as *const u8 as *const libc::c_char,
4570 | |                 full_name: b"Linear Regression Slope\0" as *const u8
4571 | |                     as *const libc::c_char,
...    |
4646 | |                 stream_free: None,
4647 | |             };
     | |______________- unnecessary `let` binding
4648 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
4568 ~             
4569 ~             ti_indicator_info {
4570 +                 name: b"linregslope\0" as *const u8 as *const libc::c_char,
4571 +                 full_name: b"Linear Regression Slope\0" as *const u8
4572 +                     as *const libc::c_char,
4573 +                 start: Some(
4574 +                     ti_linregslope_start
4575 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
4576 +                 ),
4577 +                 indicator: Some(
4578 +                     ti_linregslope
4579 +                         as unsafe extern "C" fn(
4580 +                             libc::c_int,
4581 +                             *const *const libc::c_double,
4582 +                             *const libc::c_double,
4583 +                             *const *mut libc::c_double,
4584 +                         ) -> libc::c_int,
4585 +                 ),
4586 +                 indicator_ref: None,
4587 +                 type_0: 2 as libc::c_int,
4588 +                 inputs: 1 as libc::c_int,
4589 +                 options: 1 as libc::c_int,
4590 +                 outputs: 1 as libc::c_int,
4591 +                 input_names: [
4592 +                     b"real\0" as *const u8 as *const libc::c_char,
4593 +                     0 as *const libc::c_char,
4594 +                     0 as *const libc::c_char,
4595 +                     0 as *const libc::c_char,
4596 +                     0 as *const libc::c_char,
4597 +                     0 as *const libc::c_char,
4598 +                     0 as *const libc::c_char,
4599 +                     0 as *const libc::c_char,
4600 +                     0 as *const libc::c_char,
4601 +                     0 as *const libc::c_char,
4602 +                     0 as *const libc::c_char,
4603 +                     0 as *const libc::c_char,
4604 +                     0 as *const libc::c_char,
4605 +                     0 as *const libc::c_char,
4606 +                     0 as *const libc::c_char,
4607 +                     0 as *const libc::c_char,
4608 +                 ],
4609 +                 option_names: [
4610 +                     b"period\0" as *const u8 as *const libc::c_char,
4611 +                     0 as *const libc::c_char,
4612 +                     0 as *const libc::c_char,
4613 +                     0 as *const libc::c_char,
4614 +                     0 as *const libc::c_char,
4615 +                     0 as *const libc::c_char,
4616 +                     0 as *const libc::c_char,
4617 +                     0 as *const libc::c_char,
4618 +                     0 as *const libc::c_char,
4619 +                     0 as *const libc::c_char,
4620 +                     0 as *const libc::c_char,
4621 +                     0 as *const libc::c_char,
4622 +                     0 as *const libc::c_char,
4623 +                     0 as *const libc::c_char,
4624 +                     0 as *const libc::c_char,
4625 +                     0 as *const libc::c_char,
4626 +                 ],
4627 +                 output_names: [
4628 +                     b"linregslope\0" as *const u8 as *const libc::c_char,
4629 +                     0 as *const libc::c_char,
4630 +                     0 as *const libc::c_char,
4631 +                     0 as *const libc::c_char,
4632 +                     0 as *const libc::c_char,
4633 +                     0 as *const libc::c_char,
4634 +                     0 as *const libc::c_char,
4635 +                     0 as *const libc::c_char,
4636 +                     0 as *const libc::c_char,
4637 +                     0 as *const libc::c_char,
4638 +                     0 as *const libc::c_char,
4639 +                     0 as *const libc::c_char,
4640 +                     0 as *const libc::c_char,
4641 +                     0 as *const libc::c_char,
4642 +                     0 as *const libc::c_char,
4643 +                     0 as *const libc::c_char,
4644 +                 ],
4645 +                 stream_new: None,
4646 +                 stream_run: None,
4647 +                 stream_free: None,
4648 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:4730:13
     |
4651 | /             let mut init = ti_indicator_info {
4652 | |                 name: b"ln\0" as *const u8 as *const libc::c_char,
4653 | |                 full_name: b"Vector Natural Log\0" as *const u8 as *const libc::c_char,
4654 | |                 start: Some(
...    |
4728 | |                 stream_free: None,
4729 | |             };
     | |______________- unnecessary `let` binding
4730 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
4651 ~             
4652 ~             ti_indicator_info {
4653 +                 name: b"ln\0" as *const u8 as *const libc::c_char,
4654 +                 full_name: b"Vector Natural Log\0" as *const u8 as *const libc::c_char,
4655 +                 start: Some(
4656 +                     ti_ln_start
4657 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
4658 +                 ),
4659 +                 indicator: Some(
4660 +                     ti_ln
4661 +                         as unsafe extern "C" fn(
4662 +                             libc::c_int,
4663 +                             *const *const libc::c_double,
4664 +                             *const libc::c_double,
4665 +                             *const *mut libc::c_double,
4666 +                         ) -> libc::c_int,
4667 +                 ),
4668 +                 indicator_ref: None,
4669 +                 type_0: 4 as libc::c_int,
4670 +                 inputs: 1 as libc::c_int,
4671 +                 options: 0 as libc::c_int,
4672 +                 outputs: 1 as libc::c_int,
4673 +                 input_names: [
4674 +                     b"real\0" as *const u8 as *const libc::c_char,
4675 +                     0 as *const libc::c_char,
4676 +                     0 as *const libc::c_char,
4677 +                     0 as *const libc::c_char,
4678 +                     0 as *const libc::c_char,
4679 +                     0 as *const libc::c_char,
4680 +                     0 as *const libc::c_char,
4681 +                     0 as *const libc::c_char,
4682 +                     0 as *const libc::c_char,
4683 +                     0 as *const libc::c_char,
4684 +                     0 as *const libc::c_char,
4685 +                     0 as *const libc::c_char,
4686 +                     0 as *const libc::c_char,
4687 +                     0 as *const libc::c_char,
4688 +                     0 as *const libc::c_char,
4689 +                     0 as *const libc::c_char,
4690 +                 ],
4691 +                 option_names: [
4692 +                     b"\0" as *const u8 as *const libc::c_char,
4693 +                     0 as *const libc::c_char,
4694 +                     0 as *const libc::c_char,
4695 +                     0 as *const libc::c_char,
4696 +                     0 as *const libc::c_char,
4697 +                     0 as *const libc::c_char,
4698 +                     0 as *const libc::c_char,
4699 +                     0 as *const libc::c_char,
4700 +                     0 as *const libc::c_char,
4701 +                     0 as *const libc::c_char,
4702 +                     0 as *const libc::c_char,
4703 +                     0 as *const libc::c_char,
4704 +                     0 as *const libc::c_char,
4705 +                     0 as *const libc::c_char,
4706 +                     0 as *const libc::c_char,
4707 +                     0 as *const libc::c_char,
4708 +                 ],
4709 +                 output_names: [
4710 +                     b"ln\0" as *const u8 as *const libc::c_char,
4711 +                     0 as *const libc::c_char,
4712 +                     0 as *const libc::c_char,
4713 +                     0 as *const libc::c_char,
4714 +                     0 as *const libc::c_char,
4715 +                     0 as *const libc::c_char,
4716 +                     0 as *const libc::c_char,
4717 +                     0 as *const libc::c_char,
4718 +                     0 as *const libc::c_char,
4719 +                     0 as *const libc::c_char,
4720 +                     0 as *const libc::c_char,
4721 +                     0 as *const libc::c_char,
4722 +                     0 as *const libc::c_char,
4723 +                     0 as *const libc::c_char,
4724 +                     0 as *const libc::c_char,
4725 +                     0 as *const libc::c_char,
4726 +                 ],
4727 +                 stream_new: None,
4728 +                 stream_run: None,
4729 +                 stream_free: None,
4730 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:4812:13
     |
4733 | /             let mut init = ti_indicator_info {
4734 | |                 name: b"log10\0" as *const u8 as *const libc::c_char,
4735 | |                 full_name: b"Vector Base-10 Log\0" as *const u8 as *const libc::c_char,
4736 | |                 start: Some(
...    |
4810 | |                 stream_free: None,
4811 | |             };
     | |______________- unnecessary `let` binding
4812 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
4733 ~             
4734 ~             ti_indicator_info {
4735 +                 name: b"log10\0" as *const u8 as *const libc::c_char,
4736 +                 full_name: b"Vector Base-10 Log\0" as *const u8 as *const libc::c_char,
4737 +                 start: Some(
4738 +                     ti_log10_start
4739 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
4740 +                 ),
4741 +                 indicator: Some(
4742 +                     ti_log10
4743 +                         as unsafe extern "C" fn(
4744 +                             libc::c_int,
4745 +                             *const *const libc::c_double,
4746 +                             *const libc::c_double,
4747 +                             *const *mut libc::c_double,
4748 +                         ) -> libc::c_int,
4749 +                 ),
4750 +                 indicator_ref: None,
4751 +                 type_0: 4 as libc::c_int,
4752 +                 inputs: 1 as libc::c_int,
4753 +                 options: 0 as libc::c_int,
4754 +                 outputs: 1 as libc::c_int,
4755 +                 input_names: [
4756 +                     b"real\0" as *const u8 as *const libc::c_char,
4757 +                     0 as *const libc::c_char,
4758 +                     0 as *const libc::c_char,
4759 +                     0 as *const libc::c_char,
4760 +                     0 as *const libc::c_char,
4761 +                     0 as *const libc::c_char,
4762 +                     0 as *const libc::c_char,
4763 +                     0 as *const libc::c_char,
4764 +                     0 as *const libc::c_char,
4765 +                     0 as *const libc::c_char,
4766 +                     0 as *const libc::c_char,
4767 +                     0 as *const libc::c_char,
4768 +                     0 as *const libc::c_char,
4769 +                     0 as *const libc::c_char,
4770 +                     0 as *const libc::c_char,
4771 +                     0 as *const libc::c_char,
4772 +                 ],
4773 +                 option_names: [
4774 +                     b"\0" as *const u8 as *const libc::c_char,
4775 +                     0 as *const libc::c_char,
4776 +                     0 as *const libc::c_char,
4777 +                     0 as *const libc::c_char,
4778 +                     0 as *const libc::c_char,
4779 +                     0 as *const libc::c_char,
4780 +                     0 as *const libc::c_char,
4781 +                     0 as *const libc::c_char,
4782 +                     0 as *const libc::c_char,
4783 +                     0 as *const libc::c_char,
4784 +                     0 as *const libc::c_char,
4785 +                     0 as *const libc::c_char,
4786 +                     0 as *const libc::c_char,
4787 +                     0 as *const libc::c_char,
4788 +                     0 as *const libc::c_char,
4789 +                     0 as *const libc::c_char,
4790 +                 ],
4791 +                 output_names: [
4792 +                     b"log10\0" as *const u8 as *const libc::c_char,
4793 +                     0 as *const libc::c_char,
4794 +                     0 as *const libc::c_char,
4795 +                     0 as *const libc::c_char,
4796 +                     0 as *const libc::c_char,
4797 +                     0 as *const libc::c_char,
4798 +                     0 as *const libc::c_char,
4799 +                     0 as *const libc::c_char,
4800 +                     0 as *const libc::c_char,
4801 +                     0 as *const libc::c_char,
4802 +                     0 as *const libc::c_char,
4803 +                     0 as *const libc::c_char,
4804 +                     0 as *const libc::c_char,
4805 +                     0 as *const libc::c_char,
4806 +                     0 as *const libc::c_char,
4807 +                     0 as *const libc::c_char,
4808 +                 ],
4809 +                 stream_new: None,
4810 +                 stream_run: None,
4811 +                 stream_free: None,
4812 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:4895:13
     |
4815 | /             let mut init = ti_indicator_info {
4816 | |                 name: b"macd\0" as *const u8 as *const libc::c_char,
4817 | |                 full_name: b"Moving Average Convergence/Divergence\0" as *const u8
4818 | |                     as *const libc::c_char,
...    |
4893 | |                 stream_free: None,
4894 | |             };
     | |______________- unnecessary `let` binding
4895 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
4815 ~             
4816 ~             ti_indicator_info {
4817 +                 name: b"macd\0" as *const u8 as *const libc::c_char,
4818 +                 full_name: b"Moving Average Convergence/Divergence\0" as *const u8
4819 +                     as *const libc::c_char,
4820 +                 start: Some(
4821 +                     ti_macd_start
4822 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
4823 +                 ),
4824 +                 indicator: Some(
4825 +                     ti_macd
4826 +                         as unsafe extern "C" fn(
4827 +                             libc::c_int,
4828 +                             *const *const libc::c_double,
4829 +                             *const libc::c_double,
4830 +                             *const *mut libc::c_double,
4831 +                         ) -> libc::c_int,
4832 +                 ),
4833 +                 indicator_ref: None,
4834 +                 type_0: 2 as libc::c_int,
4835 +                 inputs: 1 as libc::c_int,
4836 +                 options: 3 as libc::c_int,
4837 +                 outputs: 3 as libc::c_int,
4838 +                 input_names: [
4839 +                     b"real\0" as *const u8 as *const libc::c_char,
4840 +                     0 as *const libc::c_char,
4841 +                     0 as *const libc::c_char,
4842 +                     0 as *const libc::c_char,
4843 +                     0 as *const libc::c_char,
4844 +                     0 as *const libc::c_char,
4845 +                     0 as *const libc::c_char,
4846 +                     0 as *const libc::c_char,
4847 +                     0 as *const libc::c_char,
4848 +                     0 as *const libc::c_char,
4849 +                     0 as *const libc::c_char,
4850 +                     0 as *const libc::c_char,
4851 +                     0 as *const libc::c_char,
4852 +                     0 as *const libc::c_char,
4853 +                     0 as *const libc::c_char,
4854 +                     0 as *const libc::c_char,
4855 +                 ],
4856 +                 option_names: [
4857 +                     b"short_period\0" as *const u8 as *const libc::c_char,
4858 +                     b"long_period\0" as *const u8 as *const libc::c_char,
4859 +                     b"signal_period\0" as *const u8 as *const libc::c_char,
4860 +                     0 as *const libc::c_char,
4861 +                     0 as *const libc::c_char,
4862 +                     0 as *const libc::c_char,
4863 +                     0 as *const libc::c_char,
4864 +                     0 as *const libc::c_char,
4865 +                     0 as *const libc::c_char,
4866 +                     0 as *const libc::c_char,
4867 +                     0 as *const libc::c_char,
4868 +                     0 as *const libc::c_char,
4869 +                     0 as *const libc::c_char,
4870 +                     0 as *const libc::c_char,
4871 +                     0 as *const libc::c_char,
4872 +                     0 as *const libc::c_char,
4873 +                 ],
4874 +                 output_names: [
4875 +                     b"macd\0" as *const u8 as *const libc::c_char,
4876 +                     b"macd_signal\0" as *const u8 as *const libc::c_char,
4877 +                     b"macd_histogram\0" as *const u8 as *const libc::c_char,
4878 +                     0 as *const libc::c_char,
4879 +                     0 as *const libc::c_char,
4880 +                     0 as *const libc::c_char,
4881 +                     0 as *const libc::c_char,
4882 +                     0 as *const libc::c_char,
4883 +                     0 as *const libc::c_char,
4884 +                     0 as *const libc::c_char,
4885 +                     0 as *const libc::c_char,
4886 +                     0 as *const libc::c_char,
4887 +                     0 as *const libc::c_char,
4888 +                     0 as *const libc::c_char,
4889 +                     0 as *const libc::c_char,
4890 +                     0 as *const libc::c_char,
4891 +                 ],
4892 +                 stream_new: None,
4893 +                 stream_run: None,
4894 +                 stream_free: None,
4895 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:4978:13
     |
4898 | /             let mut init = ti_indicator_info {
4899 | |                 name: b"marketfi\0" as *const u8 as *const libc::c_char,
4900 | |                 full_name: b"Market Facilitation Index\0" as *const u8
4901 | |                     as *const libc::c_char,
...    |
4976 | |                 stream_free: None,
4977 | |             };
     | |______________- unnecessary `let` binding
4978 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
4898 ~             
4899 ~             ti_indicator_info {
4900 +                 name: b"marketfi\0" as *const u8 as *const libc::c_char,
4901 +                 full_name: b"Market Facilitation Index\0" as *const u8
4902 +                     as *const libc::c_char,
4903 +                 start: Some(
4904 +                     ti_marketfi_start
4905 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
4906 +                 ),
4907 +                 indicator: Some(
4908 +                     ti_marketfi
4909 +                         as unsafe extern "C" fn(
4910 +                             libc::c_int,
4911 +                             *const *const libc::c_double,
4912 +                             *const libc::c_double,
4913 +                             *const *mut libc::c_double,
4914 +                         ) -> libc::c_int,
4915 +                 ),
4916 +                 indicator_ref: None,
4917 +                 type_0: 2 as libc::c_int,
4918 +                 inputs: 3 as libc::c_int,
4919 +                 options: 0 as libc::c_int,
4920 +                 outputs: 1 as libc::c_int,
4921 +                 input_names: [
4922 +                     b"high\0" as *const u8 as *const libc::c_char,
4923 +                     b"low\0" as *const u8 as *const libc::c_char,
4924 +                     b"volume\0" as *const u8 as *const libc::c_char,
4925 +                     0 as *const libc::c_char,
4926 +                     0 as *const libc::c_char,
4927 +                     0 as *const libc::c_char,
4928 +                     0 as *const libc::c_char,
4929 +                     0 as *const libc::c_char,
4930 +                     0 as *const libc::c_char,
4931 +                     0 as *const libc::c_char,
4932 +                     0 as *const libc::c_char,
4933 +                     0 as *const libc::c_char,
4934 +                     0 as *const libc::c_char,
4935 +                     0 as *const libc::c_char,
4936 +                     0 as *const libc::c_char,
4937 +                     0 as *const libc::c_char,
4938 +                 ],
4939 +                 option_names: [
4940 +                     b"\0" as *const u8 as *const libc::c_char,
4941 +                     0 as *const libc::c_char,
4942 +                     0 as *const libc::c_char,
4943 +                     0 as *const libc::c_char,
4944 +                     0 as *const libc::c_char,
4945 +                     0 as *const libc::c_char,
4946 +                     0 as *const libc::c_char,
4947 +                     0 as *const libc::c_char,
4948 +                     0 as *const libc::c_char,
4949 +                     0 as *const libc::c_char,
4950 +                     0 as *const libc::c_char,
4951 +                     0 as *const libc::c_char,
4952 +                     0 as *const libc::c_char,
4953 +                     0 as *const libc::c_char,
4954 +                     0 as *const libc::c_char,
4955 +                     0 as *const libc::c_char,
4956 +                 ],
4957 +                 output_names: [
4958 +                     b"marketfi\0" as *const u8 as *const libc::c_char,
4959 +                     0 as *const libc::c_char,
4960 +                     0 as *const libc::c_char,
4961 +                     0 as *const libc::c_char,
4962 +                     0 as *const libc::c_char,
4963 +                     0 as *const libc::c_char,
4964 +                     0 as *const libc::c_char,
4965 +                     0 as *const libc::c_char,
4966 +                     0 as *const libc::c_char,
4967 +                     0 as *const libc::c_char,
4968 +                     0 as *const libc::c_char,
4969 +                     0 as *const libc::c_char,
4970 +                     0 as *const libc::c_char,
4971 +                     0 as *const libc::c_char,
4972 +                     0 as *const libc::c_char,
4973 +                     0 as *const libc::c_char,
4974 +                 ],
4975 +                 stream_new: None,
4976 +                 stream_run: None,
4977 +                 stream_free: None,
4978 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:5060:13
     |
4981 | /             let mut init = ti_indicator_info {
4982 | |                 name: b"mass\0" as *const u8 as *const libc::c_char,
4983 | |                 full_name: b"Mass Index\0" as *const u8 as *const libc::c_char,
4984 | |                 start: Some(
...    |
5058 | |                 stream_free: None,
5059 | |             };
     | |______________- unnecessary `let` binding
5060 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
4981 ~             
4982 ~             ti_indicator_info {
4983 +                 name: b"mass\0" as *const u8 as *const libc::c_char,
4984 +                 full_name: b"Mass Index\0" as *const u8 as *const libc::c_char,
4985 +                 start: Some(
4986 +                     ti_mass_start
4987 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
4988 +                 ),
4989 +                 indicator: Some(
4990 +                     ti_mass
4991 +                         as unsafe extern "C" fn(
4992 +                             libc::c_int,
4993 +                             *const *const libc::c_double,
4994 +                             *const libc::c_double,
4995 +                             *const *mut libc::c_double,
4996 +                         ) -> libc::c_int,
4997 +                 ),
4998 +                 indicator_ref: None,
4999 +                 type_0: 2 as libc::c_int,
5000 +                 inputs: 2 as libc::c_int,
5001 +                 options: 1 as libc::c_int,
5002 +                 outputs: 1 as libc::c_int,
5003 +                 input_names: [
5004 +                     b"high\0" as *const u8 as *const libc::c_char,
5005 +                     b"low\0" as *const u8 as *const libc::c_char,
5006 +                     0 as *const libc::c_char,
5007 +                     0 as *const libc::c_char,
5008 +                     0 as *const libc::c_char,
5009 +                     0 as *const libc::c_char,
5010 +                     0 as *const libc::c_char,
5011 +                     0 as *const libc::c_char,
5012 +                     0 as *const libc::c_char,
5013 +                     0 as *const libc::c_char,
5014 +                     0 as *const libc::c_char,
5015 +                     0 as *const libc::c_char,
5016 +                     0 as *const libc::c_char,
5017 +                     0 as *const libc::c_char,
5018 +                     0 as *const libc::c_char,
5019 +                     0 as *const libc::c_char,
5020 +                 ],
5021 +                 option_names: [
5022 +                     b"period\0" as *const u8 as *const libc::c_char,
5023 +                     0 as *const libc::c_char,
5024 +                     0 as *const libc::c_char,
5025 +                     0 as *const libc::c_char,
5026 +                     0 as *const libc::c_char,
5027 +                     0 as *const libc::c_char,
5028 +                     0 as *const libc::c_char,
5029 +                     0 as *const libc::c_char,
5030 +                     0 as *const libc::c_char,
5031 +                     0 as *const libc::c_char,
5032 +                     0 as *const libc::c_char,
5033 +                     0 as *const libc::c_char,
5034 +                     0 as *const libc::c_char,
5035 +                     0 as *const libc::c_char,
5036 +                     0 as *const libc::c_char,
5037 +                     0 as *const libc::c_char,
5038 +                 ],
5039 +                 output_names: [
5040 +                     b"mass\0" as *const u8 as *const libc::c_char,
5041 +                     0 as *const libc::c_char,
5042 +                     0 as *const libc::c_char,
5043 +                     0 as *const libc::c_char,
5044 +                     0 as *const libc::c_char,
5045 +                     0 as *const libc::c_char,
5046 +                     0 as *const libc::c_char,
5047 +                     0 as *const libc::c_char,
5048 +                     0 as *const libc::c_char,
5049 +                     0 as *const libc::c_char,
5050 +                     0 as *const libc::c_char,
5051 +                     0 as *const libc::c_char,
5052 +                     0 as *const libc::c_char,
5053 +                     0 as *const libc::c_char,
5054 +                     0 as *const libc::c_char,
5055 +                     0 as *const libc::c_char,
5056 +                 ],
5057 +                 stream_new: None,
5058 +                 stream_run: None,
5059 +                 stream_free: None,
5060 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:5150:13
     |
5063 | /             let mut init = ti_indicator_info {
5064 | |                 name: b"max\0" as *const u8 as *const libc::c_char,
5065 | |                 full_name: b"Maximum In Period\0" as *const u8 as *const libc::c_char,
5066 | |                 start: Some(
...    |
5148 | |                 stream_free: None,
5149 | |             };
     | |______________- unnecessary `let` binding
5150 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
5063 ~             
5064 ~             ti_indicator_info {
5065 +                 name: b"max\0" as *const u8 as *const libc::c_char,
5066 +                 full_name: b"Maximum In Period\0" as *const u8 as *const libc::c_char,
5067 +                 start: Some(
5068 +                     ti_max_start
5069 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
5070 +                 ),
5071 +                 indicator: Some(
5072 +                     ti_max
5073 +                         as unsafe extern "C" fn(
5074 +                             libc::c_int,
5075 +                             *const *const libc::c_double,
5076 +                             *const libc::c_double,
5077 +                             *const *mut libc::c_double,
5078 +                         ) -> libc::c_int,
5079 +                 ),
5080 +                 indicator_ref: Some(
5081 +                     ti_max_ref
5082 +                         as unsafe extern "C" fn(
5083 +                             libc::c_int,
5084 +                             *const *const libc::c_double,
5085 +                             *const libc::c_double,
5086 +                             *const *mut libc::c_double,
5087 +                         ) -> libc::c_int,
5088 +                 ),
5089 +                 type_0: 3 as libc::c_int,
5090 +                 inputs: 1 as libc::c_int,
5091 +                 options: 1 as libc::c_int,
5092 +                 outputs: 1 as libc::c_int,
5093 +                 input_names: [
5094 +                     b"real\0" as *const u8 as *const libc::c_char,
5095 +                     0 as *const libc::c_char,
5096 +                     0 as *const libc::c_char,
5097 +                     0 as *const libc::c_char,
5098 +                     0 as *const libc::c_char,
5099 +                     0 as *const libc::c_char,
5100 +                     0 as *const libc::c_char,
5101 +                     0 as *const libc::c_char,
5102 +                     0 as *const libc::c_char,
5103 +                     0 as *const libc::c_char,
5104 +                     0 as *const libc::c_char,
5105 +                     0 as *const libc::c_char,
5106 +                     0 as *const libc::c_char,
5107 +                     0 as *const libc::c_char,
5108 +                     0 as *const libc::c_char,
5109 +                     0 as *const libc::c_char,
5110 +                 ],
5111 +                 option_names: [
5112 +                     b"period\0" as *const u8 as *const libc::c_char,
5113 +                     0 as *const libc::c_char,
5114 +                     0 as *const libc::c_char,
5115 +                     0 as *const libc::c_char,
5116 +                     0 as *const libc::c_char,
5117 +                     0 as *const libc::c_char,
5118 +                     0 as *const libc::c_char,
5119 +                     0 as *const libc::c_char,
5120 +                     0 as *const libc::c_char,
5121 +                     0 as *const libc::c_char,
5122 +                     0 as *const libc::c_char,
5123 +                     0 as *const libc::c_char,
5124 +                     0 as *const libc::c_char,
5125 +                     0 as *const libc::c_char,
5126 +                     0 as *const libc::c_char,
5127 +                     0 as *const libc::c_char,
5128 +                 ],
5129 +                 output_names: [
5130 +                     b"max\0" as *const u8 as *const libc::c_char,
5131 +                     0 as *const libc::c_char,
5132 +                     0 as *const libc::c_char,
5133 +                     0 as *const libc::c_char,
5134 +                     0 as *const libc::c_char,
5135 +                     0 as *const libc::c_char,
5136 +                     0 as *const libc::c_char,
5137 +                     0 as *const libc::c_char,
5138 +                     0 as *const libc::c_char,
5139 +                     0 as *const libc::c_char,
5140 +                     0 as *const libc::c_char,
5141 +                     0 as *const libc::c_char,
5142 +                     0 as *const libc::c_char,
5143 +                     0 as *const libc::c_char,
5144 +                     0 as *const libc::c_char,
5145 +                     0 as *const libc::c_char,
5146 +                 ],
5147 +                 stream_new: None,
5148 +                 stream_run: None,
5149 +                 stream_free: None,
5150 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:5233:13
     |
5153 | /             let mut init = ti_indicator_info {
5154 | |                 name: b"md\0" as *const u8 as *const libc::c_char,
5155 | |                 full_name: b"Mean Deviation Over Period\0" as *const u8
5156 | |                     as *const libc::c_char,
...    |
5231 | |                 stream_free: None,
5232 | |             };
     | |______________- unnecessary `let` binding
5233 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
5153 ~             
5154 ~             ti_indicator_info {
5155 +                 name: b"md\0" as *const u8 as *const libc::c_char,
5156 +                 full_name: b"Mean Deviation Over Period\0" as *const u8
5157 +                     as *const libc::c_char,
5158 +                 start: Some(
5159 +                     ti_md_start
5160 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
5161 +                 ),
5162 +                 indicator: Some(
5163 +                     ti_md
5164 +                         as unsafe extern "C" fn(
5165 +                             libc::c_int,
5166 +                             *const *const libc::c_double,
5167 +                             *const libc::c_double,
5168 +                             *const *mut libc::c_double,
5169 +                         ) -> libc::c_int,
5170 +                 ),
5171 +                 indicator_ref: None,
5172 +                 type_0: 3 as libc::c_int,
5173 +                 inputs: 1 as libc::c_int,
5174 +                 options: 1 as libc::c_int,
5175 +                 outputs: 1 as libc::c_int,
5176 +                 input_names: [
5177 +                     b"real\0" as *const u8 as *const libc::c_char,
5178 +                     0 as *const libc::c_char,
5179 +                     0 as *const libc::c_char,
5180 +                     0 as *const libc::c_char,
5181 +                     0 as *const libc::c_char,
5182 +                     0 as *const libc::c_char,
5183 +                     0 as *const libc::c_char,
5184 +                     0 as *const libc::c_char,
5185 +                     0 as *const libc::c_char,
5186 +                     0 as *const libc::c_char,
5187 +                     0 as *const libc::c_char,
5188 +                     0 as *const libc::c_char,
5189 +                     0 as *const libc::c_char,
5190 +                     0 as *const libc::c_char,
5191 +                     0 as *const libc::c_char,
5192 +                     0 as *const libc::c_char,
5193 +                 ],
5194 +                 option_names: [
5195 +                     b"period\0" as *const u8 as *const libc::c_char,
5196 +                     0 as *const libc::c_char,
5197 +                     0 as *const libc::c_char,
5198 +                     0 as *const libc::c_char,
5199 +                     0 as *const libc::c_char,
5200 +                     0 as *const libc::c_char,
5201 +                     0 as *const libc::c_char,
5202 +                     0 as *const libc::c_char,
5203 +                     0 as *const libc::c_char,
5204 +                     0 as *const libc::c_char,
5205 +                     0 as *const libc::c_char,
5206 +                     0 as *const libc::c_char,
5207 +                     0 as *const libc::c_char,
5208 +                     0 as *const libc::c_char,
5209 +                     0 as *const libc::c_char,
5210 +                     0 as *const libc::c_char,
5211 +                 ],
5212 +                 output_names: [
5213 +                     b"md\0" as *const u8 as *const libc::c_char,
5214 +                     0 as *const libc::c_char,
5215 +                     0 as *const libc::c_char,
5216 +                     0 as *const libc::c_char,
5217 +                     0 as *const libc::c_char,
5218 +                     0 as *const libc::c_char,
5219 +                     0 as *const libc::c_char,
5220 +                     0 as *const libc::c_char,
5221 +                     0 as *const libc::c_char,
5222 +                     0 as *const libc::c_char,
5223 +                     0 as *const libc::c_char,
5224 +                     0 as *const libc::c_char,
5225 +                     0 as *const libc::c_char,
5226 +                     0 as *const libc::c_char,
5227 +                     0 as *const libc::c_char,
5228 +                     0 as *const libc::c_char,
5229 +                 ],
5230 +                 stream_new: None,
5231 +                 stream_run: None,
5232 +                 stream_free: None,
5233 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:5315:13
     |
5236 | /             let mut init = ti_indicator_info {
5237 | |                 name: b"medprice\0" as *const u8 as *const libc::c_char,
5238 | |                 full_name: b"Median Price\0" as *const u8 as *const libc::c_char,
5239 | |                 start: Some(
...    |
5313 | |                 stream_free: None,
5314 | |             };
     | |______________- unnecessary `let` binding
5315 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
5236 ~             
5237 ~             ti_indicator_info {
5238 +                 name: b"medprice\0" as *const u8 as *const libc::c_char,
5239 +                 full_name: b"Median Price\0" as *const u8 as *const libc::c_char,
5240 +                 start: Some(
5241 +                     ti_medprice_start
5242 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
5243 +                 ),
5244 +                 indicator: Some(
5245 +                     ti_medprice
5246 +                         as unsafe extern "C" fn(
5247 +                             libc::c_int,
5248 +                             *const *const libc::c_double,
5249 +                             *const libc::c_double,
5250 +                             *const *mut libc::c_double,
5251 +                         ) -> libc::c_int,
5252 +                 ),
5253 +                 indicator_ref: None,
5254 +                 type_0: 1 as libc::c_int,
5255 +                 inputs: 2 as libc::c_int,
5256 +                 options: 0 as libc::c_int,
5257 +                 outputs: 1 as libc::c_int,
5258 +                 input_names: [
5259 +                     b"high\0" as *const u8 as *const libc::c_char,
5260 +                     b"low\0" as *const u8 as *const libc::c_char,
5261 +                     0 as *const libc::c_char,
5262 +                     0 as *const libc::c_char,
5263 +                     0 as *const libc::c_char,
5264 +                     0 as *const libc::c_char,
5265 +                     0 as *const libc::c_char,
5266 +                     0 as *const libc::c_char,
5267 +                     0 as *const libc::c_char,
5268 +                     0 as *const libc::c_char,
5269 +                     0 as *const libc::c_char,
5270 +                     0 as *const libc::c_char,
5271 +                     0 as *const libc::c_char,
5272 +                     0 as *const libc::c_char,
5273 +                     0 as *const libc::c_char,
5274 +                     0 as *const libc::c_char,
5275 +                 ],
5276 +                 option_names: [
5277 +                     b"\0" as *const u8 as *const libc::c_char,
5278 +                     0 as *const libc::c_char,
5279 +                     0 as *const libc::c_char,
5280 +                     0 as *const libc::c_char,
5281 +                     0 as *const libc::c_char,
5282 +                     0 as *const libc::c_char,
5283 +                     0 as *const libc::c_char,
5284 +                     0 as *const libc::c_char,
5285 +                     0 as *const libc::c_char,
5286 +                     0 as *const libc::c_char,
5287 +                     0 as *const libc::c_char,
5288 +                     0 as *const libc::c_char,
5289 +                     0 as *const libc::c_char,
5290 +                     0 as *const libc::c_char,
5291 +                     0 as *const libc::c_char,
5292 +                     0 as *const libc::c_char,
5293 +                 ],
5294 +                 output_names: [
5295 +                     b"medprice\0" as *const u8 as *const libc::c_char,
5296 +                     0 as *const libc::c_char,
5297 +                     0 as *const libc::c_char,
5298 +                     0 as *const libc::c_char,
5299 +                     0 as *const libc::c_char,
5300 +                     0 as *const libc::c_char,
5301 +                     0 as *const libc::c_char,
5302 +                     0 as *const libc::c_char,
5303 +                     0 as *const libc::c_char,
5304 +                     0 as *const libc::c_char,
5305 +                     0 as *const libc::c_char,
5306 +                     0 as *const libc::c_char,
5307 +                     0 as *const libc::c_char,
5308 +                     0 as *const libc::c_char,
5309 +                     0 as *const libc::c_char,
5310 +                     0 as *const libc::c_char,
5311 +                 ],
5312 +                 stream_new: None,
5313 +                 stream_run: None,
5314 +                 stream_free: None,
5315 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:5397:13
     |
5318 | /             let mut init = ti_indicator_info {
5319 | |                 name: b"mfi\0" as *const u8 as *const libc::c_char,
5320 | |                 full_name: b"Money Flow Index\0" as *const u8 as *const libc::c_char,
5321 | |                 start: Some(
...    |
5395 | |                 stream_free: None,
5396 | |             };
     | |______________- unnecessary `let` binding
5397 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
5318 ~             
5319 ~             ti_indicator_info {
5320 +                 name: b"mfi\0" as *const u8 as *const libc::c_char,
5321 +                 full_name: b"Money Flow Index\0" as *const u8 as *const libc::c_char,
5322 +                 start: Some(
5323 +                     ti_mfi_start
5324 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
5325 +                 ),
5326 +                 indicator: Some(
5327 +                     ti_mfi
5328 +                         as unsafe extern "C" fn(
5329 +                             libc::c_int,
5330 +                             *const *const libc::c_double,
5331 +                             *const libc::c_double,
5332 +                             *const *mut libc::c_double,
5333 +                         ) -> libc::c_int,
5334 +                 ),
5335 +                 indicator_ref: None,
5336 +                 type_0: 2 as libc::c_int,
5337 +                 inputs: 4 as libc::c_int,
5338 +                 options: 1 as libc::c_int,
5339 +                 outputs: 1 as libc::c_int,
5340 +                 input_names: [
5341 +                     b"high\0" as *const u8 as *const libc::c_char,
5342 +                     b"low\0" as *const u8 as *const libc::c_char,
5343 +                     b"close\0" as *const u8 as *const libc::c_char,
5344 +                     b"volume\0" as *const u8 as *const libc::c_char,
5345 +                     0 as *const libc::c_char,
5346 +                     0 as *const libc::c_char,
5347 +                     0 as *const libc::c_char,
5348 +                     0 as *const libc::c_char,
5349 +                     0 as *const libc::c_char,
5350 +                     0 as *const libc::c_char,
5351 +                     0 as *const libc::c_char,
5352 +                     0 as *const libc::c_char,
5353 +                     0 as *const libc::c_char,
5354 +                     0 as *const libc::c_char,
5355 +                     0 as *const libc::c_char,
5356 +                     0 as *const libc::c_char,
5357 +                 ],
5358 +                 option_names: [
5359 +                     b"period\0" as *const u8 as *const libc::c_char,
5360 +                     0 as *const libc::c_char,
5361 +                     0 as *const libc::c_char,
5362 +                     0 as *const libc::c_char,
5363 +                     0 as *const libc::c_char,
5364 +                     0 as *const libc::c_char,
5365 +                     0 as *const libc::c_char,
5366 +                     0 as *const libc::c_char,
5367 +                     0 as *const libc::c_char,
5368 +                     0 as *const libc::c_char,
5369 +                     0 as *const libc::c_char,
5370 +                     0 as *const libc::c_char,
5371 +                     0 as *const libc::c_char,
5372 +                     0 as *const libc::c_char,
5373 +                     0 as *const libc::c_char,
5374 +                     0 as *const libc::c_char,
5375 +                 ],
5376 +                 output_names: [
5377 +                     b"mfi\0" as *const u8 as *const libc::c_char,
5378 +                     0 as *const libc::c_char,
5379 +                     0 as *const libc::c_char,
5380 +                     0 as *const libc::c_char,
5381 +                     0 as *const libc::c_char,
5382 +                     0 as *const libc::c_char,
5383 +                     0 as *const libc::c_char,
5384 +                     0 as *const libc::c_char,
5385 +                     0 as *const libc::c_char,
5386 +                     0 as *const libc::c_char,
5387 +                     0 as *const libc::c_char,
5388 +                     0 as *const libc::c_char,
5389 +                     0 as *const libc::c_char,
5390 +                     0 as *const libc::c_char,
5391 +                     0 as *const libc::c_char,
5392 +                     0 as *const libc::c_char,
5393 +                 ],
5394 +                 stream_new: None,
5395 +                 stream_run: None,
5396 +                 stream_free: None,
5397 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:5487:13
     |
5400 | /             let mut init = ti_indicator_info {
5401 | |                 name: b"min\0" as *const u8 as *const libc::c_char,
5402 | |                 full_name: b"Minimum In Period\0" as *const u8 as *const libc::c_char,
5403 | |                 start: Some(
...    |
5485 | |                 stream_free: None,
5486 | |             };
     | |______________- unnecessary `let` binding
5487 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
5400 ~             
5401 ~             ti_indicator_info {
5402 +                 name: b"min\0" as *const u8 as *const libc::c_char,
5403 +                 full_name: b"Minimum In Period\0" as *const u8 as *const libc::c_char,
5404 +                 start: Some(
5405 +                     ti_min_start
5406 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
5407 +                 ),
5408 +                 indicator: Some(
5409 +                     ti_min
5410 +                         as unsafe extern "C" fn(
5411 +                             libc::c_int,
5412 +                             *const *const libc::c_double,
5413 +                             *const libc::c_double,
5414 +                             *const *mut libc::c_double,
5415 +                         ) -> libc::c_int,
5416 +                 ),
5417 +                 indicator_ref: Some(
5418 +                     ti_min_ref
5419 +                         as unsafe extern "C" fn(
5420 +                             libc::c_int,
5421 +                             *const *const libc::c_double,
5422 +                             *const libc::c_double,
5423 +                             *const *mut libc::c_double,
5424 +                         ) -> libc::c_int,
5425 +                 ),
5426 +                 type_0: 3 as libc::c_int,
5427 +                 inputs: 1 as libc::c_int,
5428 +                 options: 1 as libc::c_int,
5429 +                 outputs: 1 as libc::c_int,
5430 +                 input_names: [
5431 +                     b"real\0" as *const u8 as *const libc::c_char,
5432 +                     0 as *const libc::c_char,
5433 +                     0 as *const libc::c_char,
5434 +                     0 as *const libc::c_char,
5435 +                     0 as *const libc::c_char,
5436 +                     0 as *const libc::c_char,
5437 +                     0 as *const libc::c_char,
5438 +                     0 as *const libc::c_char,
5439 +                     0 as *const libc::c_char,
5440 +                     0 as *const libc::c_char,
5441 +                     0 as *const libc::c_char,
5442 +                     0 as *const libc::c_char,
5443 +                     0 as *const libc::c_char,
5444 +                     0 as *const libc::c_char,
5445 +                     0 as *const libc::c_char,
5446 +                     0 as *const libc::c_char,
5447 +                 ],
5448 +                 option_names: [
5449 +                     b"period\0" as *const u8 as *const libc::c_char,
5450 +                     0 as *const libc::c_char,
5451 +                     0 as *const libc::c_char,
5452 +                     0 as *const libc::c_char,
5453 +                     0 as *const libc::c_char,
5454 +                     0 as *const libc::c_char,
5455 +                     0 as *const libc::c_char,
5456 +                     0 as *const libc::c_char,
5457 +                     0 as *const libc::c_char,
5458 +                     0 as *const libc::c_char,
5459 +                     0 as *const libc::c_char,
5460 +                     0 as *const libc::c_char,
5461 +                     0 as *const libc::c_char,
5462 +                     0 as *const libc::c_char,
5463 +                     0 as *const libc::c_char,
5464 +                     0 as *const libc::c_char,
5465 +                 ],
5466 +                 output_names: [
5467 +                     b"min\0" as *const u8 as *const libc::c_char,
5468 +                     0 as *const libc::c_char,
5469 +                     0 as *const libc::c_char,
5470 +                     0 as *const libc::c_char,
5471 +                     0 as *const libc::c_char,
5472 +                     0 as *const libc::c_char,
5473 +                     0 as *const libc::c_char,
5474 +                     0 as *const libc::c_char,
5475 +                     0 as *const libc::c_char,
5476 +                     0 as *const libc::c_char,
5477 +                     0 as *const libc::c_char,
5478 +                     0 as *const libc::c_char,
5479 +                     0 as *const libc::c_char,
5480 +                     0 as *const libc::c_char,
5481 +                     0 as *const libc::c_char,
5482 +                     0 as *const libc::c_char,
5483 +                 ],
5484 +                 stream_new: None,
5485 +                 stream_run: None,
5486 +                 stream_free: None,
5487 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:5569:13
     |
5490 | /             let mut init = ti_indicator_info {
5491 | |                 name: b"mom\0" as *const u8 as *const libc::c_char,
5492 | |                 full_name: b"Momentum\0" as *const u8 as *const libc::c_char,
5493 | |                 start: Some(
...    |
5567 | |                 stream_free: None,
5568 | |             };
     | |______________- unnecessary `let` binding
5569 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
5490 ~             
5491 ~             ti_indicator_info {
5492 +                 name: b"mom\0" as *const u8 as *const libc::c_char,
5493 +                 full_name: b"Momentum\0" as *const u8 as *const libc::c_char,
5494 +                 start: Some(
5495 +                     ti_mom_start
5496 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
5497 +                 ),
5498 +                 indicator: Some(
5499 +                     ti_mom
5500 +                         as unsafe extern "C" fn(
5501 +                             libc::c_int,
5502 +                             *const *const libc::c_double,
5503 +                             *const libc::c_double,
5504 +                             *const *mut libc::c_double,
5505 +                         ) -> libc::c_int,
5506 +                 ),
5507 +                 indicator_ref: None,
5508 +                 type_0: 2 as libc::c_int,
5509 +                 inputs: 1 as libc::c_int,
5510 +                 options: 1 as libc::c_int,
5511 +                 outputs: 1 as libc::c_int,
5512 +                 input_names: [
5513 +                     b"real\0" as *const u8 as *const libc::c_char,
5514 +                     0 as *const libc::c_char,
5515 +                     0 as *const libc::c_char,
5516 +                     0 as *const libc::c_char,
5517 +                     0 as *const libc::c_char,
5518 +                     0 as *const libc::c_char,
5519 +                     0 as *const libc::c_char,
5520 +                     0 as *const libc::c_char,
5521 +                     0 as *const libc::c_char,
5522 +                     0 as *const libc::c_char,
5523 +                     0 as *const libc::c_char,
5524 +                     0 as *const libc::c_char,
5525 +                     0 as *const libc::c_char,
5526 +                     0 as *const libc::c_char,
5527 +                     0 as *const libc::c_char,
5528 +                     0 as *const libc::c_char,
5529 +                 ],
5530 +                 option_names: [
5531 +                     b"period\0" as *const u8 as *const libc::c_char,
5532 +                     0 as *const libc::c_char,
5533 +                     0 as *const libc::c_char,
5534 +                     0 as *const libc::c_char,
5535 +                     0 as *const libc::c_char,
5536 +                     0 as *const libc::c_char,
5537 +                     0 as *const libc::c_char,
5538 +                     0 as *const libc::c_char,
5539 +                     0 as *const libc::c_char,
5540 +                     0 as *const libc::c_char,
5541 +                     0 as *const libc::c_char,
5542 +                     0 as *const libc::c_char,
5543 +                     0 as *const libc::c_char,
5544 +                     0 as *const libc::c_char,
5545 +                     0 as *const libc::c_char,
5546 +                     0 as *const libc::c_char,
5547 +                 ],
5548 +                 output_names: [
5549 +                     b"mom\0" as *const u8 as *const libc::c_char,
5550 +                     0 as *const libc::c_char,
5551 +                     0 as *const libc::c_char,
5552 +                     0 as *const libc::c_char,
5553 +                     0 as *const libc::c_char,
5554 +                     0 as *const libc::c_char,
5555 +                     0 as *const libc::c_char,
5556 +                     0 as *const libc::c_char,
5557 +                     0 as *const libc::c_char,
5558 +                     0 as *const libc::c_char,
5559 +                     0 as *const libc::c_char,
5560 +                     0 as *const libc::c_char,
5561 +                     0 as *const libc::c_char,
5562 +                     0 as *const libc::c_char,
5563 +                     0 as *const libc::c_char,
5564 +                     0 as *const libc::c_char,
5565 +                 ],
5566 +                 stream_new: None,
5567 +                 stream_run: None,
5568 +                 stream_free: None,
5569 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:5651:13
     |
5572 | /             let mut init = ti_indicator_info {
5573 | |                 name: b"msw\0" as *const u8 as *const libc::c_char,
5574 | |                 full_name: b"Mesa Sine Wave\0" as *const u8 as *const libc::c_char,
5575 | |                 start: Some(
...    |
5649 | |                 stream_free: None,
5650 | |             };
     | |______________- unnecessary `let` binding
5651 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
5572 ~             
5573 ~             ti_indicator_info {
5574 +                 name: b"msw\0" as *const u8 as *const libc::c_char,
5575 +                 full_name: b"Mesa Sine Wave\0" as *const u8 as *const libc::c_char,
5576 +                 start: Some(
5577 +                     ti_msw_start
5578 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
5579 +                 ),
5580 +                 indicator: Some(
5581 +                     ti_msw
5582 +                         as unsafe extern "C" fn(
5583 +                             libc::c_int,
5584 +                             *const *const libc::c_double,
5585 +                             *const libc::c_double,
5586 +                             *const *mut libc::c_double,
5587 +                         ) -> libc::c_int,
5588 +                 ),
5589 +                 indicator_ref: None,
5590 +                 type_0: 2 as libc::c_int,
5591 +                 inputs: 1 as libc::c_int,
5592 +                 options: 1 as libc::c_int,
5593 +                 outputs: 2 as libc::c_int,
5594 +                 input_names: [
5595 +                     b"real\0" as *const u8 as *const libc::c_char,
5596 +                     0 as *const libc::c_char,
5597 +                     0 as *const libc::c_char,
5598 +                     0 as *const libc::c_char,
5599 +                     0 as *const libc::c_char,
5600 +                     0 as *const libc::c_char,
5601 +                     0 as *const libc::c_char,
5602 +                     0 as *const libc::c_char,
5603 +                     0 as *const libc::c_char,
5604 +                     0 as *const libc::c_char,
5605 +                     0 as *const libc::c_char,
5606 +                     0 as *const libc::c_char,
5607 +                     0 as *const libc::c_char,
5608 +                     0 as *const libc::c_char,
5609 +                     0 as *const libc::c_char,
5610 +                     0 as *const libc::c_char,
5611 +                 ],
5612 +                 option_names: [
5613 +                     b"period\0" as *const u8 as *const libc::c_char,
5614 +                     0 as *const libc::c_char,
5615 +                     0 as *const libc::c_char,
5616 +                     0 as *const libc::c_char,
5617 +                     0 as *const libc::c_char,
5618 +                     0 as *const libc::c_char,
5619 +                     0 as *const libc::c_char,
5620 +                     0 as *const libc::c_char,
5621 +                     0 as *const libc::c_char,
5622 +                     0 as *const libc::c_char,
5623 +                     0 as *const libc::c_char,
5624 +                     0 as *const libc::c_char,
5625 +                     0 as *const libc::c_char,
5626 +                     0 as *const libc::c_char,
5627 +                     0 as *const libc::c_char,
5628 +                     0 as *const libc::c_char,
5629 +                 ],
5630 +                 output_names: [
5631 +                     b"msw_sine\0" as *const u8 as *const libc::c_char,
5632 +                     b"msw_lead\0" as *const u8 as *const libc::c_char,
5633 +                     0 as *const libc::c_char,
5634 +                     0 as *const libc::c_char,
5635 +                     0 as *const libc::c_char,
5636 +                     0 as *const libc::c_char,
5637 +                     0 as *const libc::c_char,
5638 +                     0 as *const libc::c_char,
5639 +                     0 as *const libc::c_char,
5640 +                     0 as *const libc::c_char,
5641 +                     0 as *const libc::c_char,
5642 +                     0 as *const libc::c_char,
5643 +                     0 as *const libc::c_char,
5644 +                     0 as *const libc::c_char,
5645 +                     0 as *const libc::c_char,
5646 +                     0 as *const libc::c_char,
5647 +                 ],
5648 +                 stream_new: None,
5649 +                 stream_run: None,
5650 +                 stream_free: None,
5651 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:5734:13
     |
5654 | /             let mut init = ti_indicator_info {
5655 | |                 name: b"mul\0" as *const u8 as *const libc::c_char,
5656 | |                 full_name: b"Vector Multiplication\0" as *const u8
5657 | |                     as *const libc::c_char,
...    |
5732 | |                 stream_free: None,
5733 | |             };
     | |______________- unnecessary `let` binding
5734 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
5654 ~             
5655 ~             ti_indicator_info {
5656 +                 name: b"mul\0" as *const u8 as *const libc::c_char,
5657 +                 full_name: b"Vector Multiplication\0" as *const u8
5658 +                     as *const libc::c_char,
5659 +                 start: Some(
5660 +                     ti_mul_start
5661 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
5662 +                 ),
5663 +                 indicator: Some(
5664 +                     ti_mul
5665 +                         as unsafe extern "C" fn(
5666 +                             libc::c_int,
5667 +                             *const *const libc::c_double,
5668 +                             *const libc::c_double,
5669 +                             *const *mut libc::c_double,
5670 +                         ) -> libc::c_int,
5671 +                 ),
5672 +                 indicator_ref: None,
5673 +                 type_0: 4 as libc::c_int,
5674 +                 inputs: 2 as libc::c_int,
5675 +                 options: 0 as libc::c_int,
5676 +                 outputs: 1 as libc::c_int,
5677 +                 input_names: [
5678 +                     b"real\0" as *const u8 as *const libc::c_char,
5679 +                     b"real\0" as *const u8 as *const libc::c_char,
5680 +                     0 as *const libc::c_char,
5681 +                     0 as *const libc::c_char,
5682 +                     0 as *const libc::c_char,
5683 +                     0 as *const libc::c_char,
5684 +                     0 as *const libc::c_char,
5685 +                     0 as *const libc::c_char,
5686 +                     0 as *const libc::c_char,
5687 +                     0 as *const libc::c_char,
5688 +                     0 as *const libc::c_char,
5689 +                     0 as *const libc::c_char,
5690 +                     0 as *const libc::c_char,
5691 +                     0 as *const libc::c_char,
5692 +                     0 as *const libc::c_char,
5693 +                     0 as *const libc::c_char,
5694 +                 ],
5695 +                 option_names: [
5696 +                     b"\0" as *const u8 as *const libc::c_char,
5697 +                     0 as *const libc::c_char,
5698 +                     0 as *const libc::c_char,
5699 +                     0 as *const libc::c_char,
5700 +                     0 as *const libc::c_char,
5701 +                     0 as *const libc::c_char,
5702 +                     0 as *const libc::c_char,
5703 +                     0 as *const libc::c_char,
5704 +                     0 as *const libc::c_char,
5705 +                     0 as *const libc::c_char,
5706 +                     0 as *const libc::c_char,
5707 +                     0 as *const libc::c_char,
5708 +                     0 as *const libc::c_char,
5709 +                     0 as *const libc::c_char,
5710 +                     0 as *const libc::c_char,
5711 +                     0 as *const libc::c_char,
5712 +                 ],
5713 +                 output_names: [
5714 +                     b"mul\0" as *const u8 as *const libc::c_char,
5715 +                     0 as *const libc::c_char,
5716 +                     0 as *const libc::c_char,
5717 +                     0 as *const libc::c_char,
5718 +                     0 as *const libc::c_char,
5719 +                     0 as *const libc::c_char,
5720 +                     0 as *const libc::c_char,
5721 +                     0 as *const libc::c_char,
5722 +                     0 as *const libc::c_char,
5723 +                     0 as *const libc::c_char,
5724 +                     0 as *const libc::c_char,
5725 +                     0 as *const libc::c_char,
5726 +                     0 as *const libc::c_char,
5727 +                     0 as *const libc::c_char,
5728 +                     0 as *const libc::c_char,
5729 +                     0 as *const libc::c_char,
5730 +                 ],
5731 +                 stream_new: None,
5732 +                 stream_run: None,
5733 +                 stream_free: None,
5734 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:5817:13
     |
5737 | /             let mut init = ti_indicator_info {
5738 | |                 name: b"natr\0" as *const u8 as *const libc::c_char,
5739 | |                 full_name: b"Normalized Average True Range\0" as *const u8
5740 | |                     as *const libc::c_char,
...    |
5815 | |                 stream_free: None,
5816 | |             };
     | |______________- unnecessary `let` binding
5817 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
5737 ~             
5738 ~             ti_indicator_info {
5739 +                 name: b"natr\0" as *const u8 as *const libc::c_char,
5740 +                 full_name: b"Normalized Average True Range\0" as *const u8
5741 +                     as *const libc::c_char,
5742 +                 start: Some(
5743 +                     ti_natr_start
5744 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
5745 +                 ),
5746 +                 indicator: Some(
5747 +                     ti_natr
5748 +                         as unsafe extern "C" fn(
5749 +                             libc::c_int,
5750 +                             *const *const libc::c_double,
5751 +                             *const libc::c_double,
5752 +                             *const *mut libc::c_double,
5753 +                         ) -> libc::c_int,
5754 +                 ),
5755 +                 indicator_ref: None,
5756 +                 type_0: 2 as libc::c_int,
5757 +                 inputs: 3 as libc::c_int,
5758 +                 options: 1 as libc::c_int,
5759 +                 outputs: 1 as libc::c_int,
5760 +                 input_names: [
5761 +                     b"high\0" as *const u8 as *const libc::c_char,
5762 +                     b"low\0" as *const u8 as *const libc::c_char,
5763 +                     b"close\0" as *const u8 as *const libc::c_char,
5764 +                     0 as *const libc::c_char,
5765 +                     0 as *const libc::c_char,
5766 +                     0 as *const libc::c_char,
5767 +                     0 as *const libc::c_char,
5768 +                     0 as *const libc::c_char,
5769 +                     0 as *const libc::c_char,
5770 +                     0 as *const libc::c_char,
5771 +                     0 as *const libc::c_char,
5772 +                     0 as *const libc::c_char,
5773 +                     0 as *const libc::c_char,
5774 +                     0 as *const libc::c_char,
5775 +                     0 as *const libc::c_char,
5776 +                     0 as *const libc::c_char,
5777 +                 ],
5778 +                 option_names: [
5779 +                     b"period\0" as *const u8 as *const libc::c_char,
5780 +                     0 as *const libc::c_char,
5781 +                     0 as *const libc::c_char,
5782 +                     0 as *const libc::c_char,
5783 +                     0 as *const libc::c_char,
5784 +                     0 as *const libc::c_char,
5785 +                     0 as *const libc::c_char,
5786 +                     0 as *const libc::c_char,
5787 +                     0 as *const libc::c_char,
5788 +                     0 as *const libc::c_char,
5789 +                     0 as *const libc::c_char,
5790 +                     0 as *const libc::c_char,
5791 +                     0 as *const libc::c_char,
5792 +                     0 as *const libc::c_char,
5793 +                     0 as *const libc::c_char,
5794 +                     0 as *const libc::c_char,
5795 +                 ],
5796 +                 output_names: [
5797 +                     b"natr\0" as *const u8 as *const libc::c_char,
5798 +                     0 as *const libc::c_char,
5799 +                     0 as *const libc::c_char,
5800 +                     0 as *const libc::c_char,
5801 +                     0 as *const libc::c_char,
5802 +                     0 as *const libc::c_char,
5803 +                     0 as *const libc::c_char,
5804 +                     0 as *const libc::c_char,
5805 +                     0 as *const libc::c_char,
5806 +                     0 as *const libc::c_char,
5807 +                     0 as *const libc::c_char,
5808 +                     0 as *const libc::c_char,
5809 +                     0 as *const libc::c_char,
5810 +                     0 as *const libc::c_char,
5811 +                     0 as *const libc::c_char,
5812 +                     0 as *const libc::c_char,
5813 +                 ],
5814 +                 stream_new: None,
5815 +                 stream_run: None,
5816 +                 stream_free: None,
5817 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:5900:13
     |
5820 | /             let mut init = ti_indicator_info {
5821 | |                 name: b"nvi\0" as *const u8 as *const libc::c_char,
5822 | |                 full_name: b"Negative Volume Index\0" as *const u8
5823 | |                     as *const libc::c_char,
...    |
5898 | |                 stream_free: None,
5899 | |             };
     | |______________- unnecessary `let` binding
5900 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
5820 ~             
5821 ~             ti_indicator_info {
5822 +                 name: b"nvi\0" as *const u8 as *const libc::c_char,
5823 +                 full_name: b"Negative Volume Index\0" as *const u8
5824 +                     as *const libc::c_char,
5825 +                 start: Some(
5826 +                     ti_nvi_start
5827 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
5828 +                 ),
5829 +                 indicator: Some(
5830 +                     ti_nvi
5831 +                         as unsafe extern "C" fn(
5832 +                             libc::c_int,
5833 +                             *const *const libc::c_double,
5834 +                             *const libc::c_double,
5835 +                             *const *mut libc::c_double,
5836 +                         ) -> libc::c_int,
5837 +                 ),
5838 +                 indicator_ref: None,
5839 +                 type_0: 2 as libc::c_int,
5840 +                 inputs: 2 as libc::c_int,
5841 +                 options: 0 as libc::c_int,
5842 +                 outputs: 1 as libc::c_int,
5843 +                 input_names: [
5844 +                     b"close\0" as *const u8 as *const libc::c_char,
5845 +                     b"volume\0" as *const u8 as *const libc::c_char,
5846 +                     0 as *const libc::c_char,
5847 +                     0 as *const libc::c_char,
5848 +                     0 as *const libc::c_char,
5849 +                     0 as *const libc::c_char,
5850 +                     0 as *const libc::c_char,
5851 +                     0 as *const libc::c_char,
5852 +                     0 as *const libc::c_char,
5853 +                     0 as *const libc::c_char,
5854 +                     0 as *const libc::c_char,
5855 +                     0 as *const libc::c_char,
5856 +                     0 as *const libc::c_char,
5857 +                     0 as *const libc::c_char,
5858 +                     0 as *const libc::c_char,
5859 +                     0 as *const libc::c_char,
5860 +                 ],
5861 +                 option_names: [
5862 +                     b"\0" as *const u8 as *const libc::c_char,
5863 +                     0 as *const libc::c_char,
5864 +                     0 as *const libc::c_char,
5865 +                     0 as *const libc::c_char,
5866 +                     0 as *const libc::c_char,
5867 +                     0 as *const libc::c_char,
5868 +                     0 as *const libc::c_char,
5869 +                     0 as *const libc::c_char,
5870 +                     0 as *const libc::c_char,
5871 +                     0 as *const libc::c_char,
5872 +                     0 as *const libc::c_char,
5873 +                     0 as *const libc::c_char,
5874 +                     0 as *const libc::c_char,
5875 +                     0 as *const libc::c_char,
5876 +                     0 as *const libc::c_char,
5877 +                     0 as *const libc::c_char,
5878 +                 ],
5879 +                 output_names: [
5880 +                     b"nvi\0" as *const u8 as *const libc::c_char,
5881 +                     0 as *const libc::c_char,
5882 +                     0 as *const libc::c_char,
5883 +                     0 as *const libc::c_char,
5884 +                     0 as *const libc::c_char,
5885 +                     0 as *const libc::c_char,
5886 +                     0 as *const libc::c_char,
5887 +                     0 as *const libc::c_char,
5888 +                     0 as *const libc::c_char,
5889 +                     0 as *const libc::c_char,
5890 +                     0 as *const libc::c_char,
5891 +                     0 as *const libc::c_char,
5892 +                     0 as *const libc::c_char,
5893 +                     0 as *const libc::c_char,
5894 +                     0 as *const libc::c_char,
5895 +                     0 as *const libc::c_char,
5896 +                 ],
5897 +                 stream_new: None,
5898 +                 stream_run: None,
5899 +                 stream_free: None,
5900 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:5982:13
     |
5903 | /             let mut init = ti_indicator_info {
5904 | |                 name: b"obv\0" as *const u8 as *const libc::c_char,
5905 | |                 full_name: b"On Balance Volume\0" as *const u8 as *const libc::c_char,
5906 | |                 start: Some(
...    |
5980 | |                 stream_free: None,
5981 | |             };
     | |______________- unnecessary `let` binding
5982 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
5903 ~             
5904 ~             ti_indicator_info {
5905 +                 name: b"obv\0" as *const u8 as *const libc::c_char,
5906 +                 full_name: b"On Balance Volume\0" as *const u8 as *const libc::c_char,
5907 +                 start: Some(
5908 +                     ti_obv_start
5909 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
5910 +                 ),
5911 +                 indicator: Some(
5912 +                     ti_obv
5913 +                         as unsafe extern "C" fn(
5914 +                             libc::c_int,
5915 +                             *const *const libc::c_double,
5916 +                             *const libc::c_double,
5917 +                             *const *mut libc::c_double,
5918 +                         ) -> libc::c_int,
5919 +                 ),
5920 +                 indicator_ref: None,
5921 +                 type_0: 2 as libc::c_int,
5922 +                 inputs: 2 as libc::c_int,
5923 +                 options: 0 as libc::c_int,
5924 +                 outputs: 1 as libc::c_int,
5925 +                 input_names: [
5926 +                     b"close\0" as *const u8 as *const libc::c_char,
5927 +                     b"volume\0" as *const u8 as *const libc::c_char,
5928 +                     0 as *const libc::c_char,
5929 +                     0 as *const libc::c_char,
5930 +                     0 as *const libc::c_char,
5931 +                     0 as *const libc::c_char,
5932 +                     0 as *const libc::c_char,
5933 +                     0 as *const libc::c_char,
5934 +                     0 as *const libc::c_char,
5935 +                     0 as *const libc::c_char,
5936 +                     0 as *const libc::c_char,
5937 +                     0 as *const libc::c_char,
5938 +                     0 as *const libc::c_char,
5939 +                     0 as *const libc::c_char,
5940 +                     0 as *const libc::c_char,
5941 +                     0 as *const libc::c_char,
5942 +                 ],
5943 +                 option_names: [
5944 +                     b"\0" as *const u8 as *const libc::c_char,
5945 +                     0 as *const libc::c_char,
5946 +                     0 as *const libc::c_char,
5947 +                     0 as *const libc::c_char,
5948 +                     0 as *const libc::c_char,
5949 +                     0 as *const libc::c_char,
5950 +                     0 as *const libc::c_char,
5951 +                     0 as *const libc::c_char,
5952 +                     0 as *const libc::c_char,
5953 +                     0 as *const libc::c_char,
5954 +                     0 as *const libc::c_char,
5955 +                     0 as *const libc::c_char,
5956 +                     0 as *const libc::c_char,
5957 +                     0 as *const libc::c_char,
5958 +                     0 as *const libc::c_char,
5959 +                     0 as *const libc::c_char,
5960 +                 ],
5961 +                 output_names: [
5962 +                     b"obv\0" as *const u8 as *const libc::c_char,
5963 +                     0 as *const libc::c_char,
5964 +                     0 as *const libc::c_char,
5965 +                     0 as *const libc::c_char,
5966 +                     0 as *const libc::c_char,
5967 +                     0 as *const libc::c_char,
5968 +                     0 as *const libc::c_char,
5969 +                     0 as *const libc::c_char,
5970 +                     0 as *const libc::c_char,
5971 +                     0 as *const libc::c_char,
5972 +                     0 as *const libc::c_char,
5973 +                     0 as *const libc::c_char,
5974 +                     0 as *const libc::c_char,
5975 +                     0 as *const libc::c_char,
5976 +                     0 as *const libc::c_char,
5977 +                     0 as *const libc::c_char,
5978 +                 ],
5979 +                 stream_new: None,
5980 +                 stream_run: None,
5981 +                 stream_free: None,
5982 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:6065:13
     |
5985 | /             let mut init = ti_indicator_info {
5986 | |                 name: b"ppo\0" as *const u8 as *const libc::c_char,
5987 | |                 full_name: b"Percentage Price Oscillator\0" as *const u8
5988 | |                     as *const libc::c_char,
...    |
6063 | |                 stream_free: None,
6064 | |             };
     | |______________- unnecessary `let` binding
6065 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
5985 ~             
5986 ~             ti_indicator_info {
5987 +                 name: b"ppo\0" as *const u8 as *const libc::c_char,
5988 +                 full_name: b"Percentage Price Oscillator\0" as *const u8
5989 +                     as *const libc::c_char,
5990 +                 start: Some(
5991 +                     ti_ppo_start
5992 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
5993 +                 ),
5994 +                 indicator: Some(
5995 +                     ti_ppo
5996 +                         as unsafe extern "C" fn(
5997 +                             libc::c_int,
5998 +                             *const *const libc::c_double,
5999 +                             *const libc::c_double,
6000 +                             *const *mut libc::c_double,
6001 +                         ) -> libc::c_int,
6002 +                 ),
6003 +                 indicator_ref: None,
6004 +                 type_0: 2 as libc::c_int,
6005 +                 inputs: 1 as libc::c_int,
6006 +                 options: 2 as libc::c_int,
6007 +                 outputs: 1 as libc::c_int,
6008 +                 input_names: [
6009 +                     b"real\0" as *const u8 as *const libc::c_char,
6010 +                     0 as *const libc::c_char,
6011 +                     0 as *const libc::c_char,
6012 +                     0 as *const libc::c_char,
6013 +                     0 as *const libc::c_char,
6014 +                     0 as *const libc::c_char,
6015 +                     0 as *const libc::c_char,
6016 +                     0 as *const libc::c_char,
6017 +                     0 as *const libc::c_char,
6018 +                     0 as *const libc::c_char,
6019 +                     0 as *const libc::c_char,
6020 +                     0 as *const libc::c_char,
6021 +                     0 as *const libc::c_char,
6022 +                     0 as *const libc::c_char,
6023 +                     0 as *const libc::c_char,
6024 +                     0 as *const libc::c_char,
6025 +                 ],
6026 +                 option_names: [
6027 +                     b"short_period\0" as *const u8 as *const libc::c_char,
6028 +                     b"long_period\0" as *const u8 as *const libc::c_char,
6029 +                     0 as *const libc::c_char,
6030 +                     0 as *const libc::c_char,
6031 +                     0 as *const libc::c_char,
6032 +                     0 as *const libc::c_char,
6033 +                     0 as *const libc::c_char,
6034 +                     0 as *const libc::c_char,
6035 +                     0 as *const libc::c_char,
6036 +                     0 as *const libc::c_char,
6037 +                     0 as *const libc::c_char,
6038 +                     0 as *const libc::c_char,
6039 +                     0 as *const libc::c_char,
6040 +                     0 as *const libc::c_char,
6041 +                     0 as *const libc::c_char,
6042 +                     0 as *const libc::c_char,
6043 +                 ],
6044 +                 output_names: [
6045 +                     b"ppo\0" as *const u8 as *const libc::c_char,
6046 +                     0 as *const libc::c_char,
6047 +                     0 as *const libc::c_char,
6048 +                     0 as *const libc::c_char,
6049 +                     0 as *const libc::c_char,
6050 +                     0 as *const libc::c_char,
6051 +                     0 as *const libc::c_char,
6052 +                     0 as *const libc::c_char,
6053 +                     0 as *const libc::c_char,
6054 +                     0 as *const libc::c_char,
6055 +                     0 as *const libc::c_char,
6056 +                     0 as *const libc::c_char,
6057 +                     0 as *const libc::c_char,
6058 +                     0 as *const libc::c_char,
6059 +                     0 as *const libc::c_char,
6060 +                     0 as *const libc::c_char,
6061 +                 ],
6062 +                 stream_new: None,
6063 +                 stream_run: None,
6064 +                 stream_free: None,
6065 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:6147:13
     |
6068 | /             let mut init = ti_indicator_info {
6069 | |                 name: b"psar\0" as *const u8 as *const libc::c_char,
6070 | |                 full_name: b"Parabolic SAR\0" as *const u8 as *const libc::c_char,
6071 | |                 start: Some(
...    |
6145 | |                 stream_free: None,
6146 | |             };
     | |______________- unnecessary `let` binding
6147 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
6068 ~             
6069 ~             ti_indicator_info {
6070 +                 name: b"psar\0" as *const u8 as *const libc::c_char,
6071 +                 full_name: b"Parabolic SAR\0" as *const u8 as *const libc::c_char,
6072 +                 start: Some(
6073 +                     ti_psar_start
6074 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
6075 +                 ),
6076 +                 indicator: Some(
6077 +                     ti_psar
6078 +                         as unsafe extern "C" fn(
6079 +                             libc::c_int,
6080 +                             *const *const libc::c_double,
6081 +                             *const libc::c_double,
6082 +                             *const *mut libc::c_double,
6083 +                         ) -> libc::c_int,
6084 +                 ),
6085 +                 indicator_ref: None,
6086 +                 type_0: 1 as libc::c_int,
6087 +                 inputs: 2 as libc::c_int,
6088 +                 options: 2 as libc::c_int,
6089 +                 outputs: 1 as libc::c_int,
6090 +                 input_names: [
6091 +                     b"high\0" as *const u8 as *const libc::c_char,
6092 +                     b"low\0" as *const u8 as *const libc::c_char,
6093 +                     0 as *const libc::c_char,
6094 +                     0 as *const libc::c_char,
6095 +                     0 as *const libc::c_char,
6096 +                     0 as *const libc::c_char,
6097 +                     0 as *const libc::c_char,
6098 +                     0 as *const libc::c_char,
6099 +                     0 as *const libc::c_char,
6100 +                     0 as *const libc::c_char,
6101 +                     0 as *const libc::c_char,
6102 +                     0 as *const libc::c_char,
6103 +                     0 as *const libc::c_char,
6104 +                     0 as *const libc::c_char,
6105 +                     0 as *const libc::c_char,
6106 +                     0 as *const libc::c_char,
6107 +                 ],
6108 +                 option_names: [
6109 +                     b"acceleration_factor_step\0" as *const u8 as *const libc::c_char,
6110 +                     b"acceleration_factor_maximum\0" as *const u8 as *const libc::c_char,
6111 +                     0 as *const libc::c_char,
6112 +                     0 as *const libc::c_char,
6113 +                     0 as *const libc::c_char,
6114 +                     0 as *const libc::c_char,
6115 +                     0 as *const libc::c_char,
6116 +                     0 as *const libc::c_char,
6117 +                     0 as *const libc::c_char,
6118 +                     0 as *const libc::c_char,
6119 +                     0 as *const libc::c_char,
6120 +                     0 as *const libc::c_char,
6121 +                     0 as *const libc::c_char,
6122 +                     0 as *const libc::c_char,
6123 +                     0 as *const libc::c_char,
6124 +                     0 as *const libc::c_char,
6125 +                 ],
6126 +                 output_names: [
6127 +                     b"psar\0" as *const u8 as *const libc::c_char,
6128 +                     0 as *const libc::c_char,
6129 +                     0 as *const libc::c_char,
6130 +                     0 as *const libc::c_char,
6131 +                     0 as *const libc::c_char,
6132 +                     0 as *const libc::c_char,
6133 +                     0 as *const libc::c_char,
6134 +                     0 as *const libc::c_char,
6135 +                     0 as *const libc::c_char,
6136 +                     0 as *const libc::c_char,
6137 +                     0 as *const libc::c_char,
6138 +                     0 as *const libc::c_char,
6139 +                     0 as *const libc::c_char,
6140 +                     0 as *const libc::c_char,
6141 +                     0 as *const libc::c_char,
6142 +                     0 as *const libc::c_char,
6143 +                 ],
6144 +                 stream_new: None,
6145 +                 stream_run: None,
6146 +                 stream_free: None,
6147 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:6230:13
     |
6150 | /             let mut init = ti_indicator_info {
6151 | |                 name: b"pvi\0" as *const u8 as *const libc::c_char,
6152 | |                 full_name: b"Positive Volume Index\0" as *const u8
6153 | |                     as *const libc::c_char,
...    |
6228 | |                 stream_free: None,
6229 | |             };
     | |______________- unnecessary `let` binding
6230 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
6150 ~             
6151 ~             ti_indicator_info {
6152 +                 name: b"pvi\0" as *const u8 as *const libc::c_char,
6153 +                 full_name: b"Positive Volume Index\0" as *const u8
6154 +                     as *const libc::c_char,
6155 +                 start: Some(
6156 +                     ti_pvi_start
6157 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
6158 +                 ),
6159 +                 indicator: Some(
6160 +                     ti_pvi
6161 +                         as unsafe extern "C" fn(
6162 +                             libc::c_int,
6163 +                             *const *const libc::c_double,
6164 +                             *const libc::c_double,
6165 +                             *const *mut libc::c_double,
6166 +                         ) -> libc::c_int,
6167 +                 ),
6168 +                 indicator_ref: None,
6169 +                 type_0: 2 as libc::c_int,
6170 +                 inputs: 2 as libc::c_int,
6171 +                 options: 0 as libc::c_int,
6172 +                 outputs: 1 as libc::c_int,
6173 +                 input_names: [
6174 +                     b"close\0" as *const u8 as *const libc::c_char,
6175 +                     b"volume\0" as *const u8 as *const libc::c_char,
6176 +                     0 as *const libc::c_char,
6177 +                     0 as *const libc::c_char,
6178 +                     0 as *const libc::c_char,
6179 +                     0 as *const libc::c_char,
6180 +                     0 as *const libc::c_char,
6181 +                     0 as *const libc::c_char,
6182 +                     0 as *const libc::c_char,
6183 +                     0 as *const libc::c_char,
6184 +                     0 as *const libc::c_char,
6185 +                     0 as *const libc::c_char,
6186 +                     0 as *const libc::c_char,
6187 +                     0 as *const libc::c_char,
6188 +                     0 as *const libc::c_char,
6189 +                     0 as *const libc::c_char,
6190 +                 ],
6191 +                 option_names: [
6192 +                     b"\0" as *const u8 as *const libc::c_char,
6193 +                     0 as *const libc::c_char,
6194 +                     0 as *const libc::c_char,
6195 +                     0 as *const libc::c_char,
6196 +                     0 as *const libc::c_char,
6197 +                     0 as *const libc::c_char,
6198 +                     0 as *const libc::c_char,
6199 +                     0 as *const libc::c_char,
6200 +                     0 as *const libc::c_char,
6201 +                     0 as *const libc::c_char,
6202 +                     0 as *const libc::c_char,
6203 +                     0 as *const libc::c_char,
6204 +                     0 as *const libc::c_char,
6205 +                     0 as *const libc::c_char,
6206 +                     0 as *const libc::c_char,
6207 +                     0 as *const libc::c_char,
6208 +                 ],
6209 +                 output_names: [
6210 +                     b"pvi\0" as *const u8 as *const libc::c_char,
6211 +                     0 as *const libc::c_char,
6212 +                     0 as *const libc::c_char,
6213 +                     0 as *const libc::c_char,
6214 +                     0 as *const libc::c_char,
6215 +                     0 as *const libc::c_char,
6216 +                     0 as *const libc::c_char,
6217 +                     0 as *const libc::c_char,
6218 +                     0 as *const libc::c_char,
6219 +                     0 as *const libc::c_char,
6220 +                     0 as *const libc::c_char,
6221 +                     0 as *const libc::c_char,
6222 +                     0 as *const libc::c_char,
6223 +                     0 as *const libc::c_char,
6224 +                     0 as *const libc::c_char,
6225 +                     0 as *const libc::c_char,
6226 +                 ],
6227 +                 stream_new: None,
6228 +                 stream_run: None,
6229 +                 stream_free: None,
6230 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:6312:13
     |
6233 | /             let mut init = ti_indicator_info {
6234 | |                 name: b"qstick\0" as *const u8 as *const libc::c_char,
6235 | |                 full_name: b"Qstick\0" as *const u8 as *const libc::c_char,
6236 | |                 start: Some(
...    |
6310 | |                 stream_free: None,
6311 | |             };
     | |______________- unnecessary `let` binding
6312 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
6233 ~             
6234 ~             ti_indicator_info {
6235 +                 name: b"qstick\0" as *const u8 as *const libc::c_char,
6236 +                 full_name: b"Qstick\0" as *const u8 as *const libc::c_char,
6237 +                 start: Some(
6238 +                     ti_qstick_start
6239 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
6240 +                 ),
6241 +                 indicator: Some(
6242 +                     ti_qstick
6243 +                         as unsafe extern "C" fn(
6244 +                             libc::c_int,
6245 +                             *const *const libc::c_double,
6246 +                             *const libc::c_double,
6247 +                             *const *mut libc::c_double,
6248 +                         ) -> libc::c_int,
6249 +                 ),
6250 +                 indicator_ref: None,
6251 +                 type_0: 2 as libc::c_int,
6252 +                 inputs: 2 as libc::c_int,
6253 +                 options: 1 as libc::c_int,
6254 +                 outputs: 1 as libc::c_int,
6255 +                 input_names: [
6256 +                     b"open\0" as *const u8 as *const libc::c_char,
6257 +                     b"close\0" as *const u8 as *const libc::c_char,
6258 +                     0 as *const libc::c_char,
6259 +                     0 as *const libc::c_char,
6260 +                     0 as *const libc::c_char,
6261 +                     0 as *const libc::c_char,
6262 +                     0 as *const libc::c_char,
6263 +                     0 as *const libc::c_char,
6264 +                     0 as *const libc::c_char,
6265 +                     0 as *const libc::c_char,
6266 +                     0 as *const libc::c_char,
6267 +                     0 as *const libc::c_char,
6268 +                     0 as *const libc::c_char,
6269 +                     0 as *const libc::c_char,
6270 +                     0 as *const libc::c_char,
6271 +                     0 as *const libc::c_char,
6272 +                 ],
6273 +                 option_names: [
6274 +                     b"period\0" as *const u8 as *const libc::c_char,
6275 +                     0 as *const libc::c_char,
6276 +                     0 as *const libc::c_char,
6277 +                     0 as *const libc::c_char,
6278 +                     0 as *const libc::c_char,
6279 +                     0 as *const libc::c_char,
6280 +                     0 as *const libc::c_char,
6281 +                     0 as *const libc::c_char,
6282 +                     0 as *const libc::c_char,
6283 +                     0 as *const libc::c_char,
6284 +                     0 as *const libc::c_char,
6285 +                     0 as *const libc::c_char,
6286 +                     0 as *const libc::c_char,
6287 +                     0 as *const libc::c_char,
6288 +                     0 as *const libc::c_char,
6289 +                     0 as *const libc::c_char,
6290 +                 ],
6291 +                 output_names: [
6292 +                     b"qstick\0" as *const u8 as *const libc::c_char,
6293 +                     0 as *const libc::c_char,
6294 +                     0 as *const libc::c_char,
6295 +                     0 as *const libc::c_char,
6296 +                     0 as *const libc::c_char,
6297 +                     0 as *const libc::c_char,
6298 +                     0 as *const libc::c_char,
6299 +                     0 as *const libc::c_char,
6300 +                     0 as *const libc::c_char,
6301 +                     0 as *const libc::c_char,
6302 +                     0 as *const libc::c_char,
6303 +                     0 as *const libc::c_char,
6304 +                     0 as *const libc::c_char,
6305 +                     0 as *const libc::c_char,
6306 +                     0 as *const libc::c_char,
6307 +                     0 as *const libc::c_char,
6308 +                 ],
6309 +                 stream_new: None,
6310 +                 stream_run: None,
6311 +                 stream_free: None,
6312 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:6394:13
     |
6315 | /             let mut init = ti_indicator_info {
6316 | |                 name: b"roc\0" as *const u8 as *const libc::c_char,
6317 | |                 full_name: b"Rate of Change\0" as *const u8 as *const libc::c_char,
6318 | |                 start: Some(
...    |
6392 | |                 stream_free: None,
6393 | |             };
     | |______________- unnecessary `let` binding
6394 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
6315 ~             
6316 ~             ti_indicator_info {
6317 +                 name: b"roc\0" as *const u8 as *const libc::c_char,
6318 +                 full_name: b"Rate of Change\0" as *const u8 as *const libc::c_char,
6319 +                 start: Some(
6320 +                     ti_roc_start
6321 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
6322 +                 ),
6323 +                 indicator: Some(
6324 +                     ti_roc
6325 +                         as unsafe extern "C" fn(
6326 +                             libc::c_int,
6327 +                             *const *const libc::c_double,
6328 +                             *const libc::c_double,
6329 +                             *const *mut libc::c_double,
6330 +                         ) -> libc::c_int,
6331 +                 ),
6332 +                 indicator_ref: None,
6333 +                 type_0: 2 as libc::c_int,
6334 +                 inputs: 1 as libc::c_int,
6335 +                 options: 1 as libc::c_int,
6336 +                 outputs: 1 as libc::c_int,
6337 +                 input_names: [
6338 +                     b"real\0" as *const u8 as *const libc::c_char,
6339 +                     0 as *const libc::c_char,
6340 +                     0 as *const libc::c_char,
6341 +                     0 as *const libc::c_char,
6342 +                     0 as *const libc::c_char,
6343 +                     0 as *const libc::c_char,
6344 +                     0 as *const libc::c_char,
6345 +                     0 as *const libc::c_char,
6346 +                     0 as *const libc::c_char,
6347 +                     0 as *const libc::c_char,
6348 +                     0 as *const libc::c_char,
6349 +                     0 as *const libc::c_char,
6350 +                     0 as *const libc::c_char,
6351 +                     0 as *const libc::c_char,
6352 +                     0 as *const libc::c_char,
6353 +                     0 as *const libc::c_char,
6354 +                 ],
6355 +                 option_names: [
6356 +                     b"period\0" as *const u8 as *const libc::c_char,
6357 +                     0 as *const libc::c_char,
6358 +                     0 as *const libc::c_char,
6359 +                     0 as *const libc::c_char,
6360 +                     0 as *const libc::c_char,
6361 +                     0 as *const libc::c_char,
6362 +                     0 as *const libc::c_char,
6363 +                     0 as *const libc::c_char,
6364 +                     0 as *const libc::c_char,
6365 +                     0 as *const libc::c_char,
6366 +                     0 as *const libc::c_char,
6367 +                     0 as *const libc::c_char,
6368 +                     0 as *const libc::c_char,
6369 +                     0 as *const libc::c_char,
6370 +                     0 as *const libc::c_char,
6371 +                     0 as *const libc::c_char,
6372 +                 ],
6373 +                 output_names: [
6374 +                     b"roc\0" as *const u8 as *const libc::c_char,
6375 +                     0 as *const libc::c_char,
6376 +                     0 as *const libc::c_char,
6377 +                     0 as *const libc::c_char,
6378 +                     0 as *const libc::c_char,
6379 +                     0 as *const libc::c_char,
6380 +                     0 as *const libc::c_char,
6381 +                     0 as *const libc::c_char,
6382 +                     0 as *const libc::c_char,
6383 +                     0 as *const libc::c_char,
6384 +                     0 as *const libc::c_char,
6385 +                     0 as *const libc::c_char,
6386 +                     0 as *const libc::c_char,
6387 +                     0 as *const libc::c_char,
6388 +                     0 as *const libc::c_char,
6389 +                     0 as *const libc::c_char,
6390 +                 ],
6391 +                 stream_new: None,
6392 +                 stream_run: None,
6393 +                 stream_free: None,
6394 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:6476:13
     |
6397 | /             let mut init = ti_indicator_info {
6398 | |                 name: b"rocr\0" as *const u8 as *const libc::c_char,
6399 | |                 full_name: b"Rate of Change Ratio\0" as *const u8 as *const libc::c_char,
6400 | |                 start: Some(
...    |
6474 | |                 stream_free: None,
6475 | |             };
     | |______________- unnecessary `let` binding
6476 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
6397 ~             
6398 ~             ti_indicator_info {
6399 +                 name: b"rocr\0" as *const u8 as *const libc::c_char,
6400 +                 full_name: b"Rate of Change Ratio\0" as *const u8 as *const libc::c_char,
6401 +                 start: Some(
6402 +                     ti_rocr_start
6403 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
6404 +                 ),
6405 +                 indicator: Some(
6406 +                     ti_rocr
6407 +                         as unsafe extern "C" fn(
6408 +                             libc::c_int,
6409 +                             *const *const libc::c_double,
6410 +                             *const libc::c_double,
6411 +                             *const *mut libc::c_double,
6412 +                         ) -> libc::c_int,
6413 +                 ),
6414 +                 indicator_ref: None,
6415 +                 type_0: 2 as libc::c_int,
6416 +                 inputs: 1 as libc::c_int,
6417 +                 options: 1 as libc::c_int,
6418 +                 outputs: 1 as libc::c_int,
6419 +                 input_names: [
6420 +                     b"real\0" as *const u8 as *const libc::c_char,
6421 +                     0 as *const libc::c_char,
6422 +                     0 as *const libc::c_char,
6423 +                     0 as *const libc::c_char,
6424 +                     0 as *const libc::c_char,
6425 +                     0 as *const libc::c_char,
6426 +                     0 as *const libc::c_char,
6427 +                     0 as *const libc::c_char,
6428 +                     0 as *const libc::c_char,
6429 +                     0 as *const libc::c_char,
6430 +                     0 as *const libc::c_char,
6431 +                     0 as *const libc::c_char,
6432 +                     0 as *const libc::c_char,
6433 +                     0 as *const libc::c_char,
6434 +                     0 as *const libc::c_char,
6435 +                     0 as *const libc::c_char,
6436 +                 ],
6437 +                 option_names: [
6438 +                     b"period\0" as *const u8 as *const libc::c_char,
6439 +                     0 as *const libc::c_char,
6440 +                     0 as *const libc::c_char,
6441 +                     0 as *const libc::c_char,
6442 +                     0 as *const libc::c_char,
6443 +                     0 as *const libc::c_char,
6444 +                     0 as *const libc::c_char,
6445 +                     0 as *const libc::c_char,
6446 +                     0 as *const libc::c_char,
6447 +                     0 as *const libc::c_char,
6448 +                     0 as *const libc::c_char,
6449 +                     0 as *const libc::c_char,
6450 +                     0 as *const libc::c_char,
6451 +                     0 as *const libc::c_char,
6452 +                     0 as *const libc::c_char,
6453 +                     0 as *const libc::c_char,
6454 +                 ],
6455 +                 output_names: [
6456 +                     b"rocr\0" as *const u8 as *const libc::c_char,
6457 +                     0 as *const libc::c_char,
6458 +                     0 as *const libc::c_char,
6459 +                     0 as *const libc::c_char,
6460 +                     0 as *const libc::c_char,
6461 +                     0 as *const libc::c_char,
6462 +                     0 as *const libc::c_char,
6463 +                     0 as *const libc::c_char,
6464 +                     0 as *const libc::c_char,
6465 +                     0 as *const libc::c_char,
6466 +                     0 as *const libc::c_char,
6467 +                     0 as *const libc::c_char,
6468 +                     0 as *const libc::c_char,
6469 +                     0 as *const libc::c_char,
6470 +                     0 as *const libc::c_char,
6471 +                     0 as *const libc::c_char,
6472 +                 ],
6473 +                 stream_new: None,
6474 +                 stream_run: None,
6475 +                 stream_free: None,
6476 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:6558:13
     |
6479 | /             let mut init = ti_indicator_info {
6480 | |                 name: b"round\0" as *const u8 as *const libc::c_char,
6481 | |                 full_name: b"Vector Round\0" as *const u8 as *const libc::c_char,
6482 | |                 start: Some(
...    |
6556 | |                 stream_free: None,
6557 | |             };
     | |______________- unnecessary `let` binding
6558 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
6479 ~             
6480 ~             ti_indicator_info {
6481 +                 name: b"round\0" as *const u8 as *const libc::c_char,
6482 +                 full_name: b"Vector Round\0" as *const u8 as *const libc::c_char,
6483 +                 start: Some(
6484 +                     ti_round_start
6485 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
6486 +                 ),
6487 +                 indicator: Some(
6488 +                     ti_round
6489 +                         as unsafe extern "C" fn(
6490 +                             libc::c_int,
6491 +                             *const *const libc::c_double,
6492 +                             *const libc::c_double,
6493 +                             *const *mut libc::c_double,
6494 +                         ) -> libc::c_int,
6495 +                 ),
6496 +                 indicator_ref: None,
6497 +                 type_0: 4 as libc::c_int,
6498 +                 inputs: 1 as libc::c_int,
6499 +                 options: 0 as libc::c_int,
6500 +                 outputs: 1 as libc::c_int,
6501 +                 input_names: [
6502 +                     b"real\0" as *const u8 as *const libc::c_char,
6503 +                     0 as *const libc::c_char,
6504 +                     0 as *const libc::c_char,
6505 +                     0 as *const libc::c_char,
6506 +                     0 as *const libc::c_char,
6507 +                     0 as *const libc::c_char,
6508 +                     0 as *const libc::c_char,
6509 +                     0 as *const libc::c_char,
6510 +                     0 as *const libc::c_char,
6511 +                     0 as *const libc::c_char,
6512 +                     0 as *const libc::c_char,
6513 +                     0 as *const libc::c_char,
6514 +                     0 as *const libc::c_char,
6515 +                     0 as *const libc::c_char,
6516 +                     0 as *const libc::c_char,
6517 +                     0 as *const libc::c_char,
6518 +                 ],
6519 +                 option_names: [
6520 +                     b"\0" as *const u8 as *const libc::c_char,
6521 +                     0 as *const libc::c_char,
6522 +                     0 as *const libc::c_char,
6523 +                     0 as *const libc::c_char,
6524 +                     0 as *const libc::c_char,
6525 +                     0 as *const libc::c_char,
6526 +                     0 as *const libc::c_char,
6527 +                     0 as *const libc::c_char,
6528 +                     0 as *const libc::c_char,
6529 +                     0 as *const libc::c_char,
6530 +                     0 as *const libc::c_char,
6531 +                     0 as *const libc::c_char,
6532 +                     0 as *const libc::c_char,
6533 +                     0 as *const libc::c_char,
6534 +                     0 as *const libc::c_char,
6535 +                     0 as *const libc::c_char,
6536 +                 ],
6537 +                 output_names: [
6538 +                     b"round\0" as *const u8 as *const libc::c_char,
6539 +                     0 as *const libc::c_char,
6540 +                     0 as *const libc::c_char,
6541 +                     0 as *const libc::c_char,
6542 +                     0 as *const libc::c_char,
6543 +                     0 as *const libc::c_char,
6544 +                     0 as *const libc::c_char,
6545 +                     0 as *const libc::c_char,
6546 +                     0 as *const libc::c_char,
6547 +                     0 as *const libc::c_char,
6548 +                     0 as *const libc::c_char,
6549 +                     0 as *const libc::c_char,
6550 +                     0 as *const libc::c_char,
6551 +                     0 as *const libc::c_char,
6552 +                     0 as *const libc::c_char,
6553 +                     0 as *const libc::c_char,
6554 +                 ],
6555 +                 stream_new: None,
6556 +                 stream_run: None,
6557 +                 stream_free: None,
6558 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:6641:13
     |
6561 | /             let mut init = ti_indicator_info {
6562 | |                 name: b"rsi\0" as *const u8 as *const libc::c_char,
6563 | |                 full_name: b"Relative Strength Index\0" as *const u8
6564 | |                     as *const libc::c_char,
...    |
6639 | |                 stream_free: None,
6640 | |             };
     | |______________- unnecessary `let` binding
6641 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
6561 ~             
6562 ~             ti_indicator_info {
6563 +                 name: b"rsi\0" as *const u8 as *const libc::c_char,
6564 +                 full_name: b"Relative Strength Index\0" as *const u8
6565 +                     as *const libc::c_char,
6566 +                 start: Some(
6567 +                     ti_rsi_start
6568 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
6569 +                 ),
6570 +                 indicator: Some(
6571 +                     ti_rsi
6572 +                         as unsafe extern "C" fn(
6573 +                             libc::c_int,
6574 +                             *const *const libc::c_double,
6575 +                             *const libc::c_double,
6576 +                             *const *mut libc::c_double,
6577 +                         ) -> libc::c_int,
6578 +                 ),
6579 +                 indicator_ref: None,
6580 +                 type_0: 2 as libc::c_int,
6581 +                 inputs: 1 as libc::c_int,
6582 +                 options: 1 as libc::c_int,
6583 +                 outputs: 1 as libc::c_int,
6584 +                 input_names: [
6585 +                     b"real\0" as *const u8 as *const libc::c_char,
6586 +                     0 as *const libc::c_char,
6587 +                     0 as *const libc::c_char,
6588 +                     0 as *const libc::c_char,
6589 +                     0 as *const libc::c_char,
6590 +                     0 as *const libc::c_char,
6591 +                     0 as *const libc::c_char,
6592 +                     0 as *const libc::c_char,
6593 +                     0 as *const libc::c_char,
6594 +                     0 as *const libc::c_char,
6595 +                     0 as *const libc::c_char,
6596 +                     0 as *const libc::c_char,
6597 +                     0 as *const libc::c_char,
6598 +                     0 as *const libc::c_char,
6599 +                     0 as *const libc::c_char,
6600 +                     0 as *const libc::c_char,
6601 +                 ],
6602 +                 option_names: [
6603 +                     b"period\0" as *const u8 as *const libc::c_char,
6604 +                     0 as *const libc::c_char,
6605 +                     0 as *const libc::c_char,
6606 +                     0 as *const libc::c_char,
6607 +                     0 as *const libc::c_char,
6608 +                     0 as *const libc::c_char,
6609 +                     0 as *const libc::c_char,
6610 +                     0 as *const libc::c_char,
6611 +                     0 as *const libc::c_char,
6612 +                     0 as *const libc::c_char,
6613 +                     0 as *const libc::c_char,
6614 +                     0 as *const libc::c_char,
6615 +                     0 as *const libc::c_char,
6616 +                     0 as *const libc::c_char,
6617 +                     0 as *const libc::c_char,
6618 +                     0 as *const libc::c_char,
6619 +                 ],
6620 +                 output_names: [
6621 +                     b"rsi\0" as *const u8 as *const libc::c_char,
6622 +                     0 as *const libc::c_char,
6623 +                     0 as *const libc::c_char,
6624 +                     0 as *const libc::c_char,
6625 +                     0 as *const libc::c_char,
6626 +                     0 as *const libc::c_char,
6627 +                     0 as *const libc::c_char,
6628 +                     0 as *const libc::c_char,
6629 +                     0 as *const libc::c_char,
6630 +                     0 as *const libc::c_char,
6631 +                     0 as *const libc::c_char,
6632 +                     0 as *const libc::c_char,
6633 +                     0 as *const libc::c_char,
6634 +                     0 as *const libc::c_char,
6635 +                     0 as *const libc::c_char,
6636 +                     0 as *const libc::c_char,
6637 +                 ],
6638 +                 stream_new: None,
6639 +                 stream_run: None,
6640 +                 stream_free: None,
6641 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:6723:13
     |
6644 | /             let mut init = ti_indicator_info {
6645 | |                 name: b"sin\0" as *const u8 as *const libc::c_char,
6646 | |                 full_name: b"Vector Sine\0" as *const u8 as *const libc::c_char,
6647 | |                 start: Some(
...    |
6721 | |                 stream_free: None,
6722 | |             };
     | |______________- unnecessary `let` binding
6723 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
6644 ~             
6645 ~             ti_indicator_info {
6646 +                 name: b"sin\0" as *const u8 as *const libc::c_char,
6647 +                 full_name: b"Vector Sine\0" as *const u8 as *const libc::c_char,
6648 +                 start: Some(
6649 +                     ti_sin_start
6650 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
6651 +                 ),
6652 +                 indicator: Some(
6653 +                     ti_sin
6654 +                         as unsafe extern "C" fn(
6655 +                             libc::c_int,
6656 +                             *const *const libc::c_double,
6657 +                             *const libc::c_double,
6658 +                             *const *mut libc::c_double,
6659 +                         ) -> libc::c_int,
6660 +                 ),
6661 +                 indicator_ref: None,
6662 +                 type_0: 4 as libc::c_int,
6663 +                 inputs: 1 as libc::c_int,
6664 +                 options: 0 as libc::c_int,
6665 +                 outputs: 1 as libc::c_int,
6666 +                 input_names: [
6667 +                     b"real\0" as *const u8 as *const libc::c_char,
6668 +                     0 as *const libc::c_char,
6669 +                     0 as *const libc::c_char,
6670 +                     0 as *const libc::c_char,
6671 +                     0 as *const libc::c_char,
6672 +                     0 as *const libc::c_char,
6673 +                     0 as *const libc::c_char,
6674 +                     0 as *const libc::c_char,
6675 +                     0 as *const libc::c_char,
6676 +                     0 as *const libc::c_char,
6677 +                     0 as *const libc::c_char,
6678 +                     0 as *const libc::c_char,
6679 +                     0 as *const libc::c_char,
6680 +                     0 as *const libc::c_char,
6681 +                     0 as *const libc::c_char,
6682 +                     0 as *const libc::c_char,
6683 +                 ],
6684 +                 option_names: [
6685 +                     b"\0" as *const u8 as *const libc::c_char,
6686 +                     0 as *const libc::c_char,
6687 +                     0 as *const libc::c_char,
6688 +                     0 as *const libc::c_char,
6689 +                     0 as *const libc::c_char,
6690 +                     0 as *const libc::c_char,
6691 +                     0 as *const libc::c_char,
6692 +                     0 as *const libc::c_char,
6693 +                     0 as *const libc::c_char,
6694 +                     0 as *const libc::c_char,
6695 +                     0 as *const libc::c_char,
6696 +                     0 as *const libc::c_char,
6697 +                     0 as *const libc::c_char,
6698 +                     0 as *const libc::c_char,
6699 +                     0 as *const libc::c_char,
6700 +                     0 as *const libc::c_char,
6701 +                 ],
6702 +                 output_names: [
6703 +                     b"sin\0" as *const u8 as *const libc::c_char,
6704 +                     0 as *const libc::c_char,
6705 +                     0 as *const libc::c_char,
6706 +                     0 as *const libc::c_char,
6707 +                     0 as *const libc::c_char,
6708 +                     0 as *const libc::c_char,
6709 +                     0 as *const libc::c_char,
6710 +                     0 as *const libc::c_char,
6711 +                     0 as *const libc::c_char,
6712 +                     0 as *const libc::c_char,
6713 +                     0 as *const libc::c_char,
6714 +                     0 as *const libc::c_char,
6715 +                     0 as *const libc::c_char,
6716 +                     0 as *const libc::c_char,
6717 +                     0 as *const libc::c_char,
6718 +                     0 as *const libc::c_char,
6719 +                 ],
6720 +                 stream_new: None,
6721 +                 stream_run: None,
6722 +                 stream_free: None,
6723 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:6806:13
     |
6726 | /             let mut init = ti_indicator_info {
6727 | |                 name: b"sinh\0" as *const u8 as *const libc::c_char,
6728 | |                 full_name: b"Vector Hyperbolic Sine\0" as *const u8
6729 | |                     as *const libc::c_char,
...    |
6804 | |                 stream_free: None,
6805 | |             };
     | |______________- unnecessary `let` binding
6806 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
6726 ~             
6727 ~             ti_indicator_info {
6728 +                 name: b"sinh\0" as *const u8 as *const libc::c_char,
6729 +                 full_name: b"Vector Hyperbolic Sine\0" as *const u8
6730 +                     as *const libc::c_char,
6731 +                 start: Some(
6732 +                     ti_sinh_start
6733 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
6734 +                 ),
6735 +                 indicator: Some(
6736 +                     ti_sinh
6737 +                         as unsafe extern "C" fn(
6738 +                             libc::c_int,
6739 +                             *const *const libc::c_double,
6740 +                             *const libc::c_double,
6741 +                             *const *mut libc::c_double,
6742 +                         ) -> libc::c_int,
6743 +                 ),
6744 +                 indicator_ref: None,
6745 +                 type_0: 4 as libc::c_int,
6746 +                 inputs: 1 as libc::c_int,
6747 +                 options: 0 as libc::c_int,
6748 +                 outputs: 1 as libc::c_int,
6749 +                 input_names: [
6750 +                     b"real\0" as *const u8 as *const libc::c_char,
6751 +                     0 as *const libc::c_char,
6752 +                     0 as *const libc::c_char,
6753 +                     0 as *const libc::c_char,
6754 +                     0 as *const libc::c_char,
6755 +                     0 as *const libc::c_char,
6756 +                     0 as *const libc::c_char,
6757 +                     0 as *const libc::c_char,
6758 +                     0 as *const libc::c_char,
6759 +                     0 as *const libc::c_char,
6760 +                     0 as *const libc::c_char,
6761 +                     0 as *const libc::c_char,
6762 +                     0 as *const libc::c_char,
6763 +                     0 as *const libc::c_char,
6764 +                     0 as *const libc::c_char,
6765 +                     0 as *const libc::c_char,
6766 +                 ],
6767 +                 option_names: [
6768 +                     b"\0" as *const u8 as *const libc::c_char,
6769 +                     0 as *const libc::c_char,
6770 +                     0 as *const libc::c_char,
6771 +                     0 as *const libc::c_char,
6772 +                     0 as *const libc::c_char,
6773 +                     0 as *const libc::c_char,
6774 +                     0 as *const libc::c_char,
6775 +                     0 as *const libc::c_char,
6776 +                     0 as *const libc::c_char,
6777 +                     0 as *const libc::c_char,
6778 +                     0 as *const libc::c_char,
6779 +                     0 as *const libc::c_char,
6780 +                     0 as *const libc::c_char,
6781 +                     0 as *const libc::c_char,
6782 +                     0 as *const libc::c_char,
6783 +                     0 as *const libc::c_char,
6784 +                 ],
6785 +                 output_names: [
6786 +                     b"sinh\0" as *const u8 as *const libc::c_char,
6787 +                     0 as *const libc::c_char,
6788 +                     0 as *const libc::c_char,
6789 +                     0 as *const libc::c_char,
6790 +                     0 as *const libc::c_char,
6791 +                     0 as *const libc::c_char,
6792 +                     0 as *const libc::c_char,
6793 +                     0 as *const libc::c_char,
6794 +                     0 as *const libc::c_char,
6795 +                     0 as *const libc::c_char,
6796 +                     0 as *const libc::c_char,
6797 +                     0 as *const libc::c_char,
6798 +                     0 as *const libc::c_char,
6799 +                     0 as *const libc::c_char,
6800 +                     0 as *const libc::c_char,
6801 +                     0 as *const libc::c_char,
6802 +                 ],
6803 +                 stream_new: None,
6804 +                 stream_run: None,
6805 +                 stream_free: None,
6806 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:6905:13
     |
6809 | /             let mut init = ti_indicator_info {
6810 | |                 name: b"sma\0" as *const u8 as *const libc::c_char,
6811 | |                 full_name: b"Simple Moving Average\0" as *const u8
6812 | |                     as *const libc::c_char,
...    |
6903 | |                 ),
6904 | |             };
     | |______________- unnecessary `let` binding
6905 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
6809 ~             
6810 ~             ti_indicator_info {
6811 +                 name: b"sma\0" as *const u8 as *const libc::c_char,
6812 +                 full_name: b"Simple Moving Average\0" as *const u8
6813 +                     as *const libc::c_char,
6814 +                 start: Some(
6815 +                     ti_sma_start
6816 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
6817 +                 ),
6818 +                 indicator: Some(
6819 +                     ti_sma
6820 +                         as unsafe extern "C" fn(
6821 +                             libc::c_int,
6822 +                             *const *const libc::c_double,
6823 +                             *const libc::c_double,
6824 +                             *const *mut libc::c_double,
6825 +                         ) -> libc::c_int,
6826 +                 ),
6827 +                 indicator_ref: None,
6828 +                 type_0: 1 as libc::c_int,
6829 +                 inputs: 1 as libc::c_int,
6830 +                 options: 1 as libc::c_int,
6831 +                 outputs: 1 as libc::c_int,
6832 +                 input_names: [
6833 +                     b"real\0" as *const u8 as *const libc::c_char,
6834 +                     0 as *const libc::c_char,
6835 +                     0 as *const libc::c_char,
6836 +                     0 as *const libc::c_char,
6837 +                     0 as *const libc::c_char,
6838 +                     0 as *const libc::c_char,
6839 +                     0 as *const libc::c_char,
6840 +                     0 as *const libc::c_char,
6841 +                     0 as *const libc::c_char,
6842 +                     0 as *const libc::c_char,
6843 +                     0 as *const libc::c_char,
6844 +                     0 as *const libc::c_char,
6845 +                     0 as *const libc::c_char,
6846 +                     0 as *const libc::c_char,
6847 +                     0 as *const libc::c_char,
6848 +                     0 as *const libc::c_char,
6849 +                 ],
6850 +                 option_names: [
6851 +                     b"period\0" as *const u8 as *const libc::c_char,
6852 +                     0 as *const libc::c_char,
6853 +                     0 as *const libc::c_char,
6854 +                     0 as *const libc::c_char,
6855 +                     0 as *const libc::c_char,
6856 +                     0 as *const libc::c_char,
6857 +                     0 as *const libc::c_char,
6858 +                     0 as *const libc::c_char,
6859 +                     0 as *const libc::c_char,
6860 +                     0 as *const libc::c_char,
6861 +                     0 as *const libc::c_char,
6862 +                     0 as *const libc::c_char,
6863 +                     0 as *const libc::c_char,
6864 +                     0 as *const libc::c_char,
6865 +                     0 as *const libc::c_char,
6866 +                     0 as *const libc::c_char,
6867 +                 ],
6868 +                 output_names: [
6869 +                     b"sma\0" as *const u8 as *const libc::c_char,
6870 +                     0 as *const libc::c_char,
6871 +                     0 as *const libc::c_char,
6872 +                     0 as *const libc::c_char,
6873 +                     0 as *const libc::c_char,
6874 +                     0 as *const libc::c_char,
6875 +                     0 as *const libc::c_char,
6876 +                     0 as *const libc::c_char,
6877 +                     0 as *const libc::c_char,
6878 +                     0 as *const libc::c_char,
6879 +                     0 as *const libc::c_char,
6880 +                     0 as *const libc::c_char,
6881 +                     0 as *const libc::c_char,
6882 +                     0 as *const libc::c_char,
6883 +                     0 as *const libc::c_char,
6884 +                     0 as *const libc::c_char,
6885 +                 ],
6886 +                 stream_new: Some(
6887 +                     ti_sma_stream_new
6888 +                         as unsafe extern "C" fn(
6889 +                             *const libc::c_double,
6890 +                             *mut *mut ti_stream,
6891 +                         ) -> libc::c_int,
6892 +                 ),
6893 +                 stream_run: Some(
6894 +                     ti_sma_stream_run
6895 +                         as unsafe extern "C" fn(
6896 +                             *mut ti_stream,
6897 +                             libc::c_int,
6898 +                             *const *const libc::c_double,
6899 +                             *const *mut libc::c_double,
6900 +                         ) -> libc::c_int,
6901 +                 ),
6902 +                 stream_free: Some(
6903 +                     ti_sma_stream_free as unsafe extern "C" fn(*mut ti_stream) -> (),
6904 +                 ),
6905 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:6987:13
     |
6908 | /             let mut init = ti_indicator_info {
6909 | |                 name: b"sqrt\0" as *const u8 as *const libc::c_char,
6910 | |                 full_name: b"Vector Square Root\0" as *const u8 as *const libc::c_char,
6911 | |                 start: Some(
...    |
6985 | |                 stream_free: None,
6986 | |             };
     | |______________- unnecessary `let` binding
6987 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
6908 ~             
6909 ~             ti_indicator_info {
6910 +                 name: b"sqrt\0" as *const u8 as *const libc::c_char,
6911 +                 full_name: b"Vector Square Root\0" as *const u8 as *const libc::c_char,
6912 +                 start: Some(
6913 +                     ti_sqrt_start
6914 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
6915 +                 ),
6916 +                 indicator: Some(
6917 +                     ti_sqrt
6918 +                         as unsafe extern "C" fn(
6919 +                             libc::c_int,
6920 +                             *const *const libc::c_double,
6921 +                             *const libc::c_double,
6922 +                             *const *mut libc::c_double,
6923 +                         ) -> libc::c_int,
6924 +                 ),
6925 +                 indicator_ref: None,
6926 +                 type_0: 4 as libc::c_int,
6927 +                 inputs: 1 as libc::c_int,
6928 +                 options: 0 as libc::c_int,
6929 +                 outputs: 1 as libc::c_int,
6930 +                 input_names: [
6931 +                     b"real\0" as *const u8 as *const libc::c_char,
6932 +                     0 as *const libc::c_char,
6933 +                     0 as *const libc::c_char,
6934 +                     0 as *const libc::c_char,
6935 +                     0 as *const libc::c_char,
6936 +                     0 as *const libc::c_char,
6937 +                     0 as *const libc::c_char,
6938 +                     0 as *const libc::c_char,
6939 +                     0 as *const libc::c_char,
6940 +                     0 as *const libc::c_char,
6941 +                     0 as *const libc::c_char,
6942 +                     0 as *const libc::c_char,
6943 +                     0 as *const libc::c_char,
6944 +                     0 as *const libc::c_char,
6945 +                     0 as *const libc::c_char,
6946 +                     0 as *const libc::c_char,
6947 +                 ],
6948 +                 option_names: [
6949 +                     b"\0" as *const u8 as *const libc::c_char,
6950 +                     0 as *const libc::c_char,
6951 +                     0 as *const libc::c_char,
6952 +                     0 as *const libc::c_char,
6953 +                     0 as *const libc::c_char,
6954 +                     0 as *const libc::c_char,
6955 +                     0 as *const libc::c_char,
6956 +                     0 as *const libc::c_char,
6957 +                     0 as *const libc::c_char,
6958 +                     0 as *const libc::c_char,
6959 +                     0 as *const libc::c_char,
6960 +                     0 as *const libc::c_char,
6961 +                     0 as *const libc::c_char,
6962 +                     0 as *const libc::c_char,
6963 +                     0 as *const libc::c_char,
6964 +                     0 as *const libc::c_char,
6965 +                 ],
6966 +                 output_names: [
6967 +                     b"sqrt\0" as *const u8 as *const libc::c_char,
6968 +                     0 as *const libc::c_char,
6969 +                     0 as *const libc::c_char,
6970 +                     0 as *const libc::c_char,
6971 +                     0 as *const libc::c_char,
6972 +                     0 as *const libc::c_char,
6973 +                     0 as *const libc::c_char,
6974 +                     0 as *const libc::c_char,
6975 +                     0 as *const libc::c_char,
6976 +                     0 as *const libc::c_char,
6977 +                     0 as *const libc::c_char,
6978 +                     0 as *const libc::c_char,
6979 +                     0 as *const libc::c_char,
6980 +                     0 as *const libc::c_char,
6981 +                     0 as *const libc::c_char,
6982 +                     0 as *const libc::c_char,
6983 +                 ],
6984 +                 stream_new: None,
6985 +                 stream_run: None,
6986 +                 stream_free: None,
6987 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:7070:13
     |
6990 | /             let mut init = ti_indicator_info {
6991 | |                 name: b"stddev\0" as *const u8 as *const libc::c_char,
6992 | |                 full_name: b"Standard Deviation Over Period\0" as *const u8
6993 | |                     as *const libc::c_char,
...    |
7068 | |                 stream_free: None,
7069 | |             };
     | |______________- unnecessary `let` binding
7070 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
6990 ~             
6991 ~             ti_indicator_info {
6992 +                 name: b"stddev\0" as *const u8 as *const libc::c_char,
6993 +                 full_name: b"Standard Deviation Over Period\0" as *const u8
6994 +                     as *const libc::c_char,
6995 +                 start: Some(
6996 +                     ti_stddev_start
6997 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
6998 +                 ),
6999 +                 indicator: Some(
7000 +                     ti_stddev
7001 +                         as unsafe extern "C" fn(
7002 +                             libc::c_int,
7003 +                             *const *const libc::c_double,
7004 +                             *const libc::c_double,
7005 +                             *const *mut libc::c_double,
7006 +                         ) -> libc::c_int,
7007 +                 ),
7008 +                 indicator_ref: None,
7009 +                 type_0: 3 as libc::c_int,
7010 +                 inputs: 1 as libc::c_int,
7011 +                 options: 1 as libc::c_int,
7012 +                 outputs: 1 as libc::c_int,
7013 +                 input_names: [
7014 +                     b"real\0" as *const u8 as *const libc::c_char,
7015 +                     0 as *const libc::c_char,
7016 +                     0 as *const libc::c_char,
7017 +                     0 as *const libc::c_char,
7018 +                     0 as *const libc::c_char,
7019 +                     0 as *const libc::c_char,
7020 +                     0 as *const libc::c_char,
7021 +                     0 as *const libc::c_char,
7022 +                     0 as *const libc::c_char,
7023 +                     0 as *const libc::c_char,
7024 +                     0 as *const libc::c_char,
7025 +                     0 as *const libc::c_char,
7026 +                     0 as *const libc::c_char,
7027 +                     0 as *const libc::c_char,
7028 +                     0 as *const libc::c_char,
7029 +                     0 as *const libc::c_char,
7030 +                 ],
7031 +                 option_names: [
7032 +                     b"period\0" as *const u8 as *const libc::c_char,
7033 +                     0 as *const libc::c_char,
7034 +                     0 as *const libc::c_char,
7035 +                     0 as *const libc::c_char,
7036 +                     0 as *const libc::c_char,
7037 +                     0 as *const libc::c_char,
7038 +                     0 as *const libc::c_char,
7039 +                     0 as *const libc::c_char,
7040 +                     0 as *const libc::c_char,
7041 +                     0 as *const libc::c_char,
7042 +                     0 as *const libc::c_char,
7043 +                     0 as *const libc::c_char,
7044 +                     0 as *const libc::c_char,
7045 +                     0 as *const libc::c_char,
7046 +                     0 as *const libc::c_char,
7047 +                     0 as *const libc::c_char,
7048 +                 ],
7049 +                 output_names: [
7050 +                     b"stddev\0" as *const u8 as *const libc::c_char,
7051 +                     0 as *const libc::c_char,
7052 +                     0 as *const libc::c_char,
7053 +                     0 as *const libc::c_char,
7054 +                     0 as *const libc::c_char,
7055 +                     0 as *const libc::c_char,
7056 +                     0 as *const libc::c_char,
7057 +                     0 as *const libc::c_char,
7058 +                     0 as *const libc::c_char,
7059 +                     0 as *const libc::c_char,
7060 +                     0 as *const libc::c_char,
7061 +                     0 as *const libc::c_char,
7062 +                     0 as *const libc::c_char,
7063 +                     0 as *const libc::c_char,
7064 +                     0 as *const libc::c_char,
7065 +                     0 as *const libc::c_char,
7066 +                 ],
7067 +                 stream_new: None,
7068 +                 stream_run: None,
7069 +                 stream_free: None,
7070 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:7153:13
     |
7073 | /             let mut init = ti_indicator_info {
7074 | |                 name: b"stderr\0" as *const u8 as *const libc::c_char,
7075 | |                 full_name: b"Standard Error Over Period\0" as *const u8
7076 | |                     as *const libc::c_char,
...    |
7151 | |                 stream_free: None,
7152 | |             };
     | |______________- unnecessary `let` binding
7153 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
7073 ~             
7074 ~             ti_indicator_info {
7075 +                 name: b"stderr\0" as *const u8 as *const libc::c_char,
7076 +                 full_name: b"Standard Error Over Period\0" as *const u8
7077 +                     as *const libc::c_char,
7078 +                 start: Some(
7079 +                     ti_stderr_start
7080 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
7081 +                 ),
7082 +                 indicator: Some(
7083 +                     ti_stderr
7084 +                         as unsafe extern "C" fn(
7085 +                             libc::c_int,
7086 +                             *const *const libc::c_double,
7087 +                             *const libc::c_double,
7088 +                             *const *mut libc::c_double,
7089 +                         ) -> libc::c_int,
7090 +                 ),
7091 +                 indicator_ref: None,
7092 +                 type_0: 3 as libc::c_int,
7093 +                 inputs: 1 as libc::c_int,
7094 +                 options: 1 as libc::c_int,
7095 +                 outputs: 1 as libc::c_int,
7096 +                 input_names: [
7097 +                     b"real\0" as *const u8 as *const libc::c_char,
7098 +                     0 as *const libc::c_char,
7099 +                     0 as *const libc::c_char,
7100 +                     0 as *const libc::c_char,
7101 +                     0 as *const libc::c_char,
7102 +                     0 as *const libc::c_char,
7103 +                     0 as *const libc::c_char,
7104 +                     0 as *const libc::c_char,
7105 +                     0 as *const libc::c_char,
7106 +                     0 as *const libc::c_char,
7107 +                     0 as *const libc::c_char,
7108 +                     0 as *const libc::c_char,
7109 +                     0 as *const libc::c_char,
7110 +                     0 as *const libc::c_char,
7111 +                     0 as *const libc::c_char,
7112 +                     0 as *const libc::c_char,
7113 +                 ],
7114 +                 option_names: [
7115 +                     b"period\0" as *const u8 as *const libc::c_char,
7116 +                     0 as *const libc::c_char,
7117 +                     0 as *const libc::c_char,
7118 +                     0 as *const libc::c_char,
7119 +                     0 as *const libc::c_char,
7120 +                     0 as *const libc::c_char,
7121 +                     0 as *const libc::c_char,
7122 +                     0 as *const libc::c_char,
7123 +                     0 as *const libc::c_char,
7124 +                     0 as *const libc::c_char,
7125 +                     0 as *const libc::c_char,
7126 +                     0 as *const libc::c_char,
7127 +                     0 as *const libc::c_char,
7128 +                     0 as *const libc::c_char,
7129 +                     0 as *const libc::c_char,
7130 +                     0 as *const libc::c_char,
7131 +                 ],
7132 +                 output_names: [
7133 +                     b"stderr\0" as *const u8 as *const libc::c_char,
7134 +                     0 as *const libc::c_char,
7135 +                     0 as *const libc::c_char,
7136 +                     0 as *const libc::c_char,
7137 +                     0 as *const libc::c_char,
7138 +                     0 as *const libc::c_char,
7139 +                     0 as *const libc::c_char,
7140 +                     0 as *const libc::c_char,
7141 +                     0 as *const libc::c_char,
7142 +                     0 as *const libc::c_char,
7143 +                     0 as *const libc::c_char,
7144 +                     0 as *const libc::c_char,
7145 +                     0 as *const libc::c_char,
7146 +                     0 as *const libc::c_char,
7147 +                     0 as *const libc::c_char,
7148 +                     0 as *const libc::c_char,
7149 +                 ],
7150 +                 stream_new: None,
7151 +                 stream_run: None,
7152 +                 stream_free: None,
7153 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:7236:13
     |
7156 | /             let mut init = ti_indicator_info {
7157 | |                 name: b"stoch\0" as *const u8 as *const libc::c_char,
7158 | |                 full_name: b"Stochastic Oscillator\0" as *const u8
7159 | |                     as *const libc::c_char,
...    |
7234 | |                 stream_free: None,
7235 | |             };
     | |______________- unnecessary `let` binding
7236 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
7156 ~             
7157 ~             ti_indicator_info {
7158 +                 name: b"stoch\0" as *const u8 as *const libc::c_char,
7159 +                 full_name: b"Stochastic Oscillator\0" as *const u8
7160 +                     as *const libc::c_char,
7161 +                 start: Some(
7162 +                     ti_stoch_start
7163 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
7164 +                 ),
7165 +                 indicator: Some(
7166 +                     ti_stoch
7167 +                         as unsafe extern "C" fn(
7168 +                             libc::c_int,
7169 +                             *const *const libc::c_double,
7170 +                             *const libc::c_double,
7171 +                             *const *mut libc::c_double,
7172 +                         ) -> libc::c_int,
7173 +                 ),
7174 +                 indicator_ref: None,
7175 +                 type_0: 2 as libc::c_int,
7176 +                 inputs: 3 as libc::c_int,
7177 +                 options: 3 as libc::c_int,
7178 +                 outputs: 2 as libc::c_int,
7179 +                 input_names: [
7180 +                     b"high\0" as *const u8 as *const libc::c_char,
7181 +                     b"low\0" as *const u8 as *const libc::c_char,
7182 +                     b"close\0" as *const u8 as *const libc::c_char,
7183 +                     0 as *const libc::c_char,
7184 +                     0 as *const libc::c_char,
7185 +                     0 as *const libc::c_char,
7186 +                     0 as *const libc::c_char,
7187 +                     0 as *const libc::c_char,
7188 +                     0 as *const libc::c_char,
7189 +                     0 as *const libc::c_char,
7190 +                     0 as *const libc::c_char,
7191 +                     0 as *const libc::c_char,
7192 +                     0 as *const libc::c_char,
7193 +                     0 as *const libc::c_char,
7194 +                     0 as *const libc::c_char,
7195 +                     0 as *const libc::c_char,
7196 +                 ],
7197 +                 option_names: [
7198 +                     b"k_period\0" as *const u8 as *const libc::c_char,
7199 +                     b"k_slowing_period\0" as *const u8 as *const libc::c_char,
7200 +                     b"d_period\0" as *const u8 as *const libc::c_char,
7201 +                     0 as *const libc::c_char,
7202 +                     0 as *const libc::c_char,
7203 +                     0 as *const libc::c_char,
7204 +                     0 as *const libc::c_char,
7205 +                     0 as *const libc::c_char,
7206 +                     0 as *const libc::c_char,
7207 +                     0 as *const libc::c_char,
7208 +                     0 as *const libc::c_char,
7209 +                     0 as *const libc::c_char,
7210 +                     0 as *const libc::c_char,
7211 +                     0 as *const libc::c_char,
7212 +                     0 as *const libc::c_char,
7213 +                     0 as *const libc::c_char,
7214 +                 ],
7215 +                 output_names: [
7216 +                     b"stoch_k\0" as *const u8 as *const libc::c_char,
7217 +                     b"stoch_d\0" as *const u8 as *const libc::c_char,
7218 +                     0 as *const libc::c_char,
7219 +                     0 as *const libc::c_char,
7220 +                     0 as *const libc::c_char,
7221 +                     0 as *const libc::c_char,
7222 +                     0 as *const libc::c_char,
7223 +                     0 as *const libc::c_char,
7224 +                     0 as *const libc::c_char,
7225 +                     0 as *const libc::c_char,
7226 +                     0 as *const libc::c_char,
7227 +                     0 as *const libc::c_char,
7228 +                     0 as *const libc::c_char,
7229 +                     0 as *const libc::c_char,
7230 +                     0 as *const libc::c_char,
7231 +                     0 as *const libc::c_char,
7232 +                 ],
7233 +                 stream_new: None,
7234 +                 stream_run: None,
7235 +                 stream_free: None,
7236 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:7318:13
     |
7239 | /             let mut init = ti_indicator_info {
7240 | |                 name: b"stochrsi\0" as *const u8 as *const libc::c_char,
7241 | |                 full_name: b"Stochastic RSI\0" as *const u8 as *const libc::c_char,
7242 | |                 start: Some(
...    |
7316 | |                 stream_free: None,
7317 | |             };
     | |______________- unnecessary `let` binding
7318 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
7239 ~             
7240 ~             ti_indicator_info {
7241 +                 name: b"stochrsi\0" as *const u8 as *const libc::c_char,
7242 +                 full_name: b"Stochastic RSI\0" as *const u8 as *const libc::c_char,
7243 +                 start: Some(
7244 +                     ti_stochrsi_start
7245 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
7246 +                 ),
7247 +                 indicator: Some(
7248 +                     ti_stochrsi
7249 +                         as unsafe extern "C" fn(
7250 +                             libc::c_int,
7251 +                             *const *const libc::c_double,
7252 +                             *const libc::c_double,
7253 +                             *const *mut libc::c_double,
7254 +                         ) -> libc::c_int,
7255 +                 ),
7256 +                 indicator_ref: None,
7257 +                 type_0: 2 as libc::c_int,
7258 +                 inputs: 1 as libc::c_int,
7259 +                 options: 1 as libc::c_int,
7260 +                 outputs: 1 as libc::c_int,
7261 +                 input_names: [
7262 +                     b"real\0" as *const u8 as *const libc::c_char,
7263 +                     0 as *const libc::c_char,
7264 +                     0 as *const libc::c_char,
7265 +                     0 as *const libc::c_char,
7266 +                     0 as *const libc::c_char,
7267 +                     0 as *const libc::c_char,
7268 +                     0 as *const libc::c_char,
7269 +                     0 as *const libc::c_char,
7270 +                     0 as *const libc::c_char,
7271 +                     0 as *const libc::c_char,
7272 +                     0 as *const libc::c_char,
7273 +                     0 as *const libc::c_char,
7274 +                     0 as *const libc::c_char,
7275 +                     0 as *const libc::c_char,
7276 +                     0 as *const libc::c_char,
7277 +                     0 as *const libc::c_char,
7278 +                 ],
7279 +                 option_names: [
7280 +                     b"period\0" as *const u8 as *const libc::c_char,
7281 +                     0 as *const libc::c_char,
7282 +                     0 as *const libc::c_char,
7283 +                     0 as *const libc::c_char,
7284 +                     0 as *const libc::c_char,
7285 +                     0 as *const libc::c_char,
7286 +                     0 as *const libc::c_char,
7287 +                     0 as *const libc::c_char,
7288 +                     0 as *const libc::c_char,
7289 +                     0 as *const libc::c_char,
7290 +                     0 as *const libc::c_char,
7291 +                     0 as *const libc::c_char,
7292 +                     0 as *const libc::c_char,
7293 +                     0 as *const libc::c_char,
7294 +                     0 as *const libc::c_char,
7295 +                     0 as *const libc::c_char,
7296 +                 ],
7297 +                 output_names: [
7298 +                     b"stochrsi\0" as *const u8 as *const libc::c_char,
7299 +                     0 as *const libc::c_char,
7300 +                     0 as *const libc::c_char,
7301 +                     0 as *const libc::c_char,
7302 +                     0 as *const libc::c_char,
7303 +                     0 as *const libc::c_char,
7304 +                     0 as *const libc::c_char,
7305 +                     0 as *const libc::c_char,
7306 +                     0 as *const libc::c_char,
7307 +                     0 as *const libc::c_char,
7308 +                     0 as *const libc::c_char,
7309 +                     0 as *const libc::c_char,
7310 +                     0 as *const libc::c_char,
7311 +                     0 as *const libc::c_char,
7312 +                     0 as *const libc::c_char,
7313 +                     0 as *const libc::c_char,
7314 +                 ],
7315 +                 stream_new: None,
7316 +                 stream_run: None,
7317 +                 stream_free: None,
7318 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:7400:13
     |
7321 | /             let mut init = ti_indicator_info {
7322 | |                 name: b"sub\0" as *const u8 as *const libc::c_char,
7323 | |                 full_name: b"Vector Subtraction\0" as *const u8 as *const libc::c_char,
7324 | |                 start: Some(
...    |
7398 | |                 stream_free: None,
7399 | |             };
     | |______________- unnecessary `let` binding
7400 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
7321 ~             
7322 ~             ti_indicator_info {
7323 +                 name: b"sub\0" as *const u8 as *const libc::c_char,
7324 +                 full_name: b"Vector Subtraction\0" as *const u8 as *const libc::c_char,
7325 +                 start: Some(
7326 +                     ti_sub_start
7327 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
7328 +                 ),
7329 +                 indicator: Some(
7330 +                     ti_sub
7331 +                         as unsafe extern "C" fn(
7332 +                             libc::c_int,
7333 +                             *const *const libc::c_double,
7334 +                             *const libc::c_double,
7335 +                             *const *mut libc::c_double,
7336 +                         ) -> libc::c_int,
7337 +                 ),
7338 +                 indicator_ref: None,
7339 +                 type_0: 4 as libc::c_int,
7340 +                 inputs: 2 as libc::c_int,
7341 +                 options: 0 as libc::c_int,
7342 +                 outputs: 1 as libc::c_int,
7343 +                 input_names: [
7344 +                     b"real\0" as *const u8 as *const libc::c_char,
7345 +                     b"real\0" as *const u8 as *const libc::c_char,
7346 +                     0 as *const libc::c_char,
7347 +                     0 as *const libc::c_char,
7348 +                     0 as *const libc::c_char,
7349 +                     0 as *const libc::c_char,
7350 +                     0 as *const libc::c_char,
7351 +                     0 as *const libc::c_char,
7352 +                     0 as *const libc::c_char,
7353 +                     0 as *const libc::c_char,
7354 +                     0 as *const libc::c_char,
7355 +                     0 as *const libc::c_char,
7356 +                     0 as *const libc::c_char,
7357 +                     0 as *const libc::c_char,
7358 +                     0 as *const libc::c_char,
7359 +                     0 as *const libc::c_char,
7360 +                 ],
7361 +                 option_names: [
7362 +                     b"\0" as *const u8 as *const libc::c_char,
7363 +                     0 as *const libc::c_char,
7364 +                     0 as *const libc::c_char,
7365 +                     0 as *const libc::c_char,
7366 +                     0 as *const libc::c_char,
7367 +                     0 as *const libc::c_char,
7368 +                     0 as *const libc::c_char,
7369 +                     0 as *const libc::c_char,
7370 +                     0 as *const libc::c_char,
7371 +                     0 as *const libc::c_char,
7372 +                     0 as *const libc::c_char,
7373 +                     0 as *const libc::c_char,
7374 +                     0 as *const libc::c_char,
7375 +                     0 as *const libc::c_char,
7376 +                     0 as *const libc::c_char,
7377 +                     0 as *const libc::c_char,
7378 +                 ],
7379 +                 output_names: [
7380 +                     b"sub\0" as *const u8 as *const libc::c_char,
7381 +                     0 as *const libc::c_char,
7382 +                     0 as *const libc::c_char,
7383 +                     0 as *const libc::c_char,
7384 +                     0 as *const libc::c_char,
7385 +                     0 as *const libc::c_char,
7386 +                     0 as *const libc::c_char,
7387 +                     0 as *const libc::c_char,
7388 +                     0 as *const libc::c_char,
7389 +                     0 as *const libc::c_char,
7390 +                     0 as *const libc::c_char,
7391 +                     0 as *const libc::c_char,
7392 +                     0 as *const libc::c_char,
7393 +                     0 as *const libc::c_char,
7394 +                     0 as *const libc::c_char,
7395 +                     0 as *const libc::c_char,
7396 +                 ],
7397 +                 stream_new: None,
7398 +                 stream_run: None,
7399 +                 stream_free: None,
7400 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:7482:13
     |
7403 | /             let mut init = ti_indicator_info {
7404 | |                 name: b"sum\0" as *const u8 as *const libc::c_char,
7405 | |                 full_name: b"Sum Over Period\0" as *const u8 as *const libc::c_char,
7406 | |                 start: Some(
...    |
7480 | |                 stream_free: None,
7481 | |             };
     | |______________- unnecessary `let` binding
7482 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
7403 ~             
7404 ~             ti_indicator_info {
7405 +                 name: b"sum\0" as *const u8 as *const libc::c_char,
7406 +                 full_name: b"Sum Over Period\0" as *const u8 as *const libc::c_char,
7407 +                 start: Some(
7408 +                     ti_sum_start
7409 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
7410 +                 ),
7411 +                 indicator: Some(
7412 +                     ti_sum
7413 +                         as unsafe extern "C" fn(
7414 +                             libc::c_int,
7415 +                             *const *const libc::c_double,
7416 +                             *const libc::c_double,
7417 +                             *const *mut libc::c_double,
7418 +                         ) -> libc::c_int,
7419 +                 ),
7420 +                 indicator_ref: None,
7421 +                 type_0: 3 as libc::c_int,
7422 +                 inputs: 1 as libc::c_int,
7423 +                 options: 1 as libc::c_int,
7424 +                 outputs: 1 as libc::c_int,
7425 +                 input_names: [
7426 +                     b"real\0" as *const u8 as *const libc::c_char,
7427 +                     0 as *const libc::c_char,
7428 +                     0 as *const libc::c_char,
7429 +                     0 as *const libc::c_char,
7430 +                     0 as *const libc::c_char,
7431 +                     0 as *const libc::c_char,
7432 +                     0 as *const libc::c_char,
7433 +                     0 as *const libc::c_char,
7434 +                     0 as *const libc::c_char,
7435 +                     0 as *const libc::c_char,
7436 +                     0 as *const libc::c_char,
7437 +                     0 as *const libc::c_char,
7438 +                     0 as *const libc::c_char,
7439 +                     0 as *const libc::c_char,
7440 +                     0 as *const libc::c_char,
7441 +                     0 as *const libc::c_char,
7442 +                 ],
7443 +                 option_names: [
7444 +                     b"period\0" as *const u8 as *const libc::c_char,
7445 +                     0 as *const libc::c_char,
7446 +                     0 as *const libc::c_char,
7447 +                     0 as *const libc::c_char,
7448 +                     0 as *const libc::c_char,
7449 +                     0 as *const libc::c_char,
7450 +                     0 as *const libc::c_char,
7451 +                     0 as *const libc::c_char,
7452 +                     0 as *const libc::c_char,
7453 +                     0 as *const libc::c_char,
7454 +                     0 as *const libc::c_char,
7455 +                     0 as *const libc::c_char,
7456 +                     0 as *const libc::c_char,
7457 +                     0 as *const libc::c_char,
7458 +                     0 as *const libc::c_char,
7459 +                     0 as *const libc::c_char,
7460 +                 ],
7461 +                 output_names: [
7462 +                     b"sum\0" as *const u8 as *const libc::c_char,
7463 +                     0 as *const libc::c_char,
7464 +                     0 as *const libc::c_char,
7465 +                     0 as *const libc::c_char,
7466 +                     0 as *const libc::c_char,
7467 +                     0 as *const libc::c_char,
7468 +                     0 as *const libc::c_char,
7469 +                     0 as *const libc::c_char,
7470 +                     0 as *const libc::c_char,
7471 +                     0 as *const libc::c_char,
7472 +                     0 as *const libc::c_char,
7473 +                     0 as *const libc::c_char,
7474 +                     0 as *const libc::c_char,
7475 +                     0 as *const libc::c_char,
7476 +                     0 as *const libc::c_char,
7477 +                     0 as *const libc::c_char,
7478 +                 ],
7479 +                 stream_new: None,
7480 +                 stream_run: None,
7481 +                 stream_free: None,
7482 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:7564:13
     |
7485 | /             let mut init = ti_indicator_info {
7486 | |                 name: b"tan\0" as *const u8 as *const libc::c_char,
7487 | |                 full_name: b"Vector Tangent\0" as *const u8 as *const libc::c_char,
7488 | |                 start: Some(
...    |
7562 | |                 stream_free: None,
7563 | |             };
     | |______________- unnecessary `let` binding
7564 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
7485 ~             
7486 ~             ti_indicator_info {
7487 +                 name: b"tan\0" as *const u8 as *const libc::c_char,
7488 +                 full_name: b"Vector Tangent\0" as *const u8 as *const libc::c_char,
7489 +                 start: Some(
7490 +                     ti_tan_start
7491 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
7492 +                 ),
7493 +                 indicator: Some(
7494 +                     ti_tan
7495 +                         as unsafe extern "C" fn(
7496 +                             libc::c_int,
7497 +                             *const *const libc::c_double,
7498 +                             *const libc::c_double,
7499 +                             *const *mut libc::c_double,
7500 +                         ) -> libc::c_int,
7501 +                 ),
7502 +                 indicator_ref: None,
7503 +                 type_0: 4 as libc::c_int,
7504 +                 inputs: 1 as libc::c_int,
7505 +                 options: 0 as libc::c_int,
7506 +                 outputs: 1 as libc::c_int,
7507 +                 input_names: [
7508 +                     b"real\0" as *const u8 as *const libc::c_char,
7509 +                     0 as *const libc::c_char,
7510 +                     0 as *const libc::c_char,
7511 +                     0 as *const libc::c_char,
7512 +                     0 as *const libc::c_char,
7513 +                     0 as *const libc::c_char,
7514 +                     0 as *const libc::c_char,
7515 +                     0 as *const libc::c_char,
7516 +                     0 as *const libc::c_char,
7517 +                     0 as *const libc::c_char,
7518 +                     0 as *const libc::c_char,
7519 +                     0 as *const libc::c_char,
7520 +                     0 as *const libc::c_char,
7521 +                     0 as *const libc::c_char,
7522 +                     0 as *const libc::c_char,
7523 +                     0 as *const libc::c_char,
7524 +                 ],
7525 +                 option_names: [
7526 +                     b"\0" as *const u8 as *const libc::c_char,
7527 +                     0 as *const libc::c_char,
7528 +                     0 as *const libc::c_char,
7529 +                     0 as *const libc::c_char,
7530 +                     0 as *const libc::c_char,
7531 +                     0 as *const libc::c_char,
7532 +                     0 as *const libc::c_char,
7533 +                     0 as *const libc::c_char,
7534 +                     0 as *const libc::c_char,
7535 +                     0 as *const libc::c_char,
7536 +                     0 as *const libc::c_char,
7537 +                     0 as *const libc::c_char,
7538 +                     0 as *const libc::c_char,
7539 +                     0 as *const libc::c_char,
7540 +                     0 as *const libc::c_char,
7541 +                     0 as *const libc::c_char,
7542 +                 ],
7543 +                 output_names: [
7544 +                     b"tan\0" as *const u8 as *const libc::c_char,
7545 +                     0 as *const libc::c_char,
7546 +                     0 as *const libc::c_char,
7547 +                     0 as *const libc::c_char,
7548 +                     0 as *const libc::c_char,
7549 +                     0 as *const libc::c_char,
7550 +                     0 as *const libc::c_char,
7551 +                     0 as *const libc::c_char,
7552 +                     0 as *const libc::c_char,
7553 +                     0 as *const libc::c_char,
7554 +                     0 as *const libc::c_char,
7555 +                     0 as *const libc::c_char,
7556 +                     0 as *const libc::c_char,
7557 +                     0 as *const libc::c_char,
7558 +                     0 as *const libc::c_char,
7559 +                     0 as *const libc::c_char,
7560 +                 ],
7561 +                 stream_new: None,
7562 +                 stream_run: None,
7563 +                 stream_free: None,
7564 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:7647:13
     |
7567 | /             let mut init = ti_indicator_info {
7568 | |                 name: b"tanh\0" as *const u8 as *const libc::c_char,
7569 | |                 full_name: b"Vector Hyperbolic Tangent\0" as *const u8
7570 | |                     as *const libc::c_char,
...    |
7645 | |                 stream_free: None,
7646 | |             };
     | |______________- unnecessary `let` binding
7647 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
7567 ~             
7568 ~             ti_indicator_info {
7569 +                 name: b"tanh\0" as *const u8 as *const libc::c_char,
7570 +                 full_name: b"Vector Hyperbolic Tangent\0" as *const u8
7571 +                     as *const libc::c_char,
7572 +                 start: Some(
7573 +                     ti_tanh_start
7574 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
7575 +                 ),
7576 +                 indicator: Some(
7577 +                     ti_tanh
7578 +                         as unsafe extern "C" fn(
7579 +                             libc::c_int,
7580 +                             *const *const libc::c_double,
7581 +                             *const libc::c_double,
7582 +                             *const *mut libc::c_double,
7583 +                         ) -> libc::c_int,
7584 +                 ),
7585 +                 indicator_ref: None,
7586 +                 type_0: 4 as libc::c_int,
7587 +                 inputs: 1 as libc::c_int,
7588 +                 options: 0 as libc::c_int,
7589 +                 outputs: 1 as libc::c_int,
7590 +                 input_names: [
7591 +                     b"real\0" as *const u8 as *const libc::c_char,
7592 +                     0 as *const libc::c_char,
7593 +                     0 as *const libc::c_char,
7594 +                     0 as *const libc::c_char,
7595 +                     0 as *const libc::c_char,
7596 +                     0 as *const libc::c_char,
7597 +                     0 as *const libc::c_char,
7598 +                     0 as *const libc::c_char,
7599 +                     0 as *const libc::c_char,
7600 +                     0 as *const libc::c_char,
7601 +                     0 as *const libc::c_char,
7602 +                     0 as *const libc::c_char,
7603 +                     0 as *const libc::c_char,
7604 +                     0 as *const libc::c_char,
7605 +                     0 as *const libc::c_char,
7606 +                     0 as *const libc::c_char,
7607 +                 ],
7608 +                 option_names: [
7609 +                     b"\0" as *const u8 as *const libc::c_char,
7610 +                     0 as *const libc::c_char,
7611 +                     0 as *const libc::c_char,
7612 +                     0 as *const libc::c_char,
7613 +                     0 as *const libc::c_char,
7614 +                     0 as *const libc::c_char,
7615 +                     0 as *const libc::c_char,
7616 +                     0 as *const libc::c_char,
7617 +                     0 as *const libc::c_char,
7618 +                     0 as *const libc::c_char,
7619 +                     0 as *const libc::c_char,
7620 +                     0 as *const libc::c_char,
7621 +                     0 as *const libc::c_char,
7622 +                     0 as *const libc::c_char,
7623 +                     0 as *const libc::c_char,
7624 +                     0 as *const libc::c_char,
7625 +                 ],
7626 +                 output_names: [
7627 +                     b"tanh\0" as *const u8 as *const libc::c_char,
7628 +                     0 as *const libc::c_char,
7629 +                     0 as *const libc::c_char,
7630 +                     0 as *const libc::c_char,
7631 +                     0 as *const libc::c_char,
7632 +                     0 as *const libc::c_char,
7633 +                     0 as *const libc::c_char,
7634 +                     0 as *const libc::c_char,
7635 +                     0 as *const libc::c_char,
7636 +                     0 as *const libc::c_char,
7637 +                     0 as *const libc::c_char,
7638 +                     0 as *const libc::c_char,
7639 +                     0 as *const libc::c_char,
7640 +                     0 as *const libc::c_char,
7641 +                     0 as *const libc::c_char,
7642 +                     0 as *const libc::c_char,
7643 +                 ],
7644 +                 stream_new: None,
7645 +                 stream_run: None,
7646 +                 stream_free: None,
7647 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:7730:13
     |
7650 | /             let mut init = ti_indicator_info {
7651 | |                 name: b"tema\0" as *const u8 as *const libc::c_char,
7652 | |                 full_name: b"Triple Exponential Moving Average\0" as *const u8
7653 | |                     as *const libc::c_char,
...    |
7728 | |                 stream_free: None,
7729 | |             };
     | |______________- unnecessary `let` binding
7730 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
7650 ~             
7651 ~             ti_indicator_info {
7652 +                 name: b"tema\0" as *const u8 as *const libc::c_char,
7653 +                 full_name: b"Triple Exponential Moving Average\0" as *const u8
7654 +                     as *const libc::c_char,
7655 +                 start: Some(
7656 +                     ti_tema_start
7657 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
7658 +                 ),
7659 +                 indicator: Some(
7660 +                     ti_tema
7661 +                         as unsafe extern "C" fn(
7662 +                             libc::c_int,
7663 +                             *const *const libc::c_double,
7664 +                             *const libc::c_double,
7665 +                             *const *mut libc::c_double,
7666 +                         ) -> libc::c_int,
7667 +                 ),
7668 +                 indicator_ref: None,
7669 +                 type_0: 1 as libc::c_int,
7670 +                 inputs: 1 as libc::c_int,
7671 +                 options: 1 as libc::c_int,
7672 +                 outputs: 1 as libc::c_int,
7673 +                 input_names: [
7674 +                     b"real\0" as *const u8 as *const libc::c_char,
7675 +                     0 as *const libc::c_char,
7676 +                     0 as *const libc::c_char,
7677 +                     0 as *const libc::c_char,
7678 +                     0 as *const libc::c_char,
7679 +                     0 as *const libc::c_char,
7680 +                     0 as *const libc::c_char,
7681 +                     0 as *const libc::c_char,
7682 +                     0 as *const libc::c_char,
7683 +                     0 as *const libc::c_char,
7684 +                     0 as *const libc::c_char,
7685 +                     0 as *const libc::c_char,
7686 +                     0 as *const libc::c_char,
7687 +                     0 as *const libc::c_char,
7688 +                     0 as *const libc::c_char,
7689 +                     0 as *const libc::c_char,
7690 +                 ],
7691 +                 option_names: [
7692 +                     b"period\0" as *const u8 as *const libc::c_char,
7693 +                     0 as *const libc::c_char,
7694 +                     0 as *const libc::c_char,
7695 +                     0 as *const libc::c_char,
7696 +                     0 as *const libc::c_char,
7697 +                     0 as *const libc::c_char,
7698 +                     0 as *const libc::c_char,
7699 +                     0 as *const libc::c_char,
7700 +                     0 as *const libc::c_char,
7701 +                     0 as *const libc::c_char,
7702 +                     0 as *const libc::c_char,
7703 +                     0 as *const libc::c_char,
7704 +                     0 as *const libc::c_char,
7705 +                     0 as *const libc::c_char,
7706 +                     0 as *const libc::c_char,
7707 +                     0 as *const libc::c_char,
7708 +                 ],
7709 +                 output_names: [
7710 +                     b"tema\0" as *const u8 as *const libc::c_char,
7711 +                     0 as *const libc::c_char,
7712 +                     0 as *const libc::c_char,
7713 +                     0 as *const libc::c_char,
7714 +                     0 as *const libc::c_char,
7715 +                     0 as *const libc::c_char,
7716 +                     0 as *const libc::c_char,
7717 +                     0 as *const libc::c_char,
7718 +                     0 as *const libc::c_char,
7719 +                     0 as *const libc::c_char,
7720 +                     0 as *const libc::c_char,
7721 +                     0 as *const libc::c_char,
7722 +                     0 as *const libc::c_char,
7723 +                     0 as *const libc::c_char,
7724 +                     0 as *const libc::c_char,
7725 +                     0 as *const libc::c_char,
7726 +                 ],
7727 +                 stream_new: None,
7728 +                 stream_run: None,
7729 +                 stream_free: None,
7730 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:7813:13
     |
7733 | /             let mut init = ti_indicator_info {
7734 | |                 name: b"todeg\0" as *const u8 as *const libc::c_char,
7735 | |                 full_name: b"Vector Degree Conversion\0" as *const u8
7736 | |                     as *const libc::c_char,
...    |
7811 | |                 stream_free: None,
7812 | |             };
     | |______________- unnecessary `let` binding
7813 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
7733 ~             
7734 ~             ti_indicator_info {
7735 +                 name: b"todeg\0" as *const u8 as *const libc::c_char,
7736 +                 full_name: b"Vector Degree Conversion\0" as *const u8
7737 +                     as *const libc::c_char,
7738 +                 start: Some(
7739 +                     ti_todeg_start
7740 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
7741 +                 ),
7742 +                 indicator: Some(
7743 +                     ti_todeg
7744 +                         as unsafe extern "C" fn(
7745 +                             libc::c_int,
7746 +                             *const *const libc::c_double,
7747 +                             *const libc::c_double,
7748 +                             *const *mut libc::c_double,
7749 +                         ) -> libc::c_int,
7750 +                 ),
7751 +                 indicator_ref: None,
7752 +                 type_0: 4 as libc::c_int,
7753 +                 inputs: 1 as libc::c_int,
7754 +                 options: 0 as libc::c_int,
7755 +                 outputs: 1 as libc::c_int,
7756 +                 input_names: [
7757 +                     b"real\0" as *const u8 as *const libc::c_char,
7758 +                     0 as *const libc::c_char,
7759 +                     0 as *const libc::c_char,
7760 +                     0 as *const libc::c_char,
7761 +                     0 as *const libc::c_char,
7762 +                     0 as *const libc::c_char,
7763 +                     0 as *const libc::c_char,
7764 +                     0 as *const libc::c_char,
7765 +                     0 as *const libc::c_char,
7766 +                     0 as *const libc::c_char,
7767 +                     0 as *const libc::c_char,
7768 +                     0 as *const libc::c_char,
7769 +                     0 as *const libc::c_char,
7770 +                     0 as *const libc::c_char,
7771 +                     0 as *const libc::c_char,
7772 +                     0 as *const libc::c_char,
7773 +                 ],
7774 +                 option_names: [
7775 +                     b"\0" as *const u8 as *const libc::c_char,
7776 +                     0 as *const libc::c_char,
7777 +                     0 as *const libc::c_char,
7778 +                     0 as *const libc::c_char,
7779 +                     0 as *const libc::c_char,
7780 +                     0 as *const libc::c_char,
7781 +                     0 as *const libc::c_char,
7782 +                     0 as *const libc::c_char,
7783 +                     0 as *const libc::c_char,
7784 +                     0 as *const libc::c_char,
7785 +                     0 as *const libc::c_char,
7786 +                     0 as *const libc::c_char,
7787 +                     0 as *const libc::c_char,
7788 +                     0 as *const libc::c_char,
7789 +                     0 as *const libc::c_char,
7790 +                     0 as *const libc::c_char,
7791 +                 ],
7792 +                 output_names: [
7793 +                     b"degrees\0" as *const u8 as *const libc::c_char,
7794 +                     0 as *const libc::c_char,
7795 +                     0 as *const libc::c_char,
7796 +                     0 as *const libc::c_char,
7797 +                     0 as *const libc::c_char,
7798 +                     0 as *const libc::c_char,
7799 +                     0 as *const libc::c_char,
7800 +                     0 as *const libc::c_char,
7801 +                     0 as *const libc::c_char,
7802 +                     0 as *const libc::c_char,
7803 +                     0 as *const libc::c_char,
7804 +                     0 as *const libc::c_char,
7805 +                     0 as *const libc::c_char,
7806 +                     0 as *const libc::c_char,
7807 +                     0 as *const libc::c_char,
7808 +                     0 as *const libc::c_char,
7809 +                 ],
7810 +                 stream_new: None,
7811 +                 stream_run: None,
7812 +                 stream_free: None,
7813 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:7896:13
     |
7816 | /             let mut init = ti_indicator_info {
7817 | |                 name: b"torad\0" as *const u8 as *const libc::c_char,
7818 | |                 full_name: b"Vector Radian Conversion\0" as *const u8
7819 | |                     as *const libc::c_char,
...    |
7894 | |                 stream_free: None,
7895 | |             };
     | |______________- unnecessary `let` binding
7896 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
7816 ~             
7817 ~             ti_indicator_info {
7818 +                 name: b"torad\0" as *const u8 as *const libc::c_char,
7819 +                 full_name: b"Vector Radian Conversion\0" as *const u8
7820 +                     as *const libc::c_char,
7821 +                 start: Some(
7822 +                     ti_torad_start
7823 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
7824 +                 ),
7825 +                 indicator: Some(
7826 +                     ti_torad
7827 +                         as unsafe extern "C" fn(
7828 +                             libc::c_int,
7829 +                             *const *const libc::c_double,
7830 +                             *const libc::c_double,
7831 +                             *const *mut libc::c_double,
7832 +                         ) -> libc::c_int,
7833 +                 ),
7834 +                 indicator_ref: None,
7835 +                 type_0: 4 as libc::c_int,
7836 +                 inputs: 1 as libc::c_int,
7837 +                 options: 0 as libc::c_int,
7838 +                 outputs: 1 as libc::c_int,
7839 +                 input_names: [
7840 +                     b"real\0" as *const u8 as *const libc::c_char,
7841 +                     0 as *const libc::c_char,
7842 +                     0 as *const libc::c_char,
7843 +                     0 as *const libc::c_char,
7844 +                     0 as *const libc::c_char,
7845 +                     0 as *const libc::c_char,
7846 +                     0 as *const libc::c_char,
7847 +                     0 as *const libc::c_char,
7848 +                     0 as *const libc::c_char,
7849 +                     0 as *const libc::c_char,
7850 +                     0 as *const libc::c_char,
7851 +                     0 as *const libc::c_char,
7852 +                     0 as *const libc::c_char,
7853 +                     0 as *const libc::c_char,
7854 +                     0 as *const libc::c_char,
7855 +                     0 as *const libc::c_char,
7856 +                 ],
7857 +                 option_names: [
7858 +                     b"\0" as *const u8 as *const libc::c_char,
7859 +                     0 as *const libc::c_char,
7860 +                     0 as *const libc::c_char,
7861 +                     0 as *const libc::c_char,
7862 +                     0 as *const libc::c_char,
7863 +                     0 as *const libc::c_char,
7864 +                     0 as *const libc::c_char,
7865 +                     0 as *const libc::c_char,
7866 +                     0 as *const libc::c_char,
7867 +                     0 as *const libc::c_char,
7868 +                     0 as *const libc::c_char,
7869 +                     0 as *const libc::c_char,
7870 +                     0 as *const libc::c_char,
7871 +                     0 as *const libc::c_char,
7872 +                     0 as *const libc::c_char,
7873 +                     0 as *const libc::c_char,
7874 +                 ],
7875 +                 output_names: [
7876 +                     b"radians\0" as *const u8 as *const libc::c_char,
7877 +                     0 as *const libc::c_char,
7878 +                     0 as *const libc::c_char,
7879 +                     0 as *const libc::c_char,
7880 +                     0 as *const libc::c_char,
7881 +                     0 as *const libc::c_char,
7882 +                     0 as *const libc::c_char,
7883 +                     0 as *const libc::c_char,
7884 +                     0 as *const libc::c_char,
7885 +                     0 as *const libc::c_char,
7886 +                     0 as *const libc::c_char,
7887 +                     0 as *const libc::c_char,
7888 +                     0 as *const libc::c_char,
7889 +                     0 as *const libc::c_char,
7890 +                     0 as *const libc::c_char,
7891 +                     0 as *const libc::c_char,
7892 +                 ],
7893 +                 stream_new: None,
7894 +                 stream_run: None,
7895 +                 stream_free: None,
7896 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:7978:13
     |
7899 | /             let mut init = ti_indicator_info {
7900 | |                 name: b"tr\0" as *const u8 as *const libc::c_char,
7901 | |                 full_name: b"True Range\0" as *const u8 as *const libc::c_char,
7902 | |                 start: Some(
...    |
7976 | |                 stream_free: None,
7977 | |             };
     | |______________- unnecessary `let` binding
7978 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
7899 ~             
7900 ~             ti_indicator_info {
7901 +                 name: b"tr\0" as *const u8 as *const libc::c_char,
7902 +                 full_name: b"True Range\0" as *const u8 as *const libc::c_char,
7903 +                 start: Some(
7904 +                     ti_tr_start
7905 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
7906 +                 ),
7907 +                 indicator: Some(
7908 +                     ti_tr
7909 +                         as unsafe extern "C" fn(
7910 +                             libc::c_int,
7911 +                             *const *const libc::c_double,
7912 +                             *const libc::c_double,
7913 +                             *const *mut libc::c_double,
7914 +                         ) -> libc::c_int,
7915 +                 ),
7916 +                 indicator_ref: None,
7917 +                 type_0: 2 as libc::c_int,
7918 +                 inputs: 3 as libc::c_int,
7919 +                 options: 0 as libc::c_int,
7920 +                 outputs: 1 as libc::c_int,
7921 +                 input_names: [
7922 +                     b"high\0" as *const u8 as *const libc::c_char,
7923 +                     b"low\0" as *const u8 as *const libc::c_char,
7924 +                     b"close\0" as *const u8 as *const libc::c_char,
7925 +                     0 as *const libc::c_char,
7926 +                     0 as *const libc::c_char,
7927 +                     0 as *const libc::c_char,
7928 +                     0 as *const libc::c_char,
7929 +                     0 as *const libc::c_char,
7930 +                     0 as *const libc::c_char,
7931 +                     0 as *const libc::c_char,
7932 +                     0 as *const libc::c_char,
7933 +                     0 as *const libc::c_char,
7934 +                     0 as *const libc::c_char,
7935 +                     0 as *const libc::c_char,
7936 +                     0 as *const libc::c_char,
7937 +                     0 as *const libc::c_char,
7938 +                 ],
7939 +                 option_names: [
7940 +                     b"\0" as *const u8 as *const libc::c_char,
7941 +                     0 as *const libc::c_char,
7942 +                     0 as *const libc::c_char,
7943 +                     0 as *const libc::c_char,
7944 +                     0 as *const libc::c_char,
7945 +                     0 as *const libc::c_char,
7946 +                     0 as *const libc::c_char,
7947 +                     0 as *const libc::c_char,
7948 +                     0 as *const libc::c_char,
7949 +                     0 as *const libc::c_char,
7950 +                     0 as *const libc::c_char,
7951 +                     0 as *const libc::c_char,
7952 +                     0 as *const libc::c_char,
7953 +                     0 as *const libc::c_char,
7954 +                     0 as *const libc::c_char,
7955 +                     0 as *const libc::c_char,
7956 +                 ],
7957 +                 output_names: [
7958 +                     b"tr\0" as *const u8 as *const libc::c_char,
7959 +                     0 as *const libc::c_char,
7960 +                     0 as *const libc::c_char,
7961 +                     0 as *const libc::c_char,
7962 +                     0 as *const libc::c_char,
7963 +                     0 as *const libc::c_char,
7964 +                     0 as *const libc::c_char,
7965 +                     0 as *const libc::c_char,
7966 +                     0 as *const libc::c_char,
7967 +                     0 as *const libc::c_char,
7968 +                     0 as *const libc::c_char,
7969 +                     0 as *const libc::c_char,
7970 +                     0 as *const libc::c_char,
7971 +                     0 as *const libc::c_char,
7972 +                     0 as *const libc::c_char,
7973 +                     0 as *const libc::c_char,
7974 +                 ],
7975 +                 stream_new: None,
7976 +                 stream_run: None,
7977 +                 stream_free: None,
7978 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:8061:13
     |
7981 | /             let mut init = ti_indicator_info {
7982 | |                 name: b"trima\0" as *const u8 as *const libc::c_char,
7983 | |                 full_name: b"Triangular Moving Average\0" as *const u8
7984 | |                     as *const libc::c_char,
...    |
8059 | |                 stream_free: None,
8060 | |             };
     | |______________- unnecessary `let` binding
8061 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
7981 ~             
7982 ~             ti_indicator_info {
7983 +                 name: b"trima\0" as *const u8 as *const libc::c_char,
7984 +                 full_name: b"Triangular Moving Average\0" as *const u8
7985 +                     as *const libc::c_char,
7986 +                 start: Some(
7987 +                     ti_trima_start
7988 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
7989 +                 ),
7990 +                 indicator: Some(
7991 +                     ti_trima
7992 +                         as unsafe extern "C" fn(
7993 +                             libc::c_int,
7994 +                             *const *const libc::c_double,
7995 +                             *const libc::c_double,
7996 +                             *const *mut libc::c_double,
7997 +                         ) -> libc::c_int,
7998 +                 ),
7999 +                 indicator_ref: None,
8000 +                 type_0: 1 as libc::c_int,
8001 +                 inputs: 1 as libc::c_int,
8002 +                 options: 1 as libc::c_int,
8003 +                 outputs: 1 as libc::c_int,
8004 +                 input_names: [
8005 +                     b"real\0" as *const u8 as *const libc::c_char,
8006 +                     0 as *const libc::c_char,
8007 +                     0 as *const libc::c_char,
8008 +                     0 as *const libc::c_char,
8009 +                     0 as *const libc::c_char,
8010 +                     0 as *const libc::c_char,
8011 +                     0 as *const libc::c_char,
8012 +                     0 as *const libc::c_char,
8013 +                     0 as *const libc::c_char,
8014 +                     0 as *const libc::c_char,
8015 +                     0 as *const libc::c_char,
8016 +                     0 as *const libc::c_char,
8017 +                     0 as *const libc::c_char,
8018 +                     0 as *const libc::c_char,
8019 +                     0 as *const libc::c_char,
8020 +                     0 as *const libc::c_char,
8021 +                 ],
8022 +                 option_names: [
8023 +                     b"period\0" as *const u8 as *const libc::c_char,
8024 +                     0 as *const libc::c_char,
8025 +                     0 as *const libc::c_char,
8026 +                     0 as *const libc::c_char,
8027 +                     0 as *const libc::c_char,
8028 +                     0 as *const libc::c_char,
8029 +                     0 as *const libc::c_char,
8030 +                     0 as *const libc::c_char,
8031 +                     0 as *const libc::c_char,
8032 +                     0 as *const libc::c_char,
8033 +                     0 as *const libc::c_char,
8034 +                     0 as *const libc::c_char,
8035 +                     0 as *const libc::c_char,
8036 +                     0 as *const libc::c_char,
8037 +                     0 as *const libc::c_char,
8038 +                     0 as *const libc::c_char,
8039 +                 ],
8040 +                 output_names: [
8041 +                     b"trima\0" as *const u8 as *const libc::c_char,
8042 +                     0 as *const libc::c_char,
8043 +                     0 as *const libc::c_char,
8044 +                     0 as *const libc::c_char,
8045 +                     0 as *const libc::c_char,
8046 +                     0 as *const libc::c_char,
8047 +                     0 as *const libc::c_char,
8048 +                     0 as *const libc::c_char,
8049 +                     0 as *const libc::c_char,
8050 +                     0 as *const libc::c_char,
8051 +                     0 as *const libc::c_char,
8052 +                     0 as *const libc::c_char,
8053 +                     0 as *const libc::c_char,
8054 +                     0 as *const libc::c_char,
8055 +                     0 as *const libc::c_char,
8056 +                     0 as *const libc::c_char,
8057 +                 ],
8058 +                 stream_new: None,
8059 +                 stream_run: None,
8060 +                 stream_free: None,
8061 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:8143:13
     |
8064 | /             let mut init = ti_indicator_info {
8065 | |                 name: b"trix\0" as *const u8 as *const libc::c_char,
8066 | |                 full_name: b"Trix\0" as *const u8 as *const libc::c_char,
8067 | |                 start: Some(
...    |
8141 | |                 stream_free: None,
8142 | |             };
     | |______________- unnecessary `let` binding
8143 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
8064 ~             
8065 ~             ti_indicator_info {
8066 +                 name: b"trix\0" as *const u8 as *const libc::c_char,
8067 +                 full_name: b"Trix\0" as *const u8 as *const libc::c_char,
8068 +                 start: Some(
8069 +                     ti_trix_start
8070 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
8071 +                 ),
8072 +                 indicator: Some(
8073 +                     ti_trix
8074 +                         as unsafe extern "C" fn(
8075 +                             libc::c_int,
8076 +                             *const *const libc::c_double,
8077 +                             *const libc::c_double,
8078 +                             *const *mut libc::c_double,
8079 +                         ) -> libc::c_int,
8080 +                 ),
8081 +                 indicator_ref: None,
8082 +                 type_0: 2 as libc::c_int,
8083 +                 inputs: 1 as libc::c_int,
8084 +                 options: 1 as libc::c_int,
8085 +                 outputs: 1 as libc::c_int,
8086 +                 input_names: [
8087 +                     b"real\0" as *const u8 as *const libc::c_char,
8088 +                     0 as *const libc::c_char,
8089 +                     0 as *const libc::c_char,
8090 +                     0 as *const libc::c_char,
8091 +                     0 as *const libc::c_char,
8092 +                     0 as *const libc::c_char,
8093 +                     0 as *const libc::c_char,
8094 +                     0 as *const libc::c_char,
8095 +                     0 as *const libc::c_char,
8096 +                     0 as *const libc::c_char,
8097 +                     0 as *const libc::c_char,
8098 +                     0 as *const libc::c_char,
8099 +                     0 as *const libc::c_char,
8100 +                     0 as *const libc::c_char,
8101 +                     0 as *const libc::c_char,
8102 +                     0 as *const libc::c_char,
8103 +                 ],
8104 +                 option_names: [
8105 +                     b"period\0" as *const u8 as *const libc::c_char,
8106 +                     0 as *const libc::c_char,
8107 +                     0 as *const libc::c_char,
8108 +                     0 as *const libc::c_char,
8109 +                     0 as *const libc::c_char,
8110 +                     0 as *const libc::c_char,
8111 +                     0 as *const libc::c_char,
8112 +                     0 as *const libc::c_char,
8113 +                     0 as *const libc::c_char,
8114 +                     0 as *const libc::c_char,
8115 +                     0 as *const libc::c_char,
8116 +                     0 as *const libc::c_char,
8117 +                     0 as *const libc::c_char,
8118 +                     0 as *const libc::c_char,
8119 +                     0 as *const libc::c_char,
8120 +                     0 as *const libc::c_char,
8121 +                 ],
8122 +                 output_names: [
8123 +                     b"trix\0" as *const u8 as *const libc::c_char,
8124 +                     0 as *const libc::c_char,
8125 +                     0 as *const libc::c_char,
8126 +                     0 as *const libc::c_char,
8127 +                     0 as *const libc::c_char,
8128 +                     0 as *const libc::c_char,
8129 +                     0 as *const libc::c_char,
8130 +                     0 as *const libc::c_char,
8131 +                     0 as *const libc::c_char,
8132 +                     0 as *const libc::c_char,
8133 +                     0 as *const libc::c_char,
8134 +                     0 as *const libc::c_char,
8135 +                     0 as *const libc::c_char,
8136 +                     0 as *const libc::c_char,
8137 +                     0 as *const libc::c_char,
8138 +                     0 as *const libc::c_char,
8139 +                 ],
8140 +                 stream_new: None,
8141 +                 stream_run: None,
8142 +                 stream_free: None,
8143 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:8225:13
     |
8146 | /             let mut init = ti_indicator_info {
8147 | |                 name: b"trunc\0" as *const u8 as *const libc::c_char,
8148 | |                 full_name: b"Vector Truncate\0" as *const u8 as *const libc::c_char,
8149 | |                 start: Some(
...    |
8223 | |                 stream_free: None,
8224 | |             };
     | |______________- unnecessary `let` binding
8225 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
8146 ~             
8147 ~             ti_indicator_info {
8148 +                 name: b"trunc\0" as *const u8 as *const libc::c_char,
8149 +                 full_name: b"Vector Truncate\0" as *const u8 as *const libc::c_char,
8150 +                 start: Some(
8151 +                     ti_trunc_start
8152 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
8153 +                 ),
8154 +                 indicator: Some(
8155 +                     ti_trunc
8156 +                         as unsafe extern "C" fn(
8157 +                             libc::c_int,
8158 +                             *const *const libc::c_double,
8159 +                             *const libc::c_double,
8160 +                             *const *mut libc::c_double,
8161 +                         ) -> libc::c_int,
8162 +                 ),
8163 +                 indicator_ref: None,
8164 +                 type_0: 4 as libc::c_int,
8165 +                 inputs: 1 as libc::c_int,
8166 +                 options: 0 as libc::c_int,
8167 +                 outputs: 1 as libc::c_int,
8168 +                 input_names: [
8169 +                     b"real\0" as *const u8 as *const libc::c_char,
8170 +                     0 as *const libc::c_char,
8171 +                     0 as *const libc::c_char,
8172 +                     0 as *const libc::c_char,
8173 +                     0 as *const libc::c_char,
8174 +                     0 as *const libc::c_char,
8175 +                     0 as *const libc::c_char,
8176 +                     0 as *const libc::c_char,
8177 +                     0 as *const libc::c_char,
8178 +                     0 as *const libc::c_char,
8179 +                     0 as *const libc::c_char,
8180 +                     0 as *const libc::c_char,
8181 +                     0 as *const libc::c_char,
8182 +                     0 as *const libc::c_char,
8183 +                     0 as *const libc::c_char,
8184 +                     0 as *const libc::c_char,
8185 +                 ],
8186 +                 option_names: [
8187 +                     b"\0" as *const u8 as *const libc::c_char,
8188 +                     0 as *const libc::c_char,
8189 +                     0 as *const libc::c_char,
8190 +                     0 as *const libc::c_char,
8191 +                     0 as *const libc::c_char,
8192 +                     0 as *const libc::c_char,
8193 +                     0 as *const libc::c_char,
8194 +                     0 as *const libc::c_char,
8195 +                     0 as *const libc::c_char,
8196 +                     0 as *const libc::c_char,
8197 +                     0 as *const libc::c_char,
8198 +                     0 as *const libc::c_char,
8199 +                     0 as *const libc::c_char,
8200 +                     0 as *const libc::c_char,
8201 +                     0 as *const libc::c_char,
8202 +                     0 as *const libc::c_char,
8203 +                 ],
8204 +                 output_names: [
8205 +                     b"trunc\0" as *const u8 as *const libc::c_char,
8206 +                     0 as *const libc::c_char,
8207 +                     0 as *const libc::c_char,
8208 +                     0 as *const libc::c_char,
8209 +                     0 as *const libc::c_char,
8210 +                     0 as *const libc::c_char,
8211 +                     0 as *const libc::c_char,
8212 +                     0 as *const libc::c_char,
8213 +                     0 as *const libc::c_char,
8214 +                     0 as *const libc::c_char,
8215 +                     0 as *const libc::c_char,
8216 +                     0 as *const libc::c_char,
8217 +                     0 as *const libc::c_char,
8218 +                     0 as *const libc::c_char,
8219 +                     0 as *const libc::c_char,
8220 +                     0 as *const libc::c_char,
8221 +                 ],
8222 +                 stream_new: None,
8223 +                 stream_run: None,
8224 +                 stream_free: None,
8225 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:8307:13
     |
8228 | /             let mut init = ti_indicator_info {
8229 | |                 name: b"tsf\0" as *const u8 as *const libc::c_char,
8230 | |                 full_name: b"Time Series Forecast\0" as *const u8 as *const libc::c_char,
8231 | |                 start: Some(
...    |
8305 | |                 stream_free: None,
8306 | |             };
     | |______________- unnecessary `let` binding
8307 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
8228 ~             
8229 ~             ti_indicator_info {
8230 +                 name: b"tsf\0" as *const u8 as *const libc::c_char,
8231 +                 full_name: b"Time Series Forecast\0" as *const u8 as *const libc::c_char,
8232 +                 start: Some(
8233 +                     ti_tsf_start
8234 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
8235 +                 ),
8236 +                 indicator: Some(
8237 +                     ti_tsf
8238 +                         as unsafe extern "C" fn(
8239 +                             libc::c_int,
8240 +                             *const *const libc::c_double,
8241 +                             *const libc::c_double,
8242 +                             *const *mut libc::c_double,
8243 +                         ) -> libc::c_int,
8244 +                 ),
8245 +                 indicator_ref: None,
8246 +                 type_0: 1 as libc::c_int,
8247 +                 inputs: 1 as libc::c_int,
8248 +                 options: 1 as libc::c_int,
8249 +                 outputs: 1 as libc::c_int,
8250 +                 input_names: [
8251 +                     b"real\0" as *const u8 as *const libc::c_char,
8252 +                     0 as *const libc::c_char,
8253 +                     0 as *const libc::c_char,
8254 +                     0 as *const libc::c_char,
8255 +                     0 as *const libc::c_char,
8256 +                     0 as *const libc::c_char,
8257 +                     0 as *const libc::c_char,
8258 +                     0 as *const libc::c_char,
8259 +                     0 as *const libc::c_char,
8260 +                     0 as *const libc::c_char,
8261 +                     0 as *const libc::c_char,
8262 +                     0 as *const libc::c_char,
8263 +                     0 as *const libc::c_char,
8264 +                     0 as *const libc::c_char,
8265 +                     0 as *const libc::c_char,
8266 +                     0 as *const libc::c_char,
8267 +                 ],
8268 +                 option_names: [
8269 +                     b"period\0" as *const u8 as *const libc::c_char,
8270 +                     0 as *const libc::c_char,
8271 +                     0 as *const libc::c_char,
8272 +                     0 as *const libc::c_char,
8273 +                     0 as *const libc::c_char,
8274 +                     0 as *const libc::c_char,
8275 +                     0 as *const libc::c_char,
8276 +                     0 as *const libc::c_char,
8277 +                     0 as *const libc::c_char,
8278 +                     0 as *const libc::c_char,
8279 +                     0 as *const libc::c_char,
8280 +                     0 as *const libc::c_char,
8281 +                     0 as *const libc::c_char,
8282 +                     0 as *const libc::c_char,
8283 +                     0 as *const libc::c_char,
8284 +                     0 as *const libc::c_char,
8285 +                 ],
8286 +                 output_names: [
8287 +                     b"tsf\0" as *const u8 as *const libc::c_char,
8288 +                     0 as *const libc::c_char,
8289 +                     0 as *const libc::c_char,
8290 +                     0 as *const libc::c_char,
8291 +                     0 as *const libc::c_char,
8292 +                     0 as *const libc::c_char,
8293 +                     0 as *const libc::c_char,
8294 +                     0 as *const libc::c_char,
8295 +                     0 as *const libc::c_char,
8296 +                     0 as *const libc::c_char,
8297 +                     0 as *const libc::c_char,
8298 +                     0 as *const libc::c_char,
8299 +                     0 as *const libc::c_char,
8300 +                     0 as *const libc::c_char,
8301 +                     0 as *const libc::c_char,
8302 +                     0 as *const libc::c_char,
8303 +                 ],
8304 +                 stream_new: None,
8305 +                 stream_run: None,
8306 +                 stream_free: None,
8307 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:8389:13
     |
8310 | /             let mut init = ti_indicator_info {
8311 | |                 name: b"typprice\0" as *const u8 as *const libc::c_char,
8312 | |                 full_name: b"Typical Price\0" as *const u8 as *const libc::c_char,
8313 | |                 start: Some(
...    |
8387 | |                 stream_free: None,
8388 | |             };
     | |______________- unnecessary `let` binding
8389 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
8310 ~             
8311 ~             ti_indicator_info {
8312 +                 name: b"typprice\0" as *const u8 as *const libc::c_char,
8313 +                 full_name: b"Typical Price\0" as *const u8 as *const libc::c_char,
8314 +                 start: Some(
8315 +                     ti_typprice_start
8316 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
8317 +                 ),
8318 +                 indicator: Some(
8319 +                     ti_typprice
8320 +                         as unsafe extern "C" fn(
8321 +                             libc::c_int,
8322 +                             *const *const libc::c_double,
8323 +                             *const libc::c_double,
8324 +                             *const *mut libc::c_double,
8325 +                         ) -> libc::c_int,
8326 +                 ),
8327 +                 indicator_ref: None,
8328 +                 type_0: 1 as libc::c_int,
8329 +                 inputs: 3 as libc::c_int,
8330 +                 options: 0 as libc::c_int,
8331 +                 outputs: 1 as libc::c_int,
8332 +                 input_names: [
8333 +                     b"high\0" as *const u8 as *const libc::c_char,
8334 +                     b"low\0" as *const u8 as *const libc::c_char,
8335 +                     b"close\0" as *const u8 as *const libc::c_char,
8336 +                     0 as *const libc::c_char,
8337 +                     0 as *const libc::c_char,
8338 +                     0 as *const libc::c_char,
8339 +                     0 as *const libc::c_char,
8340 +                     0 as *const libc::c_char,
8341 +                     0 as *const libc::c_char,
8342 +                     0 as *const libc::c_char,
8343 +                     0 as *const libc::c_char,
8344 +                     0 as *const libc::c_char,
8345 +                     0 as *const libc::c_char,
8346 +                     0 as *const libc::c_char,
8347 +                     0 as *const libc::c_char,
8348 +                     0 as *const libc::c_char,
8349 +                 ],
8350 +                 option_names: [
8351 +                     b"\0" as *const u8 as *const libc::c_char,
8352 +                     0 as *const libc::c_char,
8353 +                     0 as *const libc::c_char,
8354 +                     0 as *const libc::c_char,
8355 +                     0 as *const libc::c_char,
8356 +                     0 as *const libc::c_char,
8357 +                     0 as *const libc::c_char,
8358 +                     0 as *const libc::c_char,
8359 +                     0 as *const libc::c_char,
8360 +                     0 as *const libc::c_char,
8361 +                     0 as *const libc::c_char,
8362 +                     0 as *const libc::c_char,
8363 +                     0 as *const libc::c_char,
8364 +                     0 as *const libc::c_char,
8365 +                     0 as *const libc::c_char,
8366 +                     0 as *const libc::c_char,
8367 +                 ],
8368 +                 output_names: [
8369 +                     b"typprice\0" as *const u8 as *const libc::c_char,
8370 +                     0 as *const libc::c_char,
8371 +                     0 as *const libc::c_char,
8372 +                     0 as *const libc::c_char,
8373 +                     0 as *const libc::c_char,
8374 +                     0 as *const libc::c_char,
8375 +                     0 as *const libc::c_char,
8376 +                     0 as *const libc::c_char,
8377 +                     0 as *const libc::c_char,
8378 +                     0 as *const libc::c_char,
8379 +                     0 as *const libc::c_char,
8380 +                     0 as *const libc::c_char,
8381 +                     0 as *const libc::c_char,
8382 +                     0 as *const libc::c_char,
8383 +                     0 as *const libc::c_char,
8384 +                     0 as *const libc::c_char,
8385 +                 ],
8386 +                 stream_new: None,
8387 +                 stream_run: None,
8388 +                 stream_free: None,
8389 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:8471:13
     |
8392 | /             let mut init = ti_indicator_info {
8393 | |                 name: b"ultosc\0" as *const u8 as *const libc::c_char,
8394 | |                 full_name: b"Ultimate Oscillator\0" as *const u8 as *const libc::c_char,
8395 | |                 start: Some(
...    |
8469 | |                 stream_free: None,
8470 | |             };
     | |______________- unnecessary `let` binding
8471 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
8392 ~             
8393 ~             ti_indicator_info {
8394 +                 name: b"ultosc\0" as *const u8 as *const libc::c_char,
8395 +                 full_name: b"Ultimate Oscillator\0" as *const u8 as *const libc::c_char,
8396 +                 start: Some(
8397 +                     ti_ultosc_start
8398 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
8399 +                 ),
8400 +                 indicator: Some(
8401 +                     ti_ultosc
8402 +                         as unsafe extern "C" fn(
8403 +                             libc::c_int,
8404 +                             *const *const libc::c_double,
8405 +                             *const libc::c_double,
8406 +                             *const *mut libc::c_double,
8407 +                         ) -> libc::c_int,
8408 +                 ),
8409 +                 indicator_ref: None,
8410 +                 type_0: 2 as libc::c_int,
8411 +                 inputs: 3 as libc::c_int,
8412 +                 options: 3 as libc::c_int,
8413 +                 outputs: 1 as libc::c_int,
8414 +                 input_names: [
8415 +                     b"high\0" as *const u8 as *const libc::c_char,
8416 +                     b"low\0" as *const u8 as *const libc::c_char,
8417 +                     b"close\0" as *const u8 as *const libc::c_char,
8418 +                     0 as *const libc::c_char,
8419 +                     0 as *const libc::c_char,
8420 +                     0 as *const libc::c_char,
8421 +                     0 as *const libc::c_char,
8422 +                     0 as *const libc::c_char,
8423 +                     0 as *const libc::c_char,
8424 +                     0 as *const libc::c_char,
8425 +                     0 as *const libc::c_char,
8426 +                     0 as *const libc::c_char,
8427 +                     0 as *const libc::c_char,
8428 +                     0 as *const libc::c_char,
8429 +                     0 as *const libc::c_char,
8430 +                     0 as *const libc::c_char,
8431 +                 ],
8432 +                 option_names: [
8433 +                     b"short_period\0" as *const u8 as *const libc::c_char,
8434 +                     b"medium_period\0" as *const u8 as *const libc::c_char,
8435 +                     b"long_period\0" as *const u8 as *const libc::c_char,
8436 +                     0 as *const libc::c_char,
8437 +                     0 as *const libc::c_char,
8438 +                     0 as *const libc::c_char,
8439 +                     0 as *const libc::c_char,
8440 +                     0 as *const libc::c_char,
8441 +                     0 as *const libc::c_char,
8442 +                     0 as *const libc::c_char,
8443 +                     0 as *const libc::c_char,
8444 +                     0 as *const libc::c_char,
8445 +                     0 as *const libc::c_char,
8446 +                     0 as *const libc::c_char,
8447 +                     0 as *const libc::c_char,
8448 +                     0 as *const libc::c_char,
8449 +                 ],
8450 +                 output_names: [
8451 +                     b"ultosc\0" as *const u8 as *const libc::c_char,
8452 +                     0 as *const libc::c_char,
8453 +                     0 as *const libc::c_char,
8454 +                     0 as *const libc::c_char,
8455 +                     0 as *const libc::c_char,
8456 +                     0 as *const libc::c_char,
8457 +                     0 as *const libc::c_char,
8458 +                     0 as *const libc::c_char,
8459 +                     0 as *const libc::c_char,
8460 +                     0 as *const libc::c_char,
8461 +                     0 as *const libc::c_char,
8462 +                     0 as *const libc::c_char,
8463 +                     0 as *const libc::c_char,
8464 +                     0 as *const libc::c_char,
8465 +                     0 as *const libc::c_char,
8466 +                     0 as *const libc::c_char,
8467 +                 ],
8468 +                 stream_new: None,
8469 +                 stream_run: None,
8470 +                 stream_free: None,
8471 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:8553:13
     |
8474 | /             let mut init = ti_indicator_info {
8475 | |                 name: b"var\0" as *const u8 as *const libc::c_char,
8476 | |                 full_name: b"Variance Over Period\0" as *const u8 as *const libc::c_char,
8477 | |                 start: Some(
...    |
8551 | |                 stream_free: None,
8552 | |             };
     | |______________- unnecessary `let` binding
8553 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
8474 ~             
8475 ~             ti_indicator_info {
8476 +                 name: b"var\0" as *const u8 as *const libc::c_char,
8477 +                 full_name: b"Variance Over Period\0" as *const u8 as *const libc::c_char,
8478 +                 start: Some(
8479 +                     ti_var_start
8480 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
8481 +                 ),
8482 +                 indicator: Some(
8483 +                     ti_var
8484 +                         as unsafe extern "C" fn(
8485 +                             libc::c_int,
8486 +                             *const *const libc::c_double,
8487 +                             *const libc::c_double,
8488 +                             *const *mut libc::c_double,
8489 +                         ) -> libc::c_int,
8490 +                 ),
8491 +                 indicator_ref: None,
8492 +                 type_0: 3 as libc::c_int,
8493 +                 inputs: 1 as libc::c_int,
8494 +                 options: 1 as libc::c_int,
8495 +                 outputs: 1 as libc::c_int,
8496 +                 input_names: [
8497 +                     b"real\0" as *const u8 as *const libc::c_char,
8498 +                     0 as *const libc::c_char,
8499 +                     0 as *const libc::c_char,
8500 +                     0 as *const libc::c_char,
8501 +                     0 as *const libc::c_char,
8502 +                     0 as *const libc::c_char,
8503 +                     0 as *const libc::c_char,
8504 +                     0 as *const libc::c_char,
8505 +                     0 as *const libc::c_char,
8506 +                     0 as *const libc::c_char,
8507 +                     0 as *const libc::c_char,
8508 +                     0 as *const libc::c_char,
8509 +                     0 as *const libc::c_char,
8510 +                     0 as *const libc::c_char,
8511 +                     0 as *const libc::c_char,
8512 +                     0 as *const libc::c_char,
8513 +                 ],
8514 +                 option_names: [
8515 +                     b"period\0" as *const u8 as *const libc::c_char,
8516 +                     0 as *const libc::c_char,
8517 +                     0 as *const libc::c_char,
8518 +                     0 as *const libc::c_char,
8519 +                     0 as *const libc::c_char,
8520 +                     0 as *const libc::c_char,
8521 +                     0 as *const libc::c_char,
8522 +                     0 as *const libc::c_char,
8523 +                     0 as *const libc::c_char,
8524 +                     0 as *const libc::c_char,
8525 +                     0 as *const libc::c_char,
8526 +                     0 as *const libc::c_char,
8527 +                     0 as *const libc::c_char,
8528 +                     0 as *const libc::c_char,
8529 +                     0 as *const libc::c_char,
8530 +                     0 as *const libc::c_char,
8531 +                 ],
8532 +                 output_names: [
8533 +                     b"var\0" as *const u8 as *const libc::c_char,
8534 +                     0 as *const libc::c_char,
8535 +                     0 as *const libc::c_char,
8536 +                     0 as *const libc::c_char,
8537 +                     0 as *const libc::c_char,
8538 +                     0 as *const libc::c_char,
8539 +                     0 as *const libc::c_char,
8540 +                     0 as *const libc::c_char,
8541 +                     0 as *const libc::c_char,
8542 +                     0 as *const libc::c_char,
8543 +                     0 as *const libc::c_char,
8544 +                     0 as *const libc::c_char,
8545 +                     0 as *const libc::c_char,
8546 +                     0 as *const libc::c_char,
8547 +                     0 as *const libc::c_char,
8548 +                     0 as *const libc::c_char,
8549 +                 ],
8550 +                 stream_new: None,
8551 +                 stream_run: None,
8552 +                 stream_free: None,
8553 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:8636:13
     |
8556 | /             let mut init = ti_indicator_info {
8557 | |                 name: b"vhf\0" as *const u8 as *const libc::c_char,
8558 | |                 full_name: b"Vertical Horizontal Filter\0" as *const u8
8559 | |                     as *const libc::c_char,
...    |
8634 | |                 stream_free: None,
8635 | |             };
     | |______________- unnecessary `let` binding
8636 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
8556 ~             
8557 ~             ti_indicator_info {
8558 +                 name: b"vhf\0" as *const u8 as *const libc::c_char,
8559 +                 full_name: b"Vertical Horizontal Filter\0" as *const u8
8560 +                     as *const libc::c_char,
8561 +                 start: Some(
8562 +                     ti_vhf_start
8563 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
8564 +                 ),
8565 +                 indicator: Some(
8566 +                     ti_vhf
8567 +                         as unsafe extern "C" fn(
8568 +                             libc::c_int,
8569 +                             *const *const libc::c_double,
8570 +                             *const libc::c_double,
8571 +                             *const *mut libc::c_double,
8572 +                         ) -> libc::c_int,
8573 +                 ),
8574 +                 indicator_ref: None,
8575 +                 type_0: 2 as libc::c_int,
8576 +                 inputs: 1 as libc::c_int,
8577 +                 options: 1 as libc::c_int,
8578 +                 outputs: 1 as libc::c_int,
8579 +                 input_names: [
8580 +                     b"real\0" as *const u8 as *const libc::c_char,
8581 +                     0 as *const libc::c_char,
8582 +                     0 as *const libc::c_char,
8583 +                     0 as *const libc::c_char,
8584 +                     0 as *const libc::c_char,
8585 +                     0 as *const libc::c_char,
8586 +                     0 as *const libc::c_char,
8587 +                     0 as *const libc::c_char,
8588 +                     0 as *const libc::c_char,
8589 +                     0 as *const libc::c_char,
8590 +                     0 as *const libc::c_char,
8591 +                     0 as *const libc::c_char,
8592 +                     0 as *const libc::c_char,
8593 +                     0 as *const libc::c_char,
8594 +                     0 as *const libc::c_char,
8595 +                     0 as *const libc::c_char,
8596 +                 ],
8597 +                 option_names: [
8598 +                     b"period\0" as *const u8 as *const libc::c_char,
8599 +                     0 as *const libc::c_char,
8600 +                     0 as *const libc::c_char,
8601 +                     0 as *const libc::c_char,
8602 +                     0 as *const libc::c_char,
8603 +                     0 as *const libc::c_char,
8604 +                     0 as *const libc::c_char,
8605 +                     0 as *const libc::c_char,
8606 +                     0 as *const libc::c_char,
8607 +                     0 as *const libc::c_char,
8608 +                     0 as *const libc::c_char,
8609 +                     0 as *const libc::c_char,
8610 +                     0 as *const libc::c_char,
8611 +                     0 as *const libc::c_char,
8612 +                     0 as *const libc::c_char,
8613 +                     0 as *const libc::c_char,
8614 +                 ],
8615 +                 output_names: [
8616 +                     b"vhf\0" as *const u8 as *const libc::c_char,
8617 +                     0 as *const libc::c_char,
8618 +                     0 as *const libc::c_char,
8619 +                     0 as *const libc::c_char,
8620 +                     0 as *const libc::c_char,
8621 +                     0 as *const libc::c_char,
8622 +                     0 as *const libc::c_char,
8623 +                     0 as *const libc::c_char,
8624 +                     0 as *const libc::c_char,
8625 +                     0 as *const libc::c_char,
8626 +                     0 as *const libc::c_char,
8627 +                     0 as *const libc::c_char,
8628 +                     0 as *const libc::c_char,
8629 +                     0 as *const libc::c_char,
8630 +                     0 as *const libc::c_char,
8631 +                     0 as *const libc::c_char,
8632 +                 ],
8633 +                 stream_new: None,
8634 +                 stream_run: None,
8635 +                 stream_free: None,
8636 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:8719:13
     |
8639 | /             let mut init = ti_indicator_info {
8640 | |                 name: b"vidya\0" as *const u8 as *const libc::c_char,
8641 | |                 full_name: b"Variable Index Dynamic Average\0" as *const u8
8642 | |                     as *const libc::c_char,
...    |
8717 | |                 stream_free: None,
8718 | |             };
     | |______________- unnecessary `let` binding
8719 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
8639 ~             
8640 ~             ti_indicator_info {
8641 +                 name: b"vidya\0" as *const u8 as *const libc::c_char,
8642 +                 full_name: b"Variable Index Dynamic Average\0" as *const u8
8643 +                     as *const libc::c_char,
8644 +                 start: Some(
8645 +                     ti_vidya_start
8646 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
8647 +                 ),
8648 +                 indicator: Some(
8649 +                     ti_vidya
8650 +                         as unsafe extern "C" fn(
8651 +                             libc::c_int,
8652 +                             *const *const libc::c_double,
8653 +                             *const libc::c_double,
8654 +                             *const *mut libc::c_double,
8655 +                         ) -> libc::c_int,
8656 +                 ),
8657 +                 indicator_ref: None,
8658 +                 type_0: 1 as libc::c_int,
8659 +                 inputs: 1 as libc::c_int,
8660 +                 options: 3 as libc::c_int,
8661 +                 outputs: 1 as libc::c_int,
8662 +                 input_names: [
8663 +                     b"real\0" as *const u8 as *const libc::c_char,
8664 +                     0 as *const libc::c_char,
8665 +                     0 as *const libc::c_char,
8666 +                     0 as *const libc::c_char,
8667 +                     0 as *const libc::c_char,
8668 +                     0 as *const libc::c_char,
8669 +                     0 as *const libc::c_char,
8670 +                     0 as *const libc::c_char,
8671 +                     0 as *const libc::c_char,
8672 +                     0 as *const libc::c_char,
8673 +                     0 as *const libc::c_char,
8674 +                     0 as *const libc::c_char,
8675 +                     0 as *const libc::c_char,
8676 +                     0 as *const libc::c_char,
8677 +                     0 as *const libc::c_char,
8678 +                     0 as *const libc::c_char,
8679 +                 ],
8680 +                 option_names: [
8681 +                     b"short_period\0" as *const u8 as *const libc::c_char,
8682 +                     b"long_period\0" as *const u8 as *const libc::c_char,
8683 +                     b"alpha\0" as *const u8 as *const libc::c_char,
8684 +                     0 as *const libc::c_char,
8685 +                     0 as *const libc::c_char,
8686 +                     0 as *const libc::c_char,
8687 +                     0 as *const libc::c_char,
8688 +                     0 as *const libc::c_char,
8689 +                     0 as *const libc::c_char,
8690 +                     0 as *const libc::c_char,
8691 +                     0 as *const libc::c_char,
8692 +                     0 as *const libc::c_char,
8693 +                     0 as *const libc::c_char,
8694 +                     0 as *const libc::c_char,
8695 +                     0 as *const libc::c_char,
8696 +                     0 as *const libc::c_char,
8697 +                 ],
8698 +                 output_names: [
8699 +                     b"vidya\0" as *const u8 as *const libc::c_char,
8700 +                     0 as *const libc::c_char,
8701 +                     0 as *const libc::c_char,
8702 +                     0 as *const libc::c_char,
8703 +                     0 as *const libc::c_char,
8704 +                     0 as *const libc::c_char,
8705 +                     0 as *const libc::c_char,
8706 +                     0 as *const libc::c_char,
8707 +                     0 as *const libc::c_char,
8708 +                     0 as *const libc::c_char,
8709 +                     0 as *const libc::c_char,
8710 +                     0 as *const libc::c_char,
8711 +                     0 as *const libc::c_char,
8712 +                     0 as *const libc::c_char,
8713 +                     0 as *const libc::c_char,
8714 +                     0 as *const libc::c_char,
8715 +                 ],
8716 +                 stream_new: None,
8717 +                 stream_run: None,
8718 +                 stream_free: None,
8719 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:8802:13
     |
8722 | /             let mut init = ti_indicator_info {
8723 | |                 name: b"volatility\0" as *const u8 as *const libc::c_char,
8724 | |                 full_name: b"Annualized Historical Volatility\0" as *const u8
8725 | |                     as *const libc::c_char,
...    |
8800 | |                 stream_free: None,
8801 | |             };
     | |______________- unnecessary `let` binding
8802 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
8722 ~             
8723 ~             ti_indicator_info {
8724 +                 name: b"volatility\0" as *const u8 as *const libc::c_char,
8725 +                 full_name: b"Annualized Historical Volatility\0" as *const u8
8726 +                     as *const libc::c_char,
8727 +                 start: Some(
8728 +                     ti_volatility_start
8729 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
8730 +                 ),
8731 +                 indicator: Some(
8732 +                     ti_volatility
8733 +                         as unsafe extern "C" fn(
8734 +                             libc::c_int,
8735 +                             *const *const libc::c_double,
8736 +                             *const libc::c_double,
8737 +                             *const *mut libc::c_double,
8738 +                         ) -> libc::c_int,
8739 +                 ),
8740 +                 indicator_ref: None,
8741 +                 type_0: 2 as libc::c_int,
8742 +                 inputs: 1 as libc::c_int,
8743 +                 options: 1 as libc::c_int,
8744 +                 outputs: 1 as libc::c_int,
8745 +                 input_names: [
8746 +                     b"real\0" as *const u8 as *const libc::c_char,
8747 +                     0 as *const libc::c_char,
8748 +                     0 as *const libc::c_char,
8749 +                     0 as *const libc::c_char,
8750 +                     0 as *const libc::c_char,
8751 +                     0 as *const libc::c_char,
8752 +                     0 as *const libc::c_char,
8753 +                     0 as *const libc::c_char,
8754 +                     0 as *const libc::c_char,
8755 +                     0 as *const libc::c_char,
8756 +                     0 as *const libc::c_char,
8757 +                     0 as *const libc::c_char,
8758 +                     0 as *const libc::c_char,
8759 +                     0 as *const libc::c_char,
8760 +                     0 as *const libc::c_char,
8761 +                     0 as *const libc::c_char,
8762 +                 ],
8763 +                 option_names: [
8764 +                     b"period\0" as *const u8 as *const libc::c_char,
8765 +                     0 as *const libc::c_char,
8766 +                     0 as *const libc::c_char,
8767 +                     0 as *const libc::c_char,
8768 +                     0 as *const libc::c_char,
8769 +                     0 as *const libc::c_char,
8770 +                     0 as *const libc::c_char,
8771 +                     0 as *const libc::c_char,
8772 +                     0 as *const libc::c_char,
8773 +                     0 as *const libc::c_char,
8774 +                     0 as *const libc::c_char,
8775 +                     0 as *const libc::c_char,
8776 +                     0 as *const libc::c_char,
8777 +                     0 as *const libc::c_char,
8778 +                     0 as *const libc::c_char,
8779 +                     0 as *const libc::c_char,
8780 +                 ],
8781 +                 output_names: [
8782 +                     b"volatility\0" as *const u8 as *const libc::c_char,
8783 +                     0 as *const libc::c_char,
8784 +                     0 as *const libc::c_char,
8785 +                     0 as *const libc::c_char,
8786 +                     0 as *const libc::c_char,
8787 +                     0 as *const libc::c_char,
8788 +                     0 as *const libc::c_char,
8789 +                     0 as *const libc::c_char,
8790 +                     0 as *const libc::c_char,
8791 +                     0 as *const libc::c_char,
8792 +                     0 as *const libc::c_char,
8793 +                     0 as *const libc::c_char,
8794 +                     0 as *const libc::c_char,
8795 +                     0 as *const libc::c_char,
8796 +                     0 as *const libc::c_char,
8797 +                     0 as *const libc::c_char,
8798 +                 ],
8799 +                 stream_new: None,
8800 +                 stream_run: None,
8801 +                 stream_free: None,
8802 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:8884:13
     |
8805 | /             let mut init = ti_indicator_info {
8806 | |                 name: b"vosc\0" as *const u8 as *const libc::c_char,
8807 | |                 full_name: b"Volume Oscillator\0" as *const u8 as *const libc::c_char,
8808 | |                 start: Some(
...    |
8882 | |                 stream_free: None,
8883 | |             };
     | |______________- unnecessary `let` binding
8884 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
8805 ~             
8806 ~             ti_indicator_info {
8807 +                 name: b"vosc\0" as *const u8 as *const libc::c_char,
8808 +                 full_name: b"Volume Oscillator\0" as *const u8 as *const libc::c_char,
8809 +                 start: Some(
8810 +                     ti_vosc_start
8811 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
8812 +                 ),
8813 +                 indicator: Some(
8814 +                     ti_vosc
8815 +                         as unsafe extern "C" fn(
8816 +                             libc::c_int,
8817 +                             *const *const libc::c_double,
8818 +                             *const libc::c_double,
8819 +                             *const *mut libc::c_double,
8820 +                         ) -> libc::c_int,
8821 +                 ),
8822 +                 indicator_ref: None,
8823 +                 type_0: 2 as libc::c_int,
8824 +                 inputs: 1 as libc::c_int,
8825 +                 options: 2 as libc::c_int,
8826 +                 outputs: 1 as libc::c_int,
8827 +                 input_names: [
8828 +                     b"volume\0" as *const u8 as *const libc::c_char,
8829 +                     0 as *const libc::c_char,
8830 +                     0 as *const libc::c_char,
8831 +                     0 as *const libc::c_char,
8832 +                     0 as *const libc::c_char,
8833 +                     0 as *const libc::c_char,
8834 +                     0 as *const libc::c_char,
8835 +                     0 as *const libc::c_char,
8836 +                     0 as *const libc::c_char,
8837 +                     0 as *const libc::c_char,
8838 +                     0 as *const libc::c_char,
8839 +                     0 as *const libc::c_char,
8840 +                     0 as *const libc::c_char,
8841 +                     0 as *const libc::c_char,
8842 +                     0 as *const libc::c_char,
8843 +                     0 as *const libc::c_char,
8844 +                 ],
8845 +                 option_names: [
8846 +                     b"short_period\0" as *const u8 as *const libc::c_char,
8847 +                     b"long_period\0" as *const u8 as *const libc::c_char,
8848 +                     0 as *const libc::c_char,
8849 +                     0 as *const libc::c_char,
8850 +                     0 as *const libc::c_char,
8851 +                     0 as *const libc::c_char,
8852 +                     0 as *const libc::c_char,
8853 +                     0 as *const libc::c_char,
8854 +                     0 as *const libc::c_char,
8855 +                     0 as *const libc::c_char,
8856 +                     0 as *const libc::c_char,
8857 +                     0 as *const libc::c_char,
8858 +                     0 as *const libc::c_char,
8859 +                     0 as *const libc::c_char,
8860 +                     0 as *const libc::c_char,
8861 +                     0 as *const libc::c_char,
8862 +                 ],
8863 +                 output_names: [
8864 +                     b"vosc\0" as *const u8 as *const libc::c_char,
8865 +                     0 as *const libc::c_char,
8866 +                     0 as *const libc::c_char,
8867 +                     0 as *const libc::c_char,
8868 +                     0 as *const libc::c_char,
8869 +                     0 as *const libc::c_char,
8870 +                     0 as *const libc::c_char,
8871 +                     0 as *const libc::c_char,
8872 +                     0 as *const libc::c_char,
8873 +                     0 as *const libc::c_char,
8874 +                     0 as *const libc::c_char,
8875 +                     0 as *const libc::c_char,
8876 +                     0 as *const libc::c_char,
8877 +                     0 as *const libc::c_char,
8878 +                     0 as *const libc::c_char,
8879 +                     0 as *const libc::c_char,
8880 +                 ],
8881 +                 stream_new: None,
8882 +                 stream_run: None,
8883 +                 stream_free: None,
8884 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:8967:13
     |
8887 | /             let mut init = ti_indicator_info {
8888 | |                 name: b"vwma\0" as *const u8 as *const libc::c_char,
8889 | |                 full_name: b"Volume Weighted Moving Average\0" as *const u8
8890 | |                     as *const libc::c_char,
...    |
8965 | |                 stream_free: None,
8966 | |             };
     | |______________- unnecessary `let` binding
8967 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
8887 ~             
8888 ~             ti_indicator_info {
8889 +                 name: b"vwma\0" as *const u8 as *const libc::c_char,
8890 +                 full_name: b"Volume Weighted Moving Average\0" as *const u8
8891 +                     as *const libc::c_char,
8892 +                 start: Some(
8893 +                     ti_vwma_start
8894 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
8895 +                 ),
8896 +                 indicator: Some(
8897 +                     ti_vwma
8898 +                         as unsafe extern "C" fn(
8899 +                             libc::c_int,
8900 +                             *const *const libc::c_double,
8901 +                             *const libc::c_double,
8902 +                             *const *mut libc::c_double,
8903 +                         ) -> libc::c_int,
8904 +                 ),
8905 +                 indicator_ref: None,
8906 +                 type_0: 1 as libc::c_int,
8907 +                 inputs: 2 as libc::c_int,
8908 +                 options: 1 as libc::c_int,
8909 +                 outputs: 1 as libc::c_int,
8910 +                 input_names: [
8911 +                     b"close\0" as *const u8 as *const libc::c_char,
8912 +                     b"volume\0" as *const u8 as *const libc::c_char,
8913 +                     0 as *const libc::c_char,
8914 +                     0 as *const libc::c_char,
8915 +                     0 as *const libc::c_char,
8916 +                     0 as *const libc::c_char,
8917 +                     0 as *const libc::c_char,
8918 +                     0 as *const libc::c_char,
8919 +                     0 as *const libc::c_char,
8920 +                     0 as *const libc::c_char,
8921 +                     0 as *const libc::c_char,
8922 +                     0 as *const libc::c_char,
8923 +                     0 as *const libc::c_char,
8924 +                     0 as *const libc::c_char,
8925 +                     0 as *const libc::c_char,
8926 +                     0 as *const libc::c_char,
8927 +                 ],
8928 +                 option_names: [
8929 +                     b"period\0" as *const u8 as *const libc::c_char,
8930 +                     0 as *const libc::c_char,
8931 +                     0 as *const libc::c_char,
8932 +                     0 as *const libc::c_char,
8933 +                     0 as *const libc::c_char,
8934 +                     0 as *const libc::c_char,
8935 +                     0 as *const libc::c_char,
8936 +                     0 as *const libc::c_char,
8937 +                     0 as *const libc::c_char,
8938 +                     0 as *const libc::c_char,
8939 +                     0 as *const libc::c_char,
8940 +                     0 as *const libc::c_char,
8941 +                     0 as *const libc::c_char,
8942 +                     0 as *const libc::c_char,
8943 +                     0 as *const libc::c_char,
8944 +                     0 as *const libc::c_char,
8945 +                 ],
8946 +                 output_names: [
8947 +                     b"vwma\0" as *const u8 as *const libc::c_char,
8948 +                     0 as *const libc::c_char,
8949 +                     0 as *const libc::c_char,
8950 +                     0 as *const libc::c_char,
8951 +                     0 as *const libc::c_char,
8952 +                     0 as *const libc::c_char,
8953 +                     0 as *const libc::c_char,
8954 +                     0 as *const libc::c_char,
8955 +                     0 as *const libc::c_char,
8956 +                     0 as *const libc::c_char,
8957 +                     0 as *const libc::c_char,
8958 +                     0 as *const libc::c_char,
8959 +                     0 as *const libc::c_char,
8960 +                     0 as *const libc::c_char,
8961 +                     0 as *const libc::c_char,
8962 +                     0 as *const libc::c_char,
8963 +                 ],
8964 +                 stream_new: None,
8965 +                 stream_run: None,
8966 +                 stream_free: None,
8967 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:9050:13
     |
8970 | /             let mut init = ti_indicator_info {
8971 | |                 name: b"wad\0" as *const u8 as *const libc::c_char,
8972 | |                 full_name: b"Williams Accumulation/Distribution\0" as *const u8
8973 | |                     as *const libc::c_char,
...    |
9048 | |                 stream_free: None,
9049 | |             };
     | |______________- unnecessary `let` binding
9050 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
8970 ~             
8971 ~             ti_indicator_info {
8972 +                 name: b"wad\0" as *const u8 as *const libc::c_char,
8973 +                 full_name: b"Williams Accumulation/Distribution\0" as *const u8
8974 +                     as *const libc::c_char,
8975 +                 start: Some(
8976 +                     ti_wad_start
8977 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
8978 +                 ),
8979 +                 indicator: Some(
8980 +                     ti_wad
8981 +                         as unsafe extern "C" fn(
8982 +                             libc::c_int,
8983 +                             *const *const libc::c_double,
8984 +                             *const libc::c_double,
8985 +                             *const *mut libc::c_double,
8986 +                         ) -> libc::c_int,
8987 +                 ),
8988 +                 indicator_ref: None,
8989 +                 type_0: 2 as libc::c_int,
8990 +                 inputs: 3 as libc::c_int,
8991 +                 options: 0 as libc::c_int,
8992 +                 outputs: 1 as libc::c_int,
8993 +                 input_names: [
8994 +                     b"high\0" as *const u8 as *const libc::c_char,
8995 +                     b"low\0" as *const u8 as *const libc::c_char,
8996 +                     b"close\0" as *const u8 as *const libc::c_char,
8997 +                     0 as *const libc::c_char,
8998 +                     0 as *const libc::c_char,
8999 +                     0 as *const libc::c_char,
9000 +                     0 as *const libc::c_char,
9001 +                     0 as *const libc::c_char,
9002 +                     0 as *const libc::c_char,
9003 +                     0 as *const libc::c_char,
9004 +                     0 as *const libc::c_char,
9005 +                     0 as *const libc::c_char,
9006 +                     0 as *const libc::c_char,
9007 +                     0 as *const libc::c_char,
9008 +                     0 as *const libc::c_char,
9009 +                     0 as *const libc::c_char,
9010 +                 ],
9011 +                 option_names: [
9012 +                     b"\0" as *const u8 as *const libc::c_char,
9013 +                     0 as *const libc::c_char,
9014 +                     0 as *const libc::c_char,
9015 +                     0 as *const libc::c_char,
9016 +                     0 as *const libc::c_char,
9017 +                     0 as *const libc::c_char,
9018 +                     0 as *const libc::c_char,
9019 +                     0 as *const libc::c_char,
9020 +                     0 as *const libc::c_char,
9021 +                     0 as *const libc::c_char,
9022 +                     0 as *const libc::c_char,
9023 +                     0 as *const libc::c_char,
9024 +                     0 as *const libc::c_char,
9025 +                     0 as *const libc::c_char,
9026 +                     0 as *const libc::c_char,
9027 +                     0 as *const libc::c_char,
9028 +                 ],
9029 +                 output_names: [
9030 +                     b"wad\0" as *const u8 as *const libc::c_char,
9031 +                     0 as *const libc::c_char,
9032 +                     0 as *const libc::c_char,
9033 +                     0 as *const libc::c_char,
9034 +                     0 as *const libc::c_char,
9035 +                     0 as *const libc::c_char,
9036 +                     0 as *const libc::c_char,
9037 +                     0 as *const libc::c_char,
9038 +                     0 as *const libc::c_char,
9039 +                     0 as *const libc::c_char,
9040 +                     0 as *const libc::c_char,
9041 +                     0 as *const libc::c_char,
9042 +                     0 as *const libc::c_char,
9043 +                     0 as *const libc::c_char,
9044 +                     0 as *const libc::c_char,
9045 +                     0 as *const libc::c_char,
9046 +                 ],
9047 +                 stream_new: None,
9048 +                 stream_run: None,
9049 +                 stream_free: None,
9050 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:9132:13
     |
9053 | /             let mut init = ti_indicator_info {
9054 | |                 name: b"wcprice\0" as *const u8 as *const libc::c_char,
9055 | |                 full_name: b"Weighted Close Price\0" as *const u8 as *const libc::c_char,
9056 | |                 start: Some(
...    |
9130 | |                 stream_free: None,
9131 | |             };
     | |______________- unnecessary `let` binding
9132 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
9053 ~             
9054 ~             ti_indicator_info {
9055 +                 name: b"wcprice\0" as *const u8 as *const libc::c_char,
9056 +                 full_name: b"Weighted Close Price\0" as *const u8 as *const libc::c_char,
9057 +                 start: Some(
9058 +                     ti_wcprice_start
9059 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
9060 +                 ),
9061 +                 indicator: Some(
9062 +                     ti_wcprice
9063 +                         as unsafe extern "C" fn(
9064 +                             libc::c_int,
9065 +                             *const *const libc::c_double,
9066 +                             *const libc::c_double,
9067 +                             *const *mut libc::c_double,
9068 +                         ) -> libc::c_int,
9069 +                 ),
9070 +                 indicator_ref: None,
9071 +                 type_0: 1 as libc::c_int,
9072 +                 inputs: 3 as libc::c_int,
9073 +                 options: 0 as libc::c_int,
9074 +                 outputs: 1 as libc::c_int,
9075 +                 input_names: [
9076 +                     b"high\0" as *const u8 as *const libc::c_char,
9077 +                     b"low\0" as *const u8 as *const libc::c_char,
9078 +                     b"close\0" as *const u8 as *const libc::c_char,
9079 +                     0 as *const libc::c_char,
9080 +                     0 as *const libc::c_char,
9081 +                     0 as *const libc::c_char,
9082 +                     0 as *const libc::c_char,
9083 +                     0 as *const libc::c_char,
9084 +                     0 as *const libc::c_char,
9085 +                     0 as *const libc::c_char,
9086 +                     0 as *const libc::c_char,
9087 +                     0 as *const libc::c_char,
9088 +                     0 as *const libc::c_char,
9089 +                     0 as *const libc::c_char,
9090 +                     0 as *const libc::c_char,
9091 +                     0 as *const libc::c_char,
9092 +                 ],
9093 +                 option_names: [
9094 +                     b"\0" as *const u8 as *const libc::c_char,
9095 +                     0 as *const libc::c_char,
9096 +                     0 as *const libc::c_char,
9097 +                     0 as *const libc::c_char,
9098 +                     0 as *const libc::c_char,
9099 +                     0 as *const libc::c_char,
9100 +                     0 as *const libc::c_char,
9101 +                     0 as *const libc::c_char,
9102 +                     0 as *const libc::c_char,
9103 +                     0 as *const libc::c_char,
9104 +                     0 as *const libc::c_char,
9105 +                     0 as *const libc::c_char,
9106 +                     0 as *const libc::c_char,
9107 +                     0 as *const libc::c_char,
9108 +                     0 as *const libc::c_char,
9109 +                     0 as *const libc::c_char,
9110 +                 ],
9111 +                 output_names: [
9112 +                     b"wcprice\0" as *const u8 as *const libc::c_char,
9113 +                     0 as *const libc::c_char,
9114 +                     0 as *const libc::c_char,
9115 +                     0 as *const libc::c_char,
9116 +                     0 as *const libc::c_char,
9117 +                     0 as *const libc::c_char,
9118 +                     0 as *const libc::c_char,
9119 +                     0 as *const libc::c_char,
9120 +                     0 as *const libc::c_char,
9121 +                     0 as *const libc::c_char,
9122 +                     0 as *const libc::c_char,
9123 +                     0 as *const libc::c_char,
9124 +                     0 as *const libc::c_char,
9125 +                     0 as *const libc::c_char,
9126 +                     0 as *const libc::c_char,
9127 +                     0 as *const libc::c_char,
9128 +                 ],
9129 +                 stream_new: None,
9130 +                 stream_run: None,
9131 +                 stream_free: None,
9132 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:9214:13
     |
9135 | /             let mut init = ti_indicator_info {
9136 | |                 name: b"wilders\0" as *const u8 as *const libc::c_char,
9137 | |                 full_name: b"Wilders Smoothing\0" as *const u8 as *const libc::c_char,
9138 | |                 start: Some(
...    |
9212 | |                 stream_free: None,
9213 | |             };
     | |______________- unnecessary `let` binding
9214 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
9135 ~             
9136 ~             ti_indicator_info {
9137 +                 name: b"wilders\0" as *const u8 as *const libc::c_char,
9138 +                 full_name: b"Wilders Smoothing\0" as *const u8 as *const libc::c_char,
9139 +                 start: Some(
9140 +                     ti_wilders_start
9141 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
9142 +                 ),
9143 +                 indicator: Some(
9144 +                     ti_wilders
9145 +                         as unsafe extern "C" fn(
9146 +                             libc::c_int,
9147 +                             *const *const libc::c_double,
9148 +                             *const libc::c_double,
9149 +                             *const *mut libc::c_double,
9150 +                         ) -> libc::c_int,
9151 +                 ),
9152 +                 indicator_ref: None,
9153 +                 type_0: 1 as libc::c_int,
9154 +                 inputs: 1 as libc::c_int,
9155 +                 options: 1 as libc::c_int,
9156 +                 outputs: 1 as libc::c_int,
9157 +                 input_names: [
9158 +                     b"real\0" as *const u8 as *const libc::c_char,
9159 +                     0 as *const libc::c_char,
9160 +                     0 as *const libc::c_char,
9161 +                     0 as *const libc::c_char,
9162 +                     0 as *const libc::c_char,
9163 +                     0 as *const libc::c_char,
9164 +                     0 as *const libc::c_char,
9165 +                     0 as *const libc::c_char,
9166 +                     0 as *const libc::c_char,
9167 +                     0 as *const libc::c_char,
9168 +                     0 as *const libc::c_char,
9169 +                     0 as *const libc::c_char,
9170 +                     0 as *const libc::c_char,
9171 +                     0 as *const libc::c_char,
9172 +                     0 as *const libc::c_char,
9173 +                     0 as *const libc::c_char,
9174 +                 ],
9175 +                 option_names: [
9176 +                     b"period\0" as *const u8 as *const libc::c_char,
9177 +                     0 as *const libc::c_char,
9178 +                     0 as *const libc::c_char,
9179 +                     0 as *const libc::c_char,
9180 +                     0 as *const libc::c_char,
9181 +                     0 as *const libc::c_char,
9182 +                     0 as *const libc::c_char,
9183 +                     0 as *const libc::c_char,
9184 +                     0 as *const libc::c_char,
9185 +                     0 as *const libc::c_char,
9186 +                     0 as *const libc::c_char,
9187 +                     0 as *const libc::c_char,
9188 +                     0 as *const libc::c_char,
9189 +                     0 as *const libc::c_char,
9190 +                     0 as *const libc::c_char,
9191 +                     0 as *const libc::c_char,
9192 +                 ],
9193 +                 output_names: [
9194 +                     b"wilders\0" as *const u8 as *const libc::c_char,
9195 +                     0 as *const libc::c_char,
9196 +                     0 as *const libc::c_char,
9197 +                     0 as *const libc::c_char,
9198 +                     0 as *const libc::c_char,
9199 +                     0 as *const libc::c_char,
9200 +                     0 as *const libc::c_char,
9201 +                     0 as *const libc::c_char,
9202 +                     0 as *const libc::c_char,
9203 +                     0 as *const libc::c_char,
9204 +                     0 as *const libc::c_char,
9205 +                     0 as *const libc::c_char,
9206 +                     0 as *const libc::c_char,
9207 +                     0 as *const libc::c_char,
9208 +                     0 as *const libc::c_char,
9209 +                     0 as *const libc::c_char,
9210 +                 ],
9211 +                 stream_new: None,
9212 +                 stream_run: None,
9213 +                 stream_free: None,
9214 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:9296:13
     |
9217 | /             let mut init = ti_indicator_info {
9218 | |                 name: b"willr\0" as *const u8 as *const libc::c_char,
9219 | |                 full_name: b"Williams %R\0" as *const u8 as *const libc::c_char,
9220 | |                 start: Some(
...    |
9294 | |                 stream_free: None,
9295 | |             };
     | |______________- unnecessary `let` binding
9296 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
9217 ~             
9218 ~             ti_indicator_info {
9219 +                 name: b"willr\0" as *const u8 as *const libc::c_char,
9220 +                 full_name: b"Williams %R\0" as *const u8 as *const libc::c_char,
9221 +                 start: Some(
9222 +                     ti_willr_start
9223 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
9224 +                 ),
9225 +                 indicator: Some(
9226 +                     ti_willr
9227 +                         as unsafe extern "C" fn(
9228 +                             libc::c_int,
9229 +                             *const *const libc::c_double,
9230 +                             *const libc::c_double,
9231 +                             *const *mut libc::c_double,
9232 +                         ) -> libc::c_int,
9233 +                 ),
9234 +                 indicator_ref: None,
9235 +                 type_0: 2 as libc::c_int,
9236 +                 inputs: 3 as libc::c_int,
9237 +                 options: 1 as libc::c_int,
9238 +                 outputs: 1 as libc::c_int,
9239 +                 input_names: [
9240 +                     b"high\0" as *const u8 as *const libc::c_char,
9241 +                     b"low\0" as *const u8 as *const libc::c_char,
9242 +                     b"close\0" as *const u8 as *const libc::c_char,
9243 +                     0 as *const libc::c_char,
9244 +                     0 as *const libc::c_char,
9245 +                     0 as *const libc::c_char,
9246 +                     0 as *const libc::c_char,
9247 +                     0 as *const libc::c_char,
9248 +                     0 as *const libc::c_char,
9249 +                     0 as *const libc::c_char,
9250 +                     0 as *const libc::c_char,
9251 +                     0 as *const libc::c_char,
9252 +                     0 as *const libc::c_char,
9253 +                     0 as *const libc::c_char,
9254 +                     0 as *const libc::c_char,
9255 +                     0 as *const libc::c_char,
9256 +                 ],
9257 +                 option_names: [
9258 +                     b"period\0" as *const u8 as *const libc::c_char,
9259 +                     0 as *const libc::c_char,
9260 +                     0 as *const libc::c_char,
9261 +                     0 as *const libc::c_char,
9262 +                     0 as *const libc::c_char,
9263 +                     0 as *const libc::c_char,
9264 +                     0 as *const libc::c_char,
9265 +                     0 as *const libc::c_char,
9266 +                     0 as *const libc::c_char,
9267 +                     0 as *const libc::c_char,
9268 +                     0 as *const libc::c_char,
9269 +                     0 as *const libc::c_char,
9270 +                     0 as *const libc::c_char,
9271 +                     0 as *const libc::c_char,
9272 +                     0 as *const libc::c_char,
9273 +                     0 as *const libc::c_char,
9274 +                 ],
9275 +                 output_names: [
9276 +                     b"willr\0" as *const u8 as *const libc::c_char,
9277 +                     0 as *const libc::c_char,
9278 +                     0 as *const libc::c_char,
9279 +                     0 as *const libc::c_char,
9280 +                     0 as *const libc::c_char,
9281 +                     0 as *const libc::c_char,
9282 +                     0 as *const libc::c_char,
9283 +                     0 as *const libc::c_char,
9284 +                     0 as *const libc::c_char,
9285 +                     0 as *const libc::c_char,
9286 +                     0 as *const libc::c_char,
9287 +                     0 as *const libc::c_char,
9288 +                     0 as *const libc::c_char,
9289 +                     0 as *const libc::c_char,
9290 +                     0 as *const libc::c_char,
9291 +                     0 as *const libc::c_char,
9292 +                 ],
9293 +                 stream_new: None,
9294 +                 stream_run: None,
9295 +                 stream_free: None,
9296 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:9379:13
     |
9299 | /             let mut init = ti_indicator_info {
9300 | |                 name: b"wma\0" as *const u8 as *const libc::c_char,
9301 | |                 full_name: b"Weighted Moving Average\0" as *const u8
9302 | |                     as *const libc::c_char,
...    |
9377 | |                 stream_free: None,
9378 | |             };
     | |______________- unnecessary `let` binding
9379 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
9299 ~             
9300 ~             ti_indicator_info {
9301 +                 name: b"wma\0" as *const u8 as *const libc::c_char,
9302 +                 full_name: b"Weighted Moving Average\0" as *const u8
9303 +                     as *const libc::c_char,
9304 +                 start: Some(
9305 +                     ti_wma_start
9306 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
9307 +                 ),
9308 +                 indicator: Some(
9309 +                     ti_wma
9310 +                         as unsafe extern "C" fn(
9311 +                             libc::c_int,
9312 +                             *const *const libc::c_double,
9313 +                             *const libc::c_double,
9314 +                             *const *mut libc::c_double,
9315 +                         ) -> libc::c_int,
9316 +                 ),
9317 +                 indicator_ref: None,
9318 +                 type_0: 1 as libc::c_int,
9319 +                 inputs: 1 as libc::c_int,
9320 +                 options: 1 as libc::c_int,
9321 +                 outputs: 1 as libc::c_int,
9322 +                 input_names: [
9323 +                     b"real\0" as *const u8 as *const libc::c_char,
9324 +                     0 as *const libc::c_char,
9325 +                     0 as *const libc::c_char,
9326 +                     0 as *const libc::c_char,
9327 +                     0 as *const libc::c_char,
9328 +                     0 as *const libc::c_char,
9329 +                     0 as *const libc::c_char,
9330 +                     0 as *const libc::c_char,
9331 +                     0 as *const libc::c_char,
9332 +                     0 as *const libc::c_char,
9333 +                     0 as *const libc::c_char,
9334 +                     0 as *const libc::c_char,
9335 +                     0 as *const libc::c_char,
9336 +                     0 as *const libc::c_char,
9337 +                     0 as *const libc::c_char,
9338 +                     0 as *const libc::c_char,
9339 +                 ],
9340 +                 option_names: [
9341 +                     b"period\0" as *const u8 as *const libc::c_char,
9342 +                     0 as *const libc::c_char,
9343 +                     0 as *const libc::c_char,
9344 +                     0 as *const libc::c_char,
9345 +                     0 as *const libc::c_char,
9346 +                     0 as *const libc::c_char,
9347 +                     0 as *const libc::c_char,
9348 +                     0 as *const libc::c_char,
9349 +                     0 as *const libc::c_char,
9350 +                     0 as *const libc::c_char,
9351 +                     0 as *const libc::c_char,
9352 +                     0 as *const libc::c_char,
9353 +                     0 as *const libc::c_char,
9354 +                     0 as *const libc::c_char,
9355 +                     0 as *const libc::c_char,
9356 +                     0 as *const libc::c_char,
9357 +                 ],
9358 +                 output_names: [
9359 +                     b"wma\0" as *const u8 as *const libc::c_char,
9360 +                     0 as *const libc::c_char,
9361 +                     0 as *const libc::c_char,
9362 +                     0 as *const libc::c_char,
9363 +                     0 as *const libc::c_char,
9364 +                     0 as *const libc::c_char,
9365 +                     0 as *const libc::c_char,
9366 +                     0 as *const libc::c_char,
9367 +                     0 as *const libc::c_char,
9368 +                     0 as *const libc::c_char,
9369 +                     0 as *const libc::c_char,
9370 +                     0 as *const libc::c_char,
9371 +                     0 as *const libc::c_char,
9372 +                     0 as *const libc::c_char,
9373 +                     0 as *const libc::c_char,
9374 +                     0 as *const libc::c_char,
9375 +                 ],
9376 +                 stream_new: None,
9377 +                 stream_run: None,
9378 +                 stream_free: None,
9379 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:9462:13
     |
9382 | /             let mut init = ti_indicator_info {
9383 | |                 name: b"zlema\0" as *const u8 as *const libc::c_char,
9384 | |                 full_name: b"Zero-Lag Exponential Moving Average\0" as *const u8
9385 | |                     as *const libc::c_char,
...    |
9460 | |                 stream_free: None,
9461 | |             };
     | |______________- unnecessary `let` binding
9462 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
9382 ~             
9383 ~             ti_indicator_info {
9384 +                 name: b"zlema\0" as *const u8 as *const libc::c_char,
9385 +                 full_name: b"Zero-Lag Exponential Moving Average\0" as *const u8
9386 +                     as *const libc::c_char,
9387 +                 start: Some(
9388 +                     ti_zlema_start
9389 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
9390 +                 ),
9391 +                 indicator: Some(
9392 +                     ti_zlema
9393 +                         as unsafe extern "C" fn(
9394 +                             libc::c_int,
9395 +                             *const *const libc::c_double,
9396 +                             *const libc::c_double,
9397 +                             *const *mut libc::c_double,
9398 +                         ) -> libc::c_int,
9399 +                 ),
9400 +                 indicator_ref: None,
9401 +                 type_0: 1 as libc::c_int,
9402 +                 inputs: 1 as libc::c_int,
9403 +                 options: 1 as libc::c_int,
9404 +                 outputs: 1 as libc::c_int,
9405 +                 input_names: [
9406 +                     b"real\0" as *const u8 as *const libc::c_char,
9407 +                     0 as *const libc::c_char,
9408 +                     0 as *const libc::c_char,
9409 +                     0 as *const libc::c_char,
9410 +                     0 as *const libc::c_char,
9411 +                     0 as *const libc::c_char,
9412 +                     0 as *const libc::c_char,
9413 +                     0 as *const libc::c_char,
9414 +                     0 as *const libc::c_char,
9415 +                     0 as *const libc::c_char,
9416 +                     0 as *const libc::c_char,
9417 +                     0 as *const libc::c_char,
9418 +                     0 as *const libc::c_char,
9419 +                     0 as *const libc::c_char,
9420 +                     0 as *const libc::c_char,
9421 +                     0 as *const libc::c_char,
9422 +                 ],
9423 +                 option_names: [
9424 +                     b"period\0" as *const u8 as *const libc::c_char,
9425 +                     0 as *const libc::c_char,
9426 +                     0 as *const libc::c_char,
9427 +                     0 as *const libc::c_char,
9428 +                     0 as *const libc::c_char,
9429 +                     0 as *const libc::c_char,
9430 +                     0 as *const libc::c_char,
9431 +                     0 as *const libc::c_char,
9432 +                     0 as *const libc::c_char,
9433 +                     0 as *const libc::c_char,
9434 +                     0 as *const libc::c_char,
9435 +                     0 as *const libc::c_char,
9436 +                     0 as *const libc::c_char,
9437 +                     0 as *const libc::c_char,
9438 +                     0 as *const libc::c_char,
9439 +                     0 as *const libc::c_char,
9440 +                 ],
9441 +                 output_names: [
9442 +                     b"zlema\0" as *const u8 as *const libc::c_char,
9443 +                     0 as *const libc::c_char,
9444 +                     0 as *const libc::c_char,
9445 +                     0 as *const libc::c_char,
9446 +                     0 as *const libc::c_char,
9447 +                     0 as *const libc::c_char,
9448 +                     0 as *const libc::c_char,
9449 +                     0 as *const libc::c_char,
9450 +                     0 as *const libc::c_char,
9451 +                     0 as *const libc::c_char,
9452 +                     0 as *const libc::c_char,
9453 +                     0 as *const libc::c_char,
9454 +                     0 as *const libc::c_char,
9455 +                     0 as *const libc::c_char,
9456 +                     0 as *const libc::c_char,
9457 +                     0 as *const libc::c_char,
9458 +                 ],
9459 +                 stream_new: None,
9460 +                 stream_run: None,
9461 +                 stream_free: None,
9462 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/indicators_rs.rs:9533:13
     |
9465 | /             let mut init = ti_indicator_info {
9466 | |                 name: 0 as *const libc::c_char,
9467 | |                 full_name: 0 as *const libc::c_char,
9468 | |                 start: None,
...    |
9531 | |                 stream_free: None,
9532 | |             };
     | |______________- unnecessary `let` binding
9533 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
9465 ~             
9466 ~             ti_indicator_info {
9467 +                 name: 0 as *const libc::c_char,
9468 +                 full_name: 0 as *const libc::c_char,
9469 +                 start: None,
9470 +                 indicator: None,
9471 +                 indicator_ref: None,
9472 +                 type_0: 0 as libc::c_int,
9473 +                 inputs: 0 as libc::c_int,
9474 +                 options: 0 as libc::c_int,
9475 +                 outputs: 0 as libc::c_int,
9476 +                 input_names: [
9477 +                     0 as *const libc::c_char,
9478 +                     0 as *const libc::c_char,
9479 +                     0 as *const libc::c_char,
9480 +                     0 as *const libc::c_char,
9481 +                     0 as *const libc::c_char,
9482 +                     0 as *const libc::c_char,
9483 +                     0 as *const libc::c_char,
9484 +                     0 as *const libc::c_char,
9485 +                     0 as *const libc::c_char,
9486 +                     0 as *const libc::c_char,
9487 +                     0 as *const libc::c_char,
9488 +                     0 as *const libc::c_char,
9489 +                     0 as *const libc::c_char,
9490 +                     0 as *const libc::c_char,
9491 +                     0 as *const libc::c_char,
9492 +                     0 as *const libc::c_char,
9493 +                 ],
9494 +                 option_names: [
9495 +                     0 as *const libc::c_char,
9496 +                     0 as *const libc::c_char,
9497 +                     0 as *const libc::c_char,
9498 +                     0 as *const libc::c_char,
9499 +                     0 as *const libc::c_char,
9500 +                     0 as *const libc::c_char,
9501 +                     0 as *const libc::c_char,
9502 +                     0 as *const libc::c_char,
9503 +                     0 as *const libc::c_char,
9504 +                     0 as *const libc::c_char,
9505 +                     0 as *const libc::c_char,
9506 +                     0 as *const libc::c_char,
9507 +                     0 as *const libc::c_char,
9508 +                     0 as *const libc::c_char,
9509 +                     0 as *const libc::c_char,
9510 +                     0 as *const libc::c_char,
9511 +                 ],
9512 +                 output_names: [
9513 +                     0 as *const libc::c_char,
9514 +                     0 as *const libc::c_char,
9515 +                     0 as *const libc::c_char,
9516 +                     0 as *const libc::c_char,
9517 +                     0 as *const libc::c_char,
9518 +                     0 as *const libc::c_char,
9519 +                     0 as *const libc::c_char,
9520 +                     0 as *const libc::c_char,
9521 +                     0 as *const libc::c_char,
9522 +                     0 as *const libc::c_char,
9523 +                     0 as *const libc::c_char,
9524 +                     0 as *const libc::c_char,
9525 +                     0 as *const libc::c_char,
9526 +                     0 as *const libc::c_char,
9527 +                     0 as *const libc::c_char,
9528 +                     0 as *const libc::c_char,
9529 +                 ],
9530 +                 stream_new: None,
9531 +                 stream_run: None,
9532 +                 stream_free: None,
9533 +             }
     |

warning: unsafe function's docs miss `# Safety` section
    --> src/indicators_rs.rs:9538:1
     |
9538 | / pub unsafe extern "C" fn ti_stream_run(
9539 | |     mut stream: *mut ti_stream,
9540 | |     mut size: libc::c_int,
9541 | |     mut inputs: *const *const libc::c_double,
...    |
9545 | |         .expect("non-null function pointer")(stream, size, inputs, outputs);
9546 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/indicators_rs.rs:9544:5
     |
9544 | /     return (ti_indicators[(*stream).index as usize].stream_run)
9545 | |         .expect("non-null function pointer")(stream, size, inputs, outputs);
     | |____________________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
     |
9544 ~     (ti_indicators[(*stream).index as usize].stream_run)
9545 +         .expect("non-null function pointer")(stream, size, inputs, outputs)
     |

warning: unsafe function's docs miss `# Safety` section
    --> src/indicators_rs.rs:9548:1
     |
9548 | / pub unsafe extern "C" fn ti_stream_get_info(
9549 | |     mut stream: *mut ti_stream,
9550 | | ) -> *mut ti_indicator_info {
9551 | |     return ti_indicators.as_mut_ptr().offset((*stream).index as isize);
9552 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/indicators_rs.rs:9551:5
     |
9551 |     return ti_indicators.as_mut_ptr().offset((*stream).index as isize);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `ti_indicators.as_mut_ptr().offset((*stream).index as isize)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/indicators_rs.rs:9554:1
     |
9554 | / pub unsafe extern "C" fn ti_stream_get_progress(
9555 | |     mut stream: *mut ti_stream,
9556 | | ) -> libc::c_int {
9557 | |     return (*stream).progress;
9558 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/indicators_rs.rs:9557:5
     |
9557 |     return (*stream).progress;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `(*stream).progress`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/indicators_rs.rs:9560:1
     |
9560 | / pub unsafe extern "C" fn ti_stream_free(mut stream: *mut ti_stream) {
9561 | |     (ti_indicators[(*stream).index as usize].stream_free)
9562 | |         .expect("non-null function pointer")(stream);
9563 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
    --> src/indicators_rs.rs:9565:1
     |
9565 | / pub unsafe extern "C" fn ti_find_indicator(
9566 | |     mut name: *const libc::c_char,
9567 | | ) -> *const ti_indicator_info {
9568 | |     let mut imin: libc::c_int = 0 as libc::c_int;
...    |
9584 | |     return 0 as *const ti_indicator_info;
9585 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/indicators_rs.rs:9584:5
     |
9584 |     return 0 as *const ti_indicator_info;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as *const ti_indicator_info`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `if` chain can be rewritten with `match`
    --> src/indicators_rs.rs:9576:9
     |
9576 | /         if c == 0 as libc::c_int {
9577 | |             return ti_indicators.as_mut_ptr().offset(i as isize)
9578 | |         } else if c > 0 as libc::c_int {
9579 | |             imin = i + 1 as libc::c_int;
9580 | |         } else {
9581 | |             imax = i - 1 as libc::c_int;
9582 | |         }
     | |_________^
     |
     = help: consider rewriting the `if` chain to use `cmp` and `match`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain

warning: `0 as *const _` detected
    --> src/indicators_rs.rs:9584:12
     |
9584 |     return 0 as *const ti_indicator_info;
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<ti_indicator_info>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unneeded `return` statement
   --> src/smoke.rs:199:5
    |
199 | /     return strtol(
200 | |         __nptr,
201 | |         0 as *mut libc::c_void as *mut *mut libc::c_char,
202 | |         10 as libc::c_int,
203 | |     ) as libc::c_int;
    | |_____________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
199 ~     strtol(
200 +         __nptr,
201 +         0 as *mut libc::c_void as *mut *mut libc::c_char,
202 +         10 as libc::c_int,
203 +     ) as libc::c_int
    |

warning: `0 as *mut _` detected
   --> src/smoke.rs:201:9
    |
201 |         0 as *mut libc::c_void as *mut *mut libc::c_char,
    |         ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unneeded `return` statement
   --> src/smoke.rs:207:5
    |
207 |     return strtod(__nptr, 0 as *mut libc::c_void as *mut *mut libc::c_char);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `strtod(__nptr, 0 as *mut libc::c_void as *mut *mut libc::c_char)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
   --> src/smoke.rs:207:27
    |
207 |     return strtod(__nptr, 0 as *mut libc::c_void as *mut *mut libc::c_char);
    |                           ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/smoke.rs:348:1
    |
348 | / pub unsafe extern "C" fn compare_arrays(
349 | |     mut a: *mut libc::c_double,
350 | |     mut b: *mut libc::c_double,
351 | |     mut size_a: libc::c_int,
...   |
402 | |     }
403 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: statement with no effect
   --> src/smoke.rs:356:5
    |
356 |     ltests;
    |     ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/smoke.rs:359:9
    |
359 |         lfails;
    |         ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/smoke.rs:375:9
    |
375 |         ltests;
    |         ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/smoke.rs:378:13
    |
378 |             lfails;
    |             ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/smoke.rs:388:9
    |
388 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/smoke.rs:400:13
    |
400 |             i;
    |             ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/smoke.rs:405:1
    |
405 | / pub unsafe extern "C" fn next_line(mut fp: *mut FILE) -> *mut libc::c_char {
406 | |     static mut buf: [libc::c_char; 4096] = [0; 4096];
407 | |     while !(fgets(buf.as_mut_ptr(), 4096 as libc::c_int, fp)).is_null() {
408 | |         if buf[0 as libc::c_int as usize] as libc::c_int == '#' as i32 {
...   |
418 | |     return 0 as *mut libc::c_char;
419 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/smoke.rs:418:5
    |
418 |     return 0 as *mut libc::c_char;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as *mut libc::c_char`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
   --> src/smoke.rs:418:12
    |
418 |     return 0 as *mut libc::c_char;
    |            ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/smoke.rs:421:1
    |
421 | / pub unsafe extern "C" fn get_array(
422 | |     mut fp: *mut FILE,
423 | |     mut s: *mut libc::c_double,
424 | | ) -> libc::c_int {
...   |
461 | |     return inp.offset_from(s) as libc::c_long as libc::c_int;
462 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/smoke.rs:461:5
    |
461 |     return inp.offset_from(s) as libc::c_long as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `inp.offset_from(s) as libc::c_long as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/smoke.rs:429:9
    |
429 |         ltests;
    |         ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/smoke.rs:432:13
    |
432 |             lfails;
    |             ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/smoke.rs:452:9
    |
452 |         inp;
    |         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `0 as *mut _` detected
   --> src/smoke.rs:454:13
    |
454 |             0 as *mut libc::c_char,
    |             ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/smoke.rs:464:1
    |
464 | / pub unsafe extern "C" fn test_ind_name(
465 | |     mut fp: *mut FILE,
466 | |     mut name: *const libc::c_char,
467 | |     mut count: libc::c_int,
...   |
877 | |     }
878 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this boolean expression can be simplified
   --> src/smoke.rs:616:8
    |
616 |     if !(ret == 0 as libc::c_int) {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `ret != 0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this boolean expression can be simplified
   --> src/smoke.rs:664:12
    |
664 |         if !(ret_0 == 0 as libc::c_int) {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `ret_0 != 0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this boolean expression can be simplified
   --> src/smoke.rs:725:16
    |
725 |             if !(stream_ret == 0 as libc::c_int) {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `stream_ret != 0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this boolean expression can be simplified
   --> src/smoke.rs:814:20
    |
814 |                 if !(ret_1 == 0 as libc::c_int) {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `ret_1 != 0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: `0 as *const _` detected
   --> src/smoke.rs:493:38
    |
493 |     let mut s: *const libc::c_char = 0 as *const libc::c_char;
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:496:13
    |
496 |             0 as *mut libc::c_char,
    |             ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: statement with no effect
   --> src/smoke.rs:504:9
    |
504 |         o;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/smoke.rs:507:5
    |
507 |     ltests;
    |     ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/smoke.rs:512:9
    |
512 |         lfails;
    |         ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `0 as *mut _` detected
   --> src/smoke.rs:523:9
    |
523 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:524:9
    |
524 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:525:9
    |
525 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:526:9
    |
526 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:527:9
    |
527 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:528:9
    |
528 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:529:9
    |
529 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:530:9
    |
530 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:531:9
    |
531 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:532:9
    |
532 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:533:9
    |
533 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:534:9
    |
534 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:535:9
    |
535 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:536:9
    |
536 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:537:9
    |
537 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:538:9
    |
538 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:541:9
    |
541 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:542:9
    |
542 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:543:9
    |
543 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:544:9
    |
544 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:545:9
    |
545 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:546:9
    |
546 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:547:9
    |
547 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:548:9
    |
548 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:549:9
    |
549 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:550:9
    |
550 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:551:9
    |
551 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:552:9
    |
552 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:553:9
    |
553 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:554:9
    |
554 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:555:9
    |
555 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:556:9
    |
556 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:559:9
    |
559 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:560:9
    |
560 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:561:9
    |
561 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:562:9
    |
562 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:563:9
    |
563 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:564:9
    |
564 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:565:9
    |
565 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:566:9
    |
566 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:567:9
    |
567 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:568:9
    |
568 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:569:9
    |
569 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:570:9
    |
570 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:571:9
    |
571 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:572:9
    |
572 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:573:9
    |
573 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:574:9
    |
574 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: statement with no effect
   --> src/smoke.rs:586:9
    |
586 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/smoke.rs:603:9
    |
603 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/smoke.rs:615:5
    |
615 |     ltests;
    |     ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/smoke.rs:618:9
    |
618 |         lfails;
    |         ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/smoke.rs:639:9
    |
639 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/smoke.rs:651:13
    |
651 |             i;
    |             ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/smoke.rs:663:9
    |
663 |         ltests;
    |         ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/smoke.rs:666:13
    |
666 |             lfails;
    |             ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/smoke.rs:687:13
    |
687 |             i;
    |             ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/smoke.rs:718:17
    |
718 |                 i;
    |                 ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `0 as *mut _` detected
   --> src/smoke.rs:720:46
    |
720 |             let mut stream: *mut ti_stream = 0 as *mut ti_stream;
    |                                              ^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<ti_stream>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: statement with no effect
   --> src/smoke.rs:724:13
    |
724 |             ltests;
    |             ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/smoke.rs:727:17
    |
727 |                 lfails;
    |                 ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/smoke.rs:735:13
    |
735 |             ltests;
    |             ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/smoke.rs:738:17
    |
738 |                 lfails;
    |                 ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `0 as *mut _` detected
   --> src/smoke.rs:748:21
    |
748 |                     0 as *mut libc::c_double,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:749:21
    |
749 |                     0 as *mut libc::c_double,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:750:21
    |
750 |                     0 as *mut libc::c_double,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:751:21
    |
751 |                     0 as *mut libc::c_double,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:752:21
    |
752 |                     0 as *mut libc::c_double,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:753:21
    |
753 |                     0 as *mut libc::c_double,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:754:21
    |
754 |                     0 as *mut libc::c_double,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:755:21
    |
755 |                     0 as *mut libc::c_double,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:756:21
    |
756 |                     0 as *mut libc::c_double,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:757:21
    |
757 |                     0 as *mut libc::c_double,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:758:21
    |
758 |                     0 as *mut libc::c_double,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:759:21
    |
759 |                     0 as *mut libc::c_double,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:760:21
    |
760 |                     0 as *mut libc::c_double,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:761:21
    |
761 |                     0 as *mut libc::c_double,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:762:21
    |
762 |                     0 as *mut libc::c_double,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:763:21
    |
763 |                     0 as *mut libc::c_double,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:766:21
    |
766 |                     0 as *mut libc::c_double,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:767:21
    |
767 |                     0 as *mut libc::c_double,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:768:21
    |
768 |                     0 as *mut libc::c_double,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:769:21
    |
769 |                     0 as *mut libc::c_double,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:770:21
    |
770 |                     0 as *mut libc::c_double,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:771:21
    |
771 |                     0 as *mut libc::c_double,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:772:21
    |
772 |                     0 as *mut libc::c_double,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:773:21
    |
773 |                     0 as *mut libc::c_double,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:774:21
    |
774 |                     0 as *mut libc::c_double,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:775:21
    |
775 |                     0 as *mut libc::c_double,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:776:21
    |
776 |                     0 as *mut libc::c_double,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:777:21
    |
777 |                     0 as *mut libc::c_double,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:778:21
    |
778 |                     0 as *mut libc::c_double,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:779:21
    |
779 |                     0 as *mut libc::c_double,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:780:21
    |
780 |                     0 as *mut libc::c_double,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:781:21
    |
781 |                     0 as *mut libc::c_double,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: statement with no effect
   --> src/smoke.rs:787:21
    |
787 |                     i;
    |                     ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/smoke.rs:797:21
    |
797 |                     i;
    |                     ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/smoke.rs:813:17
    |
813 |                 ltests;
    |                 ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/smoke.rs:816:21
    |
816 |                     lfails;
    |                     ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/smoke.rs:832:13
    |
832 |             ltests;
    |             ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/smoke.rs:835:17
    |
835 |                 lfails;
    |                 ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/smoke.rs:853:17
    |
853 |                 i;
    |                 ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/smoke.rs:857:13
    |
857 |             step_i;
    |             ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/smoke.rs:864:9
    |
864 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/smoke.rs:870:9
    |
870 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/smoke.rs:876:9
    |
876 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/smoke.rs:880:1
     |
880  | / pub unsafe extern "C" fn test_candles(mut fp: *mut FILE, mut count: libc::c_int) {
881  | |     let mut inputs: [*mut libc::c_double; 16] = [
882  | |         0 as *mut libc::c_double,
883  | |         0 as *mut libc::c_double,
...    |
1007 | |     free(inputs[3 as libc::c_int as usize] as *mut libc::c_void);
1008 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this boolean expression can be simplified
   --> src/smoke.rs:931:11
    |
931 |     while !(feof(fp) != 0) {
    |           ^^^^^^^^^^^^^^^^ help: try: `feof(fp) == 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: `0 as *mut _` detected
   --> src/smoke.rs:882:9
    |
882 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:883:9
    |
883 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:884:9
    |
884 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:885:9
    |
885 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:886:9
    |
886 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:887:9
    |
887 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:888:9
    |
888 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:889:9
    |
889 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:890:9
    |
890 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:891:9
    |
891 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:892:9
    |
892 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:893:9
    |
893 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:894:9
    |
894 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:895:9
    |
895 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:896:9
    |
896 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:897:9
    |
897 |         0 as *mut libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: statement with no effect
   --> src/smoke.rs:909:9
    |
909 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: the function `tc_run` doesn't need a mutable reference
   --> src/smoke.rs:927:9
    |
927 |         &mut config,
    |         ^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: statement with no effect
   --> src/smoke.rs:947:13
    |
947 |             name;
    |             ^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/smoke.rs:951:9
    |
951 |         ltests;
    |         ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/smoke.rs:954:13
    |
954 |             lfails;
    |             ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `0 as *mut _` detected
   --> src/smoke.rs:961:42
    |
961 |         let mut num: *mut libc::c_char = 0 as *mut libc::c_char;
    |                                          ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/smoke.rs:964:17
    |
964 |                 0 as *mut libc::c_char,
    |                 ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: statement with no effect
   --> src/smoke.rs:973:17
    |
973 |                 ltests;
    |                 ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/smoke.rs:976:21
    |
976 |                     lfails;
    |                     ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/smoke.rs:985:17
    |
985 |                 ltests;
    |                 ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/smoke.rs:988:21
    |
988 |                     lfails;
    |                     ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/smoke.rs:1010:1
     |
1010 | / pub unsafe extern "C" fn test(mut fname: *const libc::c_char, mut count: libc::c_int) {
1011 | |     printf(b"%s:\n\0" as *const u8 as *const libc::c_char, fname);
1012 | |     let mut fp: *mut FILE = fopen(fname, b"r\0" as *const u8 as *const libc::c_char);
1013 | |     if fp.is_null() {
...    |
1083 | |     fclose(fp);
1084 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: statement with no effect
    --> src/smoke.rs:1015:9
     |
1015 |         ltests;
     |         ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/smoke.rs:1018:13
     |
1018 |             lfails;
     |             ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `0 as *mut _` detected
    --> src/smoke.rs:1027:39
     |
1027 |     let mut line: *mut libc::c_char = 0 as *mut libc::c_char;
     |                                       ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: statement with no effect
    --> src/smoke.rs:1037:13
     |
1037 |             ltests;
     |             ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/smoke.rs:1040:17
     |
1040 |                 lfails;
     |                 ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/smoke.rs:1086:1
     |
1086 | / pub unsafe extern "C" fn test_version() {
1087 | |     ltests += 1;
1088 | |     ltests;
1089 | |     if !(strcmp(b"0.9.2\0" as *const u8 as *const libc::c_char, ti_version())
...    |
1184 | |     // }
1185 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this boolean expression can be simplified
    --> src/smoke.rs:1089:8
     |
1089 |       if !(strcmp(b"0.9.2\0" as *const u8 as *const libc::c_char, ti_version())
     |  ________^
1090 | |         == 0 as libc::c_int)
     | |____________________________^ help: try: `strcmp(b"0.9.2\0" as *const u8 as *const libc::c_char, ti_version()) != 0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this boolean expression can be simplified
    --> src/smoke.rs:1102:8
     |
1102 |     if !(1743602909 as libc::c_int as libc::c_long == ti_build()) {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `1743602909 as libc::c_int as libc::c_long != ti_build()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this boolean expression can be simplified
    --> src/smoke.rs:1113:8
     |
1113 |     if !(104 as libc::c_int == ti_indicator_count()) {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `104 as libc::c_int != ti_indicator_count()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this boolean expression can be simplified
    --> src/smoke.rs:1124:8
     |
1124 |       if !(strcmp(b"0.9.2\0" as *const u8 as *const libc::c_char, tc_version())
     |  ________^
1125 | |         == 0 as libc::c_int)
     | |____________________________^ help: try: `strcmp(b"0.9.2\0" as *const u8 as *const libc::c_char, tc_version()) != 0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this boolean expression can be simplified
    --> src/smoke.rs:1137:8
     |
1137 |     if !(1743602909 as libc::c_int as libc::c_long == tc_build()) {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `1743602909 as libc::c_int as libc::c_long != tc_build()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this boolean expression can be simplified
    --> src/smoke.rs:1148:8
     |
1148 |     if !(26 as libc::c_int == tc_candle_count()) {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `26 as libc::c_int != tc_candle_count()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this boolean expression can be simplified
    --> src/smoke.rs:1159:8
     |
1159 |       if !(strcmp(
     |  ________^
1160 | |         b"0.9.2\0" as *const u8 as *const libc::c_char,
1161 | |         b"0.9.2\0" as *const u8 as *const libc::c_char,
1162 | |     ) == 0 as libc::c_int)
     | |__________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool
help: try
     |
1159 ~     if strcmp(
1160 +         b"0.9.2\0" as *const u8 as *const libc::c_char,
1161 +         b"0.9.2\0" as *const u8 as *const libc::c_char,
1162 +     ) != 0 as libc::c_int
     |

warning: statement with no effect
    --> src/smoke.rs:1088:5
     |
1088 |     ltests;
     |     ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/smoke.rs:1093:9
     |
1093 |         lfails;
     |         ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/smoke.rs:1101:5
     |
1101 |     ltests;
     |     ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/smoke.rs:1104:9
     |
1104 |         lfails;
     |         ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/smoke.rs:1112:5
     |
1112 |     ltests;
     |     ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/smoke.rs:1115:9
     |
1115 |         lfails;
     |         ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/smoke.rs:1123:5
     |
1123 |     ltests;
     |     ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/smoke.rs:1128:9
     |
1128 |         lfails;
     |         ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/smoke.rs:1136:5
     |
1136 |     ltests;
     |     ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/smoke.rs:1139:9
     |
1139 |         lfails;
     |         ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/smoke.rs:1147:5
     |
1147 |     ltests;
     |     ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/smoke.rs:1150:9
     |
1150 |         lfails;
     |         ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/smoke.rs:1158:5
     |
1158 |     ltests;
     |     ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/smoke.rs:1165:9
     |
1165 |         lfails;
     |         ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/smoke.rs:1173:5
     |
1173 |     ltests;
     |     ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/smoke.rs:1176:5
     |
1176 |     lfails;
     |     ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/smoke.rs:1187:1
     |
1187 | / pub unsafe extern "C" fn test_buffer() {
1188 | |     let mut b: *mut ti_buffer = ti_buffer_new(3 as libc::c_int);
1189 | |     if (*b).pushes >= (*b).size {
1190 | |         (*b).sum -= *((*b).vals).as_mut_ptr().offset((*b).index as isize);
...    |
1477 | |     ti_buffer_free(b);
1478 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: manual implementation of an assign operation
    --> src/smoke.rs:1195:5
     |
1195 |     (*b).index = (*b).index + 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*b).index += 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
    --> src/smoke.rs:1200:5
     |
1200 |     ltests;
     |     ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/smoke.rs:1203:9
     |
1203 |         lfails;
     |         ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: manual implementation of an assign operation
    --> src/smoke.rs:1218:5
     |
1218 |     (*b).index = (*b).index + 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*b).index += 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
    --> src/smoke.rs:1223:5
     |
1223 |     ltests;
     |     ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/smoke.rs:1226:9
     |
1226 |         lfails;
     |         ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: manual implementation of an assign operation
    --> src/smoke.rs:1241:5
     |
1241 |     (*b).index = (*b).index + 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*b).index += 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
    --> src/smoke.rs:1246:5
     |
1246 |     ltests;
     |     ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/smoke.rs:1249:9
     |
1249 |         lfails;
     |         ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: manual implementation of an assign operation
    --> src/smoke.rs:1264:5
     |
1264 |     (*b).index = (*b).index + 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*b).index += 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
    --> src/smoke.rs:1269:5
     |
1269 |     ltests;
     |     ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/smoke.rs:1272:9
     |
1272 |         lfails;
     |         ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: manual implementation of an assign operation
    --> src/smoke.rs:1287:5
     |
1287 |     (*b).index = (*b).index + 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*b).index += 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
    --> src/smoke.rs:1292:5
     |
1292 |     ltests;
     |     ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/smoke.rs:1295:9
     |
1295 |         lfails;
     |         ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: manual implementation of an assign operation
    --> src/smoke.rs:1310:5
     |
1310 |     (*b).index = (*b).index + 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*b).index += 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
    --> src/smoke.rs:1315:5
     |
1315 |     ltests;
     |     ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/smoke.rs:1318:9
     |
1318 |         lfails;
     |         ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: manual implementation of an assign operation
    --> src/smoke.rs:1333:5
     |
1333 |     (*b).index = (*b).index + 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*b).index += 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
    --> src/smoke.rs:1338:5
     |
1338 |     ltests;
     |     ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/smoke.rs:1341:9
     |
1341 |         lfails;
     |         ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: manual implementation of an assign operation
    --> src/smoke.rs:1356:5
     |
1356 |     (*b).index = (*b).index + 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*b).index += 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
    --> src/smoke.rs:1361:5
     |
1361 |     ltests;
     |     ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/smoke.rs:1364:9
     |
1364 |         lfails;
     |         ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/smoke.rs:1374:5
     |
1374 |     ltests;
     |     ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/smoke.rs:1385:9
     |
1385 |         lfails;
     |         ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/smoke.rs:1400:5
     |
1400 |     ltests;
     |     ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/smoke.rs:1411:9
     |
1411 |         lfails;
     |         ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/smoke.rs:1426:5
     |
1426 |     ltests;
     |     ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/smoke.rs:1437:9
     |
1437 |         lfails;
     |         ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/smoke.rs:1452:5
     |
1452 |     ltests;
     |     ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/smoke.rs:1463:9
     |
1463 |         lfails;
     |         ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/smoke.rs:1480:1
     |
1480 | / pub unsafe extern "C" fn test_localbuffer() {
1481 | |     let mut stream: s = {
1482 | |         let mut init = s {
1483 | |             buf_info: {
...    |
1563 | |     }
1564 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: returning the result of a `let` binding from a block
    --> src/smoke.rs:1496:9
     |
1482 | /         let mut init = s {
1483 | |             buf_info: {
1484 | |                 let mut init = C2RustUnnamed {
1485 | |                     padding: 0 as libc::c_int as libc::c_double,
...    |
1494 | |             padding: [0.; 5],
1495 | |         };
     | |__________- unnecessary `let` binding
1496 |           init
     |           ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1482 ~         
1483 ~         s {
1484 +             buf_info: {
1485 +                 let mut init = C2RustUnnamed {
1486 +                     padding: 0 as libc::c_int as libc::c_double,
1487 +                     zero: [0; 4],
1488 +                     offset_a: 0,
1489 +                     size_a: 0,
1490 +                     index_a: 0,
1491 +                     padding_a: 0,
1492 +                 };
1493 +                 init
1494 +             },
1495 +             padding: [0.; 5],
1496 +         }
     |

warning: returning the result of a `let` binding from a block
    --> src/smoke.rs:1492:17
     |
1484 | /                 let mut init = C2RustUnnamed {
1485 | |                     padding: 0 as libc::c_int as libc::c_double,
1486 | |                     zero: [0; 4],
1487 | |                     offset_a: 0,
...    |
1490 | |                     padding_a: 0,
1491 | |                 };
     | |__________________- unnecessary `let` binding
1492 |                   init
     |                   ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1484 ~                 
1485 ~                 C2RustUnnamed {
1486 +                     padding: 0 as libc::c_int as libc::c_double,
1487 +                     zero: [0; 4],
1488 +                     offset_a: 0,
1489 +                     size_a: 0,
1490 +                     index_a: 0,
1491 +                     padding_a: 0,
1492 +                 }
     |

warning: statement with no effect
    --> src/smoke.rs:1507:5
     |
1507 |     ltests;
     |     ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/smoke.rs:1516:9
     |
1516 |         lfails;
     |         ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/smoke.rs:1552:5
     |
1552 |     ltests;
     |     ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/smoke.rs:1555:9
     |
1555 |         lfails;
     |         ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unneeded `return` statement
    --> src/smoke.rs:1651:5
     |
1651 |     return (lfails != 0 as libc::c_int) as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `(lfails != 0 as libc::c_int) as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/smoke.rs:1625:9
     |
1625 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/smoke.rs:1636:9
     |
1636 |         i_0;
     |         ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/tiamalgamation.rs:166:1
    |
166 | / pub unsafe extern "C" fn ti_abs_start(
167 | |     mut options: *const libc::c_double,
168 | | ) -> libc::c_int {
169 | |     return 0 as libc::c_int;
170 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/tiamalgamation.rs:169:5
    |
169 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/tiamalgamation.rs:172:1
    |
172 | / pub unsafe extern "C" fn ti_abs(
173 | |     mut size: libc::c_int,
174 | |     mut inputs: *const *const libc::c_double,
175 | |     mut options: *const libc::c_double,
...   |
187 | |     return 0 as libc::c_int;
188 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/tiamalgamation.rs:187:5
    |
187 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/tiamalgamation.rs:185:9
    |
185 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/tiamalgamation.rs:190:1
    |
190 | / pub unsafe extern "C" fn ti_acos_start(
191 | |     mut options: *const libc::c_double,
192 | | ) -> libc::c_int {
193 | |     return 0 as libc::c_int;
194 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/tiamalgamation.rs:193:5
    |
193 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/tiamalgamation.rs:196:1
    |
196 | / pub unsafe extern "C" fn ti_acos(
197 | |     mut size: libc::c_int,
198 | |     mut inputs: *const *const libc::c_double,
199 | |     mut options: *const libc::c_double,
...   |
211 | |     return 0 as libc::c_int;
212 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/tiamalgamation.rs:211:5
    |
211 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/tiamalgamation.rs:209:9
    |
209 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/tiamalgamation.rs:214:1
    |
214 | / pub unsafe extern "C" fn ti_ad_start(mut options: *const libc::c_double) -> libc::c_int {
215 | |     return 0 as libc::c_int;
216 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/tiamalgamation.rs:215:5
    |
215 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/tiamalgamation.rs:218:1
    |
218 | / pub unsafe extern "C" fn ti_ad(
219 | |     mut size: libc::c_int,
220 | |     mut inputs: *const *const libc::c_double,
221 | |     mut options: *const libc::c_double,
...   |
244 | |     return 0 as libc::c_int;
245 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/tiamalgamation.rs:244:5
    |
244 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/tiamalgamation.rs:242:9
    |
242 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/tiamalgamation.rs:247:1
    |
247 | / pub unsafe extern "C" fn ti_add_start(
248 | |     mut options: *const libc::c_double,
249 | | ) -> libc::c_int {
250 | |     return 0 as libc::c_int;
251 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/tiamalgamation.rs:250:5
    |
250 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/tiamalgamation.rs:253:1
    |
253 | / pub unsafe extern "C" fn ti_add(
254 | |     mut size: libc::c_int,
255 | |     mut inputs: *const *const libc::c_double,
256 | |     mut options: *const libc::c_double,
...   |
269 | |     return 0 as libc::c_int;
270 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/tiamalgamation.rs:269:5
    |
269 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/tiamalgamation.rs:267:9
    |
267 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/tiamalgamation.rs:272:1
    |
272 | / pub unsafe extern "C" fn ti_adosc_start(
273 | |     mut options: *const libc::c_double,
274 | | ) -> libc::c_int {
275 | |     return *options.offset(1 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
276 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/tiamalgamation.rs:275:5
    |
275 |     return *options.offset(1 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(1 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/tiamalgamation.rs:278:1
    |
278 | / pub unsafe extern "C" fn ti_adosc(
279 | |     mut size: libc::c_int,
280 | |     mut inputs: *const *const libc::c_double,
281 | |     mut options: *const libc::c_double,
...   |
352 | |     return 0 as libc::c_int;
353 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/tiamalgamation.rs:352:5
    |
352 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/tiamalgamation.rs:333:9
    |
333 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/tiamalgamation.rs:355:1
    |
355 | / pub unsafe extern "C" fn ti_adx_start(
356 | |     mut options: *const libc::c_double,
357 | | ) -> libc::c_int {
358 | |     return (*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int)
359 | |         * 2 as libc::c_int;
360 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/tiamalgamation.rs:358:5
    |
358 | /     return (*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int)
359 | |         * 2 as libc::c_int;
    | |___________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
358 ~     (*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int)
359 +         * 2 as libc::c_int
    |

warning: unsafe function's docs miss `# Safety` section
   --> src/tiamalgamation.rs:362:1
    |
362 | / pub unsafe extern "C" fn ti_adx(
363 | |     mut size: libc::c_int,
364 | |     mut inputs: *const *const libc::c_double,
365 | |     mut options: *const libc::c_double,
...   |
469 | |     return 0 as libc::c_int;
470 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/tiamalgamation.rs:469:5
    |
469 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/tiamalgamation.rs:403:9
    |
403 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `if` chain can be rewritten with `match`
   --> src/tiamalgamation.rs:436:9
    |
436 | /         if i - period < period - 2 as libc::c_int {
437 | |             adx += dx_0;
438 | |         } else if i - period == period - 2 as libc::c_int {
439 | |             adx += dx_0;
...   |
447 | |             *fresh2 = adx * invper;
448 | |         }
    | |_________^
    |
    = help: consider rewriting the `if` chain to use `cmp` and `match`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain

warning: statement with no effect
   --> src/tiamalgamation.rs:450:9
    |
450 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/tiamalgamation.rs:472:1
    |
472 | / pub unsafe extern "C" fn ti_adxr_start(
473 | |     mut options: *const libc::c_double,
474 | | ) -> libc::c_int {
475 | |     return (*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int)
476 | |         * 3 as libc::c_int;
477 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/tiamalgamation.rs:475:5
    |
475 | /     return (*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int)
476 | |         * 3 as libc::c_int;
    | |___________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
475 ~     (*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int)
476 +         * 3 as libc::c_int
    |

warning: unsafe function's docs miss `# Safety` section
   --> src/tiamalgamation.rs:479:1
    |
479 | / pub unsafe extern "C" fn ti_adxr(
480 | |     mut size: libc::c_int,
481 | |     mut inputs: *const *const libc::c_double,
482 | |     mut options: *const libc::c_double,
...   |
605 | |     return 0 as libc::c_int;
606 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/tiamalgamation.rs:605:5
    |
605 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/tiamalgamation.rs:520:9
    |
520 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `if` chain can be rewritten with `match`
   --> src/tiamalgamation.rs:555:9
    |
555 | /         if i - period < period - 2 as libc::c_int {
556 | |             adx += dx_0;
557 | |         } else if i - period == period - 2 as libc::c_int {
558 | |             adx += dx_0;
...   |
582 | |             }
583 | |         }
    | |_________^
    |
    = help: consider rewriting the `if` chain to use `cmp` and `match`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain

warning: manual implementation of an assign operation
   --> src/tiamalgamation.rs:560:13
    |
560 |             (*adxr).index = (*adxr).index + 1 as libc::c_int;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*adxr).index += 1 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: manual implementation of an assign operation
   --> src/tiamalgamation.rs:579:13
    |
579 |             (*adxr).index = (*adxr).index + 1 as libc::c_int;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*adxr).index += 1 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
   --> src/tiamalgamation.rs:585:9
    |
585 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/tiamalgamation.rs:608:1
    |
608 | / pub unsafe extern "C" fn ti_ao_start(mut options: *const libc::c_double) -> libc::c_int {
609 | |     return 33 as libc::c_int;
610 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/tiamalgamation.rs:609:5
    |
609 |     return 33 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `33 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/tiamalgamation.rs:612:1
    |
612 | / pub unsafe extern "C" fn ti_ao(
613 | |     mut size: libc::c_int,
614 | |     mut inputs: *const *const libc::c_double,
615 | |     mut options: *const libc::c_double,
...   |
681 | |     return 0 as libc::c_int;
682 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/tiamalgamation.rs:681:5
    |
681 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/tiamalgamation.rs:639:9
    |
639 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/tiamalgamation.rs:662:9
    |
662 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/tiamalgamation.rs:684:1
    |
684 | / pub unsafe extern "C" fn ti_apo_start(
685 | |     mut options: *const libc::c_double,
686 | | ) -> libc::c_int {
687 | |     return 1 as libc::c_int;
688 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/tiamalgamation.rs:687:5
    |
687 |     return 1 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/tiamalgamation.rs:690:1
    |
690 | / pub unsafe extern "C" fn ti_apo(
691 | |     mut size: libc::c_int,
692 | |     mut inputs: *const *const libc::c_double,
693 | |     mut options: *const libc::c_double,
...   |
749 | |     return 0 as libc::c_int;
750 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/tiamalgamation.rs:749:5
    |
749 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/tiamalgamation.rs:730:9
    |
730 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/tiamalgamation.rs:752:1
    |
752 | / pub unsafe extern "C" fn ti_aroon_start(
753 | |     mut options: *const libc::c_double,
754 | | ) -> libc::c_int {
755 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
756 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/tiamalgamation.rs:755:5
    |
755 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/tiamalgamation.rs:758:1
    |
758 | / pub unsafe extern "C" fn ti_aroon(
759 | |     mut size: libc::c_int,
760 | |     mut inputs: *const *const libc::c_double,
761 | |     mut options: *const libc::c_double,
...   |
871 | |     return 0 as libc::c_int;
872 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this boolean expression can be simplified
   --> src/tiamalgamation.rs:793:20
    |
793 |                 if !(j <= i) {
    |                    ^^^^^^^^^ help: try: `j > i`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this boolean expression can be simplified
   --> src/tiamalgamation.rs:813:20
    |
813 |                 if !(j <= i) {
    |                    ^^^^^^^^^ help: try: `j > i`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
   --> src/tiamalgamation.rs:871:5
    |
871 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/tiamalgamation.rs:833:9
    |
833 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/tiamalgamation.rs:835:9
    |
835 |         trail;
    |         ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/tiamalgamation.rs:874:1
    |
874 | / pub unsafe extern "C" fn ti_aroonosc_start(
875 | |     mut options: *const libc::c_double,
876 | | ) -> libc::c_int {
877 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
878 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/tiamalgamation.rs:877:5
    |
877 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/tiamalgamation.rs:880:1
    |
880 | / pub unsafe extern "C" fn ti_aroonosc(
881 | |     mut size: libc::c_int,
882 | |     mut inputs: *const *const libc::c_double,
883 | |     mut options: *const libc::c_double,
...   |
971 | |     return 0 as libc::c_int;
972 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this boolean expression can be simplified
   --> src/tiamalgamation.rs:913:20
    |
913 |                 if !(j <= i) {
    |                    ^^^^^^^^^ help: try: `j > i`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this boolean expression can be simplified
   --> src/tiamalgamation.rs:933:20
    |
933 |                 if !(j <= i) {
    |                    ^^^^^^^^^ help: try: `j > i`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
   --> src/tiamalgamation.rs:971:5
    |
971 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/tiamalgamation.rs:950:9
    |
950 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/tiamalgamation.rs:952:9
    |
952 |         trail;
    |         ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/tiamalgamation.rs:974:1
    |
974 | / pub unsafe extern "C" fn ti_asin_start(
975 | |     mut options: *const libc::c_double,
976 | | ) -> libc::c_int {
977 | |     return 0 as libc::c_int;
978 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/tiamalgamation.rs:977:5
    |
977 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/tiamalgamation.rs:980:1
    |
980 | / pub unsafe extern "C" fn ti_asin(
981 | |     mut size: libc::c_int,
982 | |     mut inputs: *const *const libc::c_double,
983 | |     mut options: *const libc::c_double,
...   |
995 | |     return 0 as libc::c_int;
996 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/tiamalgamation.rs:995:5
    |
995 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/tiamalgamation.rs:993:9
    |
993 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:998:1
     |
998  | / pub unsafe extern "C" fn ti_atan_start(
999  | |     mut options: *const libc::c_double,
1000 | | ) -> libc::c_int {
1001 | |     return 0 as libc::c_int;
1002 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:1001:5
     |
1001 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:1004:1
     |
1004 | / pub unsafe extern "C" fn ti_atan(
1005 | |     mut size: libc::c_int,
1006 | |     mut inputs: *const *const libc::c_double,
1007 | |     mut options: *const libc::c_double,
...    |
1019 | |     return 0 as libc::c_int;
1020 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:1019:5
     |
1019 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:1017:9
     |
1017 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:1022:1
     |
1022 | / pub unsafe extern "C" fn ti_atr_start(
1023 | |     mut options: *const libc::c_double,
1024 | | ) -> libc::c_int {
1025 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
1026 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:1025:5
     |
1025 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:1028:1
     |
1028 | / pub unsafe extern "C" fn ti_atr(
1029 | |     mut size: libc::c_int,
1030 | |     mut inputs: *const *const libc::c_double,
1031 | |     mut options: *const libc::c_double,
...    |
1114 | |     return 0 as libc::c_int;
1115 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:1114:5
     |
1114 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:1069:9
     |
1069 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:1095:9
     |
1095 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:1117:1
     |
1117 | / pub unsafe extern "C" fn ti_atr_ref(
1118 | |     mut size: libc::c_int,
1119 | |     mut inputs: *const *const libc::c_double,
1120 | |     mut options: *const libc::c_double,
...    |
1175 | |     return wilders_ret;
1176 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:1175:5
     |
1175 |     return wilders_ret;
     |     ^^^^^^^^^^^^^^^^^^^ help: remove `return`: `wilders_ret`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *const _` detected
    --> src/tiamalgamation.rs:1143:9
     |
1143 |         0 as *const libc::c_double,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:1178:1
     |
1178 | / pub unsafe extern "C" fn ti_atr_stream_new(
1179 | |     mut options: *const libc::c_double,
1180 | |     mut stream_in: *mut *mut ti_stream,
1181 | | ) -> libc::c_int {
...    |
1196 | |     return 0 as libc::c_int;
1197 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:1196:5
     |
1196 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:1199:1
     |
1199 | / pub unsafe extern "C" fn ti_atr_stream_run(
1200 | |     mut stream_in: *mut ti_stream,
1201 | |     mut size: libc::c_int,
1202 | |     mut inputs: *const *const libc::c_double,
...    |
1287 | |     return 0 as libc::c_int;
1288 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:1287:5
     |
1287 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:1220:13
     |
1220 |             (*stream).progress;
     |             ^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:1222:13
     |
1222 |             i;
     |             ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:1244:13
     |
1244 |             (*stream).progress;
     |             ^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:1246:13
     |
1246 |             i;
     |             ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:1281:13
     |
1281 |             (*stream).progress;
     |             ^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:1283:13
     |
1283 |             i;
     |             ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:1290:1
     |
1290 | / pub unsafe extern "C" fn ti_atr_stream_free(mut stream: *mut ti_stream) {
1291 | |     free(stream as *mut libc::c_void);
1292 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:1294:1
     |
1294 | / pub unsafe extern "C" fn ti_avgprice_start(
1295 | |     mut options: *const libc::c_double,
1296 | | ) -> libc::c_int {
1297 | |     return 0 as libc::c_int;
1298 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:1297:5
     |
1297 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:1300:1
     |
1300 | / pub unsafe extern "C" fn ti_avgprice(
1301 | |     mut size: libc::c_int,
1302 | |     mut inputs: *const *const libc::c_double,
1303 | |     mut options: *const libc::c_double,
...    |
1322 | |     return 0 as libc::c_int;
1323 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:1322:5
     |
1322 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:1320:9
     |
1320 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:1325:1
     |
1325 | / pub unsafe extern "C" fn ti_bbands_start(
1326 | |     mut options: *const libc::c_double,
1327 | | ) -> libc::c_int {
1328 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
1329 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:1328:5
     |
1328 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:1331:1
     |
1331 | / pub unsafe extern "C" fn ti_bbands(
1332 | |     mut size: libc::c_int,
1333 | |     mut inputs: *const *const libc::c_double,
1334 | |     mut options: *const libc::c_double,
...    |
1442 | |     return 0 as libc::c_int;
1443 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:1442:5
     |
1442 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:1358:9
     |
1358 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:1369:5
     |
1369 |     middle;
     |     ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:1387:9
     |
1387 |         middle;
     |         ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:1389:9
     |
1389 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:1445:1
     |
1445 | / pub unsafe extern "C" fn ti_bop_start(
1446 | |     mut options: *const libc::c_double,
1447 | | ) -> libc::c_int {
1448 | |     return 0 as libc::c_int;
1449 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:1448:5
     |
1448 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:1451:1
     |
1451 | / pub unsafe extern "C" fn ti_bop(
1452 | |     mut size: libc::c_int,
1453 | |     mut inputs: *const *const libc::c_double,
1454 | |     mut options: *const libc::c_double,
...    |
1477 | |     return 0 as libc::c_int;
1478 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:1477:5
     |
1477 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:1475:9
     |
1475 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:1480:1
     |
1480 | / pub unsafe extern "C" fn ti_cci_start(
1481 | |     mut options: *const libc::c_double,
1482 | | ) -> libc::c_int {
1483 | |     let period: libc::c_int = *options.offset(0 as libc::c_int as isize) as libc::c_int;
1484 | |     return (period - 1 as libc::c_int) * 2 as libc::c_int;
1485 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:1484:5
     |
1484 |     return (period - 1 as libc::c_int) * 2 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `(period - 1 as libc::c_int) * 2 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:1487:1
     |
1487 | / pub unsafe extern "C" fn ti_cci(
1488 | |     mut size: libc::c_int,
1489 | |     mut inputs: *const *const libc::c_double,
1490 | |     mut options: *const libc::c_double,
...    |
1559 | |     return 0 as libc::c_int;
1560 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:1559:5
     |
1559 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: manual implementation of an assign operation
    --> src/tiamalgamation.rs:1518:9
     |
1518 |         (*sum).index = (*sum).index + 1 as libc::c_int;
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*sum).index += 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
    --> src/tiamalgamation.rs:1529:17
     |
1529 |                 j;
     |                 ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:1539:9
     |
1539 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:1562:1
     |
1562 | / pub unsafe extern "C" fn ti_ceil_start(
1563 | |     mut options: *const libc::c_double,
1564 | | ) -> libc::c_int {
1565 | |     return 0 as libc::c_int;
1566 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:1565:5
     |
1565 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:1568:1
     |
1568 | / pub unsafe extern "C" fn ti_ceil(
1569 | |     mut size: libc::c_int,
1570 | |     mut inputs: *const *const libc::c_double,
1571 | |     mut options: *const libc::c_double,
...    |
1583 | |     return 0 as libc::c_int;
1584 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:1583:5
     |
1583 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:1581:9
     |
1581 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:1586:1
     |
1586 | / pub unsafe extern "C" fn ti_cmo_start(
1587 | |     mut options: *const libc::c_double,
1588 | | ) -> libc::c_int {
1589 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
1590 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:1589:5
     |
1589 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:1592:1
     |
1592 | / pub unsafe extern "C" fn ti_cmo(
1593 | |     mut size: libc::c_int,
1594 | |     mut inputs: *const *const libc::c_double,
1595 | |     mut options: *const libc::c_double,
...    |
1699 | |     return 0 as libc::c_int;
1700 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:1699:5
     |
1699 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:1631:9
     |
1631 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:1680:9
     |
1680 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:1702:1
     |
1702 | / pub unsafe extern "C" fn ti_cos_start(
1703 | |     mut options: *const libc::c_double,
1704 | | ) -> libc::c_int {
1705 | |     return 0 as libc::c_int;
1706 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:1705:5
     |
1705 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:1708:1
     |
1708 | / pub unsafe extern "C" fn ti_cos(
1709 | |     mut size: libc::c_int,
1710 | |     mut inputs: *const *const libc::c_double,
1711 | |     mut options: *const libc::c_double,
...    |
1723 | |     return 0 as libc::c_int;
1724 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:1723:5
     |
1723 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:1721:9
     |
1721 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:1726:1
     |
1726 | / pub unsafe extern "C" fn ti_cosh_start(
1727 | |     mut options: *const libc::c_double,
1728 | | ) -> libc::c_int {
1729 | |     return 0 as libc::c_int;
1730 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:1729:5
     |
1729 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:1732:1
     |
1732 | / pub unsafe extern "C" fn ti_cosh(
1733 | |     mut size: libc::c_int,
1734 | |     mut inputs: *const *const libc::c_double,
1735 | |     mut options: *const libc::c_double,
...    |
1747 | |     return 0 as libc::c_int;
1748 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:1747:5
     |
1747 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:1745:9
     |
1745 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:1750:1
     |
1750 | / pub unsafe extern "C" fn ti_crossany_start(
1751 | |     mut options: *const libc::c_double,
1752 | | ) -> libc::c_int {
1753 | |     return 1 as libc::c_int;
1754 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:1753:5
     |
1753 |     return 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:1756:1
     |
1756 | / pub unsafe extern "C" fn ti_crossany(
1757 | |     mut size: libc::c_int,
1758 | |     mut inputs: *const *const libc::c_double,
1759 | |     mut options: *const libc::c_double,
...    |
1780 | |     return 0 as libc::c_int;
1781 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:1780:5
     |
1780 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:1778:9
     |
1778 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:1783:1
     |
1783 | / pub unsafe extern "C" fn ti_crossover_start(
1784 | |     mut options: *const libc::c_double,
1785 | | ) -> libc::c_int {
1786 | |     return 1 as libc::c_int;
1787 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:1786:5
     |
1786 |     return 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:1789:1
     |
1789 | / pub unsafe extern "C" fn ti_crossover(
1790 | |     mut size: libc::c_int,
1791 | |     mut inputs: *const *const libc::c_double,
1792 | |     mut options: *const libc::c_double,
...    |
1810 | |     return 0 as libc::c_int;
1811 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:1810:5
     |
1810 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:1808:9
     |
1808 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:1813:1
     |
1813 | / pub unsafe extern "C" fn ti_cvi_start(
1814 | |     mut options: *const libc::c_double,
1815 | | ) -> libc::c_int {
1816 | |     let n: libc::c_int = *options.offset(0 as libc::c_int as isize) as libc::c_int;
1817 | |     return n * 2 as libc::c_int - 1 as libc::c_int;
1818 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:1817:5
     |
1817 |     return n * 2 as libc::c_int - 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `n * 2 as libc::c_int - 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:1820:1
     |
1820 | / pub unsafe extern "C" fn ti_cvi(
1821 | |     mut size: libc::c_int,
1822 | |     mut inputs: *const *const libc::c_double,
1823 | |     mut options: *const libc::c_double,
...    |
1888 | |     return 0 as libc::c_int;
1889 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:1888:5
     |
1888 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: manual implementation of an assign operation
    --> src/tiamalgamation.rs:1846:9
     |
1846 |         (*lag).index = (*lag).index + 1 as libc::c_int;
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*lag).index += 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
    --> src/tiamalgamation.rs:1851:9
     |
1851 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: manual implementation of an assign operation
    --> src/tiamalgamation.rs:1863:9
     |
1863 |         (*lag).index = (*lag).index + 1 as libc::c_int;
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*lag).index += 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
    --> src/tiamalgamation.rs:1868:9
     |
1868 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:1891:1
     |
1891 | / pub unsafe extern "C" fn ti_decay_start(
1892 | |     mut options: *const libc::c_double,
1893 | | ) -> libc::c_int {
1894 | |     return 0 as libc::c_int;
1895 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:1894:5
     |
1894 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:1897:1
     |
1897 | / pub unsafe extern "C" fn ti_decay(
1898 | |     mut size: libc::c_int,
1899 | |     mut inputs: *const *const libc::c_double,
1900 | |     mut options: *const libc::c_double,
...    |
1924 | |     return 0 as libc::c_int;
1925 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:1924:5
     |
1924 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:1922:9
     |
1922 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:1927:1
     |
1927 | / pub unsafe extern "C" fn ti_dema_start(
1928 | |     mut options: *const libc::c_double,
1929 | | ) -> libc::c_int {
1930 | |     let period: libc::c_int = *options.offset(0 as libc::c_int as isize) as libc::c_int;
1931 | |     return (period - 1 as libc::c_int) * 2 as libc::c_int;
1932 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:1931:5
     |
1931 |     return (period - 1 as libc::c_int) * 2 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `(period - 1 as libc::c_int) * 2 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:1934:1
     |
1934 | / pub unsafe extern "C" fn ti_dema(
1935 | |     mut size: libc::c_int,
1936 | |     mut inputs: *const *const libc::c_double,
1937 | |     mut options: *const libc::c_double,
...    |
1989 | |     return 0 as libc::c_int;
1990 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:1989:5
     |
1989 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:1966:17
     |
1966 |                 output;
     |                 ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:1970:9
     |
1970 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:1992:1
     |
1992 | / pub unsafe extern "C" fn ti_di_start(mut options: *const libc::c_double) -> libc::c_int {
1993 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
1994 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:1993:5
     |
1993 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:1996:1
     |
1996 | / pub unsafe extern "C" fn ti_di(
1997 | |     mut size: libc::c_int,
1998 | |     mut inputs: *const *const libc::c_double,
1999 | |     mut options: *const libc::c_double,
...    |
2138 | |     return 0 as libc::c_int;
2139 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:2138:5
     |
2138 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:2054:9
     |
2054 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:2102:9
     |
2102 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:2141:1
     |
2141 | / pub unsafe extern "C" fn ti_div_start(
2142 | |     mut options: *const libc::c_double,
2143 | | ) -> libc::c_int {
2144 | |     return 0 as libc::c_int;
2145 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:2144:5
     |
2144 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:2147:1
     |
2147 | / pub unsafe extern "C" fn ti_div(
2148 | |     mut size: libc::c_int,
2149 | |     mut inputs: *const *const libc::c_double,
2150 | |     mut options: *const libc::c_double,
...    |
2163 | |     return 0 as libc::c_int;
2164 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:2163:5
     |
2163 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:2161:9
     |
2161 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:2166:1
     |
2166 | / pub unsafe extern "C" fn ti_dm_start(mut options: *const libc::c_double) -> libc::c_int {
2167 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
2168 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:2167:5
     |
2167 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:2170:1
     |
2170 | / pub unsafe extern "C" fn ti_dm(
2171 | |     mut size: libc::c_int,
2172 | |     mut inputs: *const *const libc::c_double,
2173 | |     mut options: *const libc::c_double,
...    |
2280 | |     return 0 as libc::c_int;
2281 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:2280:5
     |
2280 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:2211:9
     |
2211 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:2244:9
     |
2244 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:2283:1
     |
2283 | / pub unsafe extern "C" fn ti_dpo_start(
2284 | |     mut options: *const libc::c_double,
2285 | | ) -> libc::c_int {
2286 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
2287 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:2286:5
     |
2286 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:2289:1
     |
2289 | / pub unsafe extern "C" fn ti_dpo(
2290 | |     mut size: libc::c_int,
2291 | |     mut inputs: *const *const libc::c_double,
2292 | |     mut options: *const libc::c_double,
...    |
2344 | |     return 0 as libc::c_int;
2345 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:2344:5
     |
2344 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:2312:9
     |
2312 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:2325:9
     |
2325 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:2347:1
     |
2347 | / pub unsafe extern "C" fn ti_dx_start(mut options: *const libc::c_double) -> libc::c_int {
2348 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
2349 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:2348:5
     |
2348 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:2351:1
     |
2351 | / pub unsafe extern "C" fn ti_dx(
2352 | |     mut size: libc::c_int,
2353 | |     mut inputs: *const *const libc::c_double,
2354 | |     mut options: *const libc::c_double,
...    |
2448 | |     return 0 as libc::c_int;
2449 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:2448:5
     |
2448 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:2391:9
     |
2391 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:2429:9
     |
2429 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:2451:1
     |
2451 | / pub unsafe extern "C" fn ti_edecay_start(
2452 | |     mut options: *const libc::c_double,
2453 | | ) -> libc::c_int {
2454 | |     return 0 as libc::c_int;
2455 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:2454:5
     |
2454 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:2457:1
     |
2457 | / pub unsafe extern "C" fn ti_edecay(
2458 | |     mut size: libc::c_int,
2459 | |     mut inputs: *const *const libc::c_double,
2460 | |     mut options: *const libc::c_double,
...    |
2484 | |     return 0 as libc::c_int;
2485 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:2484:5
     |
2484 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:2482:9
     |
2482 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:2487:1
     |
2487 | / pub unsafe extern "C" fn ti_ema_start(
2488 | |     mut options: *const libc::c_double,
2489 | | ) -> libc::c_int {
2490 | |     return 0 as libc::c_int;
2491 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:2490:5
     |
2490 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:2493:1
     |
2493 | / pub unsafe extern "C" fn ti_ema(
2494 | |     mut size: libc::c_int,
2495 | |     mut inputs: *const *const libc::c_double,
2496 | |     mut options: *const libc::c_double,
...    |
2541 | |     return 0 as libc::c_int;
2542 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:2541:5
     |
2541 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:2522:9
     |
2522 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:2544:1
     |
2544 | / pub unsafe extern "C" fn ti_emv_start(
2545 | |     mut options: *const libc::c_double,
2546 | | ) -> libc::c_int {
2547 | |     return 1 as libc::c_int;
2548 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:2547:5
     |
2547 |     return 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:2550:1
     |
2550 | / pub unsafe extern "C" fn ti_emv(
2551 | |     mut size: libc::c_int,
2552 | |     mut inputs: *const *const libc::c_double,
2553 | |     mut options: *const libc::c_double,
...    |
2596 | |     return 0 as libc::c_int;
2597 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:2596:5
     |
2596 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:2577:9
     |
2577 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:2599:1
     |
2599 | / pub unsafe extern "C" fn ti_exp_start(
2600 | |     mut options: *const libc::c_double,
2601 | | ) -> libc::c_int {
2602 | |     return 0 as libc::c_int;
2603 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:2602:5
     |
2602 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:2605:1
     |
2605 | / pub unsafe extern "C" fn ti_exp(
2606 | |     mut size: libc::c_int,
2607 | |     mut inputs: *const *const libc::c_double,
2608 | |     mut options: *const libc::c_double,
...    |
2620 | |     return 0 as libc::c_int;
2621 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:2620:5
     |
2620 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:2618:9
     |
2618 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:2623:1
     |
2623 | / pub unsafe extern "C" fn ti_fisher_start(
2624 | |     mut options: *const libc::c_double,
2625 | | ) -> libc::c_int {
2626 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
2627 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:2626:5
     |
2626 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:2629:1
     |
2629 | / pub unsafe extern "C" fn ti_fisher(
2630 | |     mut size: libc::c_int,
2631 | |     mut inputs: *const *const libc::c_double,
2632 | |     mut options: *const libc::c_double,
...    |
2761 | |     return 0 as libc::c_int;
2762 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this boolean expression can be simplified
    --> src/tiamalgamation.rs:2669:20
     |
2669 |                 if !(j <= i) {
     |                    ^^^^^^^^^ help: try: `j > i`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this boolean expression can be simplified
    --> src/tiamalgamation.rs:2689:20
     |
2689 |                 if !(j <= i) {
     |                    ^^^^^^^^^ help: try: `j > i`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:2761:5
     |
2761 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:2723:9
     |
2723 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:2725:9
     |
2725 |         trail;
     |         ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:2764:1
     |
2764 | / pub unsafe extern "C" fn ti_floor_start(
2765 | |     mut options: *const libc::c_double,
2766 | | ) -> libc::c_int {
2767 | |     return 0 as libc::c_int;
2768 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:2767:5
     |
2767 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:2770:1
     |
2770 | / pub unsafe extern "C" fn ti_floor(
2771 | |     mut size: libc::c_int,
2772 | |     mut inputs: *const *const libc::c_double,
2773 | |     mut options: *const libc::c_double,
...    |
2785 | |     return 0 as libc::c_int;
2786 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:2785:5
     |
2785 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:2783:9
     |
2783 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:2788:1
     |
2788 | / pub unsafe extern "C" fn ti_fosc_start(
2789 | |     mut options: *const libc::c_double,
2790 | | ) -> libc::c_int {
2791 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
2792 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:2791:5
     |
2791 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:2794:1
     |
2794 | / pub unsafe extern "C" fn ti_fosc(
2795 | |     mut size: libc::c_int,
2796 | |     mut inputs: *const *const libc::c_double,
2797 | |     mut options: *const libc::c_double,
...    |
2863 | |     return 0 as libc::c_int;
2864 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:2863:5
     |
2863 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:2823:9
     |
2823 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:2844:9
     |
2844 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:2866:1
     |
2866 | / pub unsafe extern "C" fn ti_hma_start(
2867 | |     mut options: *const libc::c_double,
2868 | | ) -> libc::c_int {
2869 | |     let period: libc::c_int = *options.offset(0 as libc::c_int as isize) as libc::c_int;
2870 | |     let periodsqrt: libc::c_int = sqrt(period as libc::c_double) as libc::c_int;
2871 | |     return period + periodsqrt - 2 as libc::c_int;
2872 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:2871:5
     |
2871 |     return period + periodsqrt - 2 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `period + periodsqrt - 2 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:2874:1
     |
2874 | / pub unsafe extern "C" fn ti_hma(
2875 | |     mut size: libc::c_int,
2876 | |     mut inputs: *const *const libc::c_double,
2877 | |     mut options: *const libc::c_double,
...    |
2975 | |     return 0 as libc::c_int;
2976 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:2975:5
     |
2975 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:2916:9
     |
2916 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: manual implementation of an assign operation
    --> src/tiamalgamation.rs:2931:9
     |
2931 |         (*buff).index = (*buff).index + 1 as libc::c_int;
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*buff).index += 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
    --> src/tiamalgamation.rs:2955:9
     |
2955 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:2978:1
     |
2978 | / pub unsafe extern "C" fn ti_kama_start(
2979 | |     mut options: *const libc::c_double,
2980 | | ) -> libc::c_int {
2981 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
2982 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:2981:5
     |
2981 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:2984:1
     |
2984 | / pub unsafe extern "C" fn ti_kama(
2985 | |     mut size: libc::c_int,
2986 | |     mut inputs: *const *const libc::c_double,
2987 | |     mut options: *const libc::c_double,
...    |
3069 | |     return 0 as libc::c_int;
3070 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:3069:5
     |
3069 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:3013:9
     |
3013 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:3050:9
     |
3050 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:3072:1
     |
3072 | / pub unsafe extern "C" fn ti_kvo_start(
3073 | |     mut options: *const libc::c_double,
3074 | | ) -> libc::c_int {
3075 | |     return 1 as libc::c_int;
3076 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:3075:5
     |
3075 |     return 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:3078:1
     |
3078 | / pub unsafe extern "C" fn ti_kvo(
3079 | |     mut size: libc::c_int,
3080 | |     mut inputs: *const *const libc::c_double,
3081 | |     mut options: *const libc::c_double,
...    |
3166 | |     return 0 as libc::c_int;
3167 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:3166:5
     |
3166 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:3147:9
     |
3147 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:3169:1
     |
3169 | / pub unsafe extern "C" fn ti_lag_start(
3170 | |     mut options: *const libc::c_double,
3171 | | ) -> libc::c_int {
3172 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
3173 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:3172:5
     |
3172 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:3175:1
     |
3175 | / pub unsafe extern "C" fn ti_lag(
3176 | |     mut size: libc::c_int,
3177 | |     mut inputs: *const *const libc::c_double,
3178 | |     mut options: *const libc::c_double,
...    |
3216 | |     return 0 as libc::c_int;
3217 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:3216:5
     |
3216 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:3197:9
     |
3197 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:3219:1
     |
3219 | / pub unsafe extern "C" fn ti_linreg_start(
3220 | |     mut options: *const libc::c_double,
3221 | | ) -> libc::c_int {
3222 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
3223 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:3222:5
     |
3222 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:3225:1
     |
3225 | / pub unsafe extern "C" fn ti_linreg(
3226 | |     mut size: libc::c_int,
3227 | |     mut inputs: *const *const libc::c_double,
3228 | |     mut options: *const libc::c_double,
...    |
3289 | |     return 0 as libc::c_int;
3290 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:3289:5
     |
3289 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:3253:9
     |
3253 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:3270:9
     |
3270 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:3292:1
     |
3292 | / pub unsafe extern "C" fn ti_linregintercept_start(
3293 | |     mut options: *const libc::c_double,
3294 | | ) -> libc::c_int {
3295 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
3296 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:3295:5
     |
3295 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:3298:1
     |
3298 | / pub unsafe extern "C" fn ti_linregintercept(
3299 | |     mut size: libc::c_int,
3300 | |     mut inputs: *const *const libc::c_double,
3301 | |     mut options: *const libc::c_double,
...    |
3362 | |     return 0 as libc::c_int;
3363 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:3362:5
     |
3362 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:3326:9
     |
3326 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:3343:9
     |
3343 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:3365:1
     |
3365 | / pub unsafe extern "C" fn ti_linregslope_start(
3366 | |     mut options: *const libc::c_double,
3367 | | ) -> libc::c_int {
3368 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
3369 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:3368:5
     |
3368 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:3371:1
     |
3371 | / pub unsafe extern "C" fn ti_linregslope(
3372 | |     mut size: libc::c_int,
3373 | |     mut inputs: *const *const libc::c_double,
3374 | |     mut options: *const libc::c_double,
...    |
3433 | |     return 0 as libc::c_int;
3434 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:3433:5
     |
3433 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:3398:9
     |
3398 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:3414:9
     |
3414 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:3436:1
     |
3436 | / pub unsafe extern "C" fn ti_ln_start(mut options: *const libc::c_double) -> libc::c_int {
3437 | |     return 0 as libc::c_int;
3438 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:3437:5
     |
3437 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:3440:1
     |
3440 | / pub unsafe extern "C" fn ti_ln(
3441 | |     mut size: libc::c_int,
3442 | |     mut inputs: *const *const libc::c_double,
3443 | |     mut options: *const libc::c_double,
...    |
3455 | |     return 0 as libc::c_int;
3456 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:3455:5
     |
3455 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:3453:9
     |
3453 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:3458:1
     |
3458 | / pub unsafe extern "C" fn ti_log10_start(
3459 | |     mut options: *const libc::c_double,
3460 | | ) -> libc::c_int {
3461 | |     return 0 as libc::c_int;
3462 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:3461:5
     |
3461 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:3464:1
     |
3464 | / pub unsafe extern "C" fn ti_log10(
3465 | |     mut size: libc::c_int,
3466 | |     mut inputs: *const *const libc::c_double,
3467 | |     mut options: *const libc::c_double,
...    |
3479 | |     return 0 as libc::c_int;
3480 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:3479:5
     |
3479 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:3477:9
     |
3477 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:3482:1
     |
3482 | / pub unsafe extern "C" fn ti_macd_start(
3483 | |     mut options: *const libc::c_double,
3484 | | ) -> libc::c_int {
3485 | |     let long_period: libc::c_int = *options.offset(1 as libc::c_int as isize)
3486 | |         as libc::c_int;
3487 | |     return long_period - 1 as libc::c_int;
3488 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:3487:5
     |
3487 |     return long_period - 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `long_period - 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:3490:1
     |
3490 | / pub unsafe extern "C" fn ti_macd(
3491 | |     mut size: libc::c_int,
3492 | |     mut inputs: *const *const libc::c_double,
3493 | |     mut options: *const libc::c_double,
...    |
3609 | |     return 0 as libc::c_int;
3610 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:3609:5
     |
3609 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:3556:9
     |
3556 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:3612:1
     |
3612 | / pub unsafe extern "C" fn ti_marketfi_start(
3613 | |     mut options: *const libc::c_double,
3614 | | ) -> libc::c_int {
3615 | |     return 0 as libc::c_int;
3616 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:3615:5
     |
3615 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:3618:1
     |
3618 | / pub unsafe extern "C" fn ti_marketfi(
3619 | |     mut size: libc::c_int,
3620 | |     mut inputs: *const *const libc::c_double,
3621 | |     mut options: *const libc::c_double,
...    |
3658 | |     return 0 as libc::c_int;
3659 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:3658:5
     |
3658 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:3639:9
     |
3639 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:3661:1
     |
3661 | / pub unsafe extern "C" fn ti_mass_start(
3662 | |     mut options: *const libc::c_double,
3663 | | ) -> libc::c_int {
3664 | |     let mut sum_p: libc::c_int = *options.offset(0 as libc::c_int as isize)
3665 | |         as libc::c_int - 1 as libc::c_int;
3666 | |     return 16 as libc::c_int + sum_p;
3667 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:3666:5
     |
3666 |     return 16 as libc::c_int + sum_p;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `16 as libc::c_int + sum_p`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:3669:1
     |
3669 | / pub unsafe extern "C" fn ti_mass(
3670 | |     mut size: libc::c_int,
3671 | |     mut inputs: *const *const libc::c_double,
3672 | |     mut options: *const libc::c_double,
...    |
3742 | |     return 0 as libc::c_int;
3743 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:3742:5
     |
3742 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: manual implementation of an assign operation
    --> src/tiamalgamation.rs:3710:17
     |
3710 |                 (*sum).index = (*sum).index + 1 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*sum).index += 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
    --> src/tiamalgamation.rs:3722:9
     |
3722 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:3745:1
     |
3745 | / pub unsafe extern "C" fn ti_max_start(
3746 | |     mut options: *const libc::c_double,
3747 | | ) -> libc::c_int {
3748 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
3749 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:3748:5
     |
3748 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:3751:1
     |
3751 | / pub unsafe extern "C" fn ti_max(
3752 | |     mut size: libc::c_int,
3753 | |     mut inputs: *const *const libc::c_double,
3754 | |     mut options: *const libc::c_double,
...    |
3818 | |     return 0 as libc::c_int;
3819 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this boolean expression can be simplified
    --> src/tiamalgamation.rs:3780:20
     |
3780 |                 if !(j <= i) {
     |                    ^^^^^^^^^ help: try: `j > i`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:3818:5
     |
3818 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:3797:9
     |
3797 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:3799:9
     |
3799 |         trail;
     |         ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:3821:1
     |
3821 | / pub unsafe extern "C" fn ti_max_ref(
3822 | |     mut size: libc::c_int,
3823 | |     mut inputs: *const *const libc::c_double,
3824 | |     mut options: *const libc::c_double,
...    |
3856 | |     return 0 as libc::c_int;
3857 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:3856:5
     |
3856 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:3848:13
     |
3848 |             j;
     |             ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:3854:9
     |
3854 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:3859:1
     |
3859 | / pub unsafe extern "C" fn ti_md_start(mut options: *const libc::c_double) -> libc::c_int {
3860 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
3861 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:3860:5
     |
3860 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:3863:1
     |
3863 | / pub unsafe extern "C" fn ti_md(
3864 | |     mut size: libc::c_int,
3865 | |     mut inputs: *const *const libc::c_double,
3866 | |     mut options: *const libc::c_double,
...    |
3922 | |     return 0 as libc::c_int;
3923 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:3922:5
     |
3922 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:3896:17
     |
3896 |                 j;
     |                 ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:3903:9
     |
3903 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:3925:1
     |
3925 | / pub unsafe extern "C" fn ti_medprice_start(
3926 | |     mut options: *const libc::c_double,
3927 | | ) -> libc::c_int {
3928 | |     return 0 as libc::c_int;
3929 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:3928:5
     |
3928 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:3931:1
     |
3931 | / pub unsafe extern "C" fn ti_medprice(
3932 | |     mut size: libc::c_int,
3933 | |     mut inputs: *const *const libc::c_double,
3934 | |     mut options: *const libc::c_double,
...    |
3950 | |     return 0 as libc::c_int;
3951 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:3950:5
     |
3950 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:3948:9
     |
3948 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:3953:1
     |
3953 | / pub unsafe extern "C" fn ti_mfi_start(
3954 | |     mut options: *const libc::c_double,
3955 | | ) -> libc::c_int {
3956 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
3957 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:3956:5
     |
3956 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:3959:1
     |
3959 | / pub unsafe extern "C" fn ti_mfi(
3960 | |     mut size: libc::c_int,
3961 | |     mut inputs: *const *const libc::c_double,
3962 | |     mut options: *const libc::c_double,
...    |
4083 | |     return 0 as libc::c_int;
4084 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:4083:5
     |
4083 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: manual implementation of an assign operation
    --> src/tiamalgamation.rs:3995:13
     |
3995 |             (*up).index = (*up).index + 1 as libc::c_int;
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*up).index += 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: manual implementation of an assign operation
    --> src/tiamalgamation.rs:4006:13
     |
4006 |             (*down).index = (*down).index + 1 as libc::c_int;
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*down).index += 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: manual implementation of an assign operation
    --> src/tiamalgamation.rs:4018:13
     |
4018 |             (*down).index = (*down).index + 1 as libc::c_int;
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*down).index += 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: manual implementation of an assign operation
    --> src/tiamalgamation.rs:4028:13
     |
4028 |             (*up).index = (*up).index + 1 as libc::c_int;
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*up).index += 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: manual implementation of an assign operation
    --> src/tiamalgamation.rs:4039:13
     |
4039 |             (*up).index = (*up).index + 1 as libc::c_int;
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*up).index += 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: manual implementation of an assign operation
    --> src/tiamalgamation.rs:4050:13
     |
4050 |             (*down).index = (*down).index + 1 as libc::c_int;
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*down).index += 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
    --> src/tiamalgamation.rs:4062:9
     |
4062 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:4086:1
     |
4086 | / pub unsafe extern "C" fn ti_min_start(
4087 | |     mut options: *const libc::c_double,
4088 | | ) -> libc::c_int {
4089 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
4090 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:4089:5
     |
4089 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:4092:1
     |
4092 | / pub unsafe extern "C" fn ti_min(
4093 | |     mut size: libc::c_int,
4094 | |     mut inputs: *const *const libc::c_double,
4095 | |     mut options: *const libc::c_double,
...    |
4159 | |     return 0 as libc::c_int;
4160 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this boolean expression can be simplified
    --> src/tiamalgamation.rs:4121:20
     |
4121 |                 if !(j <= i) {
     |                    ^^^^^^^^^ help: try: `j > i`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:4159:5
     |
4159 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:4138:9
     |
4138 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:4140:9
     |
4140 |         trail;
     |         ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:4162:1
     |
4162 | / pub unsafe extern "C" fn ti_min_ref(
4163 | |     mut size: libc::c_int,
4164 | |     mut inputs: *const *const libc::c_double,
4165 | |     mut options: *const libc::c_double,
...    |
4214 | |     return 0 as libc::c_int;
4215 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:4214:5
     |
4214 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:4189:13
     |
4189 |             j;
     |             ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:4195:9
     |
4195 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:4217:1
     |
4217 | / pub unsafe extern "C" fn ti_mom_start(
4218 | |     mut options: *const libc::c_double,
4219 | | ) -> libc::c_int {
4220 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
4221 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:4220:5
     |
4220 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:4223:1
     |
4223 | / pub unsafe extern "C" fn ti_mom(
4224 | |     mut size: libc::c_int,
4225 | |     mut inputs: *const *const libc::c_double,
4226 | |     mut options: *const libc::c_double,
...    |
4264 | |     return 0 as libc::c_int;
4265 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:4264:5
     |
4264 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:4245:9
     |
4245 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:4267:1
     |
4267 | / pub unsafe extern "C" fn ti_msw_start(
4268 | |     mut options: *const libc::c_double,
4269 | | ) -> libc::c_int {
4270 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
4271 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:4270:5
     |
4270 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:4273:1
     |
4273 | / pub unsafe extern "C" fn ti_msw(
4274 | |     mut size: libc::c_int,
4275 | |     mut inputs: *const *const libc::c_double,
4276 | |     mut options: *const libc::c_double,
...    |
4372 | |     return 0 as libc::c_int;
4373 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:4372:5
     |
4372 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: manual implementation of an assign operation
    --> src/tiamalgamation.rs:4304:13
     |
4304 |             rp = rp + cos(tpi * j as libc::c_double / period as libc::c_double) * weight;
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `rp += cos(tpi * j as libc::c_double / period as libc::c_double) * weight`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: manual implementation of an assign operation
    --> src/tiamalgamation.rs:4305:13
     |
4305 |             ip = ip + sin(tpi * j as libc::c_double / period as libc::c_double) * weight;
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `ip += sin(tpi * j as libc::c_double / period as libc::c_double) * weight`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
    --> src/tiamalgamation.rs:4307:13
     |
4307 |             j;
     |             ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:4336:9
     |
4336 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:4375:1
     |
4375 | / pub unsafe extern "C" fn ti_mul_start(
4376 | |     mut options: *const libc::c_double,
4377 | | ) -> libc::c_int {
4378 | |     return 0 as libc::c_int;
4379 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:4378:5
     |
4378 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:4381:1
     |
4381 | / pub unsafe extern "C" fn ti_mul(
4382 | |     mut size: libc::c_int,
4383 | |     mut inputs: *const *const libc::c_double,
4384 | |     mut options: *const libc::c_double,
...    |
4397 | |     return 0 as libc::c_int;
4398 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:4397:5
     |
4397 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:4395:9
     |
4395 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:4400:1
     |
4400 | / pub unsafe extern "C" fn ti_natr_start(
4401 | |     mut options: *const libc::c_double,
4402 | | ) -> libc::c_int {
4403 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
4404 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:4403:5
     |
4403 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:4406:1
     |
4406 | / pub unsafe extern "C" fn ti_natr(
4407 | |     mut size: libc::c_int,
4408 | |     mut inputs: *const *const libc::c_double,
4409 | |     mut options: *const libc::c_double,
...    |
4494 | |     return 0 as libc::c_int;
4495 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:4494:5
     |
4494 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:4447:9
     |
4447 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:4475:9
     |
4475 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:4497:1
     |
4497 | / pub unsafe extern "C" fn ti_nvi_start(
4498 | |     mut options: *const libc::c_double,
4499 | | ) -> libc::c_int {
4500 | |     return 0 as libc::c_int;
4501 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:4500:5
     |
4500 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:4503:1
     |
4503 | / pub unsafe extern "C" fn ti_nvi(
4504 | |     mut size: libc::c_int,
4505 | |     mut inputs: *const *const libc::c_double,
4506 | |     mut options: *const libc::c_double,
...    |
4551 | |     return 0 as libc::c_int;
4552 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:4551:5
     |
4551 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:4532:9
     |
4532 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:4554:1
     |
4554 | / pub unsafe extern "C" fn ti_obv_start(
4555 | |     mut options: *const libc::c_double,
4556 | | ) -> libc::c_int {
4557 | |     return 0 as libc::c_int;
4558 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:4557:5
     |
4557 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:4560:1
     |
4560 | / pub unsafe extern "C" fn ti_obv(
4561 | |     mut size: libc::c_int,
4562 | |     mut inputs: *const *const libc::c_double,
4563 | |     mut options: *const libc::c_double,
...    |
4589 | |     return 0 as libc::c_int;
4590 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:4589:5
     |
4589 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:4587:9
     |
4587 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:4592:1
     |
4592 | / pub unsafe extern "C" fn ti_ppo_start(
4593 | |     mut options: *const libc::c_double,
4594 | | ) -> libc::c_int {
4595 | |     return 1 as libc::c_int;
4596 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:4595:5
     |
4595 |     return 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:4598:1
     |
4598 | / pub unsafe extern "C" fn ti_ppo(
4599 | |     mut size: libc::c_int,
4600 | |     mut inputs: *const *const libc::c_double,
4601 | |     mut options: *const libc::c_double,
...    |
4657 | |     return 0 as libc::c_int;
4658 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:4657:5
     |
4657 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:4638:9
     |
4638 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:4660:1
     |
4660 | / pub unsafe extern "C" fn ti_psar_start(
4661 | |     mut options: *const libc::c_double,
4662 | | ) -> libc::c_int {
4663 | |     return 1 as libc::c_int;
4664 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:4663:5
     |
4663 |     return 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:4666:1
     |
4666 | / pub unsafe extern "C" fn ti_psar(
4667 | |     mut size: libc::c_int,
4668 | |     mut inputs: *const *const libc::c_double,
4669 | |     mut options: *const libc::c_double,
...    |
4781 | |     return 0 as libc::c_int;
4782 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:4781:5
     |
4781 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:4762:9
     |
4762 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:4784:1
     |
4784 | / pub unsafe extern "C" fn ti_pvi_start(
4785 | |     mut options: *const libc::c_double,
4786 | | ) -> libc::c_int {
4787 | |     return 0 as libc::c_int;
4788 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:4787:5
     |
4787 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:4790:1
     |
4790 | / pub unsafe extern "C" fn ti_pvi(
4791 | |     mut size: libc::c_int,
4792 | |     mut inputs: *const *const libc::c_double,
4793 | |     mut options: *const libc::c_double,
...    |
4838 | |     return 0 as libc::c_int;
4839 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:4838:5
     |
4838 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:4819:9
     |
4819 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:4841:1
     |
4841 | / pub unsafe extern "C" fn ti_qstick_start(
4842 | |     mut options: *const libc::c_double,
4843 | | ) -> libc::c_int {
4844 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
4845 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:4844:5
     |
4844 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:4847:1
     |
4847 | / pub unsafe extern "C" fn ti_qstick(
4848 | |     mut size: libc::c_int,
4849 | |     mut inputs: *const *const libc::c_double,
4850 | |     mut options: *const libc::c_double,
...    |
4904 | |     return 0 as libc::c_int;
4905 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:4904:5
     |
4904 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:4870:9
     |
4870 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:4885:9
     |
4885 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:4907:1
     |
4907 | / pub unsafe extern "C" fn ti_roc_start(
4908 | |     mut options: *const libc::c_double,
4909 | | ) -> libc::c_int {
4910 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
4911 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:4910:5
     |
4910 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:4913:1
     |
4913 | / pub unsafe extern "C" fn ti_roc(
4914 | |     mut size: libc::c_int,
4915 | |     mut inputs: *const *const libc::c_double,
4916 | |     mut options: *const libc::c_double,
...    |
4955 | |     return 0 as libc::c_int;
4956 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:4955:5
     |
4955 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:4936:9
     |
4936 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:4958:1
     |
4958 | / pub unsafe extern "C" fn ti_rocr_start(
4959 | |     mut options: *const libc::c_double,
4960 | | ) -> libc::c_int {
4961 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
4962 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:4961:5
     |
4961 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:4964:1
     |
4964 | / pub unsafe extern "C" fn ti_rocr(
4965 | |     mut size: libc::c_int,
4966 | |     mut inputs: *const *const libc::c_double,
4967 | |     mut options: *const libc::c_double,
...    |
5005 | |     return 0 as libc::c_int;
5006 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:5005:5
     |
5005 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:4986:9
     |
4986 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:5008:1
     |
5008 | / pub unsafe extern "C" fn ti_round_start(
5009 | |     mut options: *const libc::c_double,
5010 | | ) -> libc::c_int {
5011 | |     return 0 as libc::c_int;
5012 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:5011:5
     |
5011 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:5014:1
     |
5014 | / pub unsafe extern "C" fn ti_round(
5015 | |     mut size: libc::c_int,
5016 | |     mut inputs: *const *const libc::c_double,
5017 | |     mut options: *const libc::c_double,
...    |
5029 | |     return 0 as libc::c_int;
5030 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:5029:5
     |
5029 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:5027:9
     |
5027 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:5032:1
     |
5032 | / pub unsafe extern "C" fn ti_rsi_start(
5033 | |     mut options: *const libc::c_double,
5034 | | ) -> libc::c_int {
5035 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
5036 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:5035:5
     |
5035 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:5038:1
     |
5038 | / pub unsafe extern "C" fn ti_rsi(
5039 | |     mut size: libc::c_int,
5040 | |     mut inputs: *const *const libc::c_double,
5041 | |     mut options: *const libc::c_double,
...    |
5124 | |     return 0 as libc::c_int;
5125 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:5124:5
     |
5124 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:5076:9
     |
5076 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:5105:9
     |
5105 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:5127:1
     |
5127 | / pub unsafe extern "C" fn ti_sin_start(
5128 | |     mut options: *const libc::c_double,
5129 | | ) -> libc::c_int {
5130 | |     return 0 as libc::c_int;
5131 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:5130:5
     |
5130 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:5133:1
     |
5133 | / pub unsafe extern "C" fn ti_sin(
5134 | |     mut size: libc::c_int,
5135 | |     mut inputs: *const *const libc::c_double,
5136 | |     mut options: *const libc::c_double,
...    |
5148 | |     return 0 as libc::c_int;
5149 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:5148:5
     |
5148 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:5146:9
     |
5146 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:5151:1
     |
5151 | / pub unsafe extern "C" fn ti_sinh_start(
5152 | |     mut options: *const libc::c_double,
5153 | | ) -> libc::c_int {
5154 | |     return 0 as libc::c_int;
5155 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:5154:5
     |
5154 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:5157:1
     |
5157 | / pub unsafe extern "C" fn ti_sinh(
5158 | |     mut size: libc::c_int,
5159 | |     mut inputs: *const *const libc::c_double,
5160 | |     mut options: *const libc::c_double,
...    |
5172 | |     return 0 as libc::c_int;
5173 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:5172:5
     |
5172 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:5170:9
     |
5170 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:5175:1
     |
5175 | / pub unsafe extern "C" fn ti_sma_start(
5176 | |     mut options: *const libc::c_double,
5177 | | ) -> libc::c_int {
5178 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
5179 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:5178:5
     |
5178 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:5181:1
     |
5181 | / pub unsafe extern "C" fn ti_sma(
5182 | |     mut size: libc::c_int,
5183 | |     mut inputs: *const *const libc::c_double,
5184 | |     mut options: *const libc::c_double,
...    |
5235 | |     return 0 as libc::c_int;
5236 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:5235:5
     |
5235 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:5203:9
     |
5203 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:5216:9
     |
5216 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:5238:1
     |
5238 | / pub unsafe extern "C" fn ti_sma_stream_new(
5239 | |     mut options: *const libc::c_double,
5240 | |     mut stream_in: *mut *mut ti_stream,
5241 | | ) -> libc::c_int {
...    |
5264 | |     return 0 as libc::c_int;
5265 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:5264:5
     |
5264 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:5267:1
     |
5267 | / pub unsafe extern "C" fn ti_sma_stream_run(
5268 | |     mut stream_in: *mut ti_stream,
5269 | |     mut size: libc::c_int,
5270 | |     mut inputs: *const *const libc::c_double,
...    |
5322 | |     return 0 as libc::c_int;
5323 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:5322:5
     |
5322 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:5282:5
     |
5282 |     progress == -period + 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:5287:9
     |
5287 |         buffer_idx;
     |         ^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
    --> src/tiamalgamation.rs:5288:13
     |
5288 |         let ref mut fresh86 = *buffer.offset(buffer_idx as isize);
     |         ----^^^^^^^^^^^^^^^--------------------------------------- help: try: `let fresh86 = &mut (*buffer.offset(buffer_idx as isize));`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#toplevel_ref_arg

warning: statement with no effect
    --> src/tiamalgamation.rs:5292:9
     |
5292 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:5294:9
     |
5294 |         progress;
     |         ^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:5303:9
     |
5303 |         buffer_idx;
     |         ^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
    --> src/tiamalgamation.rs:5308:13
     |
5308 |         let ref mut fresh88 = *buffer.offset(buffer_idx as isize);
     |         ----^^^^^^^^^^^^^^^--------------------------------------- help: try: `let fresh88 = &mut (*buffer.offset(buffer_idx as isize));`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#toplevel_ref_arg

warning: statement with no effect
    --> src/tiamalgamation.rs:5315:9
     |
5315 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:5317:9
     |
5317 |         progress;
     |         ^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:5325:1
     |
5325 | / pub unsafe extern "C" fn ti_sma_stream_free(mut stream: *mut ti_stream) {
5326 | |     free(stream as *mut libc::c_void);
5327 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:5329:1
     |
5329 | / pub unsafe extern "C" fn ti_sqrt_start(
5330 | |     mut options: *const libc::c_double,
5331 | | ) -> libc::c_int {
5332 | |     return 0 as libc::c_int;
5333 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:5332:5
     |
5332 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:5335:1
     |
5335 | / pub unsafe extern "C" fn ti_sqrt(
5336 | |     mut size: libc::c_int,
5337 | |     mut inputs: *const *const libc::c_double,
5338 | |     mut options: *const libc::c_double,
...    |
5350 | |     return 0 as libc::c_int;
5351 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:5350:5
     |
5350 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:5348:9
     |
5348 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:5353:1
     |
5353 | / pub unsafe extern "C" fn ti_stddev_start(
5354 | |     mut options: *const libc::c_double,
5355 | | ) -> libc::c_int {
5356 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
5357 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:5356:5
     |
5356 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:5359:1
     |
5359 | / pub unsafe extern "C" fn ti_stddev(
5360 | |     mut size: libc::c_int,
5361 | |     mut inputs: *const *const libc::c_double,
5362 | |     mut options: *const libc::c_double,
...    |
5427 | |     return 0 as libc::c_int;
5428 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:5427:5
     |
5427 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:5383:9
     |
5383 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:5408:9
     |
5408 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:5430:1
     |
5430 | / pub unsafe extern "C" fn ti_stderr_start(
5431 | |     mut options: *const libc::c_double,
5432 | | ) -> libc::c_int {
5433 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
5434 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:5433:5
     |
5433 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:5436:1
     |
5436 | / pub unsafe extern "C" fn ti_stderr(
5437 | |     mut size: libc::c_int,
5438 | |     mut inputs: *const *const libc::c_double,
5439 | |     mut options: *const libc::c_double,
...    |
5505 | |     return 0 as libc::c_int;
5506 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:5505:5
     |
5505 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:5461:9
     |
5461 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:5486:9
     |
5486 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:5508:1
     |
5508 | / pub unsafe extern "C" fn ti_stoch_start(
5509 | |     mut options: *const libc::c_double,
5510 | | ) -> libc::c_int {
5511 | |     let kperiod: libc::c_int = *options.offset(0 as libc::c_int as isize) as libc::c_int;
...    |
5514 | |     return kperiod + kslow + dperiod - 3 as libc::c_int;
5515 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:5514:5
     |
5514 |     return kperiod + kslow + dperiod - 3 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `kperiod + kslow + dperiod - 3 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:5517:1
     |
5517 | / pub unsafe extern "C" fn ti_stoch(
5518 | |     mut size: libc::c_int,
5519 | |     mut inputs: *const *const libc::c_double,
5520 | |     mut options: *const libc::c_double,
...    |
5683 | |     return 0 as libc::c_int;
5684 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this boolean expression can be simplified
    --> src/tiamalgamation.rs:5568:20
     |
5568 |                 if !(j <= i) {
     |                    ^^^^^^^^^ help: try: `j > i`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this boolean expression can be simplified
    --> src/tiamalgamation.rs:5588:20
     |
5588 |                 if !(j <= i) {
     |                    ^^^^^^^^^ help: try: `j > i`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:5683:5
     |
5683 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:5559:13
     |
5559 |             trail;
     |             ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: manual implementation of an assign operation
    --> src/tiamalgamation.rs:5615:9
     |
5615 |         (*k_sum).index = (*k_sum).index + 1 as libc::c_int;
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*k_sum).index += 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: manual implementation of an assign operation
    --> src/tiamalgamation.rs:5628:13
     |
5628 |             (*d_sum).index = (*d_sum).index + 1 as libc::c_int;
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*d_sum).index += 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
    --> src/tiamalgamation.rs:5645:9
     |
5645 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:5686:1
     |
5686 | / pub unsafe extern "C" fn ti_stochrsi_start(
5687 | |     mut options: *const libc::c_double,
5688 | | ) -> libc::c_int {
5689 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int * 2 as libc::c_int
5690 | |         - 1 as libc::c_int;
5691 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:5689:5
     |
5689 | /     return *options.offset(0 as libc::c_int as isize) as libc::c_int * 2 as libc::c_int
5690 | |         - 1 as libc::c_int;
     | |___________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
     |
5689 ~     *options.offset(0 as libc::c_int as isize) as libc::c_int * 2 as libc::c_int
5690 +         - 1 as libc::c_int
     |

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:5693:1
     |
5693 | / pub unsafe extern "C" fn ti_stochrsi(
5694 | |     mut size: libc::c_int,
5695 | |     mut inputs: *const *const libc::c_double,
5696 | |     mut options: *const libc::c_double,
...    |
5844 | |     return 0 as libc::c_int;
5845 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this boolean expression can be simplified
    --> src/tiamalgamation.rs:5778:20
     |
5778 |                 if !(j == (*rsi).index) {
     |                    ^^^^^^^^^^^^^^^^^^^^ help: try: `j != (*rsi).index`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this boolean expression can be simplified
    --> src/tiamalgamation.rs:5796:20
     |
5796 |                 if !(j_0 == (*rsi).index) {
     |                    ^^^^^^^^^^^^^^^^^^^^^^ help: try: `j_0 != (*rsi).index`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:5844:5
     |
5844 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:5732:9
     |
5732 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: manual implementation of an assign operation
    --> src/tiamalgamation.rs:5743:5
     |
5743 |     (*rsi).index = (*rsi).index + 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*rsi).index += 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
    --> src/tiamalgamation.rs:5785:17
     |
5785 |                 j;
     |                 ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:5803:17
     |
5803 |                 j_0;
     |                 ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: manual implementation of an assign operation
    --> src/tiamalgamation.rs:5807:9
     |
5807 |         (*rsi).index = (*rsi).index + 1 as libc::c_int;
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*rsi).index += 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
    --> src/tiamalgamation.rs:5824:9
     |
5824 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:5847:1
     |
5847 | / pub unsafe extern "C" fn ti_sub_start(
5848 | |     mut options: *const libc::c_double,
5849 | | ) -> libc::c_int {
5850 | |     return 0 as libc::c_int;
5851 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:5850:5
     |
5850 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:5853:1
     |
5853 | / pub unsafe extern "C" fn ti_sub(
5854 | |     mut size: libc::c_int,
5855 | |     mut inputs: *const *const libc::c_double,
5856 | |     mut options: *const libc::c_double,
...    |
5869 | |     return 0 as libc::c_int;
5870 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:5869:5
     |
5869 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:5867:9
     |
5867 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:5872:1
     |
5872 | / pub unsafe extern "C" fn ti_sum_start(
5873 | |     mut options: *const libc::c_double,
5874 | | ) -> libc::c_int {
5875 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
5876 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:5875:5
     |
5875 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:5878:1
     |
5878 | / pub unsafe extern "C" fn ti_sum(
5879 | |     mut size: libc::c_int,
5880 | |     mut inputs: *const *const libc::c_double,
5881 | |     mut options: *const libc::c_double,
...    |
5931 | |     return 0 as libc::c_int;
5932 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:5931:5
     |
5931 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:5899:9
     |
5899 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:5912:9
     |
5912 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:5934:1
     |
5934 | / pub unsafe extern "C" fn ti_tan_start(
5935 | |     mut options: *const libc::c_double,
5936 | | ) -> libc::c_int {
5937 | |     return 0 as libc::c_int;
5938 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:5937:5
     |
5937 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:5940:1
     |
5940 | / pub unsafe extern "C" fn ti_tan(
5941 | |     mut size: libc::c_int,
5942 | |     mut inputs: *const *const libc::c_double,
5943 | |     mut options: *const libc::c_double,
...    |
5955 | |     return 0 as libc::c_int;
5956 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:5955:5
     |
5955 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:5953:9
     |
5953 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:5958:1
     |
5958 | / pub unsafe extern "C" fn ti_tanh_start(
5959 | |     mut options: *const libc::c_double,
5960 | | ) -> libc::c_int {
5961 | |     return 0 as libc::c_int;
5962 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:5961:5
     |
5961 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:5964:1
     |
5964 | / pub unsafe extern "C" fn ti_tanh(
5965 | |     mut size: libc::c_int,
5966 | |     mut inputs: *const *const libc::c_double,
5967 | |     mut options: *const libc::c_double,
...    |
5979 | |     return 0 as libc::c_int;
5980 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:5979:5
     |
5979 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:5977:9
     |
5977 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:5982:1
     |
5982 | / pub unsafe extern "C" fn ti_tema_start(
5983 | |     mut options: *const libc::c_double,
5984 | | ) -> libc::c_int {
5985 | |     let period: libc::c_int = *options.offset(0 as libc::c_int as isize) as libc::c_int;
5986 | |     return (period - 1 as libc::c_int) * 3 as libc::c_int;
5987 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:5986:5
     |
5986 |     return (period - 1 as libc::c_int) * 3 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `(period - 1 as libc::c_int) * 3 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:5989:1
     |
5989 | / pub unsafe extern "C" fn ti_tema(
5990 | |     mut size: libc::c_int,
5991 | |     mut inputs: *const *const libc::c_double,
5992 | |     mut options: *const libc::c_double,
...    |
6052 | |     return 0 as libc::c_int;
6053 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:6052:5
     |
6052 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:6028:21
     |
6028 |                     output;
     |                     ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:6033:9
     |
6033 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:6055:1
     |
6055 | / pub unsafe extern "C" fn ti_todeg_start(
6056 | |     mut options: *const libc::c_double,
6057 | | ) -> libc::c_int {
6058 | |     return 0 as libc::c_int;
6059 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:6058:5
     |
6058 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:6061:1
     |
6061 | / pub unsafe extern "C" fn ti_todeg(
6062 | |     mut size: libc::c_int,
6063 | |     mut inputs: *const *const libc::c_double,
6064 | |     mut options: *const libc::c_double,
...    |
6079 | |     return 0 as libc::c_int;
6080 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:6079:5
     |
6079 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: float has excessive precision
    --> src/tiamalgamation.rs:6075:55
     |
6075 |             ) = *in1.offset(i as isize) * (180.0f64 / 3.14159265358979323846f64);
     |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `3.141_592_653_589_793_f64`
     |
     = note: `#[warn(clippy::excessive_precision)]` on by default
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#excessive_precision

warning: statement with no effect
    --> src/tiamalgamation.rs:6077:9
     |
6077 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:6082:1
     |
6082 | / pub unsafe extern "C" fn ti_torad_start(
6083 | |     mut options: *const libc::c_double,
6084 | | ) -> libc::c_int {
6085 | |     return 0 as libc::c_int;
6086 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:6085:5
     |
6085 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:6088:1
     |
6088 | / pub unsafe extern "C" fn ti_torad(
6089 | |     mut size: libc::c_int,
6090 | |     mut inputs: *const *const libc::c_double,
6091 | |     mut options: *const libc::c_double,
...    |
6106 | |     return 0 as libc::c_int;
6107 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:6106:5
     |
6106 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: float has excessive precision
    --> src/tiamalgamation.rs:6102:44
     |
6102 |             ) = *in1.offset(i as isize) * (3.14159265358979323846f64 / 180.0f64);
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `3.141_592_653_589_793_f64`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#excessive_precision

warning: statement with no effect
    --> src/tiamalgamation.rs:6104:9
     |
6104 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:6109:1
     |
6109 | / pub unsafe extern "C" fn ti_tr_start(mut options: *const libc::c_double) -> libc::c_int {
6110 | |     return 0 as libc::c_int;
6111 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:6110:5
     |
6110 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:6113:1
     |
6113 | / pub unsafe extern "C" fn ti_tr(
6114 | |     mut size: libc::c_int,
6115 | |     mut inputs: *const *const libc::c_double,
6116 | |     mut options: *const libc::c_double,
...    |
6149 | |     return 0 as libc::c_int;
6150 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:6149:5
     |
6149 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:6147:9
     |
6147 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:6152:1
     |
6152 | / pub unsafe extern "C" fn ti_trima_start(
6153 | |     mut options: *const libc::c_double,
6154 | | ) -> libc::c_int {
6155 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
6156 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:6155:5
     |
6155 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:6158:1
     |
6158 | / pub unsafe extern "C" fn ti_trima(
6159 | |     mut size: libc::c_int,
6160 | |     mut inputs: *const *const libc::c_double,
6161 | |     mut options: *const libc::c_double,
...    |
6257 | |     return 0 as libc::c_int;
6258 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:6257:5
     |
6257 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:6205:13
     |
6205 |             w;
     |             ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:6209:13
     |
6209 |             w;
     |             ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:6212:9
     |
6212 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: manual implementation of an assign operation
    --> src/tiamalgamation.rs:6229:9
     |
6229 |         lsi = lsi + 1;
     |         ^^^^^^^^^^^^^ help: replace it with: `lsi += 1`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: manual implementation of an assign operation
    --> src/tiamalgamation.rs:6232:9
     |
6232 |         tsi1 = tsi1 + 1;
     |         ^^^^^^^^^^^^^^^ help: replace it with: `tsi1 += 1`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: manual implementation of an assign operation
    --> src/tiamalgamation.rs:6235:9
     |
6235 |         tsi2 = tsi2 + 1;
     |         ^^^^^^^^^^^^^^^ help: replace it with: `tsi2 += 1`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
    --> src/tiamalgamation.rs:6238:9
     |
6238 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:6260:1
     |
6260 | / pub unsafe extern "C" fn ti_trix_start(
6261 | |     mut options: *const libc::c_double,
6262 | | ) -> libc::c_int {
6263 | |     let period: libc::c_int = *options.offset(0 as libc::c_int as isize) as libc::c_int;
6264 | |     return (period - 1 as libc::c_int) * 3 as libc::c_int + 1 as libc::c_int;
6265 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:6264:5
     |
6264 |     return (period - 1 as libc::c_int) * 3 as libc::c_int + 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `(period - 1 as libc::c_int) * 3 as libc::c_int + 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:6267:1
     |
6267 | / pub unsafe extern "C" fn ti_trix(
6268 | |     mut size: libc::c_int,
6269 | |     mut inputs: *const *const libc::c_double,
6270 | |     mut options: *const libc::c_double,
...    |
6348 | |     return 0 as libc::c_int;
6349 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:6348:5
     |
6348 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `if` chain can be rewritten with `match`
    --> src/tiamalgamation.rs:6306:9
     |
6306 | /         if i == period - 1 as libc::c_int {
6307 | |             ema2 = ema1;
6308 | |         } else if i > period - 1 as libc::c_int {
6309 | |             ema2 = (ema1 - ema2) * per + ema2;
...    |
6314 | |             }
6315 | |         }
     | |_________^
     |
     = help: consider rewriting the `if` chain to use `cmp` and `match`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain

warning: `if` chain can be rewritten with `match`
    --> src/tiamalgamation.rs:6310:13
     |
6310 | /             if i == period * 2 as libc::c_int - 2 as libc::c_int {
6311 | |                 ema3 = ema2;
6312 | |             } else if i > period * 2 as libc::c_int - 2 as libc::c_int {
6313 | |                 ema3 = (ema2 - ema3) * per + ema3;
6314 | |             }
     | |_____________^
     |
     = help: consider rewriting the `if` chain to use `cmp` and `match`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain

warning: statement with no effect
    --> src/tiamalgamation.rs:6317:9
     |
6317 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:6329:9
     |
6329 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:6351:1
     |
6351 | / pub unsafe extern "C" fn ti_trunc_start(
6352 | |     mut options: *const libc::c_double,
6353 | | ) -> libc::c_int {
6354 | |     return 0 as libc::c_int;
6355 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:6354:5
     |
6354 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:6357:1
     |
6357 | / pub unsafe extern "C" fn ti_trunc(
6358 | |     mut size: libc::c_int,
6359 | |     mut inputs: *const *const libc::c_double,
6360 | |     mut options: *const libc::c_double,
...    |
6375 | |     return 0 as libc::c_int;
6376 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:6375:5
     |
6375 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:6373:9
     |
6373 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:6378:1
     |
6378 | / pub unsafe extern "C" fn ti_tsf_start(
6379 | |     mut options: *const libc::c_double,
6380 | | ) -> libc::c_int {
6381 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
6382 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:6381:5
     |
6381 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:6384:1
     |
6384 | / pub unsafe extern "C" fn ti_tsf(
6385 | |     mut size: libc::c_int,
6386 | |     mut inputs: *const *const libc::c_double,
6387 | |     mut options: *const libc::c_double,
...    |
6448 | |     return 0 as libc::c_int;
6449 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:6448:5
     |
6448 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:6412:9
     |
6412 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:6429:9
     |
6429 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:6451:1
     |
6451 | / pub unsafe extern "C" fn ti_typprice_start(
6452 | |     mut options: *const libc::c_double,
6453 | | ) -> libc::c_int {
6454 | |     return 0 as libc::c_int;
6455 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:6454:5
     |
6454 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:6457:1
     |
6457 | / pub unsafe extern "C" fn ti_typprice(
6458 | |     mut size: libc::c_int,
6459 | |     mut inputs: *const *const libc::c_double,
6460 | |     mut options: *const libc::c_double,
...    |
6478 | |     return 0 as libc::c_int;
6479 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:6478:5
     |
6478 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:6476:9
     |
6476 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:6481:1
     |
6481 | / pub unsafe extern "C" fn ti_ultosc_start(
6482 | |     mut options: *const libc::c_double,
6483 | | ) -> libc::c_int {
6484 | |     return *options.offset(2 as libc::c_int as isize) as libc::c_int;
6485 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:6484:5
     |
6484 |     return *options.offset(2 as libc::c_int as isize) as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(2 as libc::c_int as isize) as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:6487:1
     |
6487 | / pub unsafe extern "C" fn ti_ultosc(
6488 | |     mut size: libc::c_int,
6489 | |     mut inputs: *const *const libc::c_double,
6490 | |     mut options: *const libc::c_double,
...    |
6620 | |     return 0 as libc::c_int;
6621 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:6620:5
     |
6620 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: manual implementation of an assign operation
    --> src/tiamalgamation.rs:6551:9
     |
6551 |         (*bp_buf).index = (*bp_buf).index + 1 as libc::c_int;
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*bp_buf).index += 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: manual implementation of an assign operation
    --> src/tiamalgamation.rs:6562:9
     |
6562 |         (*r_buf).index = (*r_buf).index + 1 as libc::c_int;
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*r_buf).index += 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
    --> src/tiamalgamation.rs:6599:9
     |
6599 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:6623:1
     |
6623 | / pub unsafe extern "C" fn ti_var_start(
6624 | |     mut options: *const libc::c_double,
6625 | | ) -> libc::c_int {
6626 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
6627 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:6626:5
     |
6626 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:6629:1
     |
6629 | / pub unsafe extern "C" fn ti_var(
6630 | |     mut size: libc::c_int,
6631 | |     mut inputs: *const *const libc::c_double,
6632 | |     mut options: *const libc::c_double,
...    |
6689 | |     return 0 as libc::c_int;
6690 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:6689:5
     |
6689 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:6653:9
     |
6653 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:6670:9
     |
6670 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:6692:1
     |
6692 | / pub unsafe extern "C" fn ti_vhf_start(
6693 | |     mut options: *const libc::c_double,
6694 | | ) -> libc::c_int {
6695 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
6696 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:6695:5
     |
6695 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:6698:1
     |
6698 | / pub unsafe extern "C" fn ti_vhf(
6699 | |     mut size: libc::c_int,
6700 | |     mut inputs: *const *const libc::c_double,
6701 | |     mut options: *const libc::c_double,
...    |
6809 | |     return 0 as libc::c_int;
6810 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this boolean expression can be simplified
    --> src/tiamalgamation.rs:6751:20
     |
6751 |                 if !(j <= i) {
     |                    ^^^^^^^^^ help: try: `j > i`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this boolean expression can be simplified
    --> src/tiamalgamation.rs:6771:20
     |
6771 |                 if !(j <= i) {
     |                    ^^^^^^^^^ help: try: `j > i`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:6809:5
     |
6809 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:6730:9
     |
6730 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:6788:9
     |
6788 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:6790:9
     |
6790 |         trail;
     |         ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:6812:1
     |
6812 | / pub unsafe extern "C" fn ti_vidya_start(
6813 | |     mut options: *const libc::c_double,
6814 | | ) -> libc::c_int {
6815 | |     return *options.offset(1 as libc::c_int as isize) as libc::c_int - 2 as libc::c_int;
6816 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:6815:5
     |
6815 |     return *options.offset(1 as libc::c_int as isize) as libc::c_int - 2 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(1 as libc::c_int as isize) as libc::c_int - 2 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:6818:1
     |
6818 | / pub unsafe extern "C" fn ti_vidya(
6819 | |     mut size: libc::c_int,
6820 | |     mut inputs: *const *const libc::c_double,
6821 | |     mut options: *const libc::c_double,
...    |
6935 | |     return 0 as libc::c_int;
6936 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:6935:5
     |
6935 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: manual `!RangeInclusive::contains` implementation
    --> src/tiamalgamation.rs:6842:8
     |
6842 |     if alpha < 0.0f64 || alpha > 1.0f64 {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `!(0.0f64..=1.0f64).contains(&alpha)`
     |
     = note: `#[warn(clippy::manual_range_contains)]` on by default
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains

warning: statement with no effect
    --> src/tiamalgamation.rs:6862:9
     |
6862 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:6916:9
     |
6916 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:6938:1
     |
6938 | / pub unsafe extern "C" fn ti_volatility_start(
6939 | |     mut options: *const libc::c_double,
6940 | | ) -> libc::c_int {
6941 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
6942 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:6941:5
     |
6941 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:6944:1
     |
6944 | / pub unsafe extern "C" fn ti_volatility(
6945 | |     mut size: libc::c_int,
6946 | |     mut inputs: *const *const libc::c_double,
6947 | |     mut options: *const libc::c_double,
...    |
7009 | |     return 0 as libc::c_int;
7010 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:7009:5
     |
7009 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:6971:9
     |
6971 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:6990:9
     |
6990 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:7012:1
     |
7012 | / pub unsafe extern "C" fn ti_vosc_start(
7013 | |     mut options: *const libc::c_double,
7014 | | ) -> libc::c_int {
7015 | |     return *options.offset(1 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
7016 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:7015:5
     |
7015 |     return *options.offset(1 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(1 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:7018:1
     |
7018 | / pub unsafe extern "C" fn ti_vosc(
7019 | |     mut size: libc::c_int,
7020 | |     mut inputs: *const *const libc::c_double,
7021 | |     mut options: *const libc::c_double,
...    |
7089 | |     return 0 as libc::c_int;
7090 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:7089:5
     |
7089 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:7051:9
     |
7051 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:7070:9
     |
7070 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:7092:1
     |
7092 | / pub unsafe extern "C" fn ti_vwma_start(
7093 | |     mut options: *const libc::c_double,
7094 | | ) -> libc::c_int {
7095 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
7096 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:7095:5
     |
7095 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:7098:1
     |
7098 | / pub unsafe extern "C" fn ti_vwma(
7099 | |     mut size: libc::c_int,
7100 | |     mut inputs: *const *const libc::c_double,
7101 | |     mut options: *const libc::c_double,
...    |
7158 | |     return 0 as libc::c_int;
7159 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:7158:5
     |
7158 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:7122:9
     |
7122 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:7139:9
     |
7139 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:7161:1
     |
7161 | / pub unsafe extern "C" fn ti_wad_start(
7162 | |     mut options: *const libc::c_double,
7163 | | ) -> libc::c_int {
7164 | |     return 1 as libc::c_int;
7165 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:7164:5
     |
7164 |     return 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:7167:1
     |
7167 | / pub unsafe extern "C" fn ti_wad(
7168 | |     mut size: libc::c_int,
7169 | |     mut inputs: *const *const libc::c_double,
7170 | |     mut options: *const libc::c_double,
...    |
7227 | |     return 0 as libc::c_int;
7228 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:7227:5
     |
7227 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:7208:9
     |
7208 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:7230:1
     |
7230 | / pub unsafe extern "C" fn ti_wcprice_start(
7231 | |     mut options: *const libc::c_double,
7232 | | ) -> libc::c_int {
7233 | |     return 0 as libc::c_int;
7234 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:7233:5
     |
7233 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:7236:1
     |
7236 | / pub unsafe extern "C" fn ti_wcprice(
7237 | |     mut size: libc::c_int,
7238 | |     mut inputs: *const *const libc::c_double,
7239 | |     mut options: *const libc::c_double,
...    |
7257 | |     return 0 as libc::c_int;
7258 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:7257:5
     |
7257 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:7255:9
     |
7255 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:7260:1
     |
7260 | / pub unsafe extern "C" fn ti_wilders_start(
7261 | |     mut options: *const libc::c_double,
7262 | | ) -> libc::c_int {
7263 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
7264 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:7263:5
     |
7263 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:7266:1
     |
7266 | / pub unsafe extern "C" fn ti_wilders(
7267 | |     mut size: libc::c_int,
7268 | |     mut inputs: *const *const libc::c_double,
7269 | |     mut options: *const libc::c_double,
...    |
7320 | |     return 0 as libc::c_int;
7321 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:7320:5
     |
7320 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:7288:9
     |
7288 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:7301:9
     |
7301 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:7323:1
     |
7323 | / pub unsafe extern "C" fn ti_willr_start(
7324 | |     mut options: *const libc::c_double,
7325 | | ) -> libc::c_int {
7326 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
7327 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:7326:5
     |
7326 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:7329:1
     |
7329 | / pub unsafe extern "C" fn ti_willr(
7330 | |     mut size: libc::c_int,
7331 | |     mut inputs: *const *const libc::c_double,
7332 | |     mut options: *const libc::c_double,
...    |
7428 | |     return 0 as libc::c_int;
7429 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this boolean expression can be simplified
    --> src/tiamalgamation.rs:7363:20
     |
7363 |                 if !(j <= i) {
     |                    ^^^^^^^^^ help: try: `j > i`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this boolean expression can be simplified
    --> src/tiamalgamation.rs:7383:20
     |
7383 |                 if !(j <= i) {
     |                    ^^^^^^^^^ help: try: `j > i`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:7428:5
     |
7428 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:7407:9
     |
7407 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:7409:9
     |
7409 |         trail;
     |         ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:7431:1
     |
7431 | / pub unsafe extern "C" fn ti_wma_start(
7432 | |     mut options: *const libc::c_double,
7433 | | ) -> libc::c_int {
7434 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
7435 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:7434:5
     |
7434 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:7437:1
     |
7437 | / pub unsafe extern "C" fn ti_wma(
7438 | |     mut size: libc::c_int,
7439 | |     mut inputs: *const *const libc::c_double,
7440 | |     mut options: *const libc::c_double,
...    |
7494 | |     return 0 as libc::c_int;
7495 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:7494:5
     |
7494 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:7463:9
     |
7463 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/tiamalgamation.rs:7475:9
     |
7475 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:7497:1
     |
7497 | / pub unsafe extern "C" fn ti_zlema_start(
7498 | |     mut options: *const libc::c_double,
7499 | | ) -> libc::c_int {
7500 | |     return (*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int)
7501 | |         / 2 as libc::c_int - 1 as libc::c_int;
7502 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:7500:5
     |
7500 | /     return (*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int)
7501 | |         / 2 as libc::c_int - 1 as libc::c_int;
     | |______________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
     |
7500 ~     (*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int)
7501 +         / 2 as libc::c_int - 1 as libc::c_int
     |

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:7504:1
     |
7504 | / pub unsafe extern "C" fn ti_zlema(
7505 | |     mut size: libc::c_int,
7506 | |     mut inputs: *const *const libc::c_double,
7507 | |     mut options: *const libc::c_double,
...    |
7555 | |     return 0 as libc::c_int;
7556 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:7555:5
     |
7555 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/tiamalgamation.rs:7536:9
     |
7536 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:7558:1
     |
7558 | / pub unsafe extern "C" fn ti_buffer_new(mut size: libc::c_int) -> *mut ti_buffer {
7559 | |     let s: libc::c_int = ::core::mem::size_of::<ti_buffer>() as libc::c_ulong
7560 | |         as libc::c_int
7561 | |         + (size - 1 as libc::c_int)
...    |
7569 | |     return ret;
7570 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:7569:5
     |
7569 |     return ret;
     |     ^^^^^^^^^^^ help: remove `return`: `ret`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:7572:1
     |
7572 | / pub unsafe extern "C" fn ti_buffer_free(mut buffer: *mut ti_buffer) {
7573 | |     free(buffer as *mut libc::c_void);
7574 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:7576:1
     |
7576 | / pub unsafe extern "C" fn ti_version() -> *const libc::c_char {
7577 | |     return b"0.9.2\0" as *const u8 as *const libc::c_char;
7578 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:7577:5
     |
7577 |     return b"0.9.2\0" as *const u8 as *const libc::c_char;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `b"0.9.2\0" as *const u8 as *const libc::c_char`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:7580:1
     |
7580 | / pub unsafe extern "C" fn ti_build() -> libc::c_long {
7581 | |     return 1743602909 as libc::c_int as libc::c_long;
7582 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:7581:5
     |
7581 |     return 1743602909 as libc::c_int as libc::c_long;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1743602909 as libc::c_int as libc::c_long`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/tiamalgamation.rs:7584:1
     |
7584 | / pub unsafe extern "C" fn ti_indicator_count() -> libc::c_int {
7585 | |     return 104 as libc::c_int;
7586 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/tiamalgamation.rs:7585:5
     |
7585 |     return 104 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `104 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: returning the result of a `let` binding from a block
    --> src/tiamalgamation.rs:7671:13
     |
7591 | /             let mut init = ti_indicator_info {
7592 | |                 name: b"abs\0" as *const u8 as *const libc::c_char,
7593 | |                 full_name: b"Vector Absolute Value\0" as *const u8
7594 | |                     as *const libc::c_char,
...    |
7669 | |                 stream_free: None,
7670 | |             };
     | |______________- unnecessary `let` binding
7671 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
7591 ~             
7592 ~             ti_indicator_info {
7593 +                 name: b"abs\0" as *const u8 as *const libc::c_char,
7594 +                 full_name: b"Vector Absolute Value\0" as *const u8
7595 +                     as *const libc::c_char,
7596 +                 start: Some(
7597 +                     ti_abs_start
7598 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
7599 +                 ),
7600 +                 indicator: Some(
7601 +                     ti_abs
7602 +                         as unsafe extern "C" fn(
7603 +                             libc::c_int,
7604 +                             *const *const libc::c_double,
7605 +                             *const libc::c_double,
7606 +                             *const *mut libc::c_double,
7607 +                         ) -> libc::c_int,
7608 +                 ),
7609 +                 indicator_ref: None,
7610 +                 type_0: 4 as libc::c_int,
7611 +                 inputs: 1 as libc::c_int,
7612 +                 options: 0 as libc::c_int,
7613 +                 outputs: 1 as libc::c_int,
7614 +                 input_names: [
7615 +                     b"real\0" as *const u8 as *const libc::c_char,
7616 +                     0 as *const libc::c_char,
7617 +                     0 as *const libc::c_char,
7618 +                     0 as *const libc::c_char,
7619 +                     0 as *const libc::c_char,
7620 +                     0 as *const libc::c_char,
7621 +                     0 as *const libc::c_char,
7622 +                     0 as *const libc::c_char,
7623 +                     0 as *const libc::c_char,
7624 +                     0 as *const libc::c_char,
7625 +                     0 as *const libc::c_char,
7626 +                     0 as *const libc::c_char,
7627 +                     0 as *const libc::c_char,
7628 +                     0 as *const libc::c_char,
7629 +                     0 as *const libc::c_char,
7630 +                     0 as *const libc::c_char,
7631 +                 ],
7632 +                 option_names: [
7633 +                     b"\0" as *const u8 as *const libc::c_char,
7634 +                     0 as *const libc::c_char,
7635 +                     0 as *const libc::c_char,
7636 +                     0 as *const libc::c_char,
7637 +                     0 as *const libc::c_char,
7638 +                     0 as *const libc::c_char,
7639 +                     0 as *const libc::c_char,
7640 +                     0 as *const libc::c_char,
7641 +                     0 as *const libc::c_char,
7642 +                     0 as *const libc::c_char,
7643 +                     0 as *const libc::c_char,
7644 +                     0 as *const libc::c_char,
7645 +                     0 as *const libc::c_char,
7646 +                     0 as *const libc::c_char,
7647 +                     0 as *const libc::c_char,
7648 +                     0 as *const libc::c_char,
7649 +                 ],
7650 +                 output_names: [
7651 +                     b"abs\0" as *const u8 as *const libc::c_char,
7652 +                     0 as *const libc::c_char,
7653 +                     0 as *const libc::c_char,
7654 +                     0 as *const libc::c_char,
7655 +                     0 as *const libc::c_char,
7656 +                     0 as *const libc::c_char,
7657 +                     0 as *const libc::c_char,
7658 +                     0 as *const libc::c_char,
7659 +                     0 as *const libc::c_char,
7660 +                     0 as *const libc::c_char,
7661 +                     0 as *const libc::c_char,
7662 +                     0 as *const libc::c_char,
7663 +                     0 as *const libc::c_char,
7664 +                     0 as *const libc::c_char,
7665 +                     0 as *const libc::c_char,
7666 +                     0 as *const libc::c_char,
7667 +                 ],
7668 +                 stream_new: None,
7669 +                 stream_run: None,
7670 +                 stream_free: None,
7671 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/tiamalgamation.rs:7753:13
     |
7674 | /             let mut init = ti_indicator_info {
7675 | |                 name: b"acos\0" as *const u8 as *const libc::c_char,
7676 | |                 full_name: b"Vector Arccosine\0" as *const u8 as *const libc::c_char,
7677 | |                 start: Some(
...    |
7751 | |                 stream_free: None,
7752 | |             };
     | |______________- unnecessary `let` binding
7753 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
7674 ~             
7675 ~             ti_indicator_info {
7676 +                 name: b"acos\0" as *const u8 as *const libc::c_char,
7677 +                 full_name: b"Vector Arccosine\0" as *const u8 as *const libc::c_char,
7678 +                 start: Some(
7679 +                     ti_acos_start
7680 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
7681 +                 ),
7682 +                 indicator: Some(
7683 +                     ti_acos
7684 +                         as unsafe extern "C" fn(
7685 +                             libc::c_int,
7686 +                             *const *const libc::c_double,
7687 +                             *const libc::c_double,
7688 +                             *const *mut libc::c_double,
7689 +                         ) -> libc::c_int,
7690 +                 ),
7691 +                 indicator_ref: None,
7692 +                 type_0: 4 as libc::c_int,
7693 +                 inputs: 1 as libc::c_int,
7694 +                 options: 0 as libc::c_int,
7695 +                 outputs: 1 as libc::c_int,
7696 +                 input_names: [
7697 +                     b"real\0" as *const u8 as *const libc::c_char,
7698 +                     0 as *const libc::c_char,
7699 +                     0 as *const libc::c_char,
7700 +                     0 as *const libc::c_char,
7701 +                     0 as *const libc::c_char,
7702 +                     0 as *const libc::c_char,
7703 +                     0 as *const libc::c_char,
7704 +                     0 as *const libc::c_char,
7705 +                     0 as *const libc::c_char,
7706 +                     0 as *const libc::c_char,
7707 +                     0 as *const libc::c_char,
7708 +                     0 as *const libc::c_char,
7709 +                     0 as *const libc::c_char,
7710 +                     0 as *const libc::c_char,
7711 +                     0 as *const libc::c_char,
7712 +                     0 as *const libc::c_char,
7713 +                 ],
7714 +                 option_names: [
7715 +                     b"\0" as *const u8 as *const libc::c_char,
7716 +                     0 as *const libc::c_char,
7717 +                     0 as *const libc::c_char,
7718 +                     0 as *const libc::c_char,
7719 +                     0 as *const libc::c_char,
7720 +                     0 as *const libc::c_char,
7721 +                     0 as *const libc::c_char,
7722 +                     0 as *const libc::c_char,
7723 +                     0 as *const libc::c_char,
7724 +                     0 as *const libc::c_char,
7725 +                     0 as *const libc::c_char,
7726 +                     0 as *const libc::c_char,
7727 +                     0 as *const libc::c_char,
7728 +                     0 as *const libc::c_char,
7729 +                     0 as *const libc::c_char,
7730 +                     0 as *const libc::c_char,
7731 +                 ],
7732 +                 output_names: [
7733 +                     b"acos\0" as *const u8 as *const libc::c_char,
7734 +                     0 as *const libc::c_char,
7735 +                     0 as *const libc::c_char,
7736 +                     0 as *const libc::c_char,
7737 +                     0 as *const libc::c_char,
7738 +                     0 as *const libc::c_char,
7739 +                     0 as *const libc::c_char,
7740 +                     0 as *const libc::c_char,
7741 +                     0 as *const libc::c_char,
7742 +                     0 as *const libc::c_char,
7743 +                     0 as *const libc::c_char,
7744 +                     0 as *const libc::c_char,
7745 +                     0 as *const libc::c_char,
7746 +                     0 as *const libc::c_char,
7747 +                     0 as *const libc::c_char,
7748 +                     0 as *const libc::c_char,
7749 +                 ],
7750 +                 stream_new: None,
7751 +                 stream_run: None,
7752 +                 stream_free: None,
7753 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/tiamalgamation.rs:7836:13
     |
7756 | /             let mut init = ti_indicator_info {
7757 | |                 name: b"ad\0" as *const u8 as *const libc::c_char,
7758 | |                 full_name: b"Accumulation/Distribution Line\0" as *const u8
7759 | |                     as *const libc::c_char,
...    |
7834 | |                 stream_free: None,
7835 | |             };
     | |______________- unnecessary `let` binding
7836 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
7756 ~             
7757 ~             ti_indicator_info {
7758 +                 name: b"ad\0" as *const u8 as *const libc::c_char,
7759 +                 full_name: b"Accumulation/Distribution Line\0" as *const u8
7760 +                     as *const libc::c_char,
7761 +                 start: Some(
7762 +                     ti_ad_start
7763 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
7764 +                 ),
7765 +                 indicator: Some(
7766 +                     ti_ad
7767 +                         as unsafe extern "C" fn(
7768 +                             libc::c_int,
7769 +                             *const *const libc::c_double,
7770 +                             *const libc::c_double,
7771 +                             *const *mut libc::c_double,
7772 +                         ) -> libc::c_int,
7773 +                 ),
7774 +                 indicator_ref: None,
7775 +                 type_0: 2 as libc::c_int,
7776 +                 inputs: 4 as libc::c_int,
7777 +                 options: 0 as libc::c_int,
7778 +                 outputs: 1 as libc::c_int,
7779 +                 input_names: [
7780 +                     b"high\0" as *const u8 as *const libc::c_char,
7781 +                     b"low\0" as *const u8 as *const libc::c_char,
7782 +                     b"close\0" as *const u8 as *const libc::c_char,
7783 +                     b"volume\0" as *const u8 as *const libc::c_char,
7784 +                     0 as *const libc::c_char,
7785 +                     0 as *const libc::c_char,
7786 +                     0 as *const libc::c_char,
7787 +                     0 as *const libc::c_char,
7788 +                     0 as *const libc::c_char,
7789 +                     0 as *const libc::c_char,
7790 +                     0 as *const libc::c_char,
7791 +                     0 as *const libc::c_char,
7792 +                     0 as *const libc::c_char,
7793 +                     0 as *const libc::c_char,
7794 +                     0 as *const libc::c_char,
7795 +                     0 as *const libc::c_char,
7796 +                 ],
7797 +                 option_names: [
7798 +                     b"\0" as *const u8 as *const libc::c_char,
7799 +                     0 as *const libc::c_char,
7800 +                     0 as *const libc::c_char,
7801 +                     0 as *const libc::c_char,
7802 +                     0 as *const libc::c_char,
7803 +                     0 as *const libc::c_char,
7804 +                     0 as *const libc::c_char,
7805 +                     0 as *const libc::c_char,
7806 +                     0 as *const libc::c_char,
7807 +                     0 as *const libc::c_char,
7808 +                     0 as *const libc::c_char,
7809 +                     0 as *const libc::c_char,
7810 +                     0 as *const libc::c_char,
7811 +                     0 as *const libc::c_char,
7812 +                     0 as *const libc::c_char,
7813 +                     0 as *const libc::c_char,
7814 +                 ],
7815 +                 output_names: [
7816 +                     b"ad\0" as *const u8 as *const libc::c_char,
7817 +                     0 as *const libc::c_char,
7818 +                     0 as *const libc::c_char,
7819 +                     0 as *const libc::c_char,
7820 +                     0 as *const libc::c_char,
7821 +                     0 as *const libc::c_char,
7822 +                     0 as *const libc::c_char,
7823 +                     0 as *const libc::c_char,
7824 +                     0 as *const libc::c_char,
7825 +                     0 as *const libc::c_char,
7826 +                     0 as *const libc::c_char,
7827 +                     0 as *const libc::c_char,
7828 +                     0 as *const libc::c_char,
7829 +                     0 as *const libc::c_char,
7830 +                     0 as *const libc::c_char,
7831 +                     0 as *const libc::c_char,
7832 +                 ],
7833 +                 stream_new: None,
7834 +                 stream_run: None,
7835 +                 stream_free: None,
7836 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/tiamalgamation.rs:7918:13
     |
7839 | /             let mut init = ti_indicator_info {
7840 | |                 name: b"add\0" as *const u8 as *const libc::c_char,
7841 | |                 full_name: b"Vector Addition\0" as *const u8 as *const libc::c_char,
7842 | |                 start: Some(
...    |
7916 | |                 stream_free: None,
7917 | |             };
     | |______________- unnecessary `let` binding
7918 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
7839 ~             
7840 ~             ti_indicator_info {
7841 +                 name: b"add\0" as *const u8 as *const libc::c_char,
7842 +                 full_name: b"Vector Addition\0" as *const u8 as *const libc::c_char,
7843 +                 start: Some(
7844 +                     ti_add_start
7845 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
7846 +                 ),
7847 +                 indicator: Some(
7848 +                     ti_add
7849 +                         as unsafe extern "C" fn(
7850 +                             libc::c_int,
7851 +                             *const *const libc::c_double,
7852 +                             *const libc::c_double,
7853 +                             *const *mut libc::c_double,
7854 +                         ) -> libc::c_int,
7855 +                 ),
7856 +                 indicator_ref: None,
7857 +                 type_0: 4 as libc::c_int,
7858 +                 inputs: 2 as libc::c_int,
7859 +                 options: 0 as libc::c_int,
7860 +                 outputs: 1 as libc::c_int,
7861 +                 input_names: [
7862 +                     b"real\0" as *const u8 as *const libc::c_char,
7863 +                     b"real\0" as *const u8 as *const libc::c_char,
7864 +                     0 as *const libc::c_char,
7865 +                     0 as *const libc::c_char,
7866 +                     0 as *const libc::c_char,
7867 +                     0 as *const libc::c_char,
7868 +                     0 as *const libc::c_char,
7869 +                     0 as *const libc::c_char,
7870 +                     0 as *const libc::c_char,
7871 +                     0 as *const libc::c_char,
7872 +                     0 as *const libc::c_char,
7873 +                     0 as *const libc::c_char,
7874 +                     0 as *const libc::c_char,
7875 +                     0 as *const libc::c_char,
7876 +                     0 as *const libc::c_char,
7877 +                     0 as *const libc::c_char,
7878 +                 ],
7879 +                 option_names: [
7880 +                     b"\0" as *const u8 as *const libc::c_char,
7881 +                     0 as *const libc::c_char,
7882 +                     0 as *const libc::c_char,
7883 +                     0 as *const libc::c_char,
7884 +                     0 as *const libc::c_char,
7885 +                     0 as *const libc::c_char,
7886 +                     0 as *const libc::c_char,
7887 +                     0 as *const libc::c_char,
7888 +                     0 as *const libc::c_char,
7889 +                     0 as *const libc::c_char,
7890 +                     0 as *const libc::c_char,
7891 +                     0 as *const libc::c_char,
7892 +                     0 as *const libc::c_char,
7893 +                     0 as *const libc::c_char,
7894 +                     0 as *const libc::c_char,
7895 +                     0 as *const libc::c_char,
7896 +                 ],
7897 +                 output_names: [
7898 +                     b"add\0" as *const u8 as *const libc::c_char,
7899 +                     0 as *const libc::c_char,
7900 +                     0 as *const libc::c_char,
7901 +                     0 as *const libc::c_char,
7902 +                     0 as *const libc::c_char,
7903 +                     0 as *const libc::c_char,
7904 +                     0 as *const libc::c_char,
7905 +                     0 as *const libc::c_char,
7906 +                     0 as *const libc::c_char,
7907 +                     0 as *const libc::c_char,
7908 +                     0 as *const libc::c_char,
7909 +                     0 as *const libc::c_char,
7910 +                     0 as *const libc::c_char,
7911 +                     0 as *const libc::c_char,
7912 +                     0 as *const libc::c_char,
7913 +                     0 as *const libc::c_char,
7914 +                 ],
7915 +                 stream_new: None,
7916 +                 stream_run: None,
7917 +                 stream_free: None,
7918 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/tiamalgamation.rs:8001:13
     |
7921 | /             let mut init = ti_indicator_info {
7922 | |                 name: b"adosc\0" as *const u8 as *const libc::c_char,
7923 | |                 full_name: b"Accumulation/Distribution Oscillator\0" as *const u8
7924 | |                     as *const libc::c_char,
...    |
7999 | |                 stream_free: None,
8000 | |             };
     | |______________- unnecessary `let` binding
8001 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
7921 ~             
7922 ~             ti_indicator_info {
7923 +                 name: b"adosc\0" as *const u8 as *const libc::c_char,
7924 +                 full_name: b"Accumulation/Distribution Oscillator\0" as *const u8
7925 +                     as *const libc::c_char,
7926 +                 start: Some(
7927 +                     ti_adosc_start
7928 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
7929 +                 ),
7930 +                 indicator: Some(
7931 +                     ti_adosc
7932 +                         as unsafe extern "C" fn(
7933 +                             libc::c_int,
7934 +                             *const *const libc::c_double,
7935 +                             *const libc::c_double,
7936 +                             *const *mut libc::c_double,
7937 +                         ) -> libc::c_int,
7938 +                 ),
7939 +                 indicator_ref: None,
7940 +                 type_0: 2 as libc::c_int,
7941 +                 inputs: 4 as libc::c_int,
7942 +                 options: 2 as libc::c_int,
7943 +                 outputs: 1 as libc::c_int,
7944 +                 input_names: [
7945 +                     b"high\0" as *const u8 as *const libc::c_char,
7946 +                     b"low\0" as *const u8 as *const libc::c_char,
7947 +                     b"close\0" as *const u8 as *const libc::c_char,
7948 +                     b"volume\0" as *const u8 as *const libc::c_char,
7949 +                     0 as *const libc::c_char,
7950 +                     0 as *const libc::c_char,
7951 +                     0 as *const libc::c_char,
7952 +                     0 as *const libc::c_char,
7953 +                     0 as *const libc::c_char,
7954 +                     0 as *const libc::c_char,
7955 +                     0 as *const libc::c_char,
7956 +                     0 as *const libc::c_char,
7957 +                     0 as *const libc::c_char,
7958 +                     0 as *const libc::c_char,
7959 +                     0 as *const libc::c_char,
7960 +                     0 as *const libc::c_char,
7961 +                 ],
7962 +                 option_names: [
7963 +                     b"short_period\0" as *const u8 as *const libc::c_char,
7964 +                     b"long_period\0" as *const u8 as *const libc::c_char,
7965 +                     0 as *const libc::c_char,
7966 +                     0 as *const libc::c_char,
7967 +                     0 as *const libc::c_char,
7968 +                     0 as *const libc::c_char,
7969 +                     0 as *const libc::c_char,
7970 +                     0 as *const libc::c_char,
7971 +                     0 as *const libc::c_char,
7972 +                     0 as *const libc::c_char,
7973 +                     0 as *const libc::c_char,
7974 +                     0 as *const libc::c_char,
7975 +                     0 as *const libc::c_char,
7976 +                     0 as *const libc::c_char,
7977 +                     0 as *const libc::c_char,
7978 +                     0 as *const libc::c_char,
7979 +                 ],
7980 +                 output_names: [
7981 +                     b"adosc\0" as *const u8 as *const libc::c_char,
7982 +                     0 as *const libc::c_char,
7983 +                     0 as *const libc::c_char,
7984 +                     0 as *const libc::c_char,
7985 +                     0 as *const libc::c_char,
7986 +                     0 as *const libc::c_char,
7987 +                     0 as *const libc::c_char,
7988 +                     0 as *const libc::c_char,
7989 +                     0 as *const libc::c_char,
7990 +                     0 as *const libc::c_char,
7991 +                     0 as *const libc::c_char,
7992 +                     0 as *const libc::c_char,
7993 +                     0 as *const libc::c_char,
7994 +                     0 as *const libc::c_char,
7995 +                     0 as *const libc::c_char,
7996 +                     0 as *const libc::c_char,
7997 +                 ],
7998 +                 stream_new: None,
7999 +                 stream_run: None,
8000 +                 stream_free: None,
8001 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/tiamalgamation.rs:8084:13
     |
8004 | /             let mut init = ti_indicator_info {
8005 | |                 name: b"adx\0" as *const u8 as *const libc::c_char,
8006 | |                 full_name: b"Average Directional Movement Index\0" as *const u8
8007 | |                     as *const libc::c_char,
...    |
8082 | |                 stream_free: None,
8083 | |             };
     | |______________- unnecessary `let` binding
8084 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
8004 ~             
8005 ~             ti_indicator_info {
8006 +                 name: b"adx\0" as *const u8 as *const libc::c_char,
8007 +                 full_name: b"Average Directional Movement Index\0" as *const u8
8008 +                     as *const libc::c_char,
8009 +                 start: Some(
8010 +                     ti_adx_start
8011 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
8012 +                 ),
8013 +                 indicator: Some(
8014 +                     ti_adx
8015 +                         as unsafe extern "C" fn(
8016 +                             libc::c_int,
8017 +                             *const *const libc::c_double,
8018 +                             *const libc::c_double,
8019 +                             *const *mut libc::c_double,
8020 +                         ) -> libc::c_int,
8021 +                 ),
8022 +                 indicator_ref: None,
8023 +                 type_0: 2 as libc::c_int,
8024 +                 inputs: 2 as libc::c_int,
8025 +                 options: 1 as libc::c_int,
8026 +                 outputs: 1 as libc::c_int,
8027 +                 input_names: [
8028 +                     b"high\0" as *const u8 as *const libc::c_char,
8029 +                     b"low\0" as *const u8 as *const libc::c_char,
8030 +                     0 as *const libc::c_char,
8031 +                     0 as *const libc::c_char,
8032 +                     0 as *const libc::c_char,
8033 +                     0 as *const libc::c_char,
8034 +                     0 as *const libc::c_char,
8035 +                     0 as *const libc::c_char,
8036 +                     0 as *const libc::c_char,
8037 +                     0 as *const libc::c_char,
8038 +                     0 as *const libc::c_char,
8039 +                     0 as *const libc::c_char,
8040 +                     0 as *const libc::c_char,
8041 +                     0 as *const libc::c_char,
8042 +                     0 as *const libc::c_char,
8043 +                     0 as *const libc::c_char,
8044 +                 ],
8045 +                 option_names: [
8046 +                     b"period\0" as *const u8 as *const libc::c_char,
8047 +                     0 as *const libc::c_char,
8048 +                     0 as *const libc::c_char,
8049 +                     0 as *const libc::c_char,
8050 +                     0 as *const libc::c_char,
8051 +                     0 as *const libc::c_char,
8052 +                     0 as *const libc::c_char,
8053 +                     0 as *const libc::c_char,
8054 +                     0 as *const libc::c_char,
8055 +                     0 as *const libc::c_char,
8056 +                     0 as *const libc::c_char,
8057 +                     0 as *const libc::c_char,
8058 +                     0 as *const libc::c_char,
8059 +                     0 as *const libc::c_char,
8060 +                     0 as *const libc::c_char,
8061 +                     0 as *const libc::c_char,
8062 +                 ],
8063 +                 output_names: [
8064 +                     b"adx\0" as *const u8 as *const libc::c_char,
8065 +                     0 as *const libc::c_char,
8066 +                     0 as *const libc::c_char,
8067 +                     0 as *const libc::c_char,
8068 +                     0 as *const libc::c_char,
8069 +                     0 as *const libc::c_char,
8070 +                     0 as *const libc::c_char,
8071 +                     0 as *const libc::c_char,
8072 +                     0 as *const libc::c_char,
8073 +                     0 as *const libc::c_char,
8074 +                     0 as *const libc::c_char,
8075 +                     0 as *const libc::c_char,
8076 +                     0 as *const libc::c_char,
8077 +                     0 as *const libc::c_char,
8078 +                     0 as *const libc::c_char,
8079 +                     0 as *const libc::c_char,
8080 +                 ],
8081 +                 stream_new: None,
8082 +                 stream_run: None,
8083 +                 stream_free: None,
8084 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/tiamalgamation.rs:8167:13
     |
8087 | /             let mut init = ti_indicator_info {
8088 | |                 name: b"adxr\0" as *const u8 as *const libc::c_char,
8089 | |                 full_name: b"Average Directional Movement Rating\0" as *const u8
8090 | |                     as *const libc::c_char,
...    |
8165 | |                 stream_free: None,
8166 | |             };
     | |______________- unnecessary `let` binding
8167 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
8087 ~             
8088 ~             ti_indicator_info {
8089 +                 name: b"adxr\0" as *const u8 as *const libc::c_char,
8090 +                 full_name: b"Average Directional Movement Rating\0" as *const u8
8091 +                     as *const libc::c_char,
8092 +                 start: Some(
8093 +                     ti_adxr_start
8094 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
8095 +                 ),
8096 +                 indicator: Some(
8097 +                     ti_adxr
8098 +                         as unsafe extern "C" fn(
8099 +                             libc::c_int,
8100 +                             *const *const libc::c_double,
8101 +                             *const libc::c_double,
8102 +                             *const *mut libc::c_double,
8103 +                         ) -> libc::c_int,
8104 +                 ),
8105 +                 indicator_ref: None,
8106 +                 type_0: 2 as libc::c_int,
8107 +                 inputs: 2 as libc::c_int,
8108 +                 options: 1 as libc::c_int,
8109 +                 outputs: 1 as libc::c_int,
8110 +                 input_names: [
8111 +                     b"high\0" as *const u8 as *const libc::c_char,
8112 +                     b"low\0" as *const u8 as *const libc::c_char,
8113 +                     0 as *const libc::c_char,
8114 +                     0 as *const libc::c_char,
8115 +                     0 as *const libc::c_char,
8116 +                     0 as *const libc::c_char,
8117 +                     0 as *const libc::c_char,
8118 +                     0 as *const libc::c_char,
8119 +                     0 as *const libc::c_char,
8120 +                     0 as *const libc::c_char,
8121 +                     0 as *const libc::c_char,
8122 +                     0 as *const libc::c_char,
8123 +                     0 as *const libc::c_char,
8124 +                     0 as *const libc::c_char,
8125 +                     0 as *const libc::c_char,
8126 +                     0 as *const libc::c_char,
8127 +                 ],
8128 +                 option_names: [
8129 +                     b"period\0" as *const u8 as *const libc::c_char,
8130 +                     0 as *const libc::c_char,
8131 +                     0 as *const libc::c_char,
8132 +                     0 as *const libc::c_char,
8133 +                     0 as *const libc::c_char,
8134 +                     0 as *const libc::c_char,
8135 +                     0 as *const libc::c_char,
8136 +                     0 as *const libc::c_char,
8137 +                     0 as *const libc::c_char,
8138 +                     0 as *const libc::c_char,
8139 +                     0 as *const libc::c_char,
8140 +                     0 as *const libc::c_char,
8141 +                     0 as *const libc::c_char,
8142 +                     0 as *const libc::c_char,
8143 +                     0 as *const libc::c_char,
8144 +                     0 as *const libc::c_char,
8145 +                 ],
8146 +                 output_names: [
8147 +                     b"adxr\0" as *const u8 as *const libc::c_char,
8148 +                     0 as *const libc::c_char,
8149 +                     0 as *const libc::c_char,
8150 +                     0 as *const libc::c_char,
8151 +                     0 as *const libc::c_char,
8152 +                     0 as *const libc::c_char,
8153 +                     0 as *const libc::c_char,
8154 +                     0 as *const libc::c_char,
8155 +                     0 as *const libc::c_char,
8156 +                     0 as *const libc::c_char,
8157 +                     0 as *const libc::c_char,
8158 +                     0 as *const libc::c_char,
8159 +                     0 as *const libc::c_char,
8160 +                     0 as *const libc::c_char,
8161 +                     0 as *const libc::c_char,
8162 +                     0 as *const libc::c_char,
8163 +                 ],
8164 +                 stream_new: None,
8165 +                 stream_run: None,
8166 +                 stream_free: None,
8167 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/tiamalgamation.rs:8249:13
     |
8170 | /             let mut init = ti_indicator_info {
8171 | |                 name: b"ao\0" as *const u8 as *const libc::c_char,
8172 | |                 full_name: b"Awesome Oscillator\0" as *const u8 as *const libc::c_char,
8173 | |                 start: Some(
...    |
8247 | |                 stream_free: None,
8248 | |             };
     | |______________- unnecessary `let` binding
8249 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
8170 ~             
8171 ~             ti_indicator_info {
8172 +                 name: b"ao\0" as *const u8 as *const libc::c_char,
8173 +                 full_name: b"Awesome Oscillator\0" as *const u8 as *const libc::c_char,
8174 +                 start: Some(
8175 +                     ti_ao_start
8176 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
8177 +                 ),
8178 +                 indicator: Some(
8179 +                     ti_ao
8180 +                         as unsafe extern "C" fn(
8181 +                             libc::c_int,
8182 +                             *const *const libc::c_double,
8183 +                             *const libc::c_double,
8184 +                             *const *mut libc::c_double,
8185 +                         ) -> libc::c_int,
8186 +                 ),
8187 +                 indicator_ref: None,
8188 +                 type_0: 2 as libc::c_int,
8189 +                 inputs: 2 as libc::c_int,
8190 +                 options: 0 as libc::c_int,
8191 +                 outputs: 1 as libc::c_int,
8192 +                 input_names: [
8193 +                     b"high\0" as *const u8 as *const libc::c_char,
8194 +                     b"low\0" as *const u8 as *const libc::c_char,
8195 +                     0 as *const libc::c_char,
8196 +                     0 as *const libc::c_char,
8197 +                     0 as *const libc::c_char,
8198 +                     0 as *const libc::c_char,
8199 +                     0 as *const libc::c_char,
8200 +                     0 as *const libc::c_char,
8201 +                     0 as *const libc::c_char,
8202 +                     0 as *const libc::c_char,
8203 +                     0 as *const libc::c_char,
8204 +                     0 as *const libc::c_char,
8205 +                     0 as *const libc::c_char,
8206 +                     0 as *const libc::c_char,
8207 +                     0 as *const libc::c_char,
8208 +                     0 as *const libc::c_char,
8209 +                 ],
8210 +                 option_names: [
8211 +                     b"\0" as *const u8 as *const libc::c_char,
8212 +                     0 as *const libc::c_char,
8213 +                     0 as *const libc::c_char,
8214 +                     0 as *const libc::c_char,
8215 +                     0 as *const libc::c_char,
8216 +                     0 as *const libc::c_char,
8217 +                     0 as *const libc::c_char,
8218 +                     0 as *const libc::c_char,
8219 +                     0 as *const libc::c_char,
8220 +                     0 as *const libc::c_char,
8221 +                     0 as *const libc::c_char,
8222 +                     0 as *const libc::c_char,
8223 +                     0 as *const libc::c_char,
8224 +                     0 as *const libc::c_char,
8225 +                     0 as *const libc::c_char,
8226 +                     0 as *const libc::c_char,
8227 +                 ],
8228 +                 output_names: [
8229 +                     b"ao\0" as *const u8 as *const libc::c_char,
8230 +                     0 as *const libc::c_char,
8231 +                     0 as *const libc::c_char,
8232 +                     0 as *const libc::c_char,
8233 +                     0 as *const libc::c_char,
8234 +                     0 as *const libc::c_char,
8235 +                     0 as *const libc::c_char,
8236 +                     0 as *const libc::c_char,
8237 +                     0 as *const libc::c_char,
8238 +                     0 as *const libc::c_char,
8239 +                     0 as *const libc::c_char,
8240 +                     0 as *const libc::c_char,
8241 +                     0 as *const libc::c_char,
8242 +                     0 as *const libc::c_char,
8243 +                     0 as *const libc::c_char,
8244 +                     0 as *const libc::c_char,
8245 +                 ],
8246 +                 stream_new: None,
8247 +                 stream_run: None,
8248 +                 stream_free: None,
8249 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/tiamalgamation.rs:8332:13
     |
8252 | /             let mut init = ti_indicator_info {
8253 | |                 name: b"apo\0" as *const u8 as *const libc::c_char,
8254 | |                 full_name: b"Absolute Price Oscillator\0" as *const u8
8255 | |                     as *const libc::c_char,
...    |
8330 | |                 stream_free: None,
8331 | |             };
     | |______________- unnecessary `let` binding
8332 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
8252 ~             
8253 ~             ti_indicator_info {
8254 +                 name: b"apo\0" as *const u8 as *const libc::c_char,
8255 +                 full_name: b"Absolute Price Oscillator\0" as *const u8
8256 +                     as *const libc::c_char,
8257 +                 start: Some(
8258 +                     ti_apo_start
8259 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
8260 +                 ),
8261 +                 indicator: Some(
8262 +                     ti_apo
8263 +                         as unsafe extern "C" fn(
8264 +                             libc::c_int,
8265 +                             *const *const libc::c_double,
8266 +                             *const libc::c_double,
8267 +                             *const *mut libc::c_double,
8268 +                         ) -> libc::c_int,
8269 +                 ),
8270 +                 indicator_ref: None,
8271 +                 type_0: 2 as libc::c_int,
8272 +                 inputs: 1 as libc::c_int,
8273 +                 options: 2 as libc::c_int,
8274 +                 outputs: 1 as libc::c_int,
8275 +                 input_names: [
8276 +                     b"real\0" as *const u8 as *const libc::c_char,
8277 +                     0 as *const libc::c_char,
8278 +                     0 as *const libc::c_char,
8279 +                     0 as *const libc::c_char,
8280 +                     0 as *const libc::c_char,
8281 +                     0 as *const libc::c_char,
8282 +                     0 as *const libc::c_char,
8283 +                     0 as *const libc::c_char,
8284 +                     0 as *const libc::c_char,
8285 +                     0 as *const libc::c_char,
8286 +                     0 as *const libc::c_char,
8287 +                     0 as *const libc::c_char,
8288 +                     0 as *const libc::c_char,
8289 +                     0 as *const libc::c_char,
8290 +                     0 as *const libc::c_char,
8291 +                     0 as *const libc::c_char,
8292 +                 ],
8293 +                 option_names: [
8294 +                     b"short_period\0" as *const u8 as *const libc::c_char,
8295 +                     b"long_period\0" as *const u8 as *const libc::c_char,
8296 +                     0 as *const libc::c_char,
8297 +                     0 as *const libc::c_char,
8298 +                     0 as *const libc::c_char,
8299 +                     0 as *const libc::c_char,
8300 +                     0 as *const libc::c_char,
8301 +                     0 as *const libc::c_char,
8302 +                     0 as *const libc::c_char,
8303 +                     0 as *const libc::c_char,
8304 +                     0 as *const libc::c_char,
8305 +                     0 as *const libc::c_char,
8306 +                     0 as *const libc::c_char,
8307 +                     0 as *const libc::c_char,
8308 +                     0 as *const libc::c_char,
8309 +                     0 as *const libc::c_char,
8310 +                 ],
8311 +                 output_names: [
8312 +                     b"apo\0" as *const u8 as *const libc::c_char,
8313 +                     0 as *const libc::c_char,
8314 +                     0 as *const libc::c_char,
8315 +                     0 as *const libc::c_char,
8316 +                     0 as *const libc::c_char,
8317 +                     0 as *const libc::c_char,
8318 +                     0 as *const libc::c_char,
8319 +                     0 as *const libc::c_char,
8320 +                     0 as *const libc::c_char,
8321 +                     0 as *const libc::c_char,
8322 +                     0 as *const libc::c_char,
8323 +                     0 as *const libc::c_char,
8324 +                     0 as *const libc::c_char,
8325 +                     0 as *const libc::c_char,
8326 +                     0 as *const libc::c_char,
8327 +                     0 as *const libc::c_char,
8328 +                 ],
8329 +                 stream_new: None,
8330 +                 stream_run: None,
8331 +                 stream_free: None,
8332 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/tiamalgamation.rs:8414:13
     |
8335 | /             let mut init = ti_indicator_info {
8336 | |                 name: b"aroon\0" as *const u8 as *const libc::c_char,
8337 | |                 full_name: b"Aroon\0" as *const u8 as *const libc::c_char,
8338 | |                 start: Some(
...    |
8412 | |                 stream_free: None,
8413 | |             };
     | |______________- unnecessary `let` binding
8414 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
8335 ~             
8336 ~             ti_indicator_info {
8337 +                 name: b"aroon\0" as *const u8 as *const libc::c_char,
8338 +                 full_name: b"Aroon\0" as *const u8 as *const libc::c_char,
8339 +                 start: Some(
8340 +                     ti_aroon_start
8341 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
8342 +                 ),
8343 +                 indicator: Some(
8344 +                     ti_aroon
8345 +                         as unsafe extern "C" fn(
8346 +                             libc::c_int,
8347 +                             *const *const libc::c_double,
8348 +                             *const libc::c_double,
8349 +                             *const *mut libc::c_double,
8350 +                         ) -> libc::c_int,
8351 +                 ),
8352 +                 indicator_ref: None,
8353 +                 type_0: 2 as libc::c_int,
8354 +                 inputs: 2 as libc::c_int,
8355 +                 options: 1 as libc::c_int,
8356 +                 outputs: 2 as libc::c_int,
8357 +                 input_names: [
8358 +                     b"high\0" as *const u8 as *const libc::c_char,
8359 +                     b"low\0" as *const u8 as *const libc::c_char,
8360 +                     0 as *const libc::c_char,
8361 +                     0 as *const libc::c_char,
8362 +                     0 as *const libc::c_char,
8363 +                     0 as *const libc::c_char,
8364 +                     0 as *const libc::c_char,
8365 +                     0 as *const libc::c_char,
8366 +                     0 as *const libc::c_char,
8367 +                     0 as *const libc::c_char,
8368 +                     0 as *const libc::c_char,
8369 +                     0 as *const libc::c_char,
8370 +                     0 as *const libc::c_char,
8371 +                     0 as *const libc::c_char,
8372 +                     0 as *const libc::c_char,
8373 +                     0 as *const libc::c_char,
8374 +                 ],
8375 +                 option_names: [
8376 +                     b"period\0" as *const u8 as *const libc::c_char,
8377 +                     0 as *const libc::c_char,
8378 +                     0 as *const libc::c_char,
8379 +                     0 as *const libc::c_char,
8380 +                     0 as *const libc::c_char,
8381 +                     0 as *const libc::c_char,
8382 +                     0 as *const libc::c_char,
8383 +                     0 as *const libc::c_char,
8384 +                     0 as *const libc::c_char,
8385 +                     0 as *const libc::c_char,
8386 +                     0 as *const libc::c_char,
8387 +                     0 as *const libc::c_char,
8388 +                     0 as *const libc::c_char,
8389 +                     0 as *const libc::c_char,
8390 +                     0 as *const libc::c_char,
8391 +                     0 as *const libc::c_char,
8392 +                 ],
8393 +                 output_names: [
8394 +                     b"aroon_down\0" as *const u8 as *const libc::c_char,
8395 +                     b"aroon_up\0" as *const u8 as *const libc::c_char,
8396 +                     0 as *const libc::c_char,
8397 +                     0 as *const libc::c_char,
8398 +                     0 as *const libc::c_char,
8399 +                     0 as *const libc::c_char,
8400 +                     0 as *const libc::c_char,
8401 +                     0 as *const libc::c_char,
8402 +                     0 as *const libc::c_char,
8403 +                     0 as *const libc::c_char,
8404 +                     0 as *const libc::c_char,
8405 +                     0 as *const libc::c_char,
8406 +                     0 as *const libc::c_char,
8407 +                     0 as *const libc::c_char,
8408 +                     0 as *const libc::c_char,
8409 +                     0 as *const libc::c_char,
8410 +                 ],
8411 +                 stream_new: None,
8412 +                 stream_run: None,
8413 +                 stream_free: None,
8414 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/tiamalgamation.rs:8496:13
     |
8417 | /             let mut init = ti_indicator_info {
8418 | |                 name: b"aroonosc\0" as *const u8 as *const libc::c_char,
8419 | |                 full_name: b"Aroon Oscillator\0" as *const u8 as *const libc::c_char,
8420 | |                 start: Some(
...    |
8494 | |                 stream_free: None,
8495 | |             };
     | |______________- unnecessary `let` binding
8496 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
8417 ~             
8418 ~             ti_indicator_info {
8419 +                 name: b"aroonosc\0" as *const u8 as *const libc::c_char,
8420 +                 full_name: b"Aroon Oscillator\0" as *const u8 as *const libc::c_char,
8421 +                 start: Some(
8422 +                     ti_aroonosc_start
8423 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
8424 +                 ),
8425 +                 indicator: Some(
8426 +                     ti_aroonosc
8427 +                         as unsafe extern "C" fn(
8428 +                             libc::c_int,
8429 +                             *const *const libc::c_double,
8430 +                             *const libc::c_double,
8431 +                             *const *mut libc::c_double,
8432 +                         ) -> libc::c_int,
8433 +                 ),
8434 +                 indicator_ref: None,
8435 +                 type_0: 2 as libc::c_int,
8436 +                 inputs: 2 as libc::c_int,
8437 +                 options: 1 as libc::c_int,
8438 +                 outputs: 1 as libc::c_int,
8439 +                 input_names: [
8440 +                     b"high\0" as *const u8 as *const libc::c_char,
8441 +                     b"low\0" as *const u8 as *const libc::c_char,
8442 +                     0 as *const libc::c_char,
8443 +                     0 as *const libc::c_char,
8444 +                     0 as *const libc::c_char,
8445 +                     0 as *const libc::c_char,
8446 +                     0 as *const libc::c_char,
8447 +                     0 as *const libc::c_char,
8448 +                     0 as *const libc::c_char,
8449 +                     0 as *const libc::c_char,
8450 +                     0 as *const libc::c_char,
8451 +                     0 as *const libc::c_char,
8452 +                     0 as *const libc::c_char,
8453 +                     0 as *const libc::c_char,
8454 +                     0 as *const libc::c_char,
8455 +                     0 as *const libc::c_char,
8456 +                 ],
8457 +                 option_names: [
8458 +                     b"period\0" as *const u8 as *const libc::c_char,
8459 +                     0 as *const libc::c_char,
8460 +                     0 as *const libc::c_char,
8461 +                     0 as *const libc::c_char,
8462 +                     0 as *const libc::c_char,
8463 +                     0 as *const libc::c_char,
8464 +                     0 as *const libc::c_char,
8465 +                     0 as *const libc::c_char,
8466 +                     0 as *const libc::c_char,
8467 +                     0 as *const libc::c_char,
8468 +                     0 as *const libc::c_char,
8469 +                     0 as *const libc::c_char,
8470 +                     0 as *const libc::c_char,
8471 +                     0 as *const libc::c_char,
8472 +                     0 as *const libc::c_char,
8473 +                     0 as *const libc::c_char,
8474 +                 ],
8475 +                 output_names: [
8476 +                     b"aroonosc\0" as *const u8 as *const libc::c_char,
8477 +                     0 as *const libc::c_char,
8478 +                     0 as *const libc::c_char,
8479 +                     0 as *const libc::c_char,
8480 +                     0 as *const libc::c_char,
8481 +                     0 as *const libc::c_char,
8482 +                     0 as *const libc::c_char,
8483 +                     0 as *const libc::c_char,
8484 +                     0 as *const libc::c_char,
8485 +                     0 as *const libc::c_char,
8486 +                     0 as *const libc::c_char,
8487 +                     0 as *const libc::c_char,
8488 +                     0 as *const libc::c_char,
8489 +                     0 as *const libc::c_char,
8490 +                     0 as *const libc::c_char,
8491 +                     0 as *const libc::c_char,
8492 +                 ],
8493 +                 stream_new: None,
8494 +                 stream_run: None,
8495 +                 stream_free: None,
8496 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/tiamalgamation.rs:8578:13
     |
8499 | /             let mut init = ti_indicator_info {
8500 | |                 name: b"asin\0" as *const u8 as *const libc::c_char,
8501 | |                 full_name: b"Vector Arcsine\0" as *const u8 as *const libc::c_char,
8502 | |                 start: Some(
...    |
8576 | |                 stream_free: None,
8577 | |             };
     | |______________- unnecessary `let` binding
8578 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
8499 ~             
8500 ~             ti_indicator_info {
8501 +                 name: b"asin\0" as *const u8 as *const libc::c_char,
8502 +                 full_name: b"Vector Arcsine\0" as *const u8 as *const libc::c_char,
8503 +                 start: Some(
8504 +                     ti_asin_start
8505 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
8506 +                 ),
8507 +                 indicator: Some(
8508 +                     ti_asin
8509 +                         as unsafe extern "C" fn(
8510 +                             libc::c_int,
8511 +                             *const *const libc::c_double,
8512 +                             *const libc::c_double,
8513 +                             *const *mut libc::c_double,
8514 +                         ) -> libc::c_int,
8515 +                 ),
8516 +                 indicator_ref: None,
8517 +                 type_0: 4 as libc::c_int,
8518 +                 inputs: 1 as libc::c_int,
8519 +                 options: 0 as libc::c_int,
8520 +                 outputs: 1 as libc::c_int,
8521 +                 input_names: [
8522 +                     b"real\0" as *const u8 as *const libc::c_char,
8523 +                     0 as *const libc::c_char,
8524 +                     0 as *const libc::c_char,
8525 +                     0 as *const libc::c_char,
8526 +                     0 as *const libc::c_char,
8527 +                     0 as *const libc::c_char,
8528 +                     0 as *const libc::c_char,
8529 +                     0 as *const libc::c_char,
8530 +                     0 as *const libc::c_char,
8531 +                     0 as *const libc::c_char,
8532 +                     0 as *const libc::c_char,
8533 +                     0 as *const libc::c_char,
8534 +                     0 as *const libc::c_char,
8535 +                     0 as *const libc::c_char,
8536 +                     0 as *const libc::c_char,
8537 +                     0 as *const libc::c_char,
8538 +                 ],
8539 +                 option_names: [
8540 +                     b"\0" as *const u8 as *const libc::c_char,
8541 +                     0 as *const libc::c_char,
8542 +                     0 as *const libc::c_char,
8543 +                     0 as *const libc::c_char,
8544 +                     0 as *const libc::c_char,
8545 +                     0 as *const libc::c_char,
8546 +                     0 as *const libc::c_char,
8547 +                     0 as *const libc::c_char,
8548 +                     0 as *const libc::c_char,
8549 +                     0 as *const libc::c_char,
8550 +                     0 as *const libc::c_char,
8551 +                     0 as *const libc::c_char,
8552 +                     0 as *const libc::c_char,
8553 +                     0 as *const libc::c_char,
8554 +                     0 as *const libc::c_char,
8555 +                     0 as *const libc::c_char,
8556 +                 ],
8557 +                 output_names: [
8558 +                     b"asin\0" as *const u8 as *const libc::c_char,
8559 +                     0 as *const libc::c_char,
8560 +                     0 as *const libc::c_char,
8561 +                     0 as *const libc::c_char,
8562 +                     0 as *const libc::c_char,
8563 +                     0 as *const libc::c_char,
8564 +                     0 as *const libc::c_char,
8565 +                     0 as *const libc::c_char,
8566 +                     0 as *const libc::c_char,
8567 +                     0 as *const libc::c_char,
8568 +                     0 as *const libc::c_char,
8569 +                     0 as *const libc::c_char,
8570 +                     0 as *const libc::c_char,
8571 +                     0 as *const libc::c_char,
8572 +                     0 as *const libc::c_char,
8573 +                     0 as *const libc::c_char,
8574 +                 ],
8575 +                 stream_new: None,
8576 +                 stream_run: None,
8577 +                 stream_free: None,
8578 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/tiamalgamation.rs:8660:13
     |
8581 | /             let mut init = ti_indicator_info {
8582 | |                 name: b"atan\0" as *const u8 as *const libc::c_char,
8583 | |                 full_name: b"Vector Arctangent\0" as *const u8 as *const libc::c_char,
8584 | |                 start: Some(
...    |
8658 | |                 stream_free: None,
8659 | |             };
     | |______________- unnecessary `let` binding
8660 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
8581 ~             
8582 ~             ti_indicator_info {
8583 +                 name: b"atan\0" as *const u8 as *const libc::c_char,
8584 +                 full_name: b"Vector Arctangent\0" as *const u8 as *const libc::c_char,
8585 +                 start: Some(
8586 +                     ti_atan_start
8587 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
8588 +                 ),
8589 +                 indicator: Some(
8590 +                     ti_atan
8591 +                         as unsafe extern "C" fn(
8592 +                             libc::c_int,
8593 +                             *const *const libc::c_double,
8594 +                             *const libc::c_double,
8595 +                             *const *mut libc::c_double,
8596 +                         ) -> libc::c_int,
8597 +                 ),
8598 +                 indicator_ref: None,
8599 +                 type_0: 4 as libc::c_int,
8600 +                 inputs: 1 as libc::c_int,
8601 +                 options: 0 as libc::c_int,
8602 +                 outputs: 1 as libc::c_int,
8603 +                 input_names: [
8604 +                     b"real\0" as *const u8 as *const libc::c_char,
8605 +                     0 as *const libc::c_char,
8606 +                     0 as *const libc::c_char,
8607 +                     0 as *const libc::c_char,
8608 +                     0 as *const libc::c_char,
8609 +                     0 as *const libc::c_char,
8610 +                     0 as *const libc::c_char,
8611 +                     0 as *const libc::c_char,
8612 +                     0 as *const libc::c_char,
8613 +                     0 as *const libc::c_char,
8614 +                     0 as *const libc::c_char,
8615 +                     0 as *const libc::c_char,
8616 +                     0 as *const libc::c_char,
8617 +                     0 as *const libc::c_char,
8618 +                     0 as *const libc::c_char,
8619 +                     0 as *const libc::c_char,
8620 +                 ],
8621 +                 option_names: [
8622 +                     b"\0" as *const u8 as *const libc::c_char,
8623 +                     0 as *const libc::c_char,
8624 +                     0 as *const libc::c_char,
8625 +                     0 as *const libc::c_char,
8626 +                     0 as *const libc::c_char,
8627 +                     0 as *const libc::c_char,
8628 +                     0 as *const libc::c_char,
8629 +                     0 as *const libc::c_char,
8630 +                     0 as *const libc::c_char,
8631 +                     0 as *const libc::c_char,
8632 +                     0 as *const libc::c_char,
8633 +                     0 as *const libc::c_char,
8634 +                     0 as *const libc::c_char,
8635 +                     0 as *const libc::c_char,
8636 +                     0 as *const libc::c_char,
8637 +                     0 as *const libc::c_char,
8638 +                 ],
8639 +                 output_names: [
8640 +                     b"atan\0" as *const u8 as *const libc::c_char,
8641 +                     0 as *const libc::c_char,
8642 +                     0 as *const libc::c_char,
8643 +                     0 as *const libc::c_char,
8644 +                     0 as *const libc::c_char,
8645 +                     0 as *const libc::c_char,
8646 +                     0 as *const libc::c_char,
8647 +                     0 as *const libc::c_char,
8648 +                     0 as *const libc::c_char,
8649 +                     0 as *const libc::c_char,
8650 +                     0 as *const libc::c_char,
8651 +                     0 as *const libc::c_char,
8652 +                     0 as *const libc::c_char,
8653 +                     0 as *const libc::c_char,
8654 +                     0 as *const libc::c_char,
8655 +                     0 as *const libc::c_char,
8656 +                 ],
8657 +                 stream_new: None,
8658 +                 stream_run: None,
8659 +                 stream_free: None,
8660 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/tiamalgamation.rs:8766:13
     |
8663 | /             let mut init = ti_indicator_info {
8664 | |                 name: b"atr\0" as *const u8 as *const libc::c_char,
8665 | |                 full_name: b"Average True Range\0" as *const u8 as *const libc::c_char,
8666 | |                 start: Some(
...    |
8764 | |                 ),
8765 | |             };
     | |______________- unnecessary `let` binding
8766 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
8663 ~             
8664 ~             ti_indicator_info {
8665 +                 name: b"atr\0" as *const u8 as *const libc::c_char,
8666 +                 full_name: b"Average True Range\0" as *const u8 as *const libc::c_char,
8667 +                 start: Some(
8668 +                     ti_atr_start
8669 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
8670 +                 ),
8671 +                 indicator: Some(
8672 +                     ti_atr
8673 +                         as unsafe extern "C" fn(
8674 +                             libc::c_int,
8675 +                             *const *const libc::c_double,
8676 +                             *const libc::c_double,
8677 +                             *const *mut libc::c_double,
8678 +                         ) -> libc::c_int,
8679 +                 ),
8680 +                 indicator_ref: Some(
8681 +                     ti_atr_ref
8682 +                         as unsafe extern "C" fn(
8683 +                             libc::c_int,
8684 +                             *const *const libc::c_double,
8685 +                             *const libc::c_double,
8686 +                             *const *mut libc::c_double,
8687 +                         ) -> libc::c_int,
8688 +                 ),
8689 +                 type_0: 2 as libc::c_int,
8690 +                 inputs: 3 as libc::c_int,
8691 +                 options: 1 as libc::c_int,
8692 +                 outputs: 1 as libc::c_int,
8693 +                 input_names: [
8694 +                     b"high\0" as *const u8 as *const libc::c_char,
8695 +                     b"low\0" as *const u8 as *const libc::c_char,
8696 +                     b"close\0" as *const u8 as *const libc::c_char,
8697 +                     0 as *const libc::c_char,
8698 +                     0 as *const libc::c_char,
8699 +                     0 as *const libc::c_char,
8700 +                     0 as *const libc::c_char,
8701 +                     0 as *const libc::c_char,
8702 +                     0 as *const libc::c_char,
8703 +                     0 as *const libc::c_char,
8704 +                     0 as *const libc::c_char,
8705 +                     0 as *const libc::c_char,
8706 +                     0 as *const libc::c_char,
8707 +                     0 as *const libc::c_char,
8708 +                     0 as *const libc::c_char,
8709 +                     0 as *const libc::c_char,
8710 +                 ],
8711 +                 option_names: [
8712 +                     b"period\0" as *const u8 as *const libc::c_char,
8713 +                     0 as *const libc::c_char,
8714 +                     0 as *const libc::c_char,
8715 +                     0 as *const libc::c_char,
8716 +                     0 as *const libc::c_char,
8717 +                     0 as *const libc::c_char,
8718 +                     0 as *const libc::c_char,
8719 +                     0 as *const libc::c_char,
8720 +                     0 as *const libc::c_char,
8721 +                     0 as *const libc::c_char,
8722 +                     0 as *const libc::c_char,
8723 +                     0 as *const libc::c_char,
8724 +                     0 as *const libc::c_char,
8725 +                     0 as *const libc::c_char,
8726 +                     0 as *const libc::c_char,
8727 +                     0 as *const libc::c_char,
8728 +                 ],
8729 +                 output_names: [
8730 +                     b"atr\0" as *const u8 as *const libc::c_char,
8731 +                     0 as *const libc::c_char,
8732 +                     0 as *const libc::c_char,
8733 +                     0 as *const libc::c_char,
8734 +                     0 as *const libc::c_char,
8735 +                     0 as *const libc::c_char,
8736 +                     0 as *const libc::c_char,
8737 +                     0 as *const libc::c_char,
8738 +                     0 as *const libc::c_char,
8739 +                     0 as *const libc::c_char,
8740 +                     0 as *const libc::c_char,
8741 +                     0 as *const libc::c_char,
8742 +                     0 as *const libc::c_char,
8743 +                     0 as *const libc::c_char,
8744 +                     0 as *const libc::c_char,
8745 +                     0 as *const libc::c_char,
8746 +                 ],
8747 +                 stream_new: Some(
8748 +                     ti_atr_stream_new
8749 +                         as unsafe extern "C" fn(
8750 +                             *const libc::c_double,
8751 +                             *mut *mut ti_stream,
8752 +                         ) -> libc::c_int,
8753 +                 ),
8754 +                 stream_run: Some(
8755 +                     ti_atr_stream_run
8756 +                         as unsafe extern "C" fn(
8757 +                             *mut ti_stream,
8758 +                             libc::c_int,
8759 +                             *const *const libc::c_double,
8760 +                             *const *mut libc::c_double,
8761 +                         ) -> libc::c_int,
8762 +                 ),
8763 +                 stream_free: Some(
8764 +                     ti_atr_stream_free as unsafe extern "C" fn(*mut ti_stream) -> (),
8765 +                 ),
8766 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/tiamalgamation.rs:8848:13
     |
8769 | /             let mut init = ti_indicator_info {
8770 | |                 name: b"avgprice\0" as *const u8 as *const libc::c_char,
8771 | |                 full_name: b"Average Price\0" as *const u8 as *const libc::c_char,
8772 | |                 start: Some(
...    |
8846 | |                 stream_free: None,
8847 | |             };
     | |______________- unnecessary `let` binding
8848 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
8769 ~             
8770 ~             ti_indicator_info {
8771 +                 name: b"avgprice\0" as *const u8 as *const libc::c_char,
8772 +                 full_name: b"Average Price\0" as *const u8 as *const libc::c_char,
8773 +                 start: Some(
8774 +                     ti_avgprice_start
8775 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
8776 +                 ),
8777 +                 indicator: Some(
8778 +                     ti_avgprice
8779 +                         as unsafe extern "C" fn(
8780 +                             libc::c_int,
8781 +                             *const *const libc::c_double,
8782 +                             *const libc::c_double,
8783 +                             *const *mut libc::c_double,
8784 +                         ) -> libc::c_int,
8785 +                 ),
8786 +                 indicator_ref: None,
8787 +                 type_0: 1 as libc::c_int,
8788 +                 inputs: 4 as libc::c_int,
8789 +                 options: 0 as libc::c_int,
8790 +                 outputs: 1 as libc::c_int,
8791 +                 input_names: [
8792 +                     b"open\0" as *const u8 as *const libc::c_char,
8793 +                     b"high\0" as *const u8 as *const libc::c_char,
8794 +                     b"low\0" as *const u8 as *const libc::c_char,
8795 +                     b"close\0" as *const u8 as *const libc::c_char,
8796 +                     0 as *const libc::c_char,
8797 +                     0 as *const libc::c_char,
8798 +                     0 as *const libc::c_char,
8799 +                     0 as *const libc::c_char,
8800 +                     0 as *const libc::c_char,
8801 +                     0 as *const libc::c_char,
8802 +                     0 as *const libc::c_char,
8803 +                     0 as *const libc::c_char,
8804 +                     0 as *const libc::c_char,
8805 +                     0 as *const libc::c_char,
8806 +                     0 as *const libc::c_char,
8807 +                     0 as *const libc::c_char,
8808 +                 ],
8809 +                 option_names: [
8810 +                     b"\0" as *const u8 as *const libc::c_char,
8811 +                     0 as *const libc::c_char,
8812 +                     0 as *const libc::c_char,
8813 +                     0 as *const libc::c_char,
8814 +                     0 as *const libc::c_char,
8815 +                     0 as *const libc::c_char,
8816 +                     0 as *const libc::c_char,
8817 +                     0 as *const libc::c_char,
8818 +                     0 as *const libc::c_char,
8819 +                     0 as *const libc::c_char,
8820 +                     0 as *const libc::c_char,
8821 +                     0 as *const libc::c_char,
8822 +                     0 as *const libc::c_char,
8823 +                     0 as *const libc::c_char,
8824 +                     0 as *const libc::c_char,
8825 +                     0 as *const libc::c_char,
8826 +                 ],
8827 +                 output_names: [
8828 +                     b"avgprice\0" as *const u8 as *const libc::c_char,
8829 +                     0 as *const libc::c_char,
8830 +                     0 as *const libc::c_char,
8831 +                     0 as *const libc::c_char,
8832 +                     0 as *const libc::c_char,
8833 +                     0 as *const libc::c_char,
8834 +                     0 as *const libc::c_char,
8835 +                     0 as *const libc::c_char,
8836 +                     0 as *const libc::c_char,
8837 +                     0 as *const libc::c_char,
8838 +                     0 as *const libc::c_char,
8839 +                     0 as *const libc::c_char,
8840 +                     0 as *const libc::c_char,
8841 +                     0 as *const libc::c_char,
8842 +                     0 as *const libc::c_char,
8843 +                     0 as *const libc::c_char,
8844 +                 ],
8845 +                 stream_new: None,
8846 +                 stream_run: None,
8847 +                 stream_free: None,
8848 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/tiamalgamation.rs:8930:13
     |
8851 | /             let mut init = ti_indicator_info {
8852 | |                 name: b"bbands\0" as *const u8 as *const libc::c_char,
8853 | |                 full_name: b"Bollinger Bands\0" as *const u8 as *const libc::c_char,
8854 | |                 start: Some(
...    |
8928 | |                 stream_free: None,
8929 | |             };
     | |______________- unnecessary `let` binding
8930 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
8851 ~             
8852 ~             ti_indicator_info {
8853 +                 name: b"bbands\0" as *const u8 as *const libc::c_char,
8854 +                 full_name: b"Bollinger Bands\0" as *const u8 as *const libc::c_char,
8855 +                 start: Some(
8856 +                     ti_bbands_start
8857 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
8858 +                 ),
8859 +                 indicator: Some(
8860 +                     ti_bbands
8861 +                         as unsafe extern "C" fn(
8862 +                             libc::c_int,
8863 +                             *const *const libc::c_double,
8864 +                             *const libc::c_double,
8865 +                             *const *mut libc::c_double,
8866 +                         ) -> libc::c_int,
8867 +                 ),
8868 +                 indicator_ref: None,
8869 +                 type_0: 1 as libc::c_int,
8870 +                 inputs: 1 as libc::c_int,
8871 +                 options: 2 as libc::c_int,
8872 +                 outputs: 3 as libc::c_int,
8873 +                 input_names: [
8874 +                     b"real\0" as *const u8 as *const libc::c_char,
8875 +                     0 as *const libc::c_char,
8876 +                     0 as *const libc::c_char,
8877 +                     0 as *const libc::c_char,
8878 +                     0 as *const libc::c_char,
8879 +                     0 as *const libc::c_char,
8880 +                     0 as *const libc::c_char,
8881 +                     0 as *const libc::c_char,
8882 +                     0 as *const libc::c_char,
8883 +                     0 as *const libc::c_char,
8884 +                     0 as *const libc::c_char,
8885 +                     0 as *const libc::c_char,
8886 +                     0 as *const libc::c_char,
8887 +                     0 as *const libc::c_char,
8888 +                     0 as *const libc::c_char,
8889 +                     0 as *const libc::c_char,
8890 +                 ],
8891 +                 option_names: [
8892 +                     b"period\0" as *const u8 as *const libc::c_char,
8893 +                     b"stddev\0" as *const u8 as *const libc::c_char,
8894 +                     0 as *const libc::c_char,
8895 +                     0 as *const libc::c_char,
8896 +                     0 as *const libc::c_char,
8897 +                     0 as *const libc::c_char,
8898 +                     0 as *const libc::c_char,
8899 +                     0 as *const libc::c_char,
8900 +                     0 as *const libc::c_char,
8901 +                     0 as *const libc::c_char,
8902 +                     0 as *const libc::c_char,
8903 +                     0 as *const libc::c_char,
8904 +                     0 as *const libc::c_char,
8905 +                     0 as *const libc::c_char,
8906 +                     0 as *const libc::c_char,
8907 +                     0 as *const libc::c_char,
8908 +                 ],
8909 +                 output_names: [
8910 +                     b"bbands_lower\0" as *const u8 as *const libc::c_char,
8911 +                     b"bbands_middle\0" as *const u8 as *const libc::c_char,
8912 +                     b"bbands_upper\0" as *const u8 as *const libc::c_char,
8913 +                     0 as *const libc::c_char,
8914 +                     0 as *const libc::c_char,
8915 +                     0 as *const libc::c_char,
8916 +                     0 as *const libc::c_char,
8917 +                     0 as *const libc::c_char,
8918 +                     0 as *const libc::c_char,
8919 +                     0 as *const libc::c_char,
8920 +                     0 as *const libc::c_char,
8921 +                     0 as *const libc::c_char,
8922 +                     0 as *const libc::c_char,
8923 +                     0 as *const libc::c_char,
8924 +                     0 as *const libc::c_char,
8925 +                     0 as *const libc::c_char,
8926 +                 ],
8927 +                 stream_new: None,
8928 +                 stream_run: None,
8929 +                 stream_free: None,
8930 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/tiamalgamation.rs:9012:13
     |
8933 | /             let mut init = ti_indicator_info {
8934 | |                 name: b"bop\0" as *const u8 as *const libc::c_char,
8935 | |                 full_name: b"Balance of Power\0" as *const u8 as *const libc::c_char,
8936 | |                 start: Some(
...    |
9010 | |                 stream_free: None,
9011 | |             };
     | |______________- unnecessary `let` binding
9012 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
8933 ~             
8934 ~             ti_indicator_info {
8935 +                 name: b"bop\0" as *const u8 as *const libc::c_char,
8936 +                 full_name: b"Balance of Power\0" as *const u8 as *const libc::c_char,
8937 +                 start: Some(
8938 +                     ti_bop_start
8939 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
8940 +                 ),
8941 +                 indicator: Some(
8942 +                     ti_bop
8943 +                         as unsafe extern "C" fn(
8944 +                             libc::c_int,
8945 +                             *const *const libc::c_double,
8946 +                             *const libc::c_double,
8947 +                             *const *mut libc::c_double,
8948 +                         ) -> libc::c_int,
8949 +                 ),
8950 +                 indicator_ref: None,
8951 +                 type_0: 2 as libc::c_int,
8952 +                 inputs: 4 as libc::c_int,
8953 +                 options: 0 as libc::c_int,
8954 +                 outputs: 1 as libc::c_int,
8955 +                 input_names: [
8956 +                     b"open\0" as *const u8 as *const libc::c_char,
8957 +                     b"high\0" as *const u8 as *const libc::c_char,
8958 +                     b"low\0" as *const u8 as *const libc::c_char,
8959 +                     b"close\0" as *const u8 as *const libc::c_char,
8960 +                     0 as *const libc::c_char,
8961 +                     0 as *const libc::c_char,
8962 +                     0 as *const libc::c_char,
8963 +                     0 as *const libc::c_char,
8964 +                     0 as *const libc::c_char,
8965 +                     0 as *const libc::c_char,
8966 +                     0 as *const libc::c_char,
8967 +                     0 as *const libc::c_char,
8968 +                     0 as *const libc::c_char,
8969 +                     0 as *const libc::c_char,
8970 +                     0 as *const libc::c_char,
8971 +                     0 as *const libc::c_char,
8972 +                 ],
8973 +                 option_names: [
8974 +                     b"\0" as *const u8 as *const libc::c_char,
8975 +                     0 as *const libc::c_char,
8976 +                     0 as *const libc::c_char,
8977 +                     0 as *const libc::c_char,
8978 +                     0 as *const libc::c_char,
8979 +                     0 as *const libc::c_char,
8980 +                     0 as *const libc::c_char,
8981 +                     0 as *const libc::c_char,
8982 +                     0 as *const libc::c_char,
8983 +                     0 as *const libc::c_char,
8984 +                     0 as *const libc::c_char,
8985 +                     0 as *const libc::c_char,
8986 +                     0 as *const libc::c_char,
8987 +                     0 as *const libc::c_char,
8988 +                     0 as *const libc::c_char,
8989 +                     0 as *const libc::c_char,
8990 +                 ],
8991 +                 output_names: [
8992 +                     b"bop\0" as *const u8 as *const libc::c_char,
8993 +                     0 as *const libc::c_char,
8994 +                     0 as *const libc::c_char,
8995 +                     0 as *const libc::c_char,
8996 +                     0 as *const libc::c_char,
8997 +                     0 as *const libc::c_char,
8998 +                     0 as *const libc::c_char,
8999 +                     0 as *const libc::c_char,
9000 +                     0 as *const libc::c_char,
9001 +                     0 as *const libc::c_char,
9002 +                     0 as *const libc::c_char,
9003 +                     0 as *const libc::c_char,
9004 +                     0 as *const libc::c_char,
9005 +                     0 as *const libc::c_char,
9006 +                     0 as *const libc::c_char,
9007 +                     0 as *const libc::c_char,
9008 +                 ],
9009 +                 stream_new: None,
9010 +                 stream_run: None,
9011 +                 stream_free: None,
9012 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/tiamalgamation.rs:9095:13
     |
9015 | /             let mut init = ti_indicator_info {
9016 | |                 name: b"cci\0" as *const u8 as *const libc::c_char,
9017 | |                 full_name: b"Commodity Channel Index\0" as *const u8
9018 | |                     as *const libc::c_char,
...    |
9093 | |                 stream_free: None,
9094 | |             };
     | |______________- unnecessary `let` binding
9095 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
9015 ~             
9016 ~             ti_indicator_info {
9017 +                 name: b"cci\0" as *const u8 as *const libc::c_char,
9018 +                 full_name: b"Commodity Channel Index\0" as *const u8
9019 +                     as *const libc::c_char,
9020 +                 start: Some(
9021 +                     ti_cci_start
9022 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
9023 +                 ),
9024 +                 indicator: Some(
9025 +                     ti_cci
9026 +                         as unsafe extern "C" fn(
9027 +                             libc::c_int,
9028 +                             *const *const libc::c_double,
9029 +                             *const libc::c_double,
9030 +                             *const *mut libc::c_double,
9031 +                         ) -> libc::c_int,
9032 +                 ),
9033 +                 indicator_ref: None,
9034 +                 type_0: 2 as libc::c_int,
9035 +                 inputs: 3 as libc::c_int,
9036 +                 options: 1 as libc::c_int,
9037 +                 outputs: 1 as libc::c_int,
9038 +                 input_names: [
9039 +                     b"high\0" as *const u8 as *const libc::c_char,
9040 +                     b"low\0" as *const u8 as *const libc::c_char,
9041 +                     b"close\0" as *const u8 as *const libc::c_char,
9042 +                     0 as *const libc::c_char,
9043 +                     0 as *const libc::c_char,
9044 +                     0 as *const libc::c_char,
9045 +                     0 as *const libc::c_char,
9046 +                     0 as *const libc::c_char,
9047 +                     0 as *const libc::c_char,
9048 +                     0 as *const libc::c_char,
9049 +                     0 as *const libc::c_char,
9050 +                     0 as *const libc::c_char,
9051 +                     0 as *const libc::c_char,
9052 +                     0 as *const libc::c_char,
9053 +                     0 as *const libc::c_char,
9054 +                     0 as *const libc::c_char,
9055 +                 ],
9056 +                 option_names: [
9057 +                     b"period\0" as *const u8 as *const libc::c_char,
9058 +                     0 as *const libc::c_char,
9059 +                     0 as *const libc::c_char,
9060 +                     0 as *const libc::c_char,
9061 +                     0 as *const libc::c_char,
9062 +                     0 as *const libc::c_char,
9063 +                     0 as *const libc::c_char,
9064 +                     0 as *const libc::c_char,
9065 +                     0 as *const libc::c_char,
9066 +                     0 as *const libc::c_char,
9067 +                     0 as *const libc::c_char,
9068 +                     0 as *const libc::c_char,
9069 +                     0 as *const libc::c_char,
9070 +                     0 as *const libc::c_char,
9071 +                     0 as *const libc::c_char,
9072 +                     0 as *const libc::c_char,
9073 +                 ],
9074 +                 output_names: [
9075 +                     b"cci\0" as *const u8 as *const libc::c_char,
9076 +                     0 as *const libc::c_char,
9077 +                     0 as *const libc::c_char,
9078 +                     0 as *const libc::c_char,
9079 +                     0 as *const libc::c_char,
9080 +                     0 as *const libc::c_char,
9081 +                     0 as *const libc::c_char,
9082 +                     0 as *const libc::c_char,
9083 +                     0 as *const libc::c_char,
9084 +                     0 as *const libc::c_char,
9085 +                     0 as *const libc::c_char,
9086 +                     0 as *const libc::c_char,
9087 +                     0 as *const libc::c_char,
9088 +                     0 as *const libc::c_char,
9089 +                     0 as *const libc::c_char,
9090 +                     0 as *const libc::c_char,
9091 +                 ],
9092 +                 stream_new: None,
9093 +                 stream_run: None,
9094 +                 stream_free: None,
9095 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/tiamalgamation.rs:9177:13
     |
9098 | /             let mut init = ti_indicator_info {
9099 | |                 name: b"ceil\0" as *const u8 as *const libc::c_char,
9100 | |                 full_name: b"Vector Ceiling\0" as *const u8 as *const libc::c_char,
9101 | |                 start: Some(
...    |
9175 | |                 stream_free: None,
9176 | |             };
     | |______________- unnecessary `let` binding
9177 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
9098 ~             
9099 ~             ti_indicator_info {
9100 +                 name: b"ceil\0" as *const u8 as *const libc::c_char,
9101 +                 full_name: b"Vector Ceiling\0" as *const u8 as *const libc::c_char,
9102 +                 start: Some(
9103 +                     ti_ceil_start
9104 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
9105 +                 ),
9106 +                 indicator: Some(
9107 +                     ti_ceil
9108 +                         as unsafe extern "C" fn(
9109 +                             libc::c_int,
9110 +                             *const *const libc::c_double,
9111 +                             *const libc::c_double,
9112 +                             *const *mut libc::c_double,
9113 +                         ) -> libc::c_int,
9114 +                 ),
9115 +                 indicator_ref: None,
9116 +                 type_0: 4 as libc::c_int,
9117 +                 inputs: 1 as libc::c_int,
9118 +                 options: 0 as libc::c_int,
9119 +                 outputs: 1 as libc::c_int,
9120 +                 input_names: [
9121 +                     b"real\0" as *const u8 as *const libc::c_char,
9122 +                     0 as *const libc::c_char,
9123 +                     0 as *const libc::c_char,
9124 +                     0 as *const libc::c_char,
9125 +                     0 as *const libc::c_char,
9126 +                     0 as *const libc::c_char,
9127 +                     0 as *const libc::c_char,
9128 +                     0 as *const libc::c_char,
9129 +                     0 as *const libc::c_char,
9130 +                     0 as *const libc::c_char,
9131 +                     0 as *const libc::c_char,
9132 +                     0 as *const libc::c_char,
9133 +                     0 as *const libc::c_char,
9134 +                     0 as *const libc::c_char,
9135 +                     0 as *const libc::c_char,
9136 +                     0 as *const libc::c_char,
9137 +                 ],
9138 +                 option_names: [
9139 +                     b"\0" as *const u8 as *const libc::c_char,
9140 +                     0 as *const libc::c_char,
9141 +                     0 as *const libc::c_char,
9142 +                     0 as *const libc::c_char,
9143 +                     0 as *const libc::c_char,
9144 +                     0 as *const libc::c_char,
9145 +                     0 as *const libc::c_char,
9146 +                     0 as *const libc::c_char,
9147 +                     0 as *const libc::c_char,
9148 +                     0 as *const libc::c_char,
9149 +                     0 as *const libc::c_char,
9150 +                     0 as *const libc::c_char,
9151 +                     0 as *const libc::c_char,
9152 +                     0 as *const libc::c_char,
9153 +                     0 as *const libc::c_char,
9154 +                     0 as *const libc::c_char,
9155 +                 ],
9156 +                 output_names: [
9157 +                     b"ceil\0" as *const u8 as *const libc::c_char,
9158 +                     0 as *const libc::c_char,
9159 +                     0 as *const libc::c_char,
9160 +                     0 as *const libc::c_char,
9161 +                     0 as *const libc::c_char,
9162 +                     0 as *const libc::c_char,
9163 +                     0 as *const libc::c_char,
9164 +                     0 as *const libc::c_char,
9165 +                     0 as *const libc::c_char,
9166 +                     0 as *const libc::c_char,
9167 +                     0 as *const libc::c_char,
9168 +                     0 as *const libc::c_char,
9169 +                     0 as *const libc::c_char,
9170 +                     0 as *const libc::c_char,
9171 +                     0 as *const libc::c_char,
9172 +                     0 as *const libc::c_char,
9173 +                 ],
9174 +                 stream_new: None,
9175 +                 stream_run: None,
9176 +                 stream_free: None,
9177 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/tiamalgamation.rs:9260:13
     |
9180 | /             let mut init = ti_indicator_info {
9181 | |                 name: b"cmo\0" as *const u8 as *const libc::c_char,
9182 | |                 full_name: b"Chande Momentum Oscillator\0" as *const u8
9183 | |                     as *const libc::c_char,
...    |
9258 | |                 stream_free: None,
9259 | |             };
     | |______________- unnecessary `let` binding
9260 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
9180 ~             
9181 ~             ti_indicator_info {
9182 +                 name: b"cmo\0" as *const u8 as *const libc::c_char,
9183 +                 full_name: b"Chande Momentum Oscillator\0" as *const u8
9184 +                     as *const libc::c_char,
9185 +                 start: Some(
9186 +                     ti_cmo_start
9187 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
9188 +                 ),
9189 +                 indicator: Some(
9190 +                     ti_cmo
9191 +                         as unsafe extern "C" fn(
9192 +                             libc::c_int,
9193 +                             *const *const libc::c_double,
9194 +                             *const libc::c_double,
9195 +                             *const *mut libc::c_double,
9196 +                         ) -> libc::c_int,
9197 +                 ),
9198 +                 indicator_ref: None,
9199 +                 type_0: 2 as libc::c_int,
9200 +                 inputs: 1 as libc::c_int,
9201 +                 options: 1 as libc::c_int,
9202 +                 outputs: 1 as libc::c_int,
9203 +                 input_names: [
9204 +                     b"real\0" as *const u8 as *const libc::c_char,
9205 +                     0 as *const libc::c_char,
9206 +                     0 as *const libc::c_char,
9207 +                     0 as *const libc::c_char,
9208 +                     0 as *const libc::c_char,
9209 +                     0 as *const libc::c_char,
9210 +                     0 as *const libc::c_char,
9211 +                     0 as *const libc::c_char,
9212 +                     0 as *const libc::c_char,
9213 +                     0 as *const libc::c_char,
9214 +                     0 as *const libc::c_char,
9215 +                     0 as *const libc::c_char,
9216 +                     0 as *const libc::c_char,
9217 +                     0 as *const libc::c_char,
9218 +                     0 as *const libc::c_char,
9219 +                     0 as *const libc::c_char,
9220 +                 ],
9221 +                 option_names: [
9222 +                     b"period\0" as *const u8 as *const libc::c_char,
9223 +                     0 as *const libc::c_char,
9224 +                     0 as *const libc::c_char,
9225 +                     0 as *const libc::c_char,
9226 +                     0 as *const libc::c_char,
9227 +                     0 as *const libc::c_char,
9228 +                     0 as *const libc::c_char,
9229 +                     0 as *const libc::c_char,
9230 +                     0 as *const libc::c_char,
9231 +                     0 as *const libc::c_char,
9232 +                     0 as *const libc::c_char,
9233 +                     0 as *const libc::c_char,
9234 +                     0 as *const libc::c_char,
9235 +                     0 as *const libc::c_char,
9236 +                     0 as *const libc::c_char,
9237 +                     0 as *const libc::c_char,
9238 +                 ],
9239 +                 output_names: [
9240 +                     b"cmo\0" as *const u8 as *const libc::c_char,
9241 +                     0 as *const libc::c_char,
9242 +                     0 as *const libc::c_char,
9243 +                     0 as *const libc::c_char,
9244 +                     0 as *const libc::c_char,
9245 +                     0 as *const libc::c_char,
9246 +                     0 as *const libc::c_char,
9247 +                     0 as *const libc::c_char,
9248 +                     0 as *const libc::c_char,
9249 +                     0 as *const libc::c_char,
9250 +                     0 as *const libc::c_char,
9251 +                     0 as *const libc::c_char,
9252 +                     0 as *const libc::c_char,
9253 +                     0 as *const libc::c_char,
9254 +                     0 as *const libc::c_char,
9255 +                     0 as *const libc::c_char,
9256 +                 ],
9257 +                 stream_new: None,
9258 +                 stream_run: None,
9259 +                 stream_free: None,
9260 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/tiamalgamation.rs:9342:13
     |
9263 | /             let mut init = ti_indicator_info {
9264 | |                 name: b"cos\0" as *const u8 as *const libc::c_char,
9265 | |                 full_name: b"Vector Cosine\0" as *const u8 as *const libc::c_char,
9266 | |                 start: Some(
...    |
9340 | |                 stream_free: None,
9341 | |             };
     | |______________- unnecessary `let` binding
9342 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
9263 ~             
9264 ~             ti_indicator_info {
9265 +                 name: b"cos\0" as *const u8 as *const libc::c_char,
9266 +                 full_name: b"Vector Cosine\0" as *const u8 as *const libc::c_char,
9267 +                 start: Some(
9268 +                     ti_cos_start
9269 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
9270 +                 ),
9271 +                 indicator: Some(
9272 +                     ti_cos
9273 +                         as unsafe extern "C" fn(
9274 +                             libc::c_int,
9275 +                             *const *const libc::c_double,
9276 +                             *const libc::c_double,
9277 +                             *const *mut libc::c_double,
9278 +                         ) -> libc::c_int,
9279 +                 ),
9280 +                 indicator_ref: None,
9281 +                 type_0: 4 as libc::c_int,
9282 +                 inputs: 1 as libc::c_int,
9283 +                 options: 0 as libc::c_int,
9284 +                 outputs: 1 as libc::c_int,
9285 +                 input_names: [
9286 +                     b"real\0" as *const u8 as *const libc::c_char,
9287 +                     0 as *const libc::c_char,
9288 +                     0 as *const libc::c_char,
9289 +                     0 as *const libc::c_char,
9290 +                     0 as *const libc::c_char,
9291 +                     0 as *const libc::c_char,
9292 +                     0 as *const libc::c_char,
9293 +                     0 as *const libc::c_char,
9294 +                     0 as *const libc::c_char,
9295 +                     0 as *const libc::c_char,
9296 +                     0 as *const libc::c_char,
9297 +                     0 as *const libc::c_char,
9298 +                     0 as *const libc::c_char,
9299 +                     0 as *const libc::c_char,
9300 +                     0 as *const libc::c_char,
9301 +                     0 as *const libc::c_char,
9302 +                 ],
9303 +                 option_names: [
9304 +                     b"\0" as *const u8 as *const libc::c_char,
9305 +                     0 as *const libc::c_char,
9306 +                     0 as *const libc::c_char,
9307 +                     0 as *const libc::c_char,
9308 +                     0 as *const libc::c_char,
9309 +                     0 as *const libc::c_char,
9310 +                     0 as *const libc::c_char,
9311 +                     0 as *const libc::c_char,
9312 +                     0 as *const libc::c_char,
9313 +                     0 as *const libc::c_char,
9314 +                     0 as *const libc::c_char,
9315 +                     0 as *const libc::c_char,
9316 +                     0 as *const libc::c_char,
9317 +                     0 as *const libc::c_char,
9318 +                     0 as *const libc::c_char,
9319 +                     0 as *const libc::c_char,
9320 +                 ],
9321 +                 output_names: [
9322 +                     b"cos\0" as *const u8 as *const libc::c_char,
9323 +                     0 as *const libc::c_char,
9324 +                     0 as *const libc::c_char,
9325 +                     0 as *const libc::c_char,
9326 +                     0 as *const libc::c_char,
9327 +                     0 as *const libc::c_char,
9328 +                     0 as *const libc::c_char,
9329 +                     0 as *const libc::c_char,
9330 +                     0 as *const libc::c_char,
9331 +                     0 as *const libc::c_char,
9332 +                     0 as *const libc::c_char,
9333 +                     0 as *const libc::c_char,
9334 +                     0 as *const libc::c_char,
9335 +                     0 as *const libc::c_char,
9336 +                     0 as *const libc::c_char,
9337 +                     0 as *const libc::c_char,
9338 +                 ],
9339 +                 stream_new: None,
9340 +                 stream_run: None,
9341 +                 stream_free: None,
9342 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/tiamalgamation.rs:9425:13
     |
9345 | /             let mut init = ti_indicator_info {
9346 | |                 name: b"cosh\0" as *const u8 as *const libc::c_char,
9347 | |                 full_name: b"Vector Hyperbolic Cosine\0" as *const u8
9348 | |                     as *const libc::c_char,
...    |
9423 | |                 stream_free: None,
9424 | |             };
     | |______________- unnecessary `let` binding
9425 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
9345 ~             
9346 ~             ti_indicator_info {
9347 +                 name: b"cosh\0" as *const u8 as *const libc::c_char,
9348 +                 full_name: b"Vector Hyperbolic Cosine\0" as *const u8
9349 +                     as *const libc::c_char,
9350 +                 start: Some(
9351 +                     ti_cosh_start
9352 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
9353 +                 ),
9354 +                 indicator: Some(
9355 +                     ti_cosh
9356 +                         as unsafe extern "C" fn(
9357 +                             libc::c_int,
9358 +                             *const *const libc::c_double,
9359 +                             *const libc::c_double,
9360 +                             *const *mut libc::c_double,
9361 +                         ) -> libc::c_int,
9362 +                 ),
9363 +                 indicator_ref: None,
9364 +                 type_0: 4 as libc::c_int,
9365 +                 inputs: 1 as libc::c_int,
9366 +                 options: 0 as libc::c_int,
9367 +                 outputs: 1 as libc::c_int,
9368 +                 input_names: [
9369 +                     b"real\0" as *const u8 as *const libc::c_char,
9370 +                     0 as *const libc::c_char,
9371 +                     0 as *const libc::c_char,
9372 +                     0 as *const libc::c_char,
9373 +                     0 as *const libc::c_char,
9374 +                     0 as *const libc::c_char,
9375 +                     0 as *const libc::c_char,
9376 +                     0 as *const libc::c_char,
9377 +                     0 as *const libc::c_char,
9378 +                     0 as *const libc::c_char,
9379 +                     0 as *const libc::c_char,
9380 +                     0 as *const libc::c_char,
9381 +                     0 as *const libc::c_char,
9382 +                     0 as *const libc::c_char,
9383 +                     0 as *const libc::c_char,
9384 +                     0 as *const libc::c_char,
9385 +                 ],
9386 +                 option_names: [
9387 +                     b"\0" as *const u8 as *const libc::c_char,
9388 +                     0 as *const libc::c_char,
9389 +                     0 as *const libc::c_char,
9390 +                     0 as *const libc::c_char,
9391 +                     0 as *const libc::c_char,
9392 +                     0 as *const libc::c_char,
9393 +                     0 as *const libc::c_char,
9394 +                     0 as *const libc::c_char,
9395 +                     0 as *const libc::c_char,
9396 +                     0 as *const libc::c_char,
9397 +                     0 as *const libc::c_char,
9398 +                     0 as *const libc::c_char,
9399 +                     0 as *const libc::c_char,
9400 +                     0 as *const libc::c_char,
9401 +                     0 as *const libc::c_char,
9402 +                     0 as *const libc::c_char,
9403 +                 ],
9404 +                 output_names: [
9405 +                     b"cosh\0" as *const u8 as *const libc::c_char,
9406 +                     0 as *const libc::c_char,
9407 +                     0 as *const libc::c_char,
9408 +                     0 as *const libc::c_char,
9409 +                     0 as *const libc::c_char,
9410 +                     0 as *const libc::c_char,
9411 +                     0 as *const libc::c_char,
9412 +                     0 as *const libc::c_char,
9413 +                     0 as *const libc::c_char,
9414 +                     0 as *const libc::c_char,
9415 +                     0 as *const libc::c_char,
9416 +                     0 as *const libc::c_char,
9417 +                     0 as *const libc::c_char,
9418 +                     0 as *const libc::c_char,
9419 +                     0 as *const libc::c_char,
9420 +                     0 as *const libc::c_char,
9421 +                 ],
9422 +                 stream_new: None,
9423 +                 stream_run: None,
9424 +                 stream_free: None,
9425 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/tiamalgamation.rs:9507:13
     |
9428 | /             let mut init = ti_indicator_info {
9429 | |                 name: b"crossany\0" as *const u8 as *const libc::c_char,
9430 | |                 full_name: b"Crossany\0" as *const u8 as *const libc::c_char,
9431 | |                 start: Some(
...    |
9505 | |                 stream_free: None,
9506 | |             };
     | |______________- unnecessary `let` binding
9507 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
9428 ~             
9429 ~             ti_indicator_info {
9430 +                 name: b"crossany\0" as *const u8 as *const libc::c_char,
9431 +                 full_name: b"Crossany\0" as *const u8 as *const libc::c_char,
9432 +                 start: Some(
9433 +                     ti_crossany_start
9434 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
9435 +                 ),
9436 +                 indicator: Some(
9437 +                     ti_crossany
9438 +                         as unsafe extern "C" fn(
9439 +                             libc::c_int,
9440 +                             *const *const libc::c_double,
9441 +                             *const libc::c_double,
9442 +                             *const *mut libc::c_double,
9443 +                         ) -> libc::c_int,
9444 +                 ),
9445 +                 indicator_ref: None,
9446 +                 type_0: 3 as libc::c_int,
9447 +                 inputs: 2 as libc::c_int,
9448 +                 options: 0 as libc::c_int,
9449 +                 outputs: 1 as libc::c_int,
9450 +                 input_names: [
9451 +                     b"real\0" as *const u8 as *const libc::c_char,
9452 +                     b"real\0" as *const u8 as *const libc::c_char,
9453 +                     0 as *const libc::c_char,
9454 +                     0 as *const libc::c_char,
9455 +                     0 as *const libc::c_char,
9456 +                     0 as *const libc::c_char,
9457 +                     0 as *const libc::c_char,
9458 +                     0 as *const libc::c_char,
9459 +                     0 as *const libc::c_char,
9460 +                     0 as *const libc::c_char,
9461 +                     0 as *const libc::c_char,
9462 +                     0 as *const libc::c_char,
9463 +                     0 as *const libc::c_char,
9464 +                     0 as *const libc::c_char,
9465 +                     0 as *const libc::c_char,
9466 +                     0 as *const libc::c_char,
9467 +                 ],
9468 +                 option_names: [
9469 +                     b"\0" as *const u8 as *const libc::c_char,
9470 +                     0 as *const libc::c_char,
9471 +                     0 as *const libc::c_char,
9472 +                     0 as *const libc::c_char,
9473 +                     0 as *const libc::c_char,
9474 +                     0 as *const libc::c_char,
9475 +                     0 as *const libc::c_char,
9476 +                     0 as *const libc::c_char,
9477 +                     0 as *const libc::c_char,
9478 +                     0 as *const libc::c_char,
9479 +                     0 as *const libc::c_char,
9480 +                     0 as *const libc::c_char,
9481 +                     0 as *const libc::c_char,
9482 +                     0 as *const libc::c_char,
9483 +                     0 as *const libc::c_char,
9484 +                     0 as *const libc::c_char,
9485 +                 ],
9486 +                 output_names: [
9487 +                     b"crossany\0" as *const u8 as *const libc::c_char,
9488 +                     0 as *const libc::c_char,
9489 +                     0 as *const libc::c_char,
9490 +                     0 as *const libc::c_char,
9491 +                     0 as *const libc::c_char,
9492 +                     0 as *const libc::c_char,
9493 +                     0 as *const libc::c_char,
9494 +                     0 as *const libc::c_char,
9495 +                     0 as *const libc::c_char,
9496 +                     0 as *const libc::c_char,
9497 +                     0 as *const libc::c_char,
9498 +                     0 as *const libc::c_char,
9499 +                     0 as *const libc::c_char,
9500 +                     0 as *const libc::c_char,
9501 +                     0 as *const libc::c_char,
9502 +                     0 as *const libc::c_char,
9503 +                 ],
9504 +                 stream_new: None,
9505 +                 stream_run: None,
9506 +                 stream_free: None,
9507 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/tiamalgamation.rs:9589:13
     |
9510 | /             let mut init = ti_indicator_info {
9511 | |                 name: b"crossover\0" as *const u8 as *const libc::c_char,
9512 | |                 full_name: b"Crossover\0" as *const u8 as *const libc::c_char,
9513 | |                 start: Some(
...    |
9587 | |                 stream_free: None,
9588 | |             };
     | |______________- unnecessary `let` binding
9589 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
9510 ~             
9511 ~             ti_indicator_info {
9512 +                 name: b"crossover\0" as *const u8 as *const libc::c_char,
9513 +                 full_name: b"Crossover\0" as *const u8 as *const libc::c_char,
9514 +                 start: Some(
9515 +                     ti_crossover_start
9516 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
9517 +                 ),
9518 +                 indicator: Some(
9519 +                     ti_crossover
9520 +                         as unsafe extern "C" fn(
9521 +                             libc::c_int,
9522 +                             *const *const libc::c_double,
9523 +                             *const libc::c_double,
9524 +                             *const *mut libc::c_double,
9525 +                         ) -> libc::c_int,
9526 +                 ),
9527 +                 indicator_ref: None,
9528 +                 type_0: 3 as libc::c_int,
9529 +                 inputs: 2 as libc::c_int,
9530 +                 options: 0 as libc::c_int,
9531 +                 outputs: 1 as libc::c_int,
9532 +                 input_names: [
9533 +                     b"real\0" as *const u8 as *const libc::c_char,
9534 +                     b"real\0" as *const u8 as *const libc::c_char,
9535 +                     0 as *const libc::c_char,
9536 +                     0 as *const libc::c_char,
9537 +                     0 as *const libc::c_char,
9538 +                     0 as *const libc::c_char,
9539 +                     0 as *const libc::c_char,
9540 +                     0 as *const libc::c_char,
9541 +                     0 as *const libc::c_char,
9542 +                     0 as *const libc::c_char,
9543 +                     0 as *const libc::c_char,
9544 +                     0 as *const libc::c_char,
9545 +                     0 as *const libc::c_char,
9546 +                     0 as *const libc::c_char,
9547 +                     0 as *const libc::c_char,
9548 +                     0 as *const libc::c_char,
9549 +                 ],
9550 +                 option_names: [
9551 +                     b"\0" as *const u8 as *const libc::c_char,
9552 +                     0 as *const libc::c_char,
9553 +                     0 as *const libc::c_char,
9554 +                     0 as *const libc::c_char,
9555 +                     0 as *const libc::c_char,
9556 +                     0 as *const libc::c_char,
9557 +                     0 as *const libc::c_char,
9558 +                     0 as *const libc::c_char,
9559 +                     0 as *const libc::c_char,
9560 +                     0 as *const libc::c_char,
9561 +                     0 as *const libc::c_char,
9562 +                     0 as *const libc::c_char,
9563 +                     0 as *const libc::c_char,
9564 +                     0 as *const libc::c_char,
9565 +                     0 as *const libc::c_char,
9566 +                     0 as *const libc::c_char,
9567 +                 ],
9568 +                 output_names: [
9569 +                     b"crossover\0" as *const u8 as *const libc::c_char,
9570 +                     0 as *const libc::c_char,
9571 +                     0 as *const libc::c_char,
9572 +                     0 as *const libc::c_char,
9573 +                     0 as *const libc::c_char,
9574 +                     0 as *const libc::c_char,
9575 +                     0 as *const libc::c_char,
9576 +                     0 as *const libc::c_char,
9577 +                     0 as *const libc::c_char,
9578 +                     0 as *const libc::c_char,
9579 +                     0 as *const libc::c_char,
9580 +                     0 as *const libc::c_char,
9581 +                     0 as *const libc::c_char,
9582 +                     0 as *const libc::c_char,
9583 +                     0 as *const libc::c_char,
9584 +                     0 as *const libc::c_char,
9585 +                 ],
9586 +                 stream_new: None,
9587 +                 stream_run: None,
9588 +                 stream_free: None,
9589 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/tiamalgamation.rs:9671:13
     |
9592 | /             let mut init = ti_indicator_info {
9593 | |                 name: b"cvi\0" as *const u8 as *const libc::c_char,
9594 | |                 full_name: b"Chaikins Volatility\0" as *const u8 as *const libc::c_char,
9595 | |                 start: Some(
...    |
9669 | |                 stream_free: None,
9670 | |             };
     | |______________- unnecessary `let` binding
9671 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
9592 ~             
9593 ~             ti_indicator_info {
9594 +                 name: b"cvi\0" as *const u8 as *const libc::c_char,
9595 +                 full_name: b"Chaikins Volatility\0" as *const u8 as *const libc::c_char,
9596 +                 start: Some(
9597 +                     ti_cvi_start
9598 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
9599 +                 ),
9600 +                 indicator: Some(
9601 +                     ti_cvi
9602 +                         as unsafe extern "C" fn(
9603 +                             libc::c_int,
9604 +                             *const *const libc::c_double,
9605 +                             *const libc::c_double,
9606 +                             *const *mut libc::c_double,
9607 +                         ) -> libc::c_int,
9608 +                 ),
9609 +                 indicator_ref: None,
9610 +                 type_0: 2 as libc::c_int,
9611 +                 inputs: 2 as libc::c_int,
9612 +                 options: 1 as libc::c_int,
9613 +                 outputs: 1 as libc::c_int,
9614 +                 input_names: [
9615 +                     b"high\0" as *const u8 as *const libc::c_char,
9616 +                     b"low\0" as *const u8 as *const libc::c_char,
9617 +                     0 as *const libc::c_char,
9618 +                     0 as *const libc::c_char,
9619 +                     0 as *const libc::c_char,
9620 +                     0 as *const libc::c_char,
9621 +                     0 as *const libc::c_char,
9622 +                     0 as *const libc::c_char,
9623 +                     0 as *const libc::c_char,
9624 +                     0 as *const libc::c_char,
9625 +                     0 as *const libc::c_char,
9626 +                     0 as *const libc::c_char,
9627 +                     0 as *const libc::c_char,
9628 +                     0 as *const libc::c_char,
9629 +                     0 as *const libc::c_char,
9630 +                     0 as *const libc::c_char,
9631 +                 ],
9632 +                 option_names: [
9633 +                     b"period\0" as *const u8 as *const libc::c_char,
9634 +                     0 as *const libc::c_char,
9635 +                     0 as *const libc::c_char,
9636 +                     0 as *const libc::c_char,
9637 +                     0 as *const libc::c_char,
9638 +                     0 as *const libc::c_char,
9639 +                     0 as *const libc::c_char,
9640 +                     0 as *const libc::c_char,
9641 +                     0 as *const libc::c_char,
9642 +                     0 as *const libc::c_char,
9643 +                     0 as *const libc::c_char,
9644 +                     0 as *const libc::c_char,
9645 +                     0 as *const libc::c_char,
9646 +                     0 as *const libc::c_char,
9647 +                     0 as *const libc::c_char,
9648 +                     0 as *const libc::c_char,
9649 +                 ],
9650 +                 output_names: [
9651 +                     b"cvi\0" as *const u8 as *const libc::c_char,
9652 +                     0 as *const libc::c_char,
9653 +                     0 as *const libc::c_char,
9654 +                     0 as *const libc::c_char,
9655 +                     0 as *const libc::c_char,
9656 +                     0 as *const libc::c_char,
9657 +                     0 as *const libc::c_char,
9658 +                     0 as *const libc::c_char,
9659 +                     0 as *const libc::c_char,
9660 +                     0 as *const libc::c_char,
9661 +                     0 as *const libc::c_char,
9662 +                     0 as *const libc::c_char,
9663 +                     0 as *const libc::c_char,
9664 +                     0 as *const libc::c_char,
9665 +                     0 as *const libc::c_char,
9666 +                     0 as *const libc::c_char,
9667 +                 ],
9668 +                 stream_new: None,
9669 +                 stream_run: None,
9670 +                 stream_free: None,
9671 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/tiamalgamation.rs:9753:13
     |
9674 | /             let mut init = ti_indicator_info {
9675 | |                 name: b"decay\0" as *const u8 as *const libc::c_char,
9676 | |                 full_name: b"Linear Decay\0" as *const u8 as *const libc::c_char,
9677 | |                 start: Some(
...    |
9751 | |                 stream_free: None,
9752 | |             };
     | |______________- unnecessary `let` binding
9753 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
9674 ~             
9675 ~             ti_indicator_info {
9676 +                 name: b"decay\0" as *const u8 as *const libc::c_char,
9677 +                 full_name: b"Linear Decay\0" as *const u8 as *const libc::c_char,
9678 +                 start: Some(
9679 +                     ti_decay_start
9680 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
9681 +                 ),
9682 +                 indicator: Some(
9683 +                     ti_decay
9684 +                         as unsafe extern "C" fn(
9685 +                             libc::c_int,
9686 +                             *const *const libc::c_double,
9687 +                             *const libc::c_double,
9688 +                             *const *mut libc::c_double,
9689 +                         ) -> libc::c_int,
9690 +                 ),
9691 +                 indicator_ref: None,
9692 +                 type_0: 3 as libc::c_int,
9693 +                 inputs: 1 as libc::c_int,
9694 +                 options: 1 as libc::c_int,
9695 +                 outputs: 1 as libc::c_int,
9696 +                 input_names: [
9697 +                     b"real\0" as *const u8 as *const libc::c_char,
9698 +                     0 as *const libc::c_char,
9699 +                     0 as *const libc::c_char,
9700 +                     0 as *const libc::c_char,
9701 +                     0 as *const libc::c_char,
9702 +                     0 as *const libc::c_char,
9703 +                     0 as *const libc::c_char,
9704 +                     0 as *const libc::c_char,
9705 +                     0 as *const libc::c_char,
9706 +                     0 as *const libc::c_char,
9707 +                     0 as *const libc::c_char,
9708 +                     0 as *const libc::c_char,
9709 +                     0 as *const libc::c_char,
9710 +                     0 as *const libc::c_char,
9711 +                     0 as *const libc::c_char,
9712 +                     0 as *const libc::c_char,
9713 +                 ],
9714 +                 option_names: [
9715 +                     b"period\0" as *const u8 as *const libc::c_char,
9716 +                     0 as *const libc::c_char,
9717 +                     0 as *const libc::c_char,
9718 +                     0 as *const libc::c_char,
9719 +                     0 as *const libc::c_char,
9720 +                     0 as *const libc::c_char,
9721 +                     0 as *const libc::c_char,
9722 +                     0 as *const libc::c_char,
9723 +                     0 as *const libc::c_char,
9724 +                     0 as *const libc::c_char,
9725 +                     0 as *const libc::c_char,
9726 +                     0 as *const libc::c_char,
9727 +                     0 as *const libc::c_char,
9728 +                     0 as *const libc::c_char,
9729 +                     0 as *const libc::c_char,
9730 +                     0 as *const libc::c_char,
9731 +                 ],
9732 +                 output_names: [
9733 +                     b"decay\0" as *const u8 as *const libc::c_char,
9734 +                     0 as *const libc::c_char,
9735 +                     0 as *const libc::c_char,
9736 +                     0 as *const libc::c_char,
9737 +                     0 as *const libc::c_char,
9738 +                     0 as *const libc::c_char,
9739 +                     0 as *const libc::c_char,
9740 +                     0 as *const libc::c_char,
9741 +                     0 as *const libc::c_char,
9742 +                     0 as *const libc::c_char,
9743 +                     0 as *const libc::c_char,
9744 +                     0 as *const libc::c_char,
9745 +                     0 as *const libc::c_char,
9746 +                     0 as *const libc::c_char,
9747 +                     0 as *const libc::c_char,
9748 +                     0 as *const libc::c_char,
9749 +                 ],
9750 +                 stream_new: None,
9751 +                 stream_run: None,
9752 +                 stream_free: None,
9753 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/tiamalgamation.rs:9836:13
     |
9756 | /             let mut init = ti_indicator_info {
9757 | |                 name: b"dema\0" as *const u8 as *const libc::c_char,
9758 | |                 full_name: b"Double Exponential Moving Average\0" as *const u8
9759 | |                     as *const libc::c_char,
...    |
9834 | |                 stream_free: None,
9835 | |             };
     | |______________- unnecessary `let` binding
9836 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
9756 ~             
9757 ~             ti_indicator_info {
9758 +                 name: b"dema\0" as *const u8 as *const libc::c_char,
9759 +                 full_name: b"Double Exponential Moving Average\0" as *const u8
9760 +                     as *const libc::c_char,
9761 +                 start: Some(
9762 +                     ti_dema_start
9763 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
9764 +                 ),
9765 +                 indicator: Some(
9766 +                     ti_dema
9767 +                         as unsafe extern "C" fn(
9768 +                             libc::c_int,
9769 +                             *const *const libc::c_double,
9770 +                             *const libc::c_double,
9771 +                             *const *mut libc::c_double,
9772 +                         ) -> libc::c_int,
9773 +                 ),
9774 +                 indicator_ref: None,
9775 +                 type_0: 1 as libc::c_int,
9776 +                 inputs: 1 as libc::c_int,
9777 +                 options: 1 as libc::c_int,
9778 +                 outputs: 1 as libc::c_int,
9779 +                 input_names: [
9780 +                     b"real\0" as *const u8 as *const libc::c_char,
9781 +                     0 as *const libc::c_char,
9782 +                     0 as *const libc::c_char,
9783 +                     0 as *const libc::c_char,
9784 +                     0 as *const libc::c_char,
9785 +                     0 as *const libc::c_char,
9786 +                     0 as *const libc::c_char,
9787 +                     0 as *const libc::c_char,
9788 +                     0 as *const libc::c_char,
9789 +                     0 as *const libc::c_char,
9790 +                     0 as *const libc::c_char,
9791 +                     0 as *const libc::c_char,
9792 +                     0 as *const libc::c_char,
9793 +                     0 as *const libc::c_char,
9794 +                     0 as *const libc::c_char,
9795 +                     0 as *const libc::c_char,
9796 +                 ],
9797 +                 option_names: [
9798 +                     b"period\0" as *const u8 as *const libc::c_char,
9799 +                     0 as *const libc::c_char,
9800 +                     0 as *const libc::c_char,
9801 +                     0 as *const libc::c_char,
9802 +                     0 as *const libc::c_char,
9803 +                     0 as *const libc::c_char,
9804 +                     0 as *const libc::c_char,
9805 +                     0 as *const libc::c_char,
9806 +                     0 as *const libc::c_char,
9807 +                     0 as *const libc::c_char,
9808 +                     0 as *const libc::c_char,
9809 +                     0 as *const libc::c_char,
9810 +                     0 as *const libc::c_char,
9811 +                     0 as *const libc::c_char,
9812 +                     0 as *const libc::c_char,
9813 +                     0 as *const libc::c_char,
9814 +                 ],
9815 +                 output_names: [
9816 +                     b"dema\0" as *const u8 as *const libc::c_char,
9817 +                     0 as *const libc::c_char,
9818 +                     0 as *const libc::c_char,
9819 +                     0 as *const libc::c_char,
9820 +                     0 as *const libc::c_char,
9821 +                     0 as *const libc::c_char,
9822 +                     0 as *const libc::c_char,
9823 +                     0 as *const libc::c_char,
9824 +                     0 as *const libc::c_char,
9825 +                     0 as *const libc::c_char,
9826 +                     0 as *const libc::c_char,
9827 +                     0 as *const libc::c_char,
9828 +                     0 as *const libc::c_char,
9829 +                     0 as *const libc::c_char,
9830 +                     0 as *const libc::c_char,
9831 +                     0 as *const libc::c_char,
9832 +                 ],
9833 +                 stream_new: None,
9834 +                 stream_run: None,
9835 +                 stream_free: None,
9836 +             }
     |

warning: returning the result of a `let` binding from a block
    --> src/tiamalgamation.rs:9919:13
     |
9839 | /             let mut init = ti_indicator_info {
9840 | |                 name: b"di\0" as *const u8 as *const libc::c_char,
9841 | |                 full_name: b"Directional Indicator\0" as *const u8
9842 | |                     as *const libc::c_char,
...    |
9917 | |                 stream_free: None,
9918 | |             };
     | |______________- unnecessary `let` binding
9919 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
9839 ~             
9840 ~             ti_indicator_info {
9841 +                 name: b"di\0" as *const u8 as *const libc::c_char,
9842 +                 full_name: b"Directional Indicator\0" as *const u8
9843 +                     as *const libc::c_char,
9844 +                 start: Some(
9845 +                     ti_di_start
9846 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
9847 +                 ),
9848 +                 indicator: Some(
9849 +                     ti_di
9850 +                         as unsafe extern "C" fn(
9851 +                             libc::c_int,
9852 +                             *const *const libc::c_double,
9853 +                             *const libc::c_double,
9854 +                             *const *mut libc::c_double,
9855 +                         ) -> libc::c_int,
9856 +                 ),
9857 +                 indicator_ref: None,
9858 +                 type_0: 2 as libc::c_int,
9859 +                 inputs: 3 as libc::c_int,
9860 +                 options: 1 as libc::c_int,
9861 +                 outputs: 2 as libc::c_int,
9862 +                 input_names: [
9863 +                     b"high\0" as *const u8 as *const libc::c_char,
9864 +                     b"low\0" as *const u8 as *const libc::c_char,
9865 +                     b"close\0" as *const u8 as *const libc::c_char,
9866 +                     0 as *const libc::c_char,
9867 +                     0 as *const libc::c_char,
9868 +                     0 as *const libc::c_char,
9869 +                     0 as *const libc::c_char,
9870 +                     0 as *const libc::c_char,
9871 +                     0 as *const libc::c_char,
9872 +                     0 as *const libc::c_char,
9873 +                     0 as *const libc::c_char,
9874 +                     0 as *const libc::c_char,
9875 +                     0 as *const libc::c_char,
9876 +                     0 as *const libc::c_char,
9877 +                     0 as *const libc::c_char,
9878 +                     0 as *const libc::c_char,
9879 +                 ],
9880 +                 option_names: [
9881 +                     b"period\0" as *const u8 as *const libc::c_char,
9882 +                     0 as *const libc::c_char,
9883 +                     0 as *const libc::c_char,
9884 +                     0 as *const libc::c_char,
9885 +                     0 as *const libc::c_char,
9886 +                     0 as *const libc::c_char,
9887 +                     0 as *const libc::c_char,
9888 +                     0 as *const libc::c_char,
9889 +                     0 as *const libc::c_char,
9890 +                     0 as *const libc::c_char,
9891 +                     0 as *const libc::c_char,
9892 +                     0 as *const libc::c_char,
9893 +                     0 as *const libc::c_char,
9894 +                     0 as *const libc::c_char,
9895 +                     0 as *const libc::c_char,
9896 +                     0 as *const libc::c_char,
9897 +                 ],
9898 +                 output_names: [
9899 +                     b"plus_di\0" as *const u8 as *const libc::c_char,
9900 +                     b"minus_di\0" as *const u8 as *const libc::c_char,
9901 +                     0 as *const libc::c_char,
9902 +                     0 as *const libc::c_char,
9903 +                     0 as *const libc::c_char,
9904 +                     0 as *const libc::c_char,
9905 +                     0 as *const libc::c_char,
9906 +                     0 as *const libc::c_char,
9907 +                     0 as *const libc::c_char,
9908 +                     0 as *const libc::c_char,
9909 +                     0 as *const libc::c_char,
9910 +                     0 as *const libc::c_char,
9911 +                     0 as *const libc::c_char,
9912 +                     0 as *const libc::c_char,
9913 +                     0 as *const libc::c_char,
9914 +                     0 as *const libc::c_char,
9915 +                 ],
9916 +                 stream_new: None,
9917 +                 stream_run: None,
9918 +                 stream_free: None,
9919 +             }
     |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:10001:13
      |
9922  | /             let mut init = ti_indicator_info {
9923  | |                 name: b"div\0" as *const u8 as *const libc::c_char,
9924  | |                 full_name: b"Vector Division\0" as *const u8 as *const libc::c_char,
9925  | |                 start: Some(
...     |
9999  | |                 stream_free: None,
10000 | |             };
      | |______________- unnecessary `let` binding
10001 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
9922  ~             
9923  ~             ti_indicator_info {
9924  +                 name: b"div\0" as *const u8 as *const libc::c_char,
9925  +                 full_name: b"Vector Division\0" as *const u8 as *const libc::c_char,
9926  +                 start: Some(
9927  +                     ti_div_start
9928  +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
9929  +                 ),
9930  +                 indicator: Some(
9931  +                     ti_div
9932  +                         as unsafe extern "C" fn(
9933  +                             libc::c_int,
9934  +                             *const *const libc::c_double,
9935  +                             *const libc::c_double,
9936  +                             *const *mut libc::c_double,
9937  +                         ) -> libc::c_int,
9938  +                 ),
9939  +                 indicator_ref: None,
9940  +                 type_0: 4 as libc::c_int,
9941  +                 inputs: 2 as libc::c_int,
9942  +                 options: 0 as libc::c_int,
9943  +                 outputs: 1 as libc::c_int,
9944  +                 input_names: [
9945  +                     b"real\0" as *const u8 as *const libc::c_char,
9946  +                     b"real\0" as *const u8 as *const libc::c_char,
9947  +                     0 as *const libc::c_char,
9948  +                     0 as *const libc::c_char,
9949  +                     0 as *const libc::c_char,
9950  +                     0 as *const libc::c_char,
9951  +                     0 as *const libc::c_char,
9952  +                     0 as *const libc::c_char,
9953  +                     0 as *const libc::c_char,
9954  +                     0 as *const libc::c_char,
9955  +                     0 as *const libc::c_char,
9956  +                     0 as *const libc::c_char,
9957  +                     0 as *const libc::c_char,
9958  +                     0 as *const libc::c_char,
9959  +                     0 as *const libc::c_char,
9960  +                     0 as *const libc::c_char,
9961  +                 ],
9962  +                 option_names: [
9963  +                     b"\0" as *const u8 as *const libc::c_char,
9964  +                     0 as *const libc::c_char,
9965  +                     0 as *const libc::c_char,
9966  +                     0 as *const libc::c_char,
9967  +                     0 as *const libc::c_char,
9968  +                     0 as *const libc::c_char,
9969  +                     0 as *const libc::c_char,
9970  +                     0 as *const libc::c_char,
9971  +                     0 as *const libc::c_char,
9972  +                     0 as *const libc::c_char,
9973  +                     0 as *const libc::c_char,
9974  +                     0 as *const libc::c_char,
9975  +                     0 as *const libc::c_char,
9976  +                     0 as *const libc::c_char,
9977  +                     0 as *const libc::c_char,
9978  +                     0 as *const libc::c_char,
9979  +                 ],
9980  +                 output_names: [
9981  +                     b"div\0" as *const u8 as *const libc::c_char,
9982  +                     0 as *const libc::c_char,
9983  +                     0 as *const libc::c_char,
9984  +                     0 as *const libc::c_char,
9985  +                     0 as *const libc::c_char,
9986  +                     0 as *const libc::c_char,
9987  +                     0 as *const libc::c_char,
9988  +                     0 as *const libc::c_char,
9989  +                     0 as *const libc::c_char,
9990  +                     0 as *const libc::c_char,
9991  +                     0 as *const libc::c_char,
9992  +                     0 as *const libc::c_char,
9993  +                     0 as *const libc::c_char,
9994  +                     0 as *const libc::c_char,
9995  +                     0 as *const libc::c_char,
9996  +                     0 as *const libc::c_char,
9997  +                 ],
9998  +                 stream_new: None,
9999  +                 stream_run: None,
10000 +                 stream_free: None,
10001 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:10083:13
      |
10004 | /             let mut init = ti_indicator_info {
10005 | |                 name: b"dm\0" as *const u8 as *const libc::c_char,
10006 | |                 full_name: b"Directional Movement\0" as *const u8 as *const libc::c_char,
10007 | |                 start: Some(
...     |
10081 | |                 stream_free: None,
10082 | |             };
      | |______________- unnecessary `let` binding
10083 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
10004 ~             
10005 ~             ti_indicator_info {
10006 +                 name: b"dm\0" as *const u8 as *const libc::c_char,
10007 +                 full_name: b"Directional Movement\0" as *const u8 as *const libc::c_char,
10008 +                 start: Some(
10009 +                     ti_dm_start
10010 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
10011 +                 ),
10012 +                 indicator: Some(
10013 +                     ti_dm
10014 +                         as unsafe extern "C" fn(
10015 +                             libc::c_int,
10016 +                             *const *const libc::c_double,
10017 +                             *const libc::c_double,
10018 +                             *const *mut libc::c_double,
10019 +                         ) -> libc::c_int,
10020 +                 ),
10021 +                 indicator_ref: None,
10022 +                 type_0: 2 as libc::c_int,
10023 +                 inputs: 2 as libc::c_int,
10024 +                 options: 1 as libc::c_int,
10025 +                 outputs: 2 as libc::c_int,
10026 +                 input_names: [
10027 +                     b"high\0" as *const u8 as *const libc::c_char,
10028 +                     b"low\0" as *const u8 as *const libc::c_char,
10029 +                     0 as *const libc::c_char,
10030 +                     0 as *const libc::c_char,
10031 +                     0 as *const libc::c_char,
10032 +                     0 as *const libc::c_char,
10033 +                     0 as *const libc::c_char,
10034 +                     0 as *const libc::c_char,
10035 +                     0 as *const libc::c_char,
10036 +                     0 as *const libc::c_char,
10037 +                     0 as *const libc::c_char,
10038 +                     0 as *const libc::c_char,
10039 +                     0 as *const libc::c_char,
10040 +                     0 as *const libc::c_char,
10041 +                     0 as *const libc::c_char,
10042 +                     0 as *const libc::c_char,
10043 +                 ],
10044 +                 option_names: [
10045 +                     b"period\0" as *const u8 as *const libc::c_char,
10046 +                     0 as *const libc::c_char,
10047 +                     0 as *const libc::c_char,
10048 +                     0 as *const libc::c_char,
10049 +                     0 as *const libc::c_char,
10050 +                     0 as *const libc::c_char,
10051 +                     0 as *const libc::c_char,
10052 +                     0 as *const libc::c_char,
10053 +                     0 as *const libc::c_char,
10054 +                     0 as *const libc::c_char,
10055 +                     0 as *const libc::c_char,
10056 +                     0 as *const libc::c_char,
10057 +                     0 as *const libc::c_char,
10058 +                     0 as *const libc::c_char,
10059 +                     0 as *const libc::c_char,
10060 +                     0 as *const libc::c_char,
10061 +                 ],
10062 +                 output_names: [
10063 +                     b"plus_dm\0" as *const u8 as *const libc::c_char,
10064 +                     b"minus_dm\0" as *const u8 as *const libc::c_char,
10065 +                     0 as *const libc::c_char,
10066 +                     0 as *const libc::c_char,
10067 +                     0 as *const libc::c_char,
10068 +                     0 as *const libc::c_char,
10069 +                     0 as *const libc::c_char,
10070 +                     0 as *const libc::c_char,
10071 +                     0 as *const libc::c_char,
10072 +                     0 as *const libc::c_char,
10073 +                     0 as *const libc::c_char,
10074 +                     0 as *const libc::c_char,
10075 +                     0 as *const libc::c_char,
10076 +                     0 as *const libc::c_char,
10077 +                     0 as *const libc::c_char,
10078 +                     0 as *const libc::c_char,
10079 +                 ],
10080 +                 stream_new: None,
10081 +                 stream_run: None,
10082 +                 stream_free: None,
10083 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:10166:13
      |
10086 | /             let mut init = ti_indicator_info {
10087 | |                 name: b"dpo\0" as *const u8 as *const libc::c_char,
10088 | |                 full_name: b"Detrended Price Oscillator\0" as *const u8
10089 | |                     as *const libc::c_char,
...     |
10164 | |                 stream_free: None,
10165 | |             };
      | |______________- unnecessary `let` binding
10166 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
10086 ~             
10087 ~             ti_indicator_info {
10088 +                 name: b"dpo\0" as *const u8 as *const libc::c_char,
10089 +                 full_name: b"Detrended Price Oscillator\0" as *const u8
10090 +                     as *const libc::c_char,
10091 +                 start: Some(
10092 +                     ti_dpo_start
10093 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
10094 +                 ),
10095 +                 indicator: Some(
10096 +                     ti_dpo
10097 +                         as unsafe extern "C" fn(
10098 +                             libc::c_int,
10099 +                             *const *const libc::c_double,
10100 +                             *const libc::c_double,
10101 +                             *const *mut libc::c_double,
10102 +                         ) -> libc::c_int,
10103 +                 ),
10104 +                 indicator_ref: None,
10105 +                 type_0: 2 as libc::c_int,
10106 +                 inputs: 1 as libc::c_int,
10107 +                 options: 1 as libc::c_int,
10108 +                 outputs: 1 as libc::c_int,
10109 +                 input_names: [
10110 +                     b"real\0" as *const u8 as *const libc::c_char,
10111 +                     0 as *const libc::c_char,
10112 +                     0 as *const libc::c_char,
10113 +                     0 as *const libc::c_char,
10114 +                     0 as *const libc::c_char,
10115 +                     0 as *const libc::c_char,
10116 +                     0 as *const libc::c_char,
10117 +                     0 as *const libc::c_char,
10118 +                     0 as *const libc::c_char,
10119 +                     0 as *const libc::c_char,
10120 +                     0 as *const libc::c_char,
10121 +                     0 as *const libc::c_char,
10122 +                     0 as *const libc::c_char,
10123 +                     0 as *const libc::c_char,
10124 +                     0 as *const libc::c_char,
10125 +                     0 as *const libc::c_char,
10126 +                 ],
10127 +                 option_names: [
10128 +                     b"period\0" as *const u8 as *const libc::c_char,
10129 +                     0 as *const libc::c_char,
10130 +                     0 as *const libc::c_char,
10131 +                     0 as *const libc::c_char,
10132 +                     0 as *const libc::c_char,
10133 +                     0 as *const libc::c_char,
10134 +                     0 as *const libc::c_char,
10135 +                     0 as *const libc::c_char,
10136 +                     0 as *const libc::c_char,
10137 +                     0 as *const libc::c_char,
10138 +                     0 as *const libc::c_char,
10139 +                     0 as *const libc::c_char,
10140 +                     0 as *const libc::c_char,
10141 +                     0 as *const libc::c_char,
10142 +                     0 as *const libc::c_char,
10143 +                     0 as *const libc::c_char,
10144 +                 ],
10145 +                 output_names: [
10146 +                     b"dpo\0" as *const u8 as *const libc::c_char,
10147 +                     0 as *const libc::c_char,
10148 +                     0 as *const libc::c_char,
10149 +                     0 as *const libc::c_char,
10150 +                     0 as *const libc::c_char,
10151 +                     0 as *const libc::c_char,
10152 +                     0 as *const libc::c_char,
10153 +                     0 as *const libc::c_char,
10154 +                     0 as *const libc::c_char,
10155 +                     0 as *const libc::c_char,
10156 +                     0 as *const libc::c_char,
10157 +                     0 as *const libc::c_char,
10158 +                     0 as *const libc::c_char,
10159 +                     0 as *const libc::c_char,
10160 +                     0 as *const libc::c_char,
10161 +                     0 as *const libc::c_char,
10162 +                 ],
10163 +                 stream_new: None,
10164 +                 stream_run: None,
10165 +                 stream_free: None,
10166 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:10249:13
      |
10169 | /             let mut init = ti_indicator_info {
10170 | |                 name: b"dx\0" as *const u8 as *const libc::c_char,
10171 | |                 full_name: b"Directional Movement Index\0" as *const u8
10172 | |                     as *const libc::c_char,
...     |
10247 | |                 stream_free: None,
10248 | |             };
      | |______________- unnecessary `let` binding
10249 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
10169 ~             
10170 ~             ti_indicator_info {
10171 +                 name: b"dx\0" as *const u8 as *const libc::c_char,
10172 +                 full_name: b"Directional Movement Index\0" as *const u8
10173 +                     as *const libc::c_char,
10174 +                 start: Some(
10175 +                     ti_dx_start
10176 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
10177 +                 ),
10178 +                 indicator: Some(
10179 +                     ti_dx
10180 +                         as unsafe extern "C" fn(
10181 +                             libc::c_int,
10182 +                             *const *const libc::c_double,
10183 +                             *const libc::c_double,
10184 +                             *const *mut libc::c_double,
10185 +                         ) -> libc::c_int,
10186 +                 ),
10187 +                 indicator_ref: None,
10188 +                 type_0: 2 as libc::c_int,
10189 +                 inputs: 2 as libc::c_int,
10190 +                 options: 1 as libc::c_int,
10191 +                 outputs: 1 as libc::c_int,
10192 +                 input_names: [
10193 +                     b"high\0" as *const u8 as *const libc::c_char,
10194 +                     b"low\0" as *const u8 as *const libc::c_char,
10195 +                     0 as *const libc::c_char,
10196 +                     0 as *const libc::c_char,
10197 +                     0 as *const libc::c_char,
10198 +                     0 as *const libc::c_char,
10199 +                     0 as *const libc::c_char,
10200 +                     0 as *const libc::c_char,
10201 +                     0 as *const libc::c_char,
10202 +                     0 as *const libc::c_char,
10203 +                     0 as *const libc::c_char,
10204 +                     0 as *const libc::c_char,
10205 +                     0 as *const libc::c_char,
10206 +                     0 as *const libc::c_char,
10207 +                     0 as *const libc::c_char,
10208 +                     0 as *const libc::c_char,
10209 +                 ],
10210 +                 option_names: [
10211 +                     b"period\0" as *const u8 as *const libc::c_char,
10212 +                     0 as *const libc::c_char,
10213 +                     0 as *const libc::c_char,
10214 +                     0 as *const libc::c_char,
10215 +                     0 as *const libc::c_char,
10216 +                     0 as *const libc::c_char,
10217 +                     0 as *const libc::c_char,
10218 +                     0 as *const libc::c_char,
10219 +                     0 as *const libc::c_char,
10220 +                     0 as *const libc::c_char,
10221 +                     0 as *const libc::c_char,
10222 +                     0 as *const libc::c_char,
10223 +                     0 as *const libc::c_char,
10224 +                     0 as *const libc::c_char,
10225 +                     0 as *const libc::c_char,
10226 +                     0 as *const libc::c_char,
10227 +                 ],
10228 +                 output_names: [
10229 +                     b"dx\0" as *const u8 as *const libc::c_char,
10230 +                     0 as *const libc::c_char,
10231 +                     0 as *const libc::c_char,
10232 +                     0 as *const libc::c_char,
10233 +                     0 as *const libc::c_char,
10234 +                     0 as *const libc::c_char,
10235 +                     0 as *const libc::c_char,
10236 +                     0 as *const libc::c_char,
10237 +                     0 as *const libc::c_char,
10238 +                     0 as *const libc::c_char,
10239 +                     0 as *const libc::c_char,
10240 +                     0 as *const libc::c_char,
10241 +                     0 as *const libc::c_char,
10242 +                     0 as *const libc::c_char,
10243 +                     0 as *const libc::c_char,
10244 +                     0 as *const libc::c_char,
10245 +                 ],
10246 +                 stream_new: None,
10247 +                 stream_run: None,
10248 +                 stream_free: None,
10249 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:10331:13
      |
10252 | /             let mut init = ti_indicator_info {
10253 | |                 name: b"edecay\0" as *const u8 as *const libc::c_char,
10254 | |                 full_name: b"Exponential Decay\0" as *const u8 as *const libc::c_char,
10255 | |                 start: Some(
...     |
10329 | |                 stream_free: None,
10330 | |             };
      | |______________- unnecessary `let` binding
10331 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
10252 ~             
10253 ~             ti_indicator_info {
10254 +                 name: b"edecay\0" as *const u8 as *const libc::c_char,
10255 +                 full_name: b"Exponential Decay\0" as *const u8 as *const libc::c_char,
10256 +                 start: Some(
10257 +                     ti_edecay_start
10258 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
10259 +                 ),
10260 +                 indicator: Some(
10261 +                     ti_edecay
10262 +                         as unsafe extern "C" fn(
10263 +                             libc::c_int,
10264 +                             *const *const libc::c_double,
10265 +                             *const libc::c_double,
10266 +                             *const *mut libc::c_double,
10267 +                         ) -> libc::c_int,
10268 +                 ),
10269 +                 indicator_ref: None,
10270 +                 type_0: 3 as libc::c_int,
10271 +                 inputs: 1 as libc::c_int,
10272 +                 options: 1 as libc::c_int,
10273 +                 outputs: 1 as libc::c_int,
10274 +                 input_names: [
10275 +                     b"real\0" as *const u8 as *const libc::c_char,
10276 +                     0 as *const libc::c_char,
10277 +                     0 as *const libc::c_char,
10278 +                     0 as *const libc::c_char,
10279 +                     0 as *const libc::c_char,
10280 +                     0 as *const libc::c_char,
10281 +                     0 as *const libc::c_char,
10282 +                     0 as *const libc::c_char,
10283 +                     0 as *const libc::c_char,
10284 +                     0 as *const libc::c_char,
10285 +                     0 as *const libc::c_char,
10286 +                     0 as *const libc::c_char,
10287 +                     0 as *const libc::c_char,
10288 +                     0 as *const libc::c_char,
10289 +                     0 as *const libc::c_char,
10290 +                     0 as *const libc::c_char,
10291 +                 ],
10292 +                 option_names: [
10293 +                     b"period\0" as *const u8 as *const libc::c_char,
10294 +                     0 as *const libc::c_char,
10295 +                     0 as *const libc::c_char,
10296 +                     0 as *const libc::c_char,
10297 +                     0 as *const libc::c_char,
10298 +                     0 as *const libc::c_char,
10299 +                     0 as *const libc::c_char,
10300 +                     0 as *const libc::c_char,
10301 +                     0 as *const libc::c_char,
10302 +                     0 as *const libc::c_char,
10303 +                     0 as *const libc::c_char,
10304 +                     0 as *const libc::c_char,
10305 +                     0 as *const libc::c_char,
10306 +                     0 as *const libc::c_char,
10307 +                     0 as *const libc::c_char,
10308 +                     0 as *const libc::c_char,
10309 +                 ],
10310 +                 output_names: [
10311 +                     b"edecay\0" as *const u8 as *const libc::c_char,
10312 +                     0 as *const libc::c_char,
10313 +                     0 as *const libc::c_char,
10314 +                     0 as *const libc::c_char,
10315 +                     0 as *const libc::c_char,
10316 +                     0 as *const libc::c_char,
10317 +                     0 as *const libc::c_char,
10318 +                     0 as *const libc::c_char,
10319 +                     0 as *const libc::c_char,
10320 +                     0 as *const libc::c_char,
10321 +                     0 as *const libc::c_char,
10322 +                     0 as *const libc::c_char,
10323 +                     0 as *const libc::c_char,
10324 +                     0 as *const libc::c_char,
10325 +                     0 as *const libc::c_char,
10326 +                     0 as *const libc::c_char,
10327 +                 ],
10328 +                 stream_new: None,
10329 +                 stream_run: None,
10330 +                 stream_free: None,
10331 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:10414:13
      |
10334 | /             let mut init = ti_indicator_info {
10335 | |                 name: b"ema\0" as *const u8 as *const libc::c_char,
10336 | |                 full_name: b"Exponential Moving Average\0" as *const u8
10337 | |                     as *const libc::c_char,
...     |
10412 | |                 stream_free: None,
10413 | |             };
      | |______________- unnecessary `let` binding
10414 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
10334 ~             
10335 ~             ti_indicator_info {
10336 +                 name: b"ema\0" as *const u8 as *const libc::c_char,
10337 +                 full_name: b"Exponential Moving Average\0" as *const u8
10338 +                     as *const libc::c_char,
10339 +                 start: Some(
10340 +                     ti_ema_start
10341 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
10342 +                 ),
10343 +                 indicator: Some(
10344 +                     ti_ema
10345 +                         as unsafe extern "C" fn(
10346 +                             libc::c_int,
10347 +                             *const *const libc::c_double,
10348 +                             *const libc::c_double,
10349 +                             *const *mut libc::c_double,
10350 +                         ) -> libc::c_int,
10351 +                 ),
10352 +                 indicator_ref: None,
10353 +                 type_0: 1 as libc::c_int,
10354 +                 inputs: 1 as libc::c_int,
10355 +                 options: 1 as libc::c_int,
10356 +                 outputs: 1 as libc::c_int,
10357 +                 input_names: [
10358 +                     b"real\0" as *const u8 as *const libc::c_char,
10359 +                     0 as *const libc::c_char,
10360 +                     0 as *const libc::c_char,
10361 +                     0 as *const libc::c_char,
10362 +                     0 as *const libc::c_char,
10363 +                     0 as *const libc::c_char,
10364 +                     0 as *const libc::c_char,
10365 +                     0 as *const libc::c_char,
10366 +                     0 as *const libc::c_char,
10367 +                     0 as *const libc::c_char,
10368 +                     0 as *const libc::c_char,
10369 +                     0 as *const libc::c_char,
10370 +                     0 as *const libc::c_char,
10371 +                     0 as *const libc::c_char,
10372 +                     0 as *const libc::c_char,
10373 +                     0 as *const libc::c_char,
10374 +                 ],
10375 +                 option_names: [
10376 +                     b"period\0" as *const u8 as *const libc::c_char,
10377 +                     0 as *const libc::c_char,
10378 +                     0 as *const libc::c_char,
10379 +                     0 as *const libc::c_char,
10380 +                     0 as *const libc::c_char,
10381 +                     0 as *const libc::c_char,
10382 +                     0 as *const libc::c_char,
10383 +                     0 as *const libc::c_char,
10384 +                     0 as *const libc::c_char,
10385 +                     0 as *const libc::c_char,
10386 +                     0 as *const libc::c_char,
10387 +                     0 as *const libc::c_char,
10388 +                     0 as *const libc::c_char,
10389 +                     0 as *const libc::c_char,
10390 +                     0 as *const libc::c_char,
10391 +                     0 as *const libc::c_char,
10392 +                 ],
10393 +                 output_names: [
10394 +                     b"ema\0" as *const u8 as *const libc::c_char,
10395 +                     0 as *const libc::c_char,
10396 +                     0 as *const libc::c_char,
10397 +                     0 as *const libc::c_char,
10398 +                     0 as *const libc::c_char,
10399 +                     0 as *const libc::c_char,
10400 +                     0 as *const libc::c_char,
10401 +                     0 as *const libc::c_char,
10402 +                     0 as *const libc::c_char,
10403 +                     0 as *const libc::c_char,
10404 +                     0 as *const libc::c_char,
10405 +                     0 as *const libc::c_char,
10406 +                     0 as *const libc::c_char,
10407 +                     0 as *const libc::c_char,
10408 +                     0 as *const libc::c_char,
10409 +                     0 as *const libc::c_char,
10410 +                 ],
10411 +                 stream_new: None,
10412 +                 stream_run: None,
10413 +                 stream_free: None,
10414 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:10496:13
      |
10417 | /             let mut init = ti_indicator_info {
10418 | |                 name: b"emv\0" as *const u8 as *const libc::c_char,
10419 | |                 full_name: b"Ease of Movement\0" as *const u8 as *const libc::c_char,
10420 | |                 start: Some(
...     |
10494 | |                 stream_free: None,
10495 | |             };
      | |______________- unnecessary `let` binding
10496 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
10417 ~             
10418 ~             ti_indicator_info {
10419 +                 name: b"emv\0" as *const u8 as *const libc::c_char,
10420 +                 full_name: b"Ease of Movement\0" as *const u8 as *const libc::c_char,
10421 +                 start: Some(
10422 +                     ti_emv_start
10423 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
10424 +                 ),
10425 +                 indicator: Some(
10426 +                     ti_emv
10427 +                         as unsafe extern "C" fn(
10428 +                             libc::c_int,
10429 +                             *const *const libc::c_double,
10430 +                             *const libc::c_double,
10431 +                             *const *mut libc::c_double,
10432 +                         ) -> libc::c_int,
10433 +                 ),
10434 +                 indicator_ref: None,
10435 +                 type_0: 2 as libc::c_int,
10436 +                 inputs: 3 as libc::c_int,
10437 +                 options: 0 as libc::c_int,
10438 +                 outputs: 1 as libc::c_int,
10439 +                 input_names: [
10440 +                     b"high\0" as *const u8 as *const libc::c_char,
10441 +                     b"low\0" as *const u8 as *const libc::c_char,
10442 +                     b"volume\0" as *const u8 as *const libc::c_char,
10443 +                     0 as *const libc::c_char,
10444 +                     0 as *const libc::c_char,
10445 +                     0 as *const libc::c_char,
10446 +                     0 as *const libc::c_char,
10447 +                     0 as *const libc::c_char,
10448 +                     0 as *const libc::c_char,
10449 +                     0 as *const libc::c_char,
10450 +                     0 as *const libc::c_char,
10451 +                     0 as *const libc::c_char,
10452 +                     0 as *const libc::c_char,
10453 +                     0 as *const libc::c_char,
10454 +                     0 as *const libc::c_char,
10455 +                     0 as *const libc::c_char,
10456 +                 ],
10457 +                 option_names: [
10458 +                     b"\0" as *const u8 as *const libc::c_char,
10459 +                     0 as *const libc::c_char,
10460 +                     0 as *const libc::c_char,
10461 +                     0 as *const libc::c_char,
10462 +                     0 as *const libc::c_char,
10463 +                     0 as *const libc::c_char,
10464 +                     0 as *const libc::c_char,
10465 +                     0 as *const libc::c_char,
10466 +                     0 as *const libc::c_char,
10467 +                     0 as *const libc::c_char,
10468 +                     0 as *const libc::c_char,
10469 +                     0 as *const libc::c_char,
10470 +                     0 as *const libc::c_char,
10471 +                     0 as *const libc::c_char,
10472 +                     0 as *const libc::c_char,
10473 +                     0 as *const libc::c_char,
10474 +                 ],
10475 +                 output_names: [
10476 +                     b"emv\0" as *const u8 as *const libc::c_char,
10477 +                     0 as *const libc::c_char,
10478 +                     0 as *const libc::c_char,
10479 +                     0 as *const libc::c_char,
10480 +                     0 as *const libc::c_char,
10481 +                     0 as *const libc::c_char,
10482 +                     0 as *const libc::c_char,
10483 +                     0 as *const libc::c_char,
10484 +                     0 as *const libc::c_char,
10485 +                     0 as *const libc::c_char,
10486 +                     0 as *const libc::c_char,
10487 +                     0 as *const libc::c_char,
10488 +                     0 as *const libc::c_char,
10489 +                     0 as *const libc::c_char,
10490 +                     0 as *const libc::c_char,
10491 +                     0 as *const libc::c_char,
10492 +                 ],
10493 +                 stream_new: None,
10494 +                 stream_run: None,
10495 +                 stream_free: None,
10496 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:10578:13
      |
10499 | /             let mut init = ti_indicator_info {
10500 | |                 name: b"exp\0" as *const u8 as *const libc::c_char,
10501 | |                 full_name: b"Vector Exponential\0" as *const u8 as *const libc::c_char,
10502 | |                 start: Some(
...     |
10576 | |                 stream_free: None,
10577 | |             };
      | |______________- unnecessary `let` binding
10578 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
10499 ~             
10500 ~             ti_indicator_info {
10501 +                 name: b"exp\0" as *const u8 as *const libc::c_char,
10502 +                 full_name: b"Vector Exponential\0" as *const u8 as *const libc::c_char,
10503 +                 start: Some(
10504 +                     ti_exp_start
10505 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
10506 +                 ),
10507 +                 indicator: Some(
10508 +                     ti_exp
10509 +                         as unsafe extern "C" fn(
10510 +                             libc::c_int,
10511 +                             *const *const libc::c_double,
10512 +                             *const libc::c_double,
10513 +                             *const *mut libc::c_double,
10514 +                         ) -> libc::c_int,
10515 +                 ),
10516 +                 indicator_ref: None,
10517 +                 type_0: 4 as libc::c_int,
10518 +                 inputs: 1 as libc::c_int,
10519 +                 options: 0 as libc::c_int,
10520 +                 outputs: 1 as libc::c_int,
10521 +                 input_names: [
10522 +                     b"real\0" as *const u8 as *const libc::c_char,
10523 +                     0 as *const libc::c_char,
10524 +                     0 as *const libc::c_char,
10525 +                     0 as *const libc::c_char,
10526 +                     0 as *const libc::c_char,
10527 +                     0 as *const libc::c_char,
10528 +                     0 as *const libc::c_char,
10529 +                     0 as *const libc::c_char,
10530 +                     0 as *const libc::c_char,
10531 +                     0 as *const libc::c_char,
10532 +                     0 as *const libc::c_char,
10533 +                     0 as *const libc::c_char,
10534 +                     0 as *const libc::c_char,
10535 +                     0 as *const libc::c_char,
10536 +                     0 as *const libc::c_char,
10537 +                     0 as *const libc::c_char,
10538 +                 ],
10539 +                 option_names: [
10540 +                     b"\0" as *const u8 as *const libc::c_char,
10541 +                     0 as *const libc::c_char,
10542 +                     0 as *const libc::c_char,
10543 +                     0 as *const libc::c_char,
10544 +                     0 as *const libc::c_char,
10545 +                     0 as *const libc::c_char,
10546 +                     0 as *const libc::c_char,
10547 +                     0 as *const libc::c_char,
10548 +                     0 as *const libc::c_char,
10549 +                     0 as *const libc::c_char,
10550 +                     0 as *const libc::c_char,
10551 +                     0 as *const libc::c_char,
10552 +                     0 as *const libc::c_char,
10553 +                     0 as *const libc::c_char,
10554 +                     0 as *const libc::c_char,
10555 +                     0 as *const libc::c_char,
10556 +                 ],
10557 +                 output_names: [
10558 +                     b"exp\0" as *const u8 as *const libc::c_char,
10559 +                     0 as *const libc::c_char,
10560 +                     0 as *const libc::c_char,
10561 +                     0 as *const libc::c_char,
10562 +                     0 as *const libc::c_char,
10563 +                     0 as *const libc::c_char,
10564 +                     0 as *const libc::c_char,
10565 +                     0 as *const libc::c_char,
10566 +                     0 as *const libc::c_char,
10567 +                     0 as *const libc::c_char,
10568 +                     0 as *const libc::c_char,
10569 +                     0 as *const libc::c_char,
10570 +                     0 as *const libc::c_char,
10571 +                     0 as *const libc::c_char,
10572 +                     0 as *const libc::c_char,
10573 +                     0 as *const libc::c_char,
10574 +                 ],
10575 +                 stream_new: None,
10576 +                 stream_run: None,
10577 +                 stream_free: None,
10578 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:10660:13
      |
10581 | /             let mut init = ti_indicator_info {
10582 | |                 name: b"fisher\0" as *const u8 as *const libc::c_char,
10583 | |                 full_name: b"Fisher Transform\0" as *const u8 as *const libc::c_char,
10584 | |                 start: Some(
...     |
10658 | |                 stream_free: None,
10659 | |             };
      | |______________- unnecessary `let` binding
10660 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
10581 ~             
10582 ~             ti_indicator_info {
10583 +                 name: b"fisher\0" as *const u8 as *const libc::c_char,
10584 +                 full_name: b"Fisher Transform\0" as *const u8 as *const libc::c_char,
10585 +                 start: Some(
10586 +                     ti_fisher_start
10587 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
10588 +                 ),
10589 +                 indicator: Some(
10590 +                     ti_fisher
10591 +                         as unsafe extern "C" fn(
10592 +                             libc::c_int,
10593 +                             *const *const libc::c_double,
10594 +                             *const libc::c_double,
10595 +                             *const *mut libc::c_double,
10596 +                         ) -> libc::c_int,
10597 +                 ),
10598 +                 indicator_ref: None,
10599 +                 type_0: 2 as libc::c_int,
10600 +                 inputs: 2 as libc::c_int,
10601 +                 options: 1 as libc::c_int,
10602 +                 outputs: 2 as libc::c_int,
10603 +                 input_names: [
10604 +                     b"high\0" as *const u8 as *const libc::c_char,
10605 +                     b"low\0" as *const u8 as *const libc::c_char,
10606 +                     0 as *const libc::c_char,
10607 +                     0 as *const libc::c_char,
10608 +                     0 as *const libc::c_char,
10609 +                     0 as *const libc::c_char,
10610 +                     0 as *const libc::c_char,
10611 +                     0 as *const libc::c_char,
10612 +                     0 as *const libc::c_char,
10613 +                     0 as *const libc::c_char,
10614 +                     0 as *const libc::c_char,
10615 +                     0 as *const libc::c_char,
10616 +                     0 as *const libc::c_char,
10617 +                     0 as *const libc::c_char,
10618 +                     0 as *const libc::c_char,
10619 +                     0 as *const libc::c_char,
10620 +                 ],
10621 +                 option_names: [
10622 +                     b"period\0" as *const u8 as *const libc::c_char,
10623 +                     0 as *const libc::c_char,
10624 +                     0 as *const libc::c_char,
10625 +                     0 as *const libc::c_char,
10626 +                     0 as *const libc::c_char,
10627 +                     0 as *const libc::c_char,
10628 +                     0 as *const libc::c_char,
10629 +                     0 as *const libc::c_char,
10630 +                     0 as *const libc::c_char,
10631 +                     0 as *const libc::c_char,
10632 +                     0 as *const libc::c_char,
10633 +                     0 as *const libc::c_char,
10634 +                     0 as *const libc::c_char,
10635 +                     0 as *const libc::c_char,
10636 +                     0 as *const libc::c_char,
10637 +                     0 as *const libc::c_char,
10638 +                 ],
10639 +                 output_names: [
10640 +                     b"fisher\0" as *const u8 as *const libc::c_char,
10641 +                     b"fisher_signal\0" as *const u8 as *const libc::c_char,
10642 +                     0 as *const libc::c_char,
10643 +                     0 as *const libc::c_char,
10644 +                     0 as *const libc::c_char,
10645 +                     0 as *const libc::c_char,
10646 +                     0 as *const libc::c_char,
10647 +                     0 as *const libc::c_char,
10648 +                     0 as *const libc::c_char,
10649 +                     0 as *const libc::c_char,
10650 +                     0 as *const libc::c_char,
10651 +                     0 as *const libc::c_char,
10652 +                     0 as *const libc::c_char,
10653 +                     0 as *const libc::c_char,
10654 +                     0 as *const libc::c_char,
10655 +                     0 as *const libc::c_char,
10656 +                 ],
10657 +                 stream_new: None,
10658 +                 stream_run: None,
10659 +                 stream_free: None,
10660 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:10742:13
      |
10663 | /             let mut init = ti_indicator_info {
10664 | |                 name: b"floor\0" as *const u8 as *const libc::c_char,
10665 | |                 full_name: b"Vector Floor\0" as *const u8 as *const libc::c_char,
10666 | |                 start: Some(
...     |
10740 | |                 stream_free: None,
10741 | |             };
      | |______________- unnecessary `let` binding
10742 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
10663 ~             
10664 ~             ti_indicator_info {
10665 +                 name: b"floor\0" as *const u8 as *const libc::c_char,
10666 +                 full_name: b"Vector Floor\0" as *const u8 as *const libc::c_char,
10667 +                 start: Some(
10668 +                     ti_floor_start
10669 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
10670 +                 ),
10671 +                 indicator: Some(
10672 +                     ti_floor
10673 +                         as unsafe extern "C" fn(
10674 +                             libc::c_int,
10675 +                             *const *const libc::c_double,
10676 +                             *const libc::c_double,
10677 +                             *const *mut libc::c_double,
10678 +                         ) -> libc::c_int,
10679 +                 ),
10680 +                 indicator_ref: None,
10681 +                 type_0: 4 as libc::c_int,
10682 +                 inputs: 1 as libc::c_int,
10683 +                 options: 0 as libc::c_int,
10684 +                 outputs: 1 as libc::c_int,
10685 +                 input_names: [
10686 +                     b"real\0" as *const u8 as *const libc::c_char,
10687 +                     0 as *const libc::c_char,
10688 +                     0 as *const libc::c_char,
10689 +                     0 as *const libc::c_char,
10690 +                     0 as *const libc::c_char,
10691 +                     0 as *const libc::c_char,
10692 +                     0 as *const libc::c_char,
10693 +                     0 as *const libc::c_char,
10694 +                     0 as *const libc::c_char,
10695 +                     0 as *const libc::c_char,
10696 +                     0 as *const libc::c_char,
10697 +                     0 as *const libc::c_char,
10698 +                     0 as *const libc::c_char,
10699 +                     0 as *const libc::c_char,
10700 +                     0 as *const libc::c_char,
10701 +                     0 as *const libc::c_char,
10702 +                 ],
10703 +                 option_names: [
10704 +                     b"\0" as *const u8 as *const libc::c_char,
10705 +                     0 as *const libc::c_char,
10706 +                     0 as *const libc::c_char,
10707 +                     0 as *const libc::c_char,
10708 +                     0 as *const libc::c_char,
10709 +                     0 as *const libc::c_char,
10710 +                     0 as *const libc::c_char,
10711 +                     0 as *const libc::c_char,
10712 +                     0 as *const libc::c_char,
10713 +                     0 as *const libc::c_char,
10714 +                     0 as *const libc::c_char,
10715 +                     0 as *const libc::c_char,
10716 +                     0 as *const libc::c_char,
10717 +                     0 as *const libc::c_char,
10718 +                     0 as *const libc::c_char,
10719 +                     0 as *const libc::c_char,
10720 +                 ],
10721 +                 output_names: [
10722 +                     b"floor\0" as *const u8 as *const libc::c_char,
10723 +                     0 as *const libc::c_char,
10724 +                     0 as *const libc::c_char,
10725 +                     0 as *const libc::c_char,
10726 +                     0 as *const libc::c_char,
10727 +                     0 as *const libc::c_char,
10728 +                     0 as *const libc::c_char,
10729 +                     0 as *const libc::c_char,
10730 +                     0 as *const libc::c_char,
10731 +                     0 as *const libc::c_char,
10732 +                     0 as *const libc::c_char,
10733 +                     0 as *const libc::c_char,
10734 +                     0 as *const libc::c_char,
10735 +                     0 as *const libc::c_char,
10736 +                     0 as *const libc::c_char,
10737 +                     0 as *const libc::c_char,
10738 +                 ],
10739 +                 stream_new: None,
10740 +                 stream_run: None,
10741 +                 stream_free: None,
10742 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:10824:13
      |
10745 | /             let mut init = ti_indicator_info {
10746 | |                 name: b"fosc\0" as *const u8 as *const libc::c_char,
10747 | |                 full_name: b"Forecast Oscillator\0" as *const u8 as *const libc::c_char,
10748 | |                 start: Some(
...     |
10822 | |                 stream_free: None,
10823 | |             };
      | |______________- unnecessary `let` binding
10824 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
10745 ~             
10746 ~             ti_indicator_info {
10747 +                 name: b"fosc\0" as *const u8 as *const libc::c_char,
10748 +                 full_name: b"Forecast Oscillator\0" as *const u8 as *const libc::c_char,
10749 +                 start: Some(
10750 +                     ti_fosc_start
10751 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
10752 +                 ),
10753 +                 indicator: Some(
10754 +                     ti_fosc
10755 +                         as unsafe extern "C" fn(
10756 +                             libc::c_int,
10757 +                             *const *const libc::c_double,
10758 +                             *const libc::c_double,
10759 +                             *const *mut libc::c_double,
10760 +                         ) -> libc::c_int,
10761 +                 ),
10762 +                 indicator_ref: None,
10763 +                 type_0: 2 as libc::c_int,
10764 +                 inputs: 1 as libc::c_int,
10765 +                 options: 1 as libc::c_int,
10766 +                 outputs: 1 as libc::c_int,
10767 +                 input_names: [
10768 +                     b"real\0" as *const u8 as *const libc::c_char,
10769 +                     0 as *const libc::c_char,
10770 +                     0 as *const libc::c_char,
10771 +                     0 as *const libc::c_char,
10772 +                     0 as *const libc::c_char,
10773 +                     0 as *const libc::c_char,
10774 +                     0 as *const libc::c_char,
10775 +                     0 as *const libc::c_char,
10776 +                     0 as *const libc::c_char,
10777 +                     0 as *const libc::c_char,
10778 +                     0 as *const libc::c_char,
10779 +                     0 as *const libc::c_char,
10780 +                     0 as *const libc::c_char,
10781 +                     0 as *const libc::c_char,
10782 +                     0 as *const libc::c_char,
10783 +                     0 as *const libc::c_char,
10784 +                 ],
10785 +                 option_names: [
10786 +                     b"period\0" as *const u8 as *const libc::c_char,
10787 +                     0 as *const libc::c_char,
10788 +                     0 as *const libc::c_char,
10789 +                     0 as *const libc::c_char,
10790 +                     0 as *const libc::c_char,
10791 +                     0 as *const libc::c_char,
10792 +                     0 as *const libc::c_char,
10793 +                     0 as *const libc::c_char,
10794 +                     0 as *const libc::c_char,
10795 +                     0 as *const libc::c_char,
10796 +                     0 as *const libc::c_char,
10797 +                     0 as *const libc::c_char,
10798 +                     0 as *const libc::c_char,
10799 +                     0 as *const libc::c_char,
10800 +                     0 as *const libc::c_char,
10801 +                     0 as *const libc::c_char,
10802 +                 ],
10803 +                 output_names: [
10804 +                     b"fosc\0" as *const u8 as *const libc::c_char,
10805 +                     0 as *const libc::c_char,
10806 +                     0 as *const libc::c_char,
10807 +                     0 as *const libc::c_char,
10808 +                     0 as *const libc::c_char,
10809 +                     0 as *const libc::c_char,
10810 +                     0 as *const libc::c_char,
10811 +                     0 as *const libc::c_char,
10812 +                     0 as *const libc::c_char,
10813 +                     0 as *const libc::c_char,
10814 +                     0 as *const libc::c_char,
10815 +                     0 as *const libc::c_char,
10816 +                     0 as *const libc::c_char,
10817 +                     0 as *const libc::c_char,
10818 +                     0 as *const libc::c_char,
10819 +                     0 as *const libc::c_char,
10820 +                 ],
10821 +                 stream_new: None,
10822 +                 stream_run: None,
10823 +                 stream_free: None,
10824 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:10906:13
      |
10827 | /             let mut init = ti_indicator_info {
10828 | |                 name: b"hma\0" as *const u8 as *const libc::c_char,
10829 | |                 full_name: b"Hull Moving Average\0" as *const u8 as *const libc::c_char,
10830 | |                 start: Some(
...     |
10904 | |                 stream_free: None,
10905 | |             };
      | |______________- unnecessary `let` binding
10906 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
10827 ~             
10828 ~             ti_indicator_info {
10829 +                 name: b"hma\0" as *const u8 as *const libc::c_char,
10830 +                 full_name: b"Hull Moving Average\0" as *const u8 as *const libc::c_char,
10831 +                 start: Some(
10832 +                     ti_hma_start
10833 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
10834 +                 ),
10835 +                 indicator: Some(
10836 +                     ti_hma
10837 +                         as unsafe extern "C" fn(
10838 +                             libc::c_int,
10839 +                             *const *const libc::c_double,
10840 +                             *const libc::c_double,
10841 +                             *const *mut libc::c_double,
10842 +                         ) -> libc::c_int,
10843 +                 ),
10844 +                 indicator_ref: None,
10845 +                 type_0: 1 as libc::c_int,
10846 +                 inputs: 1 as libc::c_int,
10847 +                 options: 1 as libc::c_int,
10848 +                 outputs: 1 as libc::c_int,
10849 +                 input_names: [
10850 +                     b"real\0" as *const u8 as *const libc::c_char,
10851 +                     0 as *const libc::c_char,
10852 +                     0 as *const libc::c_char,
10853 +                     0 as *const libc::c_char,
10854 +                     0 as *const libc::c_char,
10855 +                     0 as *const libc::c_char,
10856 +                     0 as *const libc::c_char,
10857 +                     0 as *const libc::c_char,
10858 +                     0 as *const libc::c_char,
10859 +                     0 as *const libc::c_char,
10860 +                     0 as *const libc::c_char,
10861 +                     0 as *const libc::c_char,
10862 +                     0 as *const libc::c_char,
10863 +                     0 as *const libc::c_char,
10864 +                     0 as *const libc::c_char,
10865 +                     0 as *const libc::c_char,
10866 +                 ],
10867 +                 option_names: [
10868 +                     b"period\0" as *const u8 as *const libc::c_char,
10869 +                     0 as *const libc::c_char,
10870 +                     0 as *const libc::c_char,
10871 +                     0 as *const libc::c_char,
10872 +                     0 as *const libc::c_char,
10873 +                     0 as *const libc::c_char,
10874 +                     0 as *const libc::c_char,
10875 +                     0 as *const libc::c_char,
10876 +                     0 as *const libc::c_char,
10877 +                     0 as *const libc::c_char,
10878 +                     0 as *const libc::c_char,
10879 +                     0 as *const libc::c_char,
10880 +                     0 as *const libc::c_char,
10881 +                     0 as *const libc::c_char,
10882 +                     0 as *const libc::c_char,
10883 +                     0 as *const libc::c_char,
10884 +                 ],
10885 +                 output_names: [
10886 +                     b"hma\0" as *const u8 as *const libc::c_char,
10887 +                     0 as *const libc::c_char,
10888 +                     0 as *const libc::c_char,
10889 +                     0 as *const libc::c_char,
10890 +                     0 as *const libc::c_char,
10891 +                     0 as *const libc::c_char,
10892 +                     0 as *const libc::c_char,
10893 +                     0 as *const libc::c_char,
10894 +                     0 as *const libc::c_char,
10895 +                     0 as *const libc::c_char,
10896 +                     0 as *const libc::c_char,
10897 +                     0 as *const libc::c_char,
10898 +                     0 as *const libc::c_char,
10899 +                     0 as *const libc::c_char,
10900 +                     0 as *const libc::c_char,
10901 +                     0 as *const libc::c_char,
10902 +                 ],
10903 +                 stream_new: None,
10904 +                 stream_run: None,
10905 +                 stream_free: None,
10906 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:10989:13
      |
10909 | /             let mut init = ti_indicator_info {
10910 | |                 name: b"kama\0" as *const u8 as *const libc::c_char,
10911 | |                 full_name: b"Kaufman Adaptive Moving Average\0" as *const u8
10912 | |                     as *const libc::c_char,
...     |
10987 | |                 stream_free: None,
10988 | |             };
      | |______________- unnecessary `let` binding
10989 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
10909 ~             
10910 ~             ti_indicator_info {
10911 +                 name: b"kama\0" as *const u8 as *const libc::c_char,
10912 +                 full_name: b"Kaufman Adaptive Moving Average\0" as *const u8
10913 +                     as *const libc::c_char,
10914 +                 start: Some(
10915 +                     ti_kama_start
10916 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
10917 +                 ),
10918 +                 indicator: Some(
10919 +                     ti_kama
10920 +                         as unsafe extern "C" fn(
10921 +                             libc::c_int,
10922 +                             *const *const libc::c_double,
10923 +                             *const libc::c_double,
10924 +                             *const *mut libc::c_double,
10925 +                         ) -> libc::c_int,
10926 +                 ),
10927 +                 indicator_ref: None,
10928 +                 type_0: 1 as libc::c_int,
10929 +                 inputs: 1 as libc::c_int,
10930 +                 options: 1 as libc::c_int,
10931 +                 outputs: 1 as libc::c_int,
10932 +                 input_names: [
10933 +                     b"real\0" as *const u8 as *const libc::c_char,
10934 +                     0 as *const libc::c_char,
10935 +                     0 as *const libc::c_char,
10936 +                     0 as *const libc::c_char,
10937 +                     0 as *const libc::c_char,
10938 +                     0 as *const libc::c_char,
10939 +                     0 as *const libc::c_char,
10940 +                     0 as *const libc::c_char,
10941 +                     0 as *const libc::c_char,
10942 +                     0 as *const libc::c_char,
10943 +                     0 as *const libc::c_char,
10944 +                     0 as *const libc::c_char,
10945 +                     0 as *const libc::c_char,
10946 +                     0 as *const libc::c_char,
10947 +                     0 as *const libc::c_char,
10948 +                     0 as *const libc::c_char,
10949 +                 ],
10950 +                 option_names: [
10951 +                     b"period\0" as *const u8 as *const libc::c_char,
10952 +                     0 as *const libc::c_char,
10953 +                     0 as *const libc::c_char,
10954 +                     0 as *const libc::c_char,
10955 +                     0 as *const libc::c_char,
10956 +                     0 as *const libc::c_char,
10957 +                     0 as *const libc::c_char,
10958 +                     0 as *const libc::c_char,
10959 +                     0 as *const libc::c_char,
10960 +                     0 as *const libc::c_char,
10961 +                     0 as *const libc::c_char,
10962 +                     0 as *const libc::c_char,
10963 +                     0 as *const libc::c_char,
10964 +                     0 as *const libc::c_char,
10965 +                     0 as *const libc::c_char,
10966 +                     0 as *const libc::c_char,
10967 +                 ],
10968 +                 output_names: [
10969 +                     b"kama\0" as *const u8 as *const libc::c_char,
10970 +                     0 as *const libc::c_char,
10971 +                     0 as *const libc::c_char,
10972 +                     0 as *const libc::c_char,
10973 +                     0 as *const libc::c_char,
10974 +                     0 as *const libc::c_char,
10975 +                     0 as *const libc::c_char,
10976 +                     0 as *const libc::c_char,
10977 +                     0 as *const libc::c_char,
10978 +                     0 as *const libc::c_char,
10979 +                     0 as *const libc::c_char,
10980 +                     0 as *const libc::c_char,
10981 +                     0 as *const libc::c_char,
10982 +                     0 as *const libc::c_char,
10983 +                     0 as *const libc::c_char,
10984 +                     0 as *const libc::c_char,
10985 +                 ],
10986 +                 stream_new: None,
10987 +                 stream_run: None,
10988 +                 stream_free: None,
10989 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:11072:13
      |
10992 | /             let mut init = ti_indicator_info {
10993 | |                 name: b"kvo\0" as *const u8 as *const libc::c_char,
10994 | |                 full_name: b"Klinger Volume Oscillator\0" as *const u8
10995 | |                     as *const libc::c_char,
...     |
11070 | |                 stream_free: None,
11071 | |             };
      | |______________- unnecessary `let` binding
11072 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
10992 ~             
10993 ~             ti_indicator_info {
10994 +                 name: b"kvo\0" as *const u8 as *const libc::c_char,
10995 +                 full_name: b"Klinger Volume Oscillator\0" as *const u8
10996 +                     as *const libc::c_char,
10997 +                 start: Some(
10998 +                     ti_kvo_start
10999 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
11000 +                 ),
11001 +                 indicator: Some(
11002 +                     ti_kvo
11003 +                         as unsafe extern "C" fn(
11004 +                             libc::c_int,
11005 +                             *const *const libc::c_double,
11006 +                             *const libc::c_double,
11007 +                             *const *mut libc::c_double,
11008 +                         ) -> libc::c_int,
11009 +                 ),
11010 +                 indicator_ref: None,
11011 +                 type_0: 2 as libc::c_int,
11012 +                 inputs: 4 as libc::c_int,
11013 +                 options: 2 as libc::c_int,
11014 +                 outputs: 1 as libc::c_int,
11015 +                 input_names: [
11016 +                     b"high\0" as *const u8 as *const libc::c_char,
11017 +                     b"low\0" as *const u8 as *const libc::c_char,
11018 +                     b"close\0" as *const u8 as *const libc::c_char,
11019 +                     b"volume\0" as *const u8 as *const libc::c_char,
11020 +                     0 as *const libc::c_char,
11021 +                     0 as *const libc::c_char,
11022 +                     0 as *const libc::c_char,
11023 +                     0 as *const libc::c_char,
11024 +                     0 as *const libc::c_char,
11025 +                     0 as *const libc::c_char,
11026 +                     0 as *const libc::c_char,
11027 +                     0 as *const libc::c_char,
11028 +                     0 as *const libc::c_char,
11029 +                     0 as *const libc::c_char,
11030 +                     0 as *const libc::c_char,
11031 +                     0 as *const libc::c_char,
11032 +                 ],
11033 +                 option_names: [
11034 +                     b"short_period\0" as *const u8 as *const libc::c_char,
11035 +                     b"long_period\0" as *const u8 as *const libc::c_char,
11036 +                     0 as *const libc::c_char,
11037 +                     0 as *const libc::c_char,
11038 +                     0 as *const libc::c_char,
11039 +                     0 as *const libc::c_char,
11040 +                     0 as *const libc::c_char,
11041 +                     0 as *const libc::c_char,
11042 +                     0 as *const libc::c_char,
11043 +                     0 as *const libc::c_char,
11044 +                     0 as *const libc::c_char,
11045 +                     0 as *const libc::c_char,
11046 +                     0 as *const libc::c_char,
11047 +                     0 as *const libc::c_char,
11048 +                     0 as *const libc::c_char,
11049 +                     0 as *const libc::c_char,
11050 +                 ],
11051 +                 output_names: [
11052 +                     b"kvo\0" as *const u8 as *const libc::c_char,
11053 +                     0 as *const libc::c_char,
11054 +                     0 as *const libc::c_char,
11055 +                     0 as *const libc::c_char,
11056 +                     0 as *const libc::c_char,
11057 +                     0 as *const libc::c_char,
11058 +                     0 as *const libc::c_char,
11059 +                     0 as *const libc::c_char,
11060 +                     0 as *const libc::c_char,
11061 +                     0 as *const libc::c_char,
11062 +                     0 as *const libc::c_char,
11063 +                     0 as *const libc::c_char,
11064 +                     0 as *const libc::c_char,
11065 +                     0 as *const libc::c_char,
11066 +                     0 as *const libc::c_char,
11067 +                     0 as *const libc::c_char,
11068 +                 ],
11069 +                 stream_new: None,
11070 +                 stream_run: None,
11071 +                 stream_free: None,
11072 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:11154:13
      |
11075 | /             let mut init = ti_indicator_info {
11076 | |                 name: b"lag\0" as *const u8 as *const libc::c_char,
11077 | |                 full_name: b"Lag\0" as *const u8 as *const libc::c_char,
11078 | |                 start: Some(
...     |
11152 | |                 stream_free: None,
11153 | |             };
      | |______________- unnecessary `let` binding
11154 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
11075 ~             
11076 ~             ti_indicator_info {
11077 +                 name: b"lag\0" as *const u8 as *const libc::c_char,
11078 +                 full_name: b"Lag\0" as *const u8 as *const libc::c_char,
11079 +                 start: Some(
11080 +                     ti_lag_start
11081 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
11082 +                 ),
11083 +                 indicator: Some(
11084 +                     ti_lag
11085 +                         as unsafe extern "C" fn(
11086 +                             libc::c_int,
11087 +                             *const *const libc::c_double,
11088 +                             *const libc::c_double,
11089 +                             *const *mut libc::c_double,
11090 +                         ) -> libc::c_int,
11091 +                 ),
11092 +                 indicator_ref: None,
11093 +                 type_0: 3 as libc::c_int,
11094 +                 inputs: 1 as libc::c_int,
11095 +                 options: 1 as libc::c_int,
11096 +                 outputs: 1 as libc::c_int,
11097 +                 input_names: [
11098 +                     b"real\0" as *const u8 as *const libc::c_char,
11099 +                     0 as *const libc::c_char,
11100 +                     0 as *const libc::c_char,
11101 +                     0 as *const libc::c_char,
11102 +                     0 as *const libc::c_char,
11103 +                     0 as *const libc::c_char,
11104 +                     0 as *const libc::c_char,
11105 +                     0 as *const libc::c_char,
11106 +                     0 as *const libc::c_char,
11107 +                     0 as *const libc::c_char,
11108 +                     0 as *const libc::c_char,
11109 +                     0 as *const libc::c_char,
11110 +                     0 as *const libc::c_char,
11111 +                     0 as *const libc::c_char,
11112 +                     0 as *const libc::c_char,
11113 +                     0 as *const libc::c_char,
11114 +                 ],
11115 +                 option_names: [
11116 +                     b"period\0" as *const u8 as *const libc::c_char,
11117 +                     0 as *const libc::c_char,
11118 +                     0 as *const libc::c_char,
11119 +                     0 as *const libc::c_char,
11120 +                     0 as *const libc::c_char,
11121 +                     0 as *const libc::c_char,
11122 +                     0 as *const libc::c_char,
11123 +                     0 as *const libc::c_char,
11124 +                     0 as *const libc::c_char,
11125 +                     0 as *const libc::c_char,
11126 +                     0 as *const libc::c_char,
11127 +                     0 as *const libc::c_char,
11128 +                     0 as *const libc::c_char,
11129 +                     0 as *const libc::c_char,
11130 +                     0 as *const libc::c_char,
11131 +                     0 as *const libc::c_char,
11132 +                 ],
11133 +                 output_names: [
11134 +                     b"lag\0" as *const u8 as *const libc::c_char,
11135 +                     0 as *const libc::c_char,
11136 +                     0 as *const libc::c_char,
11137 +                     0 as *const libc::c_char,
11138 +                     0 as *const libc::c_char,
11139 +                     0 as *const libc::c_char,
11140 +                     0 as *const libc::c_char,
11141 +                     0 as *const libc::c_char,
11142 +                     0 as *const libc::c_char,
11143 +                     0 as *const libc::c_char,
11144 +                     0 as *const libc::c_char,
11145 +                     0 as *const libc::c_char,
11146 +                     0 as *const libc::c_char,
11147 +                     0 as *const libc::c_char,
11148 +                     0 as *const libc::c_char,
11149 +                     0 as *const libc::c_char,
11150 +                 ],
11151 +                 stream_new: None,
11152 +                 stream_run: None,
11153 +                 stream_free: None,
11154 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:11236:13
      |
11157 | /             let mut init = ti_indicator_info {
11158 | |                 name: b"linreg\0" as *const u8 as *const libc::c_char,
11159 | |                 full_name: b"Linear Regression\0" as *const u8 as *const libc::c_char,
11160 | |                 start: Some(
...     |
11234 | |                 stream_free: None,
11235 | |             };
      | |______________- unnecessary `let` binding
11236 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
11157 ~             
11158 ~             ti_indicator_info {
11159 +                 name: b"linreg\0" as *const u8 as *const libc::c_char,
11160 +                 full_name: b"Linear Regression\0" as *const u8 as *const libc::c_char,
11161 +                 start: Some(
11162 +                     ti_linreg_start
11163 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
11164 +                 ),
11165 +                 indicator: Some(
11166 +                     ti_linreg
11167 +                         as unsafe extern "C" fn(
11168 +                             libc::c_int,
11169 +                             *const *const libc::c_double,
11170 +                             *const libc::c_double,
11171 +                             *const *mut libc::c_double,
11172 +                         ) -> libc::c_int,
11173 +                 ),
11174 +                 indicator_ref: None,
11175 +                 type_0: 1 as libc::c_int,
11176 +                 inputs: 1 as libc::c_int,
11177 +                 options: 1 as libc::c_int,
11178 +                 outputs: 1 as libc::c_int,
11179 +                 input_names: [
11180 +                     b"real\0" as *const u8 as *const libc::c_char,
11181 +                     0 as *const libc::c_char,
11182 +                     0 as *const libc::c_char,
11183 +                     0 as *const libc::c_char,
11184 +                     0 as *const libc::c_char,
11185 +                     0 as *const libc::c_char,
11186 +                     0 as *const libc::c_char,
11187 +                     0 as *const libc::c_char,
11188 +                     0 as *const libc::c_char,
11189 +                     0 as *const libc::c_char,
11190 +                     0 as *const libc::c_char,
11191 +                     0 as *const libc::c_char,
11192 +                     0 as *const libc::c_char,
11193 +                     0 as *const libc::c_char,
11194 +                     0 as *const libc::c_char,
11195 +                     0 as *const libc::c_char,
11196 +                 ],
11197 +                 option_names: [
11198 +                     b"period\0" as *const u8 as *const libc::c_char,
11199 +                     0 as *const libc::c_char,
11200 +                     0 as *const libc::c_char,
11201 +                     0 as *const libc::c_char,
11202 +                     0 as *const libc::c_char,
11203 +                     0 as *const libc::c_char,
11204 +                     0 as *const libc::c_char,
11205 +                     0 as *const libc::c_char,
11206 +                     0 as *const libc::c_char,
11207 +                     0 as *const libc::c_char,
11208 +                     0 as *const libc::c_char,
11209 +                     0 as *const libc::c_char,
11210 +                     0 as *const libc::c_char,
11211 +                     0 as *const libc::c_char,
11212 +                     0 as *const libc::c_char,
11213 +                     0 as *const libc::c_char,
11214 +                 ],
11215 +                 output_names: [
11216 +                     b"linreg\0" as *const u8 as *const libc::c_char,
11217 +                     0 as *const libc::c_char,
11218 +                     0 as *const libc::c_char,
11219 +                     0 as *const libc::c_char,
11220 +                     0 as *const libc::c_char,
11221 +                     0 as *const libc::c_char,
11222 +                     0 as *const libc::c_char,
11223 +                     0 as *const libc::c_char,
11224 +                     0 as *const libc::c_char,
11225 +                     0 as *const libc::c_char,
11226 +                     0 as *const libc::c_char,
11227 +                     0 as *const libc::c_char,
11228 +                     0 as *const libc::c_char,
11229 +                     0 as *const libc::c_char,
11230 +                     0 as *const libc::c_char,
11231 +                     0 as *const libc::c_char,
11232 +                 ],
11233 +                 stream_new: None,
11234 +                 stream_run: None,
11235 +                 stream_free: None,
11236 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:11319:13
      |
11239 | /             let mut init = ti_indicator_info {
11240 | |                 name: b"linregintercept\0" as *const u8 as *const libc::c_char,
11241 | |                 full_name: b"Linear Regression Intercept\0" as *const u8
11242 | |                     as *const libc::c_char,
...     |
11317 | |                 stream_free: None,
11318 | |             };
      | |______________- unnecessary `let` binding
11319 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
11239 ~             
11240 ~             ti_indicator_info {
11241 +                 name: b"linregintercept\0" as *const u8 as *const libc::c_char,
11242 +                 full_name: b"Linear Regression Intercept\0" as *const u8
11243 +                     as *const libc::c_char,
11244 +                 start: Some(
11245 +                     ti_linregintercept_start
11246 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
11247 +                 ),
11248 +                 indicator: Some(
11249 +                     ti_linregintercept
11250 +                         as unsafe extern "C" fn(
11251 +                             libc::c_int,
11252 +                             *const *const libc::c_double,
11253 +                             *const libc::c_double,
11254 +                             *const *mut libc::c_double,
11255 +                         ) -> libc::c_int,
11256 +                 ),
11257 +                 indicator_ref: None,
11258 +                 type_0: 2 as libc::c_int,
11259 +                 inputs: 1 as libc::c_int,
11260 +                 options: 1 as libc::c_int,
11261 +                 outputs: 1 as libc::c_int,
11262 +                 input_names: [
11263 +                     b"real\0" as *const u8 as *const libc::c_char,
11264 +                     0 as *const libc::c_char,
11265 +                     0 as *const libc::c_char,
11266 +                     0 as *const libc::c_char,
11267 +                     0 as *const libc::c_char,
11268 +                     0 as *const libc::c_char,
11269 +                     0 as *const libc::c_char,
11270 +                     0 as *const libc::c_char,
11271 +                     0 as *const libc::c_char,
11272 +                     0 as *const libc::c_char,
11273 +                     0 as *const libc::c_char,
11274 +                     0 as *const libc::c_char,
11275 +                     0 as *const libc::c_char,
11276 +                     0 as *const libc::c_char,
11277 +                     0 as *const libc::c_char,
11278 +                     0 as *const libc::c_char,
11279 +                 ],
11280 +                 option_names: [
11281 +                     b"period\0" as *const u8 as *const libc::c_char,
11282 +                     0 as *const libc::c_char,
11283 +                     0 as *const libc::c_char,
11284 +                     0 as *const libc::c_char,
11285 +                     0 as *const libc::c_char,
11286 +                     0 as *const libc::c_char,
11287 +                     0 as *const libc::c_char,
11288 +                     0 as *const libc::c_char,
11289 +                     0 as *const libc::c_char,
11290 +                     0 as *const libc::c_char,
11291 +                     0 as *const libc::c_char,
11292 +                     0 as *const libc::c_char,
11293 +                     0 as *const libc::c_char,
11294 +                     0 as *const libc::c_char,
11295 +                     0 as *const libc::c_char,
11296 +                     0 as *const libc::c_char,
11297 +                 ],
11298 +                 output_names: [
11299 +                     b"linregintercept\0" as *const u8 as *const libc::c_char,
11300 +                     0 as *const libc::c_char,
11301 +                     0 as *const libc::c_char,
11302 +                     0 as *const libc::c_char,
11303 +                     0 as *const libc::c_char,
11304 +                     0 as *const libc::c_char,
11305 +                     0 as *const libc::c_char,
11306 +                     0 as *const libc::c_char,
11307 +                     0 as *const libc::c_char,
11308 +                     0 as *const libc::c_char,
11309 +                     0 as *const libc::c_char,
11310 +                     0 as *const libc::c_char,
11311 +                     0 as *const libc::c_char,
11312 +                     0 as *const libc::c_char,
11313 +                     0 as *const libc::c_char,
11314 +                     0 as *const libc::c_char,
11315 +                 ],
11316 +                 stream_new: None,
11317 +                 stream_run: None,
11318 +                 stream_free: None,
11319 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:11402:13
      |
11322 | /             let mut init = ti_indicator_info {
11323 | |                 name: b"linregslope\0" as *const u8 as *const libc::c_char,
11324 | |                 full_name: b"Linear Regression Slope\0" as *const u8
11325 | |                     as *const libc::c_char,
...     |
11400 | |                 stream_free: None,
11401 | |             };
      | |______________- unnecessary `let` binding
11402 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
11322 ~             
11323 ~             ti_indicator_info {
11324 +                 name: b"linregslope\0" as *const u8 as *const libc::c_char,
11325 +                 full_name: b"Linear Regression Slope\0" as *const u8
11326 +                     as *const libc::c_char,
11327 +                 start: Some(
11328 +                     ti_linregslope_start
11329 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
11330 +                 ),
11331 +                 indicator: Some(
11332 +                     ti_linregslope
11333 +                         as unsafe extern "C" fn(
11334 +                             libc::c_int,
11335 +                             *const *const libc::c_double,
11336 +                             *const libc::c_double,
11337 +                             *const *mut libc::c_double,
11338 +                         ) -> libc::c_int,
11339 +                 ),
11340 +                 indicator_ref: None,
11341 +                 type_0: 2 as libc::c_int,
11342 +                 inputs: 1 as libc::c_int,
11343 +                 options: 1 as libc::c_int,
11344 +                 outputs: 1 as libc::c_int,
11345 +                 input_names: [
11346 +                     b"real\0" as *const u8 as *const libc::c_char,
11347 +                     0 as *const libc::c_char,
11348 +                     0 as *const libc::c_char,
11349 +                     0 as *const libc::c_char,
11350 +                     0 as *const libc::c_char,
11351 +                     0 as *const libc::c_char,
11352 +                     0 as *const libc::c_char,
11353 +                     0 as *const libc::c_char,
11354 +                     0 as *const libc::c_char,
11355 +                     0 as *const libc::c_char,
11356 +                     0 as *const libc::c_char,
11357 +                     0 as *const libc::c_char,
11358 +                     0 as *const libc::c_char,
11359 +                     0 as *const libc::c_char,
11360 +                     0 as *const libc::c_char,
11361 +                     0 as *const libc::c_char,
11362 +                 ],
11363 +                 option_names: [
11364 +                     b"period\0" as *const u8 as *const libc::c_char,
11365 +                     0 as *const libc::c_char,
11366 +                     0 as *const libc::c_char,
11367 +                     0 as *const libc::c_char,
11368 +                     0 as *const libc::c_char,
11369 +                     0 as *const libc::c_char,
11370 +                     0 as *const libc::c_char,
11371 +                     0 as *const libc::c_char,
11372 +                     0 as *const libc::c_char,
11373 +                     0 as *const libc::c_char,
11374 +                     0 as *const libc::c_char,
11375 +                     0 as *const libc::c_char,
11376 +                     0 as *const libc::c_char,
11377 +                     0 as *const libc::c_char,
11378 +                     0 as *const libc::c_char,
11379 +                     0 as *const libc::c_char,
11380 +                 ],
11381 +                 output_names: [
11382 +                     b"linregslope\0" as *const u8 as *const libc::c_char,
11383 +                     0 as *const libc::c_char,
11384 +                     0 as *const libc::c_char,
11385 +                     0 as *const libc::c_char,
11386 +                     0 as *const libc::c_char,
11387 +                     0 as *const libc::c_char,
11388 +                     0 as *const libc::c_char,
11389 +                     0 as *const libc::c_char,
11390 +                     0 as *const libc::c_char,
11391 +                     0 as *const libc::c_char,
11392 +                     0 as *const libc::c_char,
11393 +                     0 as *const libc::c_char,
11394 +                     0 as *const libc::c_char,
11395 +                     0 as *const libc::c_char,
11396 +                     0 as *const libc::c_char,
11397 +                     0 as *const libc::c_char,
11398 +                 ],
11399 +                 stream_new: None,
11400 +                 stream_run: None,
11401 +                 stream_free: None,
11402 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:11484:13
      |
11405 | /             let mut init = ti_indicator_info {
11406 | |                 name: b"ln\0" as *const u8 as *const libc::c_char,
11407 | |                 full_name: b"Vector Natural Log\0" as *const u8 as *const libc::c_char,
11408 | |                 start: Some(
...     |
11482 | |                 stream_free: None,
11483 | |             };
      | |______________- unnecessary `let` binding
11484 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
11405 ~             
11406 ~             ti_indicator_info {
11407 +                 name: b"ln\0" as *const u8 as *const libc::c_char,
11408 +                 full_name: b"Vector Natural Log\0" as *const u8 as *const libc::c_char,
11409 +                 start: Some(
11410 +                     ti_ln_start
11411 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
11412 +                 ),
11413 +                 indicator: Some(
11414 +                     ti_ln
11415 +                         as unsafe extern "C" fn(
11416 +                             libc::c_int,
11417 +                             *const *const libc::c_double,
11418 +                             *const libc::c_double,
11419 +                             *const *mut libc::c_double,
11420 +                         ) -> libc::c_int,
11421 +                 ),
11422 +                 indicator_ref: None,
11423 +                 type_0: 4 as libc::c_int,
11424 +                 inputs: 1 as libc::c_int,
11425 +                 options: 0 as libc::c_int,
11426 +                 outputs: 1 as libc::c_int,
11427 +                 input_names: [
11428 +                     b"real\0" as *const u8 as *const libc::c_char,
11429 +                     0 as *const libc::c_char,
11430 +                     0 as *const libc::c_char,
11431 +                     0 as *const libc::c_char,
11432 +                     0 as *const libc::c_char,
11433 +                     0 as *const libc::c_char,
11434 +                     0 as *const libc::c_char,
11435 +                     0 as *const libc::c_char,
11436 +                     0 as *const libc::c_char,
11437 +                     0 as *const libc::c_char,
11438 +                     0 as *const libc::c_char,
11439 +                     0 as *const libc::c_char,
11440 +                     0 as *const libc::c_char,
11441 +                     0 as *const libc::c_char,
11442 +                     0 as *const libc::c_char,
11443 +                     0 as *const libc::c_char,
11444 +                 ],
11445 +                 option_names: [
11446 +                     b"\0" as *const u8 as *const libc::c_char,
11447 +                     0 as *const libc::c_char,
11448 +                     0 as *const libc::c_char,
11449 +                     0 as *const libc::c_char,
11450 +                     0 as *const libc::c_char,
11451 +                     0 as *const libc::c_char,
11452 +                     0 as *const libc::c_char,
11453 +                     0 as *const libc::c_char,
11454 +                     0 as *const libc::c_char,
11455 +                     0 as *const libc::c_char,
11456 +                     0 as *const libc::c_char,
11457 +                     0 as *const libc::c_char,
11458 +                     0 as *const libc::c_char,
11459 +                     0 as *const libc::c_char,
11460 +                     0 as *const libc::c_char,
11461 +                     0 as *const libc::c_char,
11462 +                 ],
11463 +                 output_names: [
11464 +                     b"ln\0" as *const u8 as *const libc::c_char,
11465 +                     0 as *const libc::c_char,
11466 +                     0 as *const libc::c_char,
11467 +                     0 as *const libc::c_char,
11468 +                     0 as *const libc::c_char,
11469 +                     0 as *const libc::c_char,
11470 +                     0 as *const libc::c_char,
11471 +                     0 as *const libc::c_char,
11472 +                     0 as *const libc::c_char,
11473 +                     0 as *const libc::c_char,
11474 +                     0 as *const libc::c_char,
11475 +                     0 as *const libc::c_char,
11476 +                     0 as *const libc::c_char,
11477 +                     0 as *const libc::c_char,
11478 +                     0 as *const libc::c_char,
11479 +                     0 as *const libc::c_char,
11480 +                 ],
11481 +                 stream_new: None,
11482 +                 stream_run: None,
11483 +                 stream_free: None,
11484 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:11566:13
      |
11487 | /             let mut init = ti_indicator_info {
11488 | |                 name: b"log10\0" as *const u8 as *const libc::c_char,
11489 | |                 full_name: b"Vector Base-10 Log\0" as *const u8 as *const libc::c_char,
11490 | |                 start: Some(
...     |
11564 | |                 stream_free: None,
11565 | |             };
      | |______________- unnecessary `let` binding
11566 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
11487 ~             
11488 ~             ti_indicator_info {
11489 +                 name: b"log10\0" as *const u8 as *const libc::c_char,
11490 +                 full_name: b"Vector Base-10 Log\0" as *const u8 as *const libc::c_char,
11491 +                 start: Some(
11492 +                     ti_log10_start
11493 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
11494 +                 ),
11495 +                 indicator: Some(
11496 +                     ti_log10
11497 +                         as unsafe extern "C" fn(
11498 +                             libc::c_int,
11499 +                             *const *const libc::c_double,
11500 +                             *const libc::c_double,
11501 +                             *const *mut libc::c_double,
11502 +                         ) -> libc::c_int,
11503 +                 ),
11504 +                 indicator_ref: None,
11505 +                 type_0: 4 as libc::c_int,
11506 +                 inputs: 1 as libc::c_int,
11507 +                 options: 0 as libc::c_int,
11508 +                 outputs: 1 as libc::c_int,
11509 +                 input_names: [
11510 +                     b"real\0" as *const u8 as *const libc::c_char,
11511 +                     0 as *const libc::c_char,
11512 +                     0 as *const libc::c_char,
11513 +                     0 as *const libc::c_char,
11514 +                     0 as *const libc::c_char,
11515 +                     0 as *const libc::c_char,
11516 +                     0 as *const libc::c_char,
11517 +                     0 as *const libc::c_char,
11518 +                     0 as *const libc::c_char,
11519 +                     0 as *const libc::c_char,
11520 +                     0 as *const libc::c_char,
11521 +                     0 as *const libc::c_char,
11522 +                     0 as *const libc::c_char,
11523 +                     0 as *const libc::c_char,
11524 +                     0 as *const libc::c_char,
11525 +                     0 as *const libc::c_char,
11526 +                 ],
11527 +                 option_names: [
11528 +                     b"\0" as *const u8 as *const libc::c_char,
11529 +                     0 as *const libc::c_char,
11530 +                     0 as *const libc::c_char,
11531 +                     0 as *const libc::c_char,
11532 +                     0 as *const libc::c_char,
11533 +                     0 as *const libc::c_char,
11534 +                     0 as *const libc::c_char,
11535 +                     0 as *const libc::c_char,
11536 +                     0 as *const libc::c_char,
11537 +                     0 as *const libc::c_char,
11538 +                     0 as *const libc::c_char,
11539 +                     0 as *const libc::c_char,
11540 +                     0 as *const libc::c_char,
11541 +                     0 as *const libc::c_char,
11542 +                     0 as *const libc::c_char,
11543 +                     0 as *const libc::c_char,
11544 +                 ],
11545 +                 output_names: [
11546 +                     b"log10\0" as *const u8 as *const libc::c_char,
11547 +                     0 as *const libc::c_char,
11548 +                     0 as *const libc::c_char,
11549 +                     0 as *const libc::c_char,
11550 +                     0 as *const libc::c_char,
11551 +                     0 as *const libc::c_char,
11552 +                     0 as *const libc::c_char,
11553 +                     0 as *const libc::c_char,
11554 +                     0 as *const libc::c_char,
11555 +                     0 as *const libc::c_char,
11556 +                     0 as *const libc::c_char,
11557 +                     0 as *const libc::c_char,
11558 +                     0 as *const libc::c_char,
11559 +                     0 as *const libc::c_char,
11560 +                     0 as *const libc::c_char,
11561 +                     0 as *const libc::c_char,
11562 +                 ],
11563 +                 stream_new: None,
11564 +                 stream_run: None,
11565 +                 stream_free: None,
11566 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:11649:13
      |
11569 | /             let mut init = ti_indicator_info {
11570 | |                 name: b"macd\0" as *const u8 as *const libc::c_char,
11571 | |                 full_name: b"Moving Average Convergence/Divergence\0" as *const u8
11572 | |                     as *const libc::c_char,
...     |
11647 | |                 stream_free: None,
11648 | |             };
      | |______________- unnecessary `let` binding
11649 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
11569 ~             
11570 ~             ti_indicator_info {
11571 +                 name: b"macd\0" as *const u8 as *const libc::c_char,
11572 +                 full_name: b"Moving Average Convergence/Divergence\0" as *const u8
11573 +                     as *const libc::c_char,
11574 +                 start: Some(
11575 +                     ti_macd_start
11576 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
11577 +                 ),
11578 +                 indicator: Some(
11579 +                     ti_macd
11580 +                         as unsafe extern "C" fn(
11581 +                             libc::c_int,
11582 +                             *const *const libc::c_double,
11583 +                             *const libc::c_double,
11584 +                             *const *mut libc::c_double,
11585 +                         ) -> libc::c_int,
11586 +                 ),
11587 +                 indicator_ref: None,
11588 +                 type_0: 2 as libc::c_int,
11589 +                 inputs: 1 as libc::c_int,
11590 +                 options: 3 as libc::c_int,
11591 +                 outputs: 3 as libc::c_int,
11592 +                 input_names: [
11593 +                     b"real\0" as *const u8 as *const libc::c_char,
11594 +                     0 as *const libc::c_char,
11595 +                     0 as *const libc::c_char,
11596 +                     0 as *const libc::c_char,
11597 +                     0 as *const libc::c_char,
11598 +                     0 as *const libc::c_char,
11599 +                     0 as *const libc::c_char,
11600 +                     0 as *const libc::c_char,
11601 +                     0 as *const libc::c_char,
11602 +                     0 as *const libc::c_char,
11603 +                     0 as *const libc::c_char,
11604 +                     0 as *const libc::c_char,
11605 +                     0 as *const libc::c_char,
11606 +                     0 as *const libc::c_char,
11607 +                     0 as *const libc::c_char,
11608 +                     0 as *const libc::c_char,
11609 +                 ],
11610 +                 option_names: [
11611 +                     b"short_period\0" as *const u8 as *const libc::c_char,
11612 +                     b"long_period\0" as *const u8 as *const libc::c_char,
11613 +                     b"signal_period\0" as *const u8 as *const libc::c_char,
11614 +                     0 as *const libc::c_char,
11615 +                     0 as *const libc::c_char,
11616 +                     0 as *const libc::c_char,
11617 +                     0 as *const libc::c_char,
11618 +                     0 as *const libc::c_char,
11619 +                     0 as *const libc::c_char,
11620 +                     0 as *const libc::c_char,
11621 +                     0 as *const libc::c_char,
11622 +                     0 as *const libc::c_char,
11623 +                     0 as *const libc::c_char,
11624 +                     0 as *const libc::c_char,
11625 +                     0 as *const libc::c_char,
11626 +                     0 as *const libc::c_char,
11627 +                 ],
11628 +                 output_names: [
11629 +                     b"macd\0" as *const u8 as *const libc::c_char,
11630 +                     b"macd_signal\0" as *const u8 as *const libc::c_char,
11631 +                     b"macd_histogram\0" as *const u8 as *const libc::c_char,
11632 +                     0 as *const libc::c_char,
11633 +                     0 as *const libc::c_char,
11634 +                     0 as *const libc::c_char,
11635 +                     0 as *const libc::c_char,
11636 +                     0 as *const libc::c_char,
11637 +                     0 as *const libc::c_char,
11638 +                     0 as *const libc::c_char,
11639 +                     0 as *const libc::c_char,
11640 +                     0 as *const libc::c_char,
11641 +                     0 as *const libc::c_char,
11642 +                     0 as *const libc::c_char,
11643 +                     0 as *const libc::c_char,
11644 +                     0 as *const libc::c_char,
11645 +                 ],
11646 +                 stream_new: None,
11647 +                 stream_run: None,
11648 +                 stream_free: None,
11649 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:11732:13
      |
11652 | /             let mut init = ti_indicator_info {
11653 | |                 name: b"marketfi\0" as *const u8 as *const libc::c_char,
11654 | |                 full_name: b"Market Facilitation Index\0" as *const u8
11655 | |                     as *const libc::c_char,
...     |
11730 | |                 stream_free: None,
11731 | |             };
      | |______________- unnecessary `let` binding
11732 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
11652 ~             
11653 ~             ti_indicator_info {
11654 +                 name: b"marketfi\0" as *const u8 as *const libc::c_char,
11655 +                 full_name: b"Market Facilitation Index\0" as *const u8
11656 +                     as *const libc::c_char,
11657 +                 start: Some(
11658 +                     ti_marketfi_start
11659 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
11660 +                 ),
11661 +                 indicator: Some(
11662 +                     ti_marketfi
11663 +                         as unsafe extern "C" fn(
11664 +                             libc::c_int,
11665 +                             *const *const libc::c_double,
11666 +                             *const libc::c_double,
11667 +                             *const *mut libc::c_double,
11668 +                         ) -> libc::c_int,
11669 +                 ),
11670 +                 indicator_ref: None,
11671 +                 type_0: 2 as libc::c_int,
11672 +                 inputs: 3 as libc::c_int,
11673 +                 options: 0 as libc::c_int,
11674 +                 outputs: 1 as libc::c_int,
11675 +                 input_names: [
11676 +                     b"high\0" as *const u8 as *const libc::c_char,
11677 +                     b"low\0" as *const u8 as *const libc::c_char,
11678 +                     b"volume\0" as *const u8 as *const libc::c_char,
11679 +                     0 as *const libc::c_char,
11680 +                     0 as *const libc::c_char,
11681 +                     0 as *const libc::c_char,
11682 +                     0 as *const libc::c_char,
11683 +                     0 as *const libc::c_char,
11684 +                     0 as *const libc::c_char,
11685 +                     0 as *const libc::c_char,
11686 +                     0 as *const libc::c_char,
11687 +                     0 as *const libc::c_char,
11688 +                     0 as *const libc::c_char,
11689 +                     0 as *const libc::c_char,
11690 +                     0 as *const libc::c_char,
11691 +                     0 as *const libc::c_char,
11692 +                 ],
11693 +                 option_names: [
11694 +                     b"\0" as *const u8 as *const libc::c_char,
11695 +                     0 as *const libc::c_char,
11696 +                     0 as *const libc::c_char,
11697 +                     0 as *const libc::c_char,
11698 +                     0 as *const libc::c_char,
11699 +                     0 as *const libc::c_char,
11700 +                     0 as *const libc::c_char,
11701 +                     0 as *const libc::c_char,
11702 +                     0 as *const libc::c_char,
11703 +                     0 as *const libc::c_char,
11704 +                     0 as *const libc::c_char,
11705 +                     0 as *const libc::c_char,
11706 +                     0 as *const libc::c_char,
11707 +                     0 as *const libc::c_char,
11708 +                     0 as *const libc::c_char,
11709 +                     0 as *const libc::c_char,
11710 +                 ],
11711 +                 output_names: [
11712 +                     b"marketfi\0" as *const u8 as *const libc::c_char,
11713 +                     0 as *const libc::c_char,
11714 +                     0 as *const libc::c_char,
11715 +                     0 as *const libc::c_char,
11716 +                     0 as *const libc::c_char,
11717 +                     0 as *const libc::c_char,
11718 +                     0 as *const libc::c_char,
11719 +                     0 as *const libc::c_char,
11720 +                     0 as *const libc::c_char,
11721 +                     0 as *const libc::c_char,
11722 +                     0 as *const libc::c_char,
11723 +                     0 as *const libc::c_char,
11724 +                     0 as *const libc::c_char,
11725 +                     0 as *const libc::c_char,
11726 +                     0 as *const libc::c_char,
11727 +                     0 as *const libc::c_char,
11728 +                 ],
11729 +                 stream_new: None,
11730 +                 stream_run: None,
11731 +                 stream_free: None,
11732 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:11814:13
      |
11735 | /             let mut init = ti_indicator_info {
11736 | |                 name: b"mass\0" as *const u8 as *const libc::c_char,
11737 | |                 full_name: b"Mass Index\0" as *const u8 as *const libc::c_char,
11738 | |                 start: Some(
...     |
11812 | |                 stream_free: None,
11813 | |             };
      | |______________- unnecessary `let` binding
11814 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
11735 ~             
11736 ~             ti_indicator_info {
11737 +                 name: b"mass\0" as *const u8 as *const libc::c_char,
11738 +                 full_name: b"Mass Index\0" as *const u8 as *const libc::c_char,
11739 +                 start: Some(
11740 +                     ti_mass_start
11741 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
11742 +                 ),
11743 +                 indicator: Some(
11744 +                     ti_mass
11745 +                         as unsafe extern "C" fn(
11746 +                             libc::c_int,
11747 +                             *const *const libc::c_double,
11748 +                             *const libc::c_double,
11749 +                             *const *mut libc::c_double,
11750 +                         ) -> libc::c_int,
11751 +                 ),
11752 +                 indicator_ref: None,
11753 +                 type_0: 2 as libc::c_int,
11754 +                 inputs: 2 as libc::c_int,
11755 +                 options: 1 as libc::c_int,
11756 +                 outputs: 1 as libc::c_int,
11757 +                 input_names: [
11758 +                     b"high\0" as *const u8 as *const libc::c_char,
11759 +                     b"low\0" as *const u8 as *const libc::c_char,
11760 +                     0 as *const libc::c_char,
11761 +                     0 as *const libc::c_char,
11762 +                     0 as *const libc::c_char,
11763 +                     0 as *const libc::c_char,
11764 +                     0 as *const libc::c_char,
11765 +                     0 as *const libc::c_char,
11766 +                     0 as *const libc::c_char,
11767 +                     0 as *const libc::c_char,
11768 +                     0 as *const libc::c_char,
11769 +                     0 as *const libc::c_char,
11770 +                     0 as *const libc::c_char,
11771 +                     0 as *const libc::c_char,
11772 +                     0 as *const libc::c_char,
11773 +                     0 as *const libc::c_char,
11774 +                 ],
11775 +                 option_names: [
11776 +                     b"period\0" as *const u8 as *const libc::c_char,
11777 +                     0 as *const libc::c_char,
11778 +                     0 as *const libc::c_char,
11779 +                     0 as *const libc::c_char,
11780 +                     0 as *const libc::c_char,
11781 +                     0 as *const libc::c_char,
11782 +                     0 as *const libc::c_char,
11783 +                     0 as *const libc::c_char,
11784 +                     0 as *const libc::c_char,
11785 +                     0 as *const libc::c_char,
11786 +                     0 as *const libc::c_char,
11787 +                     0 as *const libc::c_char,
11788 +                     0 as *const libc::c_char,
11789 +                     0 as *const libc::c_char,
11790 +                     0 as *const libc::c_char,
11791 +                     0 as *const libc::c_char,
11792 +                 ],
11793 +                 output_names: [
11794 +                     b"mass\0" as *const u8 as *const libc::c_char,
11795 +                     0 as *const libc::c_char,
11796 +                     0 as *const libc::c_char,
11797 +                     0 as *const libc::c_char,
11798 +                     0 as *const libc::c_char,
11799 +                     0 as *const libc::c_char,
11800 +                     0 as *const libc::c_char,
11801 +                     0 as *const libc::c_char,
11802 +                     0 as *const libc::c_char,
11803 +                     0 as *const libc::c_char,
11804 +                     0 as *const libc::c_char,
11805 +                     0 as *const libc::c_char,
11806 +                     0 as *const libc::c_char,
11807 +                     0 as *const libc::c_char,
11808 +                     0 as *const libc::c_char,
11809 +                     0 as *const libc::c_char,
11810 +                 ],
11811 +                 stream_new: None,
11812 +                 stream_run: None,
11813 +                 stream_free: None,
11814 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:11904:13
      |
11817 | /             let mut init = ti_indicator_info {
11818 | |                 name: b"max\0" as *const u8 as *const libc::c_char,
11819 | |                 full_name: b"Maximum In Period\0" as *const u8 as *const libc::c_char,
11820 | |                 start: Some(
...     |
11902 | |                 stream_free: None,
11903 | |             };
      | |______________- unnecessary `let` binding
11904 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
11817 ~             
11818 ~             ti_indicator_info {
11819 +                 name: b"max\0" as *const u8 as *const libc::c_char,
11820 +                 full_name: b"Maximum In Period\0" as *const u8 as *const libc::c_char,
11821 +                 start: Some(
11822 +                     ti_max_start
11823 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
11824 +                 ),
11825 +                 indicator: Some(
11826 +                     ti_max
11827 +                         as unsafe extern "C" fn(
11828 +                             libc::c_int,
11829 +                             *const *const libc::c_double,
11830 +                             *const libc::c_double,
11831 +                             *const *mut libc::c_double,
11832 +                         ) -> libc::c_int,
11833 +                 ),
11834 +                 indicator_ref: Some(
11835 +                     ti_max_ref
11836 +                         as unsafe extern "C" fn(
11837 +                             libc::c_int,
11838 +                             *const *const libc::c_double,
11839 +                             *const libc::c_double,
11840 +                             *const *mut libc::c_double,
11841 +                         ) -> libc::c_int,
11842 +                 ),
11843 +                 type_0: 3 as libc::c_int,
11844 +                 inputs: 1 as libc::c_int,
11845 +                 options: 1 as libc::c_int,
11846 +                 outputs: 1 as libc::c_int,
11847 +                 input_names: [
11848 +                     b"real\0" as *const u8 as *const libc::c_char,
11849 +                     0 as *const libc::c_char,
11850 +                     0 as *const libc::c_char,
11851 +                     0 as *const libc::c_char,
11852 +                     0 as *const libc::c_char,
11853 +                     0 as *const libc::c_char,
11854 +                     0 as *const libc::c_char,
11855 +                     0 as *const libc::c_char,
11856 +                     0 as *const libc::c_char,
11857 +                     0 as *const libc::c_char,
11858 +                     0 as *const libc::c_char,
11859 +                     0 as *const libc::c_char,
11860 +                     0 as *const libc::c_char,
11861 +                     0 as *const libc::c_char,
11862 +                     0 as *const libc::c_char,
11863 +                     0 as *const libc::c_char,
11864 +                 ],
11865 +                 option_names: [
11866 +                     b"period\0" as *const u8 as *const libc::c_char,
11867 +                     0 as *const libc::c_char,
11868 +                     0 as *const libc::c_char,
11869 +                     0 as *const libc::c_char,
11870 +                     0 as *const libc::c_char,
11871 +                     0 as *const libc::c_char,
11872 +                     0 as *const libc::c_char,
11873 +                     0 as *const libc::c_char,
11874 +                     0 as *const libc::c_char,
11875 +                     0 as *const libc::c_char,
11876 +                     0 as *const libc::c_char,
11877 +                     0 as *const libc::c_char,
11878 +                     0 as *const libc::c_char,
11879 +                     0 as *const libc::c_char,
11880 +                     0 as *const libc::c_char,
11881 +                     0 as *const libc::c_char,
11882 +                 ],
11883 +                 output_names: [
11884 +                     b"max\0" as *const u8 as *const libc::c_char,
11885 +                     0 as *const libc::c_char,
11886 +                     0 as *const libc::c_char,
11887 +                     0 as *const libc::c_char,
11888 +                     0 as *const libc::c_char,
11889 +                     0 as *const libc::c_char,
11890 +                     0 as *const libc::c_char,
11891 +                     0 as *const libc::c_char,
11892 +                     0 as *const libc::c_char,
11893 +                     0 as *const libc::c_char,
11894 +                     0 as *const libc::c_char,
11895 +                     0 as *const libc::c_char,
11896 +                     0 as *const libc::c_char,
11897 +                     0 as *const libc::c_char,
11898 +                     0 as *const libc::c_char,
11899 +                     0 as *const libc::c_char,
11900 +                 ],
11901 +                 stream_new: None,
11902 +                 stream_run: None,
11903 +                 stream_free: None,
11904 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:11987:13
      |
11907 | /             let mut init = ti_indicator_info {
11908 | |                 name: b"md\0" as *const u8 as *const libc::c_char,
11909 | |                 full_name: b"Mean Deviation Over Period\0" as *const u8
11910 | |                     as *const libc::c_char,
...     |
11985 | |                 stream_free: None,
11986 | |             };
      | |______________- unnecessary `let` binding
11987 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
11907 ~             
11908 ~             ti_indicator_info {
11909 +                 name: b"md\0" as *const u8 as *const libc::c_char,
11910 +                 full_name: b"Mean Deviation Over Period\0" as *const u8
11911 +                     as *const libc::c_char,
11912 +                 start: Some(
11913 +                     ti_md_start
11914 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
11915 +                 ),
11916 +                 indicator: Some(
11917 +                     ti_md
11918 +                         as unsafe extern "C" fn(
11919 +                             libc::c_int,
11920 +                             *const *const libc::c_double,
11921 +                             *const libc::c_double,
11922 +                             *const *mut libc::c_double,
11923 +                         ) -> libc::c_int,
11924 +                 ),
11925 +                 indicator_ref: None,
11926 +                 type_0: 3 as libc::c_int,
11927 +                 inputs: 1 as libc::c_int,
11928 +                 options: 1 as libc::c_int,
11929 +                 outputs: 1 as libc::c_int,
11930 +                 input_names: [
11931 +                     b"real\0" as *const u8 as *const libc::c_char,
11932 +                     0 as *const libc::c_char,
11933 +                     0 as *const libc::c_char,
11934 +                     0 as *const libc::c_char,
11935 +                     0 as *const libc::c_char,
11936 +                     0 as *const libc::c_char,
11937 +                     0 as *const libc::c_char,
11938 +                     0 as *const libc::c_char,
11939 +                     0 as *const libc::c_char,
11940 +                     0 as *const libc::c_char,
11941 +                     0 as *const libc::c_char,
11942 +                     0 as *const libc::c_char,
11943 +                     0 as *const libc::c_char,
11944 +                     0 as *const libc::c_char,
11945 +                     0 as *const libc::c_char,
11946 +                     0 as *const libc::c_char,
11947 +                 ],
11948 +                 option_names: [
11949 +                     b"period\0" as *const u8 as *const libc::c_char,
11950 +                     0 as *const libc::c_char,
11951 +                     0 as *const libc::c_char,
11952 +                     0 as *const libc::c_char,
11953 +                     0 as *const libc::c_char,
11954 +                     0 as *const libc::c_char,
11955 +                     0 as *const libc::c_char,
11956 +                     0 as *const libc::c_char,
11957 +                     0 as *const libc::c_char,
11958 +                     0 as *const libc::c_char,
11959 +                     0 as *const libc::c_char,
11960 +                     0 as *const libc::c_char,
11961 +                     0 as *const libc::c_char,
11962 +                     0 as *const libc::c_char,
11963 +                     0 as *const libc::c_char,
11964 +                     0 as *const libc::c_char,
11965 +                 ],
11966 +                 output_names: [
11967 +                     b"md\0" as *const u8 as *const libc::c_char,
11968 +                     0 as *const libc::c_char,
11969 +                     0 as *const libc::c_char,
11970 +                     0 as *const libc::c_char,
11971 +                     0 as *const libc::c_char,
11972 +                     0 as *const libc::c_char,
11973 +                     0 as *const libc::c_char,
11974 +                     0 as *const libc::c_char,
11975 +                     0 as *const libc::c_char,
11976 +                     0 as *const libc::c_char,
11977 +                     0 as *const libc::c_char,
11978 +                     0 as *const libc::c_char,
11979 +                     0 as *const libc::c_char,
11980 +                     0 as *const libc::c_char,
11981 +                     0 as *const libc::c_char,
11982 +                     0 as *const libc::c_char,
11983 +                 ],
11984 +                 stream_new: None,
11985 +                 stream_run: None,
11986 +                 stream_free: None,
11987 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:12069:13
      |
11990 | /             let mut init = ti_indicator_info {
11991 | |                 name: b"medprice\0" as *const u8 as *const libc::c_char,
11992 | |                 full_name: b"Median Price\0" as *const u8 as *const libc::c_char,
11993 | |                 start: Some(
...     |
12067 | |                 stream_free: None,
12068 | |             };
      | |______________- unnecessary `let` binding
12069 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
11990 ~             
11991 ~             ti_indicator_info {
11992 +                 name: b"medprice\0" as *const u8 as *const libc::c_char,
11993 +                 full_name: b"Median Price\0" as *const u8 as *const libc::c_char,
11994 +                 start: Some(
11995 +                     ti_medprice_start
11996 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
11997 +                 ),
11998 +                 indicator: Some(
11999 +                     ti_medprice
12000 +                         as unsafe extern "C" fn(
12001 +                             libc::c_int,
12002 +                             *const *const libc::c_double,
12003 +                             *const libc::c_double,
12004 +                             *const *mut libc::c_double,
12005 +                         ) -> libc::c_int,
12006 +                 ),
12007 +                 indicator_ref: None,
12008 +                 type_0: 1 as libc::c_int,
12009 +                 inputs: 2 as libc::c_int,
12010 +                 options: 0 as libc::c_int,
12011 +                 outputs: 1 as libc::c_int,
12012 +                 input_names: [
12013 +                     b"high\0" as *const u8 as *const libc::c_char,
12014 +                     b"low\0" as *const u8 as *const libc::c_char,
12015 +                     0 as *const libc::c_char,
12016 +                     0 as *const libc::c_char,
12017 +                     0 as *const libc::c_char,
12018 +                     0 as *const libc::c_char,
12019 +                     0 as *const libc::c_char,
12020 +                     0 as *const libc::c_char,
12021 +                     0 as *const libc::c_char,
12022 +                     0 as *const libc::c_char,
12023 +                     0 as *const libc::c_char,
12024 +                     0 as *const libc::c_char,
12025 +                     0 as *const libc::c_char,
12026 +                     0 as *const libc::c_char,
12027 +                     0 as *const libc::c_char,
12028 +                     0 as *const libc::c_char,
12029 +                 ],
12030 +                 option_names: [
12031 +                     b"\0" as *const u8 as *const libc::c_char,
12032 +                     0 as *const libc::c_char,
12033 +                     0 as *const libc::c_char,
12034 +                     0 as *const libc::c_char,
12035 +                     0 as *const libc::c_char,
12036 +                     0 as *const libc::c_char,
12037 +                     0 as *const libc::c_char,
12038 +                     0 as *const libc::c_char,
12039 +                     0 as *const libc::c_char,
12040 +                     0 as *const libc::c_char,
12041 +                     0 as *const libc::c_char,
12042 +                     0 as *const libc::c_char,
12043 +                     0 as *const libc::c_char,
12044 +                     0 as *const libc::c_char,
12045 +                     0 as *const libc::c_char,
12046 +                     0 as *const libc::c_char,
12047 +                 ],
12048 +                 output_names: [
12049 +                     b"medprice\0" as *const u8 as *const libc::c_char,
12050 +                     0 as *const libc::c_char,
12051 +                     0 as *const libc::c_char,
12052 +                     0 as *const libc::c_char,
12053 +                     0 as *const libc::c_char,
12054 +                     0 as *const libc::c_char,
12055 +                     0 as *const libc::c_char,
12056 +                     0 as *const libc::c_char,
12057 +                     0 as *const libc::c_char,
12058 +                     0 as *const libc::c_char,
12059 +                     0 as *const libc::c_char,
12060 +                     0 as *const libc::c_char,
12061 +                     0 as *const libc::c_char,
12062 +                     0 as *const libc::c_char,
12063 +                     0 as *const libc::c_char,
12064 +                     0 as *const libc::c_char,
12065 +                 ],
12066 +                 stream_new: None,
12067 +                 stream_run: None,
12068 +                 stream_free: None,
12069 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:12151:13
      |
12072 | /             let mut init = ti_indicator_info {
12073 | |                 name: b"mfi\0" as *const u8 as *const libc::c_char,
12074 | |                 full_name: b"Money Flow Index\0" as *const u8 as *const libc::c_char,
12075 | |                 start: Some(
...     |
12149 | |                 stream_free: None,
12150 | |             };
      | |______________- unnecessary `let` binding
12151 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
12072 ~             
12073 ~             ti_indicator_info {
12074 +                 name: b"mfi\0" as *const u8 as *const libc::c_char,
12075 +                 full_name: b"Money Flow Index\0" as *const u8 as *const libc::c_char,
12076 +                 start: Some(
12077 +                     ti_mfi_start
12078 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
12079 +                 ),
12080 +                 indicator: Some(
12081 +                     ti_mfi
12082 +                         as unsafe extern "C" fn(
12083 +                             libc::c_int,
12084 +                             *const *const libc::c_double,
12085 +                             *const libc::c_double,
12086 +                             *const *mut libc::c_double,
12087 +                         ) -> libc::c_int,
12088 +                 ),
12089 +                 indicator_ref: None,
12090 +                 type_0: 2 as libc::c_int,
12091 +                 inputs: 4 as libc::c_int,
12092 +                 options: 1 as libc::c_int,
12093 +                 outputs: 1 as libc::c_int,
12094 +                 input_names: [
12095 +                     b"high\0" as *const u8 as *const libc::c_char,
12096 +                     b"low\0" as *const u8 as *const libc::c_char,
12097 +                     b"close\0" as *const u8 as *const libc::c_char,
12098 +                     b"volume\0" as *const u8 as *const libc::c_char,
12099 +                     0 as *const libc::c_char,
12100 +                     0 as *const libc::c_char,
12101 +                     0 as *const libc::c_char,
12102 +                     0 as *const libc::c_char,
12103 +                     0 as *const libc::c_char,
12104 +                     0 as *const libc::c_char,
12105 +                     0 as *const libc::c_char,
12106 +                     0 as *const libc::c_char,
12107 +                     0 as *const libc::c_char,
12108 +                     0 as *const libc::c_char,
12109 +                     0 as *const libc::c_char,
12110 +                     0 as *const libc::c_char,
12111 +                 ],
12112 +                 option_names: [
12113 +                     b"period\0" as *const u8 as *const libc::c_char,
12114 +                     0 as *const libc::c_char,
12115 +                     0 as *const libc::c_char,
12116 +                     0 as *const libc::c_char,
12117 +                     0 as *const libc::c_char,
12118 +                     0 as *const libc::c_char,
12119 +                     0 as *const libc::c_char,
12120 +                     0 as *const libc::c_char,
12121 +                     0 as *const libc::c_char,
12122 +                     0 as *const libc::c_char,
12123 +                     0 as *const libc::c_char,
12124 +                     0 as *const libc::c_char,
12125 +                     0 as *const libc::c_char,
12126 +                     0 as *const libc::c_char,
12127 +                     0 as *const libc::c_char,
12128 +                     0 as *const libc::c_char,
12129 +                 ],
12130 +                 output_names: [
12131 +                     b"mfi\0" as *const u8 as *const libc::c_char,
12132 +                     0 as *const libc::c_char,
12133 +                     0 as *const libc::c_char,
12134 +                     0 as *const libc::c_char,
12135 +                     0 as *const libc::c_char,
12136 +                     0 as *const libc::c_char,
12137 +                     0 as *const libc::c_char,
12138 +                     0 as *const libc::c_char,
12139 +                     0 as *const libc::c_char,
12140 +                     0 as *const libc::c_char,
12141 +                     0 as *const libc::c_char,
12142 +                     0 as *const libc::c_char,
12143 +                     0 as *const libc::c_char,
12144 +                     0 as *const libc::c_char,
12145 +                     0 as *const libc::c_char,
12146 +                     0 as *const libc::c_char,
12147 +                 ],
12148 +                 stream_new: None,
12149 +                 stream_run: None,
12150 +                 stream_free: None,
12151 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:12241:13
      |
12154 | /             let mut init = ti_indicator_info {
12155 | |                 name: b"min\0" as *const u8 as *const libc::c_char,
12156 | |                 full_name: b"Minimum In Period\0" as *const u8 as *const libc::c_char,
12157 | |                 start: Some(
...     |
12239 | |                 stream_free: None,
12240 | |             };
      | |______________- unnecessary `let` binding
12241 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
12154 ~             
12155 ~             ti_indicator_info {
12156 +                 name: b"min\0" as *const u8 as *const libc::c_char,
12157 +                 full_name: b"Minimum In Period\0" as *const u8 as *const libc::c_char,
12158 +                 start: Some(
12159 +                     ti_min_start
12160 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
12161 +                 ),
12162 +                 indicator: Some(
12163 +                     ti_min
12164 +                         as unsafe extern "C" fn(
12165 +                             libc::c_int,
12166 +                             *const *const libc::c_double,
12167 +                             *const libc::c_double,
12168 +                             *const *mut libc::c_double,
12169 +                         ) -> libc::c_int,
12170 +                 ),
12171 +                 indicator_ref: Some(
12172 +                     ti_min_ref
12173 +                         as unsafe extern "C" fn(
12174 +                             libc::c_int,
12175 +                             *const *const libc::c_double,
12176 +                             *const libc::c_double,
12177 +                             *const *mut libc::c_double,
12178 +                         ) -> libc::c_int,
12179 +                 ),
12180 +                 type_0: 3 as libc::c_int,
12181 +                 inputs: 1 as libc::c_int,
12182 +                 options: 1 as libc::c_int,
12183 +                 outputs: 1 as libc::c_int,
12184 +                 input_names: [
12185 +                     b"real\0" as *const u8 as *const libc::c_char,
12186 +                     0 as *const libc::c_char,
12187 +                     0 as *const libc::c_char,
12188 +                     0 as *const libc::c_char,
12189 +                     0 as *const libc::c_char,
12190 +                     0 as *const libc::c_char,
12191 +                     0 as *const libc::c_char,
12192 +                     0 as *const libc::c_char,
12193 +                     0 as *const libc::c_char,
12194 +                     0 as *const libc::c_char,
12195 +                     0 as *const libc::c_char,
12196 +                     0 as *const libc::c_char,
12197 +                     0 as *const libc::c_char,
12198 +                     0 as *const libc::c_char,
12199 +                     0 as *const libc::c_char,
12200 +                     0 as *const libc::c_char,
12201 +                 ],
12202 +                 option_names: [
12203 +                     b"period\0" as *const u8 as *const libc::c_char,
12204 +                     0 as *const libc::c_char,
12205 +                     0 as *const libc::c_char,
12206 +                     0 as *const libc::c_char,
12207 +                     0 as *const libc::c_char,
12208 +                     0 as *const libc::c_char,
12209 +                     0 as *const libc::c_char,
12210 +                     0 as *const libc::c_char,
12211 +                     0 as *const libc::c_char,
12212 +                     0 as *const libc::c_char,
12213 +                     0 as *const libc::c_char,
12214 +                     0 as *const libc::c_char,
12215 +                     0 as *const libc::c_char,
12216 +                     0 as *const libc::c_char,
12217 +                     0 as *const libc::c_char,
12218 +                     0 as *const libc::c_char,
12219 +                 ],
12220 +                 output_names: [
12221 +                     b"min\0" as *const u8 as *const libc::c_char,
12222 +                     0 as *const libc::c_char,
12223 +                     0 as *const libc::c_char,
12224 +                     0 as *const libc::c_char,
12225 +                     0 as *const libc::c_char,
12226 +                     0 as *const libc::c_char,
12227 +                     0 as *const libc::c_char,
12228 +                     0 as *const libc::c_char,
12229 +                     0 as *const libc::c_char,
12230 +                     0 as *const libc::c_char,
12231 +                     0 as *const libc::c_char,
12232 +                     0 as *const libc::c_char,
12233 +                     0 as *const libc::c_char,
12234 +                     0 as *const libc::c_char,
12235 +                     0 as *const libc::c_char,
12236 +                     0 as *const libc::c_char,
12237 +                 ],
12238 +                 stream_new: None,
12239 +                 stream_run: None,
12240 +                 stream_free: None,
12241 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:12323:13
      |
12244 | /             let mut init = ti_indicator_info {
12245 | |                 name: b"mom\0" as *const u8 as *const libc::c_char,
12246 | |                 full_name: b"Momentum\0" as *const u8 as *const libc::c_char,
12247 | |                 start: Some(
...     |
12321 | |                 stream_free: None,
12322 | |             };
      | |______________- unnecessary `let` binding
12323 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
12244 ~             
12245 ~             ti_indicator_info {
12246 +                 name: b"mom\0" as *const u8 as *const libc::c_char,
12247 +                 full_name: b"Momentum\0" as *const u8 as *const libc::c_char,
12248 +                 start: Some(
12249 +                     ti_mom_start
12250 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
12251 +                 ),
12252 +                 indicator: Some(
12253 +                     ti_mom
12254 +                         as unsafe extern "C" fn(
12255 +                             libc::c_int,
12256 +                             *const *const libc::c_double,
12257 +                             *const libc::c_double,
12258 +                             *const *mut libc::c_double,
12259 +                         ) -> libc::c_int,
12260 +                 ),
12261 +                 indicator_ref: None,
12262 +                 type_0: 2 as libc::c_int,
12263 +                 inputs: 1 as libc::c_int,
12264 +                 options: 1 as libc::c_int,
12265 +                 outputs: 1 as libc::c_int,
12266 +                 input_names: [
12267 +                     b"real\0" as *const u8 as *const libc::c_char,
12268 +                     0 as *const libc::c_char,
12269 +                     0 as *const libc::c_char,
12270 +                     0 as *const libc::c_char,
12271 +                     0 as *const libc::c_char,
12272 +                     0 as *const libc::c_char,
12273 +                     0 as *const libc::c_char,
12274 +                     0 as *const libc::c_char,
12275 +                     0 as *const libc::c_char,
12276 +                     0 as *const libc::c_char,
12277 +                     0 as *const libc::c_char,
12278 +                     0 as *const libc::c_char,
12279 +                     0 as *const libc::c_char,
12280 +                     0 as *const libc::c_char,
12281 +                     0 as *const libc::c_char,
12282 +                     0 as *const libc::c_char,
12283 +                 ],
12284 +                 option_names: [
12285 +                     b"period\0" as *const u8 as *const libc::c_char,
12286 +                     0 as *const libc::c_char,
12287 +                     0 as *const libc::c_char,
12288 +                     0 as *const libc::c_char,
12289 +                     0 as *const libc::c_char,
12290 +                     0 as *const libc::c_char,
12291 +                     0 as *const libc::c_char,
12292 +                     0 as *const libc::c_char,
12293 +                     0 as *const libc::c_char,
12294 +                     0 as *const libc::c_char,
12295 +                     0 as *const libc::c_char,
12296 +                     0 as *const libc::c_char,
12297 +                     0 as *const libc::c_char,
12298 +                     0 as *const libc::c_char,
12299 +                     0 as *const libc::c_char,
12300 +                     0 as *const libc::c_char,
12301 +                 ],
12302 +                 output_names: [
12303 +                     b"mom\0" as *const u8 as *const libc::c_char,
12304 +                     0 as *const libc::c_char,
12305 +                     0 as *const libc::c_char,
12306 +                     0 as *const libc::c_char,
12307 +                     0 as *const libc::c_char,
12308 +                     0 as *const libc::c_char,
12309 +                     0 as *const libc::c_char,
12310 +                     0 as *const libc::c_char,
12311 +                     0 as *const libc::c_char,
12312 +                     0 as *const libc::c_char,
12313 +                     0 as *const libc::c_char,
12314 +                     0 as *const libc::c_char,
12315 +                     0 as *const libc::c_char,
12316 +                     0 as *const libc::c_char,
12317 +                     0 as *const libc::c_char,
12318 +                     0 as *const libc::c_char,
12319 +                 ],
12320 +                 stream_new: None,
12321 +                 stream_run: None,
12322 +                 stream_free: None,
12323 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:12405:13
      |
12326 | /             let mut init = ti_indicator_info {
12327 | |                 name: b"msw\0" as *const u8 as *const libc::c_char,
12328 | |                 full_name: b"Mesa Sine Wave\0" as *const u8 as *const libc::c_char,
12329 | |                 start: Some(
...     |
12403 | |                 stream_free: None,
12404 | |             };
      | |______________- unnecessary `let` binding
12405 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
12326 ~             
12327 ~             ti_indicator_info {
12328 +                 name: b"msw\0" as *const u8 as *const libc::c_char,
12329 +                 full_name: b"Mesa Sine Wave\0" as *const u8 as *const libc::c_char,
12330 +                 start: Some(
12331 +                     ti_msw_start
12332 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
12333 +                 ),
12334 +                 indicator: Some(
12335 +                     ti_msw
12336 +                         as unsafe extern "C" fn(
12337 +                             libc::c_int,
12338 +                             *const *const libc::c_double,
12339 +                             *const libc::c_double,
12340 +                             *const *mut libc::c_double,
12341 +                         ) -> libc::c_int,
12342 +                 ),
12343 +                 indicator_ref: None,
12344 +                 type_0: 2 as libc::c_int,
12345 +                 inputs: 1 as libc::c_int,
12346 +                 options: 1 as libc::c_int,
12347 +                 outputs: 2 as libc::c_int,
12348 +                 input_names: [
12349 +                     b"real\0" as *const u8 as *const libc::c_char,
12350 +                     0 as *const libc::c_char,
12351 +                     0 as *const libc::c_char,
12352 +                     0 as *const libc::c_char,
12353 +                     0 as *const libc::c_char,
12354 +                     0 as *const libc::c_char,
12355 +                     0 as *const libc::c_char,
12356 +                     0 as *const libc::c_char,
12357 +                     0 as *const libc::c_char,
12358 +                     0 as *const libc::c_char,
12359 +                     0 as *const libc::c_char,
12360 +                     0 as *const libc::c_char,
12361 +                     0 as *const libc::c_char,
12362 +                     0 as *const libc::c_char,
12363 +                     0 as *const libc::c_char,
12364 +                     0 as *const libc::c_char,
12365 +                 ],
12366 +                 option_names: [
12367 +                     b"period\0" as *const u8 as *const libc::c_char,
12368 +                     0 as *const libc::c_char,
12369 +                     0 as *const libc::c_char,
12370 +                     0 as *const libc::c_char,
12371 +                     0 as *const libc::c_char,
12372 +                     0 as *const libc::c_char,
12373 +                     0 as *const libc::c_char,
12374 +                     0 as *const libc::c_char,
12375 +                     0 as *const libc::c_char,
12376 +                     0 as *const libc::c_char,
12377 +                     0 as *const libc::c_char,
12378 +                     0 as *const libc::c_char,
12379 +                     0 as *const libc::c_char,
12380 +                     0 as *const libc::c_char,
12381 +                     0 as *const libc::c_char,
12382 +                     0 as *const libc::c_char,
12383 +                 ],
12384 +                 output_names: [
12385 +                     b"msw_sine\0" as *const u8 as *const libc::c_char,
12386 +                     b"msw_lead\0" as *const u8 as *const libc::c_char,
12387 +                     0 as *const libc::c_char,
12388 +                     0 as *const libc::c_char,
12389 +                     0 as *const libc::c_char,
12390 +                     0 as *const libc::c_char,
12391 +                     0 as *const libc::c_char,
12392 +                     0 as *const libc::c_char,
12393 +                     0 as *const libc::c_char,
12394 +                     0 as *const libc::c_char,
12395 +                     0 as *const libc::c_char,
12396 +                     0 as *const libc::c_char,
12397 +                     0 as *const libc::c_char,
12398 +                     0 as *const libc::c_char,
12399 +                     0 as *const libc::c_char,
12400 +                     0 as *const libc::c_char,
12401 +                 ],
12402 +                 stream_new: None,
12403 +                 stream_run: None,
12404 +                 stream_free: None,
12405 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:12488:13
      |
12408 | /             let mut init = ti_indicator_info {
12409 | |                 name: b"mul\0" as *const u8 as *const libc::c_char,
12410 | |                 full_name: b"Vector Multiplication\0" as *const u8
12411 | |                     as *const libc::c_char,
...     |
12486 | |                 stream_free: None,
12487 | |             };
      | |______________- unnecessary `let` binding
12488 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
12408 ~             
12409 ~             ti_indicator_info {
12410 +                 name: b"mul\0" as *const u8 as *const libc::c_char,
12411 +                 full_name: b"Vector Multiplication\0" as *const u8
12412 +                     as *const libc::c_char,
12413 +                 start: Some(
12414 +                     ti_mul_start
12415 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
12416 +                 ),
12417 +                 indicator: Some(
12418 +                     ti_mul
12419 +                         as unsafe extern "C" fn(
12420 +                             libc::c_int,
12421 +                             *const *const libc::c_double,
12422 +                             *const libc::c_double,
12423 +                             *const *mut libc::c_double,
12424 +                         ) -> libc::c_int,
12425 +                 ),
12426 +                 indicator_ref: None,
12427 +                 type_0: 4 as libc::c_int,
12428 +                 inputs: 2 as libc::c_int,
12429 +                 options: 0 as libc::c_int,
12430 +                 outputs: 1 as libc::c_int,
12431 +                 input_names: [
12432 +                     b"real\0" as *const u8 as *const libc::c_char,
12433 +                     b"real\0" as *const u8 as *const libc::c_char,
12434 +                     0 as *const libc::c_char,
12435 +                     0 as *const libc::c_char,
12436 +                     0 as *const libc::c_char,
12437 +                     0 as *const libc::c_char,
12438 +                     0 as *const libc::c_char,
12439 +                     0 as *const libc::c_char,
12440 +                     0 as *const libc::c_char,
12441 +                     0 as *const libc::c_char,
12442 +                     0 as *const libc::c_char,
12443 +                     0 as *const libc::c_char,
12444 +                     0 as *const libc::c_char,
12445 +                     0 as *const libc::c_char,
12446 +                     0 as *const libc::c_char,
12447 +                     0 as *const libc::c_char,
12448 +                 ],
12449 +                 option_names: [
12450 +                     b"\0" as *const u8 as *const libc::c_char,
12451 +                     0 as *const libc::c_char,
12452 +                     0 as *const libc::c_char,
12453 +                     0 as *const libc::c_char,
12454 +                     0 as *const libc::c_char,
12455 +                     0 as *const libc::c_char,
12456 +                     0 as *const libc::c_char,
12457 +                     0 as *const libc::c_char,
12458 +                     0 as *const libc::c_char,
12459 +                     0 as *const libc::c_char,
12460 +                     0 as *const libc::c_char,
12461 +                     0 as *const libc::c_char,
12462 +                     0 as *const libc::c_char,
12463 +                     0 as *const libc::c_char,
12464 +                     0 as *const libc::c_char,
12465 +                     0 as *const libc::c_char,
12466 +                 ],
12467 +                 output_names: [
12468 +                     b"mul\0" as *const u8 as *const libc::c_char,
12469 +                     0 as *const libc::c_char,
12470 +                     0 as *const libc::c_char,
12471 +                     0 as *const libc::c_char,
12472 +                     0 as *const libc::c_char,
12473 +                     0 as *const libc::c_char,
12474 +                     0 as *const libc::c_char,
12475 +                     0 as *const libc::c_char,
12476 +                     0 as *const libc::c_char,
12477 +                     0 as *const libc::c_char,
12478 +                     0 as *const libc::c_char,
12479 +                     0 as *const libc::c_char,
12480 +                     0 as *const libc::c_char,
12481 +                     0 as *const libc::c_char,
12482 +                     0 as *const libc::c_char,
12483 +                     0 as *const libc::c_char,
12484 +                 ],
12485 +                 stream_new: None,
12486 +                 stream_run: None,
12487 +                 stream_free: None,
12488 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:12571:13
      |
12491 | /             let mut init = ti_indicator_info {
12492 | |                 name: b"natr\0" as *const u8 as *const libc::c_char,
12493 | |                 full_name: b"Normalized Average True Range\0" as *const u8
12494 | |                     as *const libc::c_char,
...     |
12569 | |                 stream_free: None,
12570 | |             };
      | |______________- unnecessary `let` binding
12571 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
12491 ~             
12492 ~             ti_indicator_info {
12493 +                 name: b"natr\0" as *const u8 as *const libc::c_char,
12494 +                 full_name: b"Normalized Average True Range\0" as *const u8
12495 +                     as *const libc::c_char,
12496 +                 start: Some(
12497 +                     ti_natr_start
12498 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
12499 +                 ),
12500 +                 indicator: Some(
12501 +                     ti_natr
12502 +                         as unsafe extern "C" fn(
12503 +                             libc::c_int,
12504 +                             *const *const libc::c_double,
12505 +                             *const libc::c_double,
12506 +                             *const *mut libc::c_double,
12507 +                         ) -> libc::c_int,
12508 +                 ),
12509 +                 indicator_ref: None,
12510 +                 type_0: 2 as libc::c_int,
12511 +                 inputs: 3 as libc::c_int,
12512 +                 options: 1 as libc::c_int,
12513 +                 outputs: 1 as libc::c_int,
12514 +                 input_names: [
12515 +                     b"high\0" as *const u8 as *const libc::c_char,
12516 +                     b"low\0" as *const u8 as *const libc::c_char,
12517 +                     b"close\0" as *const u8 as *const libc::c_char,
12518 +                     0 as *const libc::c_char,
12519 +                     0 as *const libc::c_char,
12520 +                     0 as *const libc::c_char,
12521 +                     0 as *const libc::c_char,
12522 +                     0 as *const libc::c_char,
12523 +                     0 as *const libc::c_char,
12524 +                     0 as *const libc::c_char,
12525 +                     0 as *const libc::c_char,
12526 +                     0 as *const libc::c_char,
12527 +                     0 as *const libc::c_char,
12528 +                     0 as *const libc::c_char,
12529 +                     0 as *const libc::c_char,
12530 +                     0 as *const libc::c_char,
12531 +                 ],
12532 +                 option_names: [
12533 +                     b"period\0" as *const u8 as *const libc::c_char,
12534 +                     0 as *const libc::c_char,
12535 +                     0 as *const libc::c_char,
12536 +                     0 as *const libc::c_char,
12537 +                     0 as *const libc::c_char,
12538 +                     0 as *const libc::c_char,
12539 +                     0 as *const libc::c_char,
12540 +                     0 as *const libc::c_char,
12541 +                     0 as *const libc::c_char,
12542 +                     0 as *const libc::c_char,
12543 +                     0 as *const libc::c_char,
12544 +                     0 as *const libc::c_char,
12545 +                     0 as *const libc::c_char,
12546 +                     0 as *const libc::c_char,
12547 +                     0 as *const libc::c_char,
12548 +                     0 as *const libc::c_char,
12549 +                 ],
12550 +                 output_names: [
12551 +                     b"natr\0" as *const u8 as *const libc::c_char,
12552 +                     0 as *const libc::c_char,
12553 +                     0 as *const libc::c_char,
12554 +                     0 as *const libc::c_char,
12555 +                     0 as *const libc::c_char,
12556 +                     0 as *const libc::c_char,
12557 +                     0 as *const libc::c_char,
12558 +                     0 as *const libc::c_char,
12559 +                     0 as *const libc::c_char,
12560 +                     0 as *const libc::c_char,
12561 +                     0 as *const libc::c_char,
12562 +                     0 as *const libc::c_char,
12563 +                     0 as *const libc::c_char,
12564 +                     0 as *const libc::c_char,
12565 +                     0 as *const libc::c_char,
12566 +                     0 as *const libc::c_char,
12567 +                 ],
12568 +                 stream_new: None,
12569 +                 stream_run: None,
12570 +                 stream_free: None,
12571 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:12654:13
      |
12574 | /             let mut init = ti_indicator_info {
12575 | |                 name: b"nvi\0" as *const u8 as *const libc::c_char,
12576 | |                 full_name: b"Negative Volume Index\0" as *const u8
12577 | |                     as *const libc::c_char,
...     |
12652 | |                 stream_free: None,
12653 | |             };
      | |______________- unnecessary `let` binding
12654 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
12574 ~             
12575 ~             ti_indicator_info {
12576 +                 name: b"nvi\0" as *const u8 as *const libc::c_char,
12577 +                 full_name: b"Negative Volume Index\0" as *const u8
12578 +                     as *const libc::c_char,
12579 +                 start: Some(
12580 +                     ti_nvi_start
12581 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
12582 +                 ),
12583 +                 indicator: Some(
12584 +                     ti_nvi
12585 +                         as unsafe extern "C" fn(
12586 +                             libc::c_int,
12587 +                             *const *const libc::c_double,
12588 +                             *const libc::c_double,
12589 +                             *const *mut libc::c_double,
12590 +                         ) -> libc::c_int,
12591 +                 ),
12592 +                 indicator_ref: None,
12593 +                 type_0: 2 as libc::c_int,
12594 +                 inputs: 2 as libc::c_int,
12595 +                 options: 0 as libc::c_int,
12596 +                 outputs: 1 as libc::c_int,
12597 +                 input_names: [
12598 +                     b"close\0" as *const u8 as *const libc::c_char,
12599 +                     b"volume\0" as *const u8 as *const libc::c_char,
12600 +                     0 as *const libc::c_char,
12601 +                     0 as *const libc::c_char,
12602 +                     0 as *const libc::c_char,
12603 +                     0 as *const libc::c_char,
12604 +                     0 as *const libc::c_char,
12605 +                     0 as *const libc::c_char,
12606 +                     0 as *const libc::c_char,
12607 +                     0 as *const libc::c_char,
12608 +                     0 as *const libc::c_char,
12609 +                     0 as *const libc::c_char,
12610 +                     0 as *const libc::c_char,
12611 +                     0 as *const libc::c_char,
12612 +                     0 as *const libc::c_char,
12613 +                     0 as *const libc::c_char,
12614 +                 ],
12615 +                 option_names: [
12616 +                     b"\0" as *const u8 as *const libc::c_char,
12617 +                     0 as *const libc::c_char,
12618 +                     0 as *const libc::c_char,
12619 +                     0 as *const libc::c_char,
12620 +                     0 as *const libc::c_char,
12621 +                     0 as *const libc::c_char,
12622 +                     0 as *const libc::c_char,
12623 +                     0 as *const libc::c_char,
12624 +                     0 as *const libc::c_char,
12625 +                     0 as *const libc::c_char,
12626 +                     0 as *const libc::c_char,
12627 +                     0 as *const libc::c_char,
12628 +                     0 as *const libc::c_char,
12629 +                     0 as *const libc::c_char,
12630 +                     0 as *const libc::c_char,
12631 +                     0 as *const libc::c_char,
12632 +                 ],
12633 +                 output_names: [
12634 +                     b"nvi\0" as *const u8 as *const libc::c_char,
12635 +                     0 as *const libc::c_char,
12636 +                     0 as *const libc::c_char,
12637 +                     0 as *const libc::c_char,
12638 +                     0 as *const libc::c_char,
12639 +                     0 as *const libc::c_char,
12640 +                     0 as *const libc::c_char,
12641 +                     0 as *const libc::c_char,
12642 +                     0 as *const libc::c_char,
12643 +                     0 as *const libc::c_char,
12644 +                     0 as *const libc::c_char,
12645 +                     0 as *const libc::c_char,
12646 +                     0 as *const libc::c_char,
12647 +                     0 as *const libc::c_char,
12648 +                     0 as *const libc::c_char,
12649 +                     0 as *const libc::c_char,
12650 +                 ],
12651 +                 stream_new: None,
12652 +                 stream_run: None,
12653 +                 stream_free: None,
12654 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:12736:13
      |
12657 | /             let mut init = ti_indicator_info {
12658 | |                 name: b"obv\0" as *const u8 as *const libc::c_char,
12659 | |                 full_name: b"On Balance Volume\0" as *const u8 as *const libc::c_char,
12660 | |                 start: Some(
...     |
12734 | |                 stream_free: None,
12735 | |             };
      | |______________- unnecessary `let` binding
12736 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
12657 ~             
12658 ~             ti_indicator_info {
12659 +                 name: b"obv\0" as *const u8 as *const libc::c_char,
12660 +                 full_name: b"On Balance Volume\0" as *const u8 as *const libc::c_char,
12661 +                 start: Some(
12662 +                     ti_obv_start
12663 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
12664 +                 ),
12665 +                 indicator: Some(
12666 +                     ti_obv
12667 +                         as unsafe extern "C" fn(
12668 +                             libc::c_int,
12669 +                             *const *const libc::c_double,
12670 +                             *const libc::c_double,
12671 +                             *const *mut libc::c_double,
12672 +                         ) -> libc::c_int,
12673 +                 ),
12674 +                 indicator_ref: None,
12675 +                 type_0: 2 as libc::c_int,
12676 +                 inputs: 2 as libc::c_int,
12677 +                 options: 0 as libc::c_int,
12678 +                 outputs: 1 as libc::c_int,
12679 +                 input_names: [
12680 +                     b"close\0" as *const u8 as *const libc::c_char,
12681 +                     b"volume\0" as *const u8 as *const libc::c_char,
12682 +                     0 as *const libc::c_char,
12683 +                     0 as *const libc::c_char,
12684 +                     0 as *const libc::c_char,
12685 +                     0 as *const libc::c_char,
12686 +                     0 as *const libc::c_char,
12687 +                     0 as *const libc::c_char,
12688 +                     0 as *const libc::c_char,
12689 +                     0 as *const libc::c_char,
12690 +                     0 as *const libc::c_char,
12691 +                     0 as *const libc::c_char,
12692 +                     0 as *const libc::c_char,
12693 +                     0 as *const libc::c_char,
12694 +                     0 as *const libc::c_char,
12695 +                     0 as *const libc::c_char,
12696 +                 ],
12697 +                 option_names: [
12698 +                     b"\0" as *const u8 as *const libc::c_char,
12699 +                     0 as *const libc::c_char,
12700 +                     0 as *const libc::c_char,
12701 +                     0 as *const libc::c_char,
12702 +                     0 as *const libc::c_char,
12703 +                     0 as *const libc::c_char,
12704 +                     0 as *const libc::c_char,
12705 +                     0 as *const libc::c_char,
12706 +                     0 as *const libc::c_char,
12707 +                     0 as *const libc::c_char,
12708 +                     0 as *const libc::c_char,
12709 +                     0 as *const libc::c_char,
12710 +                     0 as *const libc::c_char,
12711 +                     0 as *const libc::c_char,
12712 +                     0 as *const libc::c_char,
12713 +                     0 as *const libc::c_char,
12714 +                 ],
12715 +                 output_names: [
12716 +                     b"obv\0" as *const u8 as *const libc::c_char,
12717 +                     0 as *const libc::c_char,
12718 +                     0 as *const libc::c_char,
12719 +                     0 as *const libc::c_char,
12720 +                     0 as *const libc::c_char,
12721 +                     0 as *const libc::c_char,
12722 +                     0 as *const libc::c_char,
12723 +                     0 as *const libc::c_char,
12724 +                     0 as *const libc::c_char,
12725 +                     0 as *const libc::c_char,
12726 +                     0 as *const libc::c_char,
12727 +                     0 as *const libc::c_char,
12728 +                     0 as *const libc::c_char,
12729 +                     0 as *const libc::c_char,
12730 +                     0 as *const libc::c_char,
12731 +                     0 as *const libc::c_char,
12732 +                 ],
12733 +                 stream_new: None,
12734 +                 stream_run: None,
12735 +                 stream_free: None,
12736 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:12819:13
      |
12739 | /             let mut init = ti_indicator_info {
12740 | |                 name: b"ppo\0" as *const u8 as *const libc::c_char,
12741 | |                 full_name: b"Percentage Price Oscillator\0" as *const u8
12742 | |                     as *const libc::c_char,
...     |
12817 | |                 stream_free: None,
12818 | |             };
      | |______________- unnecessary `let` binding
12819 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
12739 ~             
12740 ~             ti_indicator_info {
12741 +                 name: b"ppo\0" as *const u8 as *const libc::c_char,
12742 +                 full_name: b"Percentage Price Oscillator\0" as *const u8
12743 +                     as *const libc::c_char,
12744 +                 start: Some(
12745 +                     ti_ppo_start
12746 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
12747 +                 ),
12748 +                 indicator: Some(
12749 +                     ti_ppo
12750 +                         as unsafe extern "C" fn(
12751 +                             libc::c_int,
12752 +                             *const *const libc::c_double,
12753 +                             *const libc::c_double,
12754 +                             *const *mut libc::c_double,
12755 +                         ) -> libc::c_int,
12756 +                 ),
12757 +                 indicator_ref: None,
12758 +                 type_0: 2 as libc::c_int,
12759 +                 inputs: 1 as libc::c_int,
12760 +                 options: 2 as libc::c_int,
12761 +                 outputs: 1 as libc::c_int,
12762 +                 input_names: [
12763 +                     b"real\0" as *const u8 as *const libc::c_char,
12764 +                     0 as *const libc::c_char,
12765 +                     0 as *const libc::c_char,
12766 +                     0 as *const libc::c_char,
12767 +                     0 as *const libc::c_char,
12768 +                     0 as *const libc::c_char,
12769 +                     0 as *const libc::c_char,
12770 +                     0 as *const libc::c_char,
12771 +                     0 as *const libc::c_char,
12772 +                     0 as *const libc::c_char,
12773 +                     0 as *const libc::c_char,
12774 +                     0 as *const libc::c_char,
12775 +                     0 as *const libc::c_char,
12776 +                     0 as *const libc::c_char,
12777 +                     0 as *const libc::c_char,
12778 +                     0 as *const libc::c_char,
12779 +                 ],
12780 +                 option_names: [
12781 +                     b"short_period\0" as *const u8 as *const libc::c_char,
12782 +                     b"long_period\0" as *const u8 as *const libc::c_char,
12783 +                     0 as *const libc::c_char,
12784 +                     0 as *const libc::c_char,
12785 +                     0 as *const libc::c_char,
12786 +                     0 as *const libc::c_char,
12787 +                     0 as *const libc::c_char,
12788 +                     0 as *const libc::c_char,
12789 +                     0 as *const libc::c_char,
12790 +                     0 as *const libc::c_char,
12791 +                     0 as *const libc::c_char,
12792 +                     0 as *const libc::c_char,
12793 +                     0 as *const libc::c_char,
12794 +                     0 as *const libc::c_char,
12795 +                     0 as *const libc::c_char,
12796 +                     0 as *const libc::c_char,
12797 +                 ],
12798 +                 output_names: [
12799 +                     b"ppo\0" as *const u8 as *const libc::c_char,
12800 +                     0 as *const libc::c_char,
12801 +                     0 as *const libc::c_char,
12802 +                     0 as *const libc::c_char,
12803 +                     0 as *const libc::c_char,
12804 +                     0 as *const libc::c_char,
12805 +                     0 as *const libc::c_char,
12806 +                     0 as *const libc::c_char,
12807 +                     0 as *const libc::c_char,
12808 +                     0 as *const libc::c_char,
12809 +                     0 as *const libc::c_char,
12810 +                     0 as *const libc::c_char,
12811 +                     0 as *const libc::c_char,
12812 +                     0 as *const libc::c_char,
12813 +                     0 as *const libc::c_char,
12814 +                     0 as *const libc::c_char,
12815 +                 ],
12816 +                 stream_new: None,
12817 +                 stream_run: None,
12818 +                 stream_free: None,
12819 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:12901:13
      |
12822 | /             let mut init = ti_indicator_info {
12823 | |                 name: b"psar\0" as *const u8 as *const libc::c_char,
12824 | |                 full_name: b"Parabolic SAR\0" as *const u8 as *const libc::c_char,
12825 | |                 start: Some(
...     |
12899 | |                 stream_free: None,
12900 | |             };
      | |______________- unnecessary `let` binding
12901 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
12822 ~             
12823 ~             ti_indicator_info {
12824 +                 name: b"psar\0" as *const u8 as *const libc::c_char,
12825 +                 full_name: b"Parabolic SAR\0" as *const u8 as *const libc::c_char,
12826 +                 start: Some(
12827 +                     ti_psar_start
12828 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
12829 +                 ),
12830 +                 indicator: Some(
12831 +                     ti_psar
12832 +                         as unsafe extern "C" fn(
12833 +                             libc::c_int,
12834 +                             *const *const libc::c_double,
12835 +                             *const libc::c_double,
12836 +                             *const *mut libc::c_double,
12837 +                         ) -> libc::c_int,
12838 +                 ),
12839 +                 indicator_ref: None,
12840 +                 type_0: 1 as libc::c_int,
12841 +                 inputs: 2 as libc::c_int,
12842 +                 options: 2 as libc::c_int,
12843 +                 outputs: 1 as libc::c_int,
12844 +                 input_names: [
12845 +                     b"high\0" as *const u8 as *const libc::c_char,
12846 +                     b"low\0" as *const u8 as *const libc::c_char,
12847 +                     0 as *const libc::c_char,
12848 +                     0 as *const libc::c_char,
12849 +                     0 as *const libc::c_char,
12850 +                     0 as *const libc::c_char,
12851 +                     0 as *const libc::c_char,
12852 +                     0 as *const libc::c_char,
12853 +                     0 as *const libc::c_char,
12854 +                     0 as *const libc::c_char,
12855 +                     0 as *const libc::c_char,
12856 +                     0 as *const libc::c_char,
12857 +                     0 as *const libc::c_char,
12858 +                     0 as *const libc::c_char,
12859 +                     0 as *const libc::c_char,
12860 +                     0 as *const libc::c_char,
12861 +                 ],
12862 +                 option_names: [
12863 +                     b"acceleration_factor_step\0" as *const u8 as *const libc::c_char,
12864 +                     b"acceleration_factor_maximum\0" as *const u8 as *const libc::c_char,
12865 +                     0 as *const libc::c_char,
12866 +                     0 as *const libc::c_char,
12867 +                     0 as *const libc::c_char,
12868 +                     0 as *const libc::c_char,
12869 +                     0 as *const libc::c_char,
12870 +                     0 as *const libc::c_char,
12871 +                     0 as *const libc::c_char,
12872 +                     0 as *const libc::c_char,
12873 +                     0 as *const libc::c_char,
12874 +                     0 as *const libc::c_char,
12875 +                     0 as *const libc::c_char,
12876 +                     0 as *const libc::c_char,
12877 +                     0 as *const libc::c_char,
12878 +                     0 as *const libc::c_char,
12879 +                 ],
12880 +                 output_names: [
12881 +                     b"psar\0" as *const u8 as *const libc::c_char,
12882 +                     0 as *const libc::c_char,
12883 +                     0 as *const libc::c_char,
12884 +                     0 as *const libc::c_char,
12885 +                     0 as *const libc::c_char,
12886 +                     0 as *const libc::c_char,
12887 +                     0 as *const libc::c_char,
12888 +                     0 as *const libc::c_char,
12889 +                     0 as *const libc::c_char,
12890 +                     0 as *const libc::c_char,
12891 +                     0 as *const libc::c_char,
12892 +                     0 as *const libc::c_char,
12893 +                     0 as *const libc::c_char,
12894 +                     0 as *const libc::c_char,
12895 +                     0 as *const libc::c_char,
12896 +                     0 as *const libc::c_char,
12897 +                 ],
12898 +                 stream_new: None,
12899 +                 stream_run: None,
12900 +                 stream_free: None,
12901 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:12984:13
      |
12904 | /             let mut init = ti_indicator_info {
12905 | |                 name: b"pvi\0" as *const u8 as *const libc::c_char,
12906 | |                 full_name: b"Positive Volume Index\0" as *const u8
12907 | |                     as *const libc::c_char,
...     |
12982 | |                 stream_free: None,
12983 | |             };
      | |______________- unnecessary `let` binding
12984 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
12904 ~             
12905 ~             ti_indicator_info {
12906 +                 name: b"pvi\0" as *const u8 as *const libc::c_char,
12907 +                 full_name: b"Positive Volume Index\0" as *const u8
12908 +                     as *const libc::c_char,
12909 +                 start: Some(
12910 +                     ti_pvi_start
12911 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
12912 +                 ),
12913 +                 indicator: Some(
12914 +                     ti_pvi
12915 +                         as unsafe extern "C" fn(
12916 +                             libc::c_int,
12917 +                             *const *const libc::c_double,
12918 +                             *const libc::c_double,
12919 +                             *const *mut libc::c_double,
12920 +                         ) -> libc::c_int,
12921 +                 ),
12922 +                 indicator_ref: None,
12923 +                 type_0: 2 as libc::c_int,
12924 +                 inputs: 2 as libc::c_int,
12925 +                 options: 0 as libc::c_int,
12926 +                 outputs: 1 as libc::c_int,
12927 +                 input_names: [
12928 +                     b"close\0" as *const u8 as *const libc::c_char,
12929 +                     b"volume\0" as *const u8 as *const libc::c_char,
12930 +                     0 as *const libc::c_char,
12931 +                     0 as *const libc::c_char,
12932 +                     0 as *const libc::c_char,
12933 +                     0 as *const libc::c_char,
12934 +                     0 as *const libc::c_char,
12935 +                     0 as *const libc::c_char,
12936 +                     0 as *const libc::c_char,
12937 +                     0 as *const libc::c_char,
12938 +                     0 as *const libc::c_char,
12939 +                     0 as *const libc::c_char,
12940 +                     0 as *const libc::c_char,
12941 +                     0 as *const libc::c_char,
12942 +                     0 as *const libc::c_char,
12943 +                     0 as *const libc::c_char,
12944 +                 ],
12945 +                 option_names: [
12946 +                     b"\0" as *const u8 as *const libc::c_char,
12947 +                     0 as *const libc::c_char,
12948 +                     0 as *const libc::c_char,
12949 +                     0 as *const libc::c_char,
12950 +                     0 as *const libc::c_char,
12951 +                     0 as *const libc::c_char,
12952 +                     0 as *const libc::c_char,
12953 +                     0 as *const libc::c_char,
12954 +                     0 as *const libc::c_char,
12955 +                     0 as *const libc::c_char,
12956 +                     0 as *const libc::c_char,
12957 +                     0 as *const libc::c_char,
12958 +                     0 as *const libc::c_char,
12959 +                     0 as *const libc::c_char,
12960 +                     0 as *const libc::c_char,
12961 +                     0 as *const libc::c_char,
12962 +                 ],
12963 +                 output_names: [
12964 +                     b"pvi\0" as *const u8 as *const libc::c_char,
12965 +                     0 as *const libc::c_char,
12966 +                     0 as *const libc::c_char,
12967 +                     0 as *const libc::c_char,
12968 +                     0 as *const libc::c_char,
12969 +                     0 as *const libc::c_char,
12970 +                     0 as *const libc::c_char,
12971 +                     0 as *const libc::c_char,
12972 +                     0 as *const libc::c_char,
12973 +                     0 as *const libc::c_char,
12974 +                     0 as *const libc::c_char,
12975 +                     0 as *const libc::c_char,
12976 +                     0 as *const libc::c_char,
12977 +                     0 as *const libc::c_char,
12978 +                     0 as *const libc::c_char,
12979 +                     0 as *const libc::c_char,
12980 +                 ],
12981 +                 stream_new: None,
12982 +                 stream_run: None,
12983 +                 stream_free: None,
12984 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:13066:13
      |
12987 | /             let mut init = ti_indicator_info {
12988 | |                 name: b"qstick\0" as *const u8 as *const libc::c_char,
12989 | |                 full_name: b"Qstick\0" as *const u8 as *const libc::c_char,
12990 | |                 start: Some(
...     |
13064 | |                 stream_free: None,
13065 | |             };
      | |______________- unnecessary `let` binding
13066 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
12987 ~             
12988 ~             ti_indicator_info {
12989 +                 name: b"qstick\0" as *const u8 as *const libc::c_char,
12990 +                 full_name: b"Qstick\0" as *const u8 as *const libc::c_char,
12991 +                 start: Some(
12992 +                     ti_qstick_start
12993 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
12994 +                 ),
12995 +                 indicator: Some(
12996 +                     ti_qstick
12997 +                         as unsafe extern "C" fn(
12998 +                             libc::c_int,
12999 +                             *const *const libc::c_double,
13000 +                             *const libc::c_double,
13001 +                             *const *mut libc::c_double,
13002 +                         ) -> libc::c_int,
13003 +                 ),
13004 +                 indicator_ref: None,
13005 +                 type_0: 2 as libc::c_int,
13006 +                 inputs: 2 as libc::c_int,
13007 +                 options: 1 as libc::c_int,
13008 +                 outputs: 1 as libc::c_int,
13009 +                 input_names: [
13010 +                     b"open\0" as *const u8 as *const libc::c_char,
13011 +                     b"close\0" as *const u8 as *const libc::c_char,
13012 +                     0 as *const libc::c_char,
13013 +                     0 as *const libc::c_char,
13014 +                     0 as *const libc::c_char,
13015 +                     0 as *const libc::c_char,
13016 +                     0 as *const libc::c_char,
13017 +                     0 as *const libc::c_char,
13018 +                     0 as *const libc::c_char,
13019 +                     0 as *const libc::c_char,
13020 +                     0 as *const libc::c_char,
13021 +                     0 as *const libc::c_char,
13022 +                     0 as *const libc::c_char,
13023 +                     0 as *const libc::c_char,
13024 +                     0 as *const libc::c_char,
13025 +                     0 as *const libc::c_char,
13026 +                 ],
13027 +                 option_names: [
13028 +                     b"period\0" as *const u8 as *const libc::c_char,
13029 +                     0 as *const libc::c_char,
13030 +                     0 as *const libc::c_char,
13031 +                     0 as *const libc::c_char,
13032 +                     0 as *const libc::c_char,
13033 +                     0 as *const libc::c_char,
13034 +                     0 as *const libc::c_char,
13035 +                     0 as *const libc::c_char,
13036 +                     0 as *const libc::c_char,
13037 +                     0 as *const libc::c_char,
13038 +                     0 as *const libc::c_char,
13039 +                     0 as *const libc::c_char,
13040 +                     0 as *const libc::c_char,
13041 +                     0 as *const libc::c_char,
13042 +                     0 as *const libc::c_char,
13043 +                     0 as *const libc::c_char,
13044 +                 ],
13045 +                 output_names: [
13046 +                     b"qstick\0" as *const u8 as *const libc::c_char,
13047 +                     0 as *const libc::c_char,
13048 +                     0 as *const libc::c_char,
13049 +                     0 as *const libc::c_char,
13050 +                     0 as *const libc::c_char,
13051 +                     0 as *const libc::c_char,
13052 +                     0 as *const libc::c_char,
13053 +                     0 as *const libc::c_char,
13054 +                     0 as *const libc::c_char,
13055 +                     0 as *const libc::c_char,
13056 +                     0 as *const libc::c_char,
13057 +                     0 as *const libc::c_char,
13058 +                     0 as *const libc::c_char,
13059 +                     0 as *const libc::c_char,
13060 +                     0 as *const libc::c_char,
13061 +                     0 as *const libc::c_char,
13062 +                 ],
13063 +                 stream_new: None,
13064 +                 stream_run: None,
13065 +                 stream_free: None,
13066 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:13148:13
      |
13069 | /             let mut init = ti_indicator_info {
13070 | |                 name: b"roc\0" as *const u8 as *const libc::c_char,
13071 | |                 full_name: b"Rate of Change\0" as *const u8 as *const libc::c_char,
13072 | |                 start: Some(
...     |
13146 | |                 stream_free: None,
13147 | |             };
      | |______________- unnecessary `let` binding
13148 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
13069 ~             
13070 ~             ti_indicator_info {
13071 +                 name: b"roc\0" as *const u8 as *const libc::c_char,
13072 +                 full_name: b"Rate of Change\0" as *const u8 as *const libc::c_char,
13073 +                 start: Some(
13074 +                     ti_roc_start
13075 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
13076 +                 ),
13077 +                 indicator: Some(
13078 +                     ti_roc
13079 +                         as unsafe extern "C" fn(
13080 +                             libc::c_int,
13081 +                             *const *const libc::c_double,
13082 +                             *const libc::c_double,
13083 +                             *const *mut libc::c_double,
13084 +                         ) -> libc::c_int,
13085 +                 ),
13086 +                 indicator_ref: None,
13087 +                 type_0: 2 as libc::c_int,
13088 +                 inputs: 1 as libc::c_int,
13089 +                 options: 1 as libc::c_int,
13090 +                 outputs: 1 as libc::c_int,
13091 +                 input_names: [
13092 +                     b"real\0" as *const u8 as *const libc::c_char,
13093 +                     0 as *const libc::c_char,
13094 +                     0 as *const libc::c_char,
13095 +                     0 as *const libc::c_char,
13096 +                     0 as *const libc::c_char,
13097 +                     0 as *const libc::c_char,
13098 +                     0 as *const libc::c_char,
13099 +                     0 as *const libc::c_char,
13100 +                     0 as *const libc::c_char,
13101 +                     0 as *const libc::c_char,
13102 +                     0 as *const libc::c_char,
13103 +                     0 as *const libc::c_char,
13104 +                     0 as *const libc::c_char,
13105 +                     0 as *const libc::c_char,
13106 +                     0 as *const libc::c_char,
13107 +                     0 as *const libc::c_char,
13108 +                 ],
13109 +                 option_names: [
13110 +                     b"period\0" as *const u8 as *const libc::c_char,
13111 +                     0 as *const libc::c_char,
13112 +                     0 as *const libc::c_char,
13113 +                     0 as *const libc::c_char,
13114 +                     0 as *const libc::c_char,
13115 +                     0 as *const libc::c_char,
13116 +                     0 as *const libc::c_char,
13117 +                     0 as *const libc::c_char,
13118 +                     0 as *const libc::c_char,
13119 +                     0 as *const libc::c_char,
13120 +                     0 as *const libc::c_char,
13121 +                     0 as *const libc::c_char,
13122 +                     0 as *const libc::c_char,
13123 +                     0 as *const libc::c_char,
13124 +                     0 as *const libc::c_char,
13125 +                     0 as *const libc::c_char,
13126 +                 ],
13127 +                 output_names: [
13128 +                     b"roc\0" as *const u8 as *const libc::c_char,
13129 +                     0 as *const libc::c_char,
13130 +                     0 as *const libc::c_char,
13131 +                     0 as *const libc::c_char,
13132 +                     0 as *const libc::c_char,
13133 +                     0 as *const libc::c_char,
13134 +                     0 as *const libc::c_char,
13135 +                     0 as *const libc::c_char,
13136 +                     0 as *const libc::c_char,
13137 +                     0 as *const libc::c_char,
13138 +                     0 as *const libc::c_char,
13139 +                     0 as *const libc::c_char,
13140 +                     0 as *const libc::c_char,
13141 +                     0 as *const libc::c_char,
13142 +                     0 as *const libc::c_char,
13143 +                     0 as *const libc::c_char,
13144 +                 ],
13145 +                 stream_new: None,
13146 +                 stream_run: None,
13147 +                 stream_free: None,
13148 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:13230:13
      |
13151 | /             let mut init = ti_indicator_info {
13152 | |                 name: b"rocr\0" as *const u8 as *const libc::c_char,
13153 | |                 full_name: b"Rate of Change Ratio\0" as *const u8 as *const libc::c_char,
13154 | |                 start: Some(
...     |
13228 | |                 stream_free: None,
13229 | |             };
      | |______________- unnecessary `let` binding
13230 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
13151 ~             
13152 ~             ti_indicator_info {
13153 +                 name: b"rocr\0" as *const u8 as *const libc::c_char,
13154 +                 full_name: b"Rate of Change Ratio\0" as *const u8 as *const libc::c_char,
13155 +                 start: Some(
13156 +                     ti_rocr_start
13157 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
13158 +                 ),
13159 +                 indicator: Some(
13160 +                     ti_rocr
13161 +                         as unsafe extern "C" fn(
13162 +                             libc::c_int,
13163 +                             *const *const libc::c_double,
13164 +                             *const libc::c_double,
13165 +                             *const *mut libc::c_double,
13166 +                         ) -> libc::c_int,
13167 +                 ),
13168 +                 indicator_ref: None,
13169 +                 type_0: 2 as libc::c_int,
13170 +                 inputs: 1 as libc::c_int,
13171 +                 options: 1 as libc::c_int,
13172 +                 outputs: 1 as libc::c_int,
13173 +                 input_names: [
13174 +                     b"real\0" as *const u8 as *const libc::c_char,
13175 +                     0 as *const libc::c_char,
13176 +                     0 as *const libc::c_char,
13177 +                     0 as *const libc::c_char,
13178 +                     0 as *const libc::c_char,
13179 +                     0 as *const libc::c_char,
13180 +                     0 as *const libc::c_char,
13181 +                     0 as *const libc::c_char,
13182 +                     0 as *const libc::c_char,
13183 +                     0 as *const libc::c_char,
13184 +                     0 as *const libc::c_char,
13185 +                     0 as *const libc::c_char,
13186 +                     0 as *const libc::c_char,
13187 +                     0 as *const libc::c_char,
13188 +                     0 as *const libc::c_char,
13189 +                     0 as *const libc::c_char,
13190 +                 ],
13191 +                 option_names: [
13192 +                     b"period\0" as *const u8 as *const libc::c_char,
13193 +                     0 as *const libc::c_char,
13194 +                     0 as *const libc::c_char,
13195 +                     0 as *const libc::c_char,
13196 +                     0 as *const libc::c_char,
13197 +                     0 as *const libc::c_char,
13198 +                     0 as *const libc::c_char,
13199 +                     0 as *const libc::c_char,
13200 +                     0 as *const libc::c_char,
13201 +                     0 as *const libc::c_char,
13202 +                     0 as *const libc::c_char,
13203 +                     0 as *const libc::c_char,
13204 +                     0 as *const libc::c_char,
13205 +                     0 as *const libc::c_char,
13206 +                     0 as *const libc::c_char,
13207 +                     0 as *const libc::c_char,
13208 +                 ],
13209 +                 output_names: [
13210 +                     b"rocr\0" as *const u8 as *const libc::c_char,
13211 +                     0 as *const libc::c_char,
13212 +                     0 as *const libc::c_char,
13213 +                     0 as *const libc::c_char,
13214 +                     0 as *const libc::c_char,
13215 +                     0 as *const libc::c_char,
13216 +                     0 as *const libc::c_char,
13217 +                     0 as *const libc::c_char,
13218 +                     0 as *const libc::c_char,
13219 +                     0 as *const libc::c_char,
13220 +                     0 as *const libc::c_char,
13221 +                     0 as *const libc::c_char,
13222 +                     0 as *const libc::c_char,
13223 +                     0 as *const libc::c_char,
13224 +                     0 as *const libc::c_char,
13225 +                     0 as *const libc::c_char,
13226 +                 ],
13227 +                 stream_new: None,
13228 +                 stream_run: None,
13229 +                 stream_free: None,
13230 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:13312:13
      |
13233 | /             let mut init = ti_indicator_info {
13234 | |                 name: b"round\0" as *const u8 as *const libc::c_char,
13235 | |                 full_name: b"Vector Round\0" as *const u8 as *const libc::c_char,
13236 | |                 start: Some(
...     |
13310 | |                 stream_free: None,
13311 | |             };
      | |______________- unnecessary `let` binding
13312 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
13233 ~             
13234 ~             ti_indicator_info {
13235 +                 name: b"round\0" as *const u8 as *const libc::c_char,
13236 +                 full_name: b"Vector Round\0" as *const u8 as *const libc::c_char,
13237 +                 start: Some(
13238 +                     ti_round_start
13239 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
13240 +                 ),
13241 +                 indicator: Some(
13242 +                     ti_round
13243 +                         as unsafe extern "C" fn(
13244 +                             libc::c_int,
13245 +                             *const *const libc::c_double,
13246 +                             *const libc::c_double,
13247 +                             *const *mut libc::c_double,
13248 +                         ) -> libc::c_int,
13249 +                 ),
13250 +                 indicator_ref: None,
13251 +                 type_0: 4 as libc::c_int,
13252 +                 inputs: 1 as libc::c_int,
13253 +                 options: 0 as libc::c_int,
13254 +                 outputs: 1 as libc::c_int,
13255 +                 input_names: [
13256 +                     b"real\0" as *const u8 as *const libc::c_char,
13257 +                     0 as *const libc::c_char,
13258 +                     0 as *const libc::c_char,
13259 +                     0 as *const libc::c_char,
13260 +                     0 as *const libc::c_char,
13261 +                     0 as *const libc::c_char,
13262 +                     0 as *const libc::c_char,
13263 +                     0 as *const libc::c_char,
13264 +                     0 as *const libc::c_char,
13265 +                     0 as *const libc::c_char,
13266 +                     0 as *const libc::c_char,
13267 +                     0 as *const libc::c_char,
13268 +                     0 as *const libc::c_char,
13269 +                     0 as *const libc::c_char,
13270 +                     0 as *const libc::c_char,
13271 +                     0 as *const libc::c_char,
13272 +                 ],
13273 +                 option_names: [
13274 +                     b"\0" as *const u8 as *const libc::c_char,
13275 +                     0 as *const libc::c_char,
13276 +                     0 as *const libc::c_char,
13277 +                     0 as *const libc::c_char,
13278 +                     0 as *const libc::c_char,
13279 +                     0 as *const libc::c_char,
13280 +                     0 as *const libc::c_char,
13281 +                     0 as *const libc::c_char,
13282 +                     0 as *const libc::c_char,
13283 +                     0 as *const libc::c_char,
13284 +                     0 as *const libc::c_char,
13285 +                     0 as *const libc::c_char,
13286 +                     0 as *const libc::c_char,
13287 +                     0 as *const libc::c_char,
13288 +                     0 as *const libc::c_char,
13289 +                     0 as *const libc::c_char,
13290 +                 ],
13291 +                 output_names: [
13292 +                     b"round\0" as *const u8 as *const libc::c_char,
13293 +                     0 as *const libc::c_char,
13294 +                     0 as *const libc::c_char,
13295 +                     0 as *const libc::c_char,
13296 +                     0 as *const libc::c_char,
13297 +                     0 as *const libc::c_char,
13298 +                     0 as *const libc::c_char,
13299 +                     0 as *const libc::c_char,
13300 +                     0 as *const libc::c_char,
13301 +                     0 as *const libc::c_char,
13302 +                     0 as *const libc::c_char,
13303 +                     0 as *const libc::c_char,
13304 +                     0 as *const libc::c_char,
13305 +                     0 as *const libc::c_char,
13306 +                     0 as *const libc::c_char,
13307 +                     0 as *const libc::c_char,
13308 +                 ],
13309 +                 stream_new: None,
13310 +                 stream_run: None,
13311 +                 stream_free: None,
13312 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:13395:13
      |
13315 | /             let mut init = ti_indicator_info {
13316 | |                 name: b"rsi\0" as *const u8 as *const libc::c_char,
13317 | |                 full_name: b"Relative Strength Index\0" as *const u8
13318 | |                     as *const libc::c_char,
...     |
13393 | |                 stream_free: None,
13394 | |             };
      | |______________- unnecessary `let` binding
13395 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
13315 ~             
13316 ~             ti_indicator_info {
13317 +                 name: b"rsi\0" as *const u8 as *const libc::c_char,
13318 +                 full_name: b"Relative Strength Index\0" as *const u8
13319 +                     as *const libc::c_char,
13320 +                 start: Some(
13321 +                     ti_rsi_start
13322 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
13323 +                 ),
13324 +                 indicator: Some(
13325 +                     ti_rsi
13326 +                         as unsafe extern "C" fn(
13327 +                             libc::c_int,
13328 +                             *const *const libc::c_double,
13329 +                             *const libc::c_double,
13330 +                             *const *mut libc::c_double,
13331 +                         ) -> libc::c_int,
13332 +                 ),
13333 +                 indicator_ref: None,
13334 +                 type_0: 2 as libc::c_int,
13335 +                 inputs: 1 as libc::c_int,
13336 +                 options: 1 as libc::c_int,
13337 +                 outputs: 1 as libc::c_int,
13338 +                 input_names: [
13339 +                     b"real\0" as *const u8 as *const libc::c_char,
13340 +                     0 as *const libc::c_char,
13341 +                     0 as *const libc::c_char,
13342 +                     0 as *const libc::c_char,
13343 +                     0 as *const libc::c_char,
13344 +                     0 as *const libc::c_char,
13345 +                     0 as *const libc::c_char,
13346 +                     0 as *const libc::c_char,
13347 +                     0 as *const libc::c_char,
13348 +                     0 as *const libc::c_char,
13349 +                     0 as *const libc::c_char,
13350 +                     0 as *const libc::c_char,
13351 +                     0 as *const libc::c_char,
13352 +                     0 as *const libc::c_char,
13353 +                     0 as *const libc::c_char,
13354 +                     0 as *const libc::c_char,
13355 +                 ],
13356 +                 option_names: [
13357 +                     b"period\0" as *const u8 as *const libc::c_char,
13358 +                     0 as *const libc::c_char,
13359 +                     0 as *const libc::c_char,
13360 +                     0 as *const libc::c_char,
13361 +                     0 as *const libc::c_char,
13362 +                     0 as *const libc::c_char,
13363 +                     0 as *const libc::c_char,
13364 +                     0 as *const libc::c_char,
13365 +                     0 as *const libc::c_char,
13366 +                     0 as *const libc::c_char,
13367 +                     0 as *const libc::c_char,
13368 +                     0 as *const libc::c_char,
13369 +                     0 as *const libc::c_char,
13370 +                     0 as *const libc::c_char,
13371 +                     0 as *const libc::c_char,
13372 +                     0 as *const libc::c_char,
13373 +                 ],
13374 +                 output_names: [
13375 +                     b"rsi\0" as *const u8 as *const libc::c_char,
13376 +                     0 as *const libc::c_char,
13377 +                     0 as *const libc::c_char,
13378 +                     0 as *const libc::c_char,
13379 +                     0 as *const libc::c_char,
13380 +                     0 as *const libc::c_char,
13381 +                     0 as *const libc::c_char,
13382 +                     0 as *const libc::c_char,
13383 +                     0 as *const libc::c_char,
13384 +                     0 as *const libc::c_char,
13385 +                     0 as *const libc::c_char,
13386 +                     0 as *const libc::c_char,
13387 +                     0 as *const libc::c_char,
13388 +                     0 as *const libc::c_char,
13389 +                     0 as *const libc::c_char,
13390 +                     0 as *const libc::c_char,
13391 +                 ],
13392 +                 stream_new: None,
13393 +                 stream_run: None,
13394 +                 stream_free: None,
13395 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:13477:13
      |
13398 | /             let mut init = ti_indicator_info {
13399 | |                 name: b"sin\0" as *const u8 as *const libc::c_char,
13400 | |                 full_name: b"Vector Sine\0" as *const u8 as *const libc::c_char,
13401 | |                 start: Some(
...     |
13475 | |                 stream_free: None,
13476 | |             };
      | |______________- unnecessary `let` binding
13477 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
13398 ~             
13399 ~             ti_indicator_info {
13400 +                 name: b"sin\0" as *const u8 as *const libc::c_char,
13401 +                 full_name: b"Vector Sine\0" as *const u8 as *const libc::c_char,
13402 +                 start: Some(
13403 +                     ti_sin_start
13404 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
13405 +                 ),
13406 +                 indicator: Some(
13407 +                     ti_sin
13408 +                         as unsafe extern "C" fn(
13409 +                             libc::c_int,
13410 +                             *const *const libc::c_double,
13411 +                             *const libc::c_double,
13412 +                             *const *mut libc::c_double,
13413 +                         ) -> libc::c_int,
13414 +                 ),
13415 +                 indicator_ref: None,
13416 +                 type_0: 4 as libc::c_int,
13417 +                 inputs: 1 as libc::c_int,
13418 +                 options: 0 as libc::c_int,
13419 +                 outputs: 1 as libc::c_int,
13420 +                 input_names: [
13421 +                     b"real\0" as *const u8 as *const libc::c_char,
13422 +                     0 as *const libc::c_char,
13423 +                     0 as *const libc::c_char,
13424 +                     0 as *const libc::c_char,
13425 +                     0 as *const libc::c_char,
13426 +                     0 as *const libc::c_char,
13427 +                     0 as *const libc::c_char,
13428 +                     0 as *const libc::c_char,
13429 +                     0 as *const libc::c_char,
13430 +                     0 as *const libc::c_char,
13431 +                     0 as *const libc::c_char,
13432 +                     0 as *const libc::c_char,
13433 +                     0 as *const libc::c_char,
13434 +                     0 as *const libc::c_char,
13435 +                     0 as *const libc::c_char,
13436 +                     0 as *const libc::c_char,
13437 +                 ],
13438 +                 option_names: [
13439 +                     b"\0" as *const u8 as *const libc::c_char,
13440 +                     0 as *const libc::c_char,
13441 +                     0 as *const libc::c_char,
13442 +                     0 as *const libc::c_char,
13443 +                     0 as *const libc::c_char,
13444 +                     0 as *const libc::c_char,
13445 +                     0 as *const libc::c_char,
13446 +                     0 as *const libc::c_char,
13447 +                     0 as *const libc::c_char,
13448 +                     0 as *const libc::c_char,
13449 +                     0 as *const libc::c_char,
13450 +                     0 as *const libc::c_char,
13451 +                     0 as *const libc::c_char,
13452 +                     0 as *const libc::c_char,
13453 +                     0 as *const libc::c_char,
13454 +                     0 as *const libc::c_char,
13455 +                 ],
13456 +                 output_names: [
13457 +                     b"sin\0" as *const u8 as *const libc::c_char,
13458 +                     0 as *const libc::c_char,
13459 +                     0 as *const libc::c_char,
13460 +                     0 as *const libc::c_char,
13461 +                     0 as *const libc::c_char,
13462 +                     0 as *const libc::c_char,
13463 +                     0 as *const libc::c_char,
13464 +                     0 as *const libc::c_char,
13465 +                     0 as *const libc::c_char,
13466 +                     0 as *const libc::c_char,
13467 +                     0 as *const libc::c_char,
13468 +                     0 as *const libc::c_char,
13469 +                     0 as *const libc::c_char,
13470 +                     0 as *const libc::c_char,
13471 +                     0 as *const libc::c_char,
13472 +                     0 as *const libc::c_char,
13473 +                 ],
13474 +                 stream_new: None,
13475 +                 stream_run: None,
13476 +                 stream_free: None,
13477 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:13560:13
      |
13480 | /             let mut init = ti_indicator_info {
13481 | |                 name: b"sinh\0" as *const u8 as *const libc::c_char,
13482 | |                 full_name: b"Vector Hyperbolic Sine\0" as *const u8
13483 | |                     as *const libc::c_char,
...     |
13558 | |                 stream_free: None,
13559 | |             };
      | |______________- unnecessary `let` binding
13560 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
13480 ~             
13481 ~             ti_indicator_info {
13482 +                 name: b"sinh\0" as *const u8 as *const libc::c_char,
13483 +                 full_name: b"Vector Hyperbolic Sine\0" as *const u8
13484 +                     as *const libc::c_char,
13485 +                 start: Some(
13486 +                     ti_sinh_start
13487 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
13488 +                 ),
13489 +                 indicator: Some(
13490 +                     ti_sinh
13491 +                         as unsafe extern "C" fn(
13492 +                             libc::c_int,
13493 +                             *const *const libc::c_double,
13494 +                             *const libc::c_double,
13495 +                             *const *mut libc::c_double,
13496 +                         ) -> libc::c_int,
13497 +                 ),
13498 +                 indicator_ref: None,
13499 +                 type_0: 4 as libc::c_int,
13500 +                 inputs: 1 as libc::c_int,
13501 +                 options: 0 as libc::c_int,
13502 +                 outputs: 1 as libc::c_int,
13503 +                 input_names: [
13504 +                     b"real\0" as *const u8 as *const libc::c_char,
13505 +                     0 as *const libc::c_char,
13506 +                     0 as *const libc::c_char,
13507 +                     0 as *const libc::c_char,
13508 +                     0 as *const libc::c_char,
13509 +                     0 as *const libc::c_char,
13510 +                     0 as *const libc::c_char,
13511 +                     0 as *const libc::c_char,
13512 +                     0 as *const libc::c_char,
13513 +                     0 as *const libc::c_char,
13514 +                     0 as *const libc::c_char,
13515 +                     0 as *const libc::c_char,
13516 +                     0 as *const libc::c_char,
13517 +                     0 as *const libc::c_char,
13518 +                     0 as *const libc::c_char,
13519 +                     0 as *const libc::c_char,
13520 +                 ],
13521 +                 option_names: [
13522 +                     b"\0" as *const u8 as *const libc::c_char,
13523 +                     0 as *const libc::c_char,
13524 +                     0 as *const libc::c_char,
13525 +                     0 as *const libc::c_char,
13526 +                     0 as *const libc::c_char,
13527 +                     0 as *const libc::c_char,
13528 +                     0 as *const libc::c_char,
13529 +                     0 as *const libc::c_char,
13530 +                     0 as *const libc::c_char,
13531 +                     0 as *const libc::c_char,
13532 +                     0 as *const libc::c_char,
13533 +                     0 as *const libc::c_char,
13534 +                     0 as *const libc::c_char,
13535 +                     0 as *const libc::c_char,
13536 +                     0 as *const libc::c_char,
13537 +                     0 as *const libc::c_char,
13538 +                 ],
13539 +                 output_names: [
13540 +                     b"sinh\0" as *const u8 as *const libc::c_char,
13541 +                     0 as *const libc::c_char,
13542 +                     0 as *const libc::c_char,
13543 +                     0 as *const libc::c_char,
13544 +                     0 as *const libc::c_char,
13545 +                     0 as *const libc::c_char,
13546 +                     0 as *const libc::c_char,
13547 +                     0 as *const libc::c_char,
13548 +                     0 as *const libc::c_char,
13549 +                     0 as *const libc::c_char,
13550 +                     0 as *const libc::c_char,
13551 +                     0 as *const libc::c_char,
13552 +                     0 as *const libc::c_char,
13553 +                     0 as *const libc::c_char,
13554 +                     0 as *const libc::c_char,
13555 +                     0 as *const libc::c_char,
13556 +                 ],
13557 +                 stream_new: None,
13558 +                 stream_run: None,
13559 +                 stream_free: None,
13560 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:13659:13
      |
13563 | /             let mut init = ti_indicator_info {
13564 | |                 name: b"sma\0" as *const u8 as *const libc::c_char,
13565 | |                 full_name: b"Simple Moving Average\0" as *const u8
13566 | |                     as *const libc::c_char,
...     |
13657 | |                 ),
13658 | |             };
      | |______________- unnecessary `let` binding
13659 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
13563 ~             
13564 ~             ti_indicator_info {
13565 +                 name: b"sma\0" as *const u8 as *const libc::c_char,
13566 +                 full_name: b"Simple Moving Average\0" as *const u8
13567 +                     as *const libc::c_char,
13568 +                 start: Some(
13569 +                     ti_sma_start
13570 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
13571 +                 ),
13572 +                 indicator: Some(
13573 +                     ti_sma
13574 +                         as unsafe extern "C" fn(
13575 +                             libc::c_int,
13576 +                             *const *const libc::c_double,
13577 +                             *const libc::c_double,
13578 +                             *const *mut libc::c_double,
13579 +                         ) -> libc::c_int,
13580 +                 ),
13581 +                 indicator_ref: None,
13582 +                 type_0: 1 as libc::c_int,
13583 +                 inputs: 1 as libc::c_int,
13584 +                 options: 1 as libc::c_int,
13585 +                 outputs: 1 as libc::c_int,
13586 +                 input_names: [
13587 +                     b"real\0" as *const u8 as *const libc::c_char,
13588 +                     0 as *const libc::c_char,
13589 +                     0 as *const libc::c_char,
13590 +                     0 as *const libc::c_char,
13591 +                     0 as *const libc::c_char,
13592 +                     0 as *const libc::c_char,
13593 +                     0 as *const libc::c_char,
13594 +                     0 as *const libc::c_char,
13595 +                     0 as *const libc::c_char,
13596 +                     0 as *const libc::c_char,
13597 +                     0 as *const libc::c_char,
13598 +                     0 as *const libc::c_char,
13599 +                     0 as *const libc::c_char,
13600 +                     0 as *const libc::c_char,
13601 +                     0 as *const libc::c_char,
13602 +                     0 as *const libc::c_char,
13603 +                 ],
13604 +                 option_names: [
13605 +                     b"period\0" as *const u8 as *const libc::c_char,
13606 +                     0 as *const libc::c_char,
13607 +                     0 as *const libc::c_char,
13608 +                     0 as *const libc::c_char,
13609 +                     0 as *const libc::c_char,
13610 +                     0 as *const libc::c_char,
13611 +                     0 as *const libc::c_char,
13612 +                     0 as *const libc::c_char,
13613 +                     0 as *const libc::c_char,
13614 +                     0 as *const libc::c_char,
13615 +                     0 as *const libc::c_char,
13616 +                     0 as *const libc::c_char,
13617 +                     0 as *const libc::c_char,
13618 +                     0 as *const libc::c_char,
13619 +                     0 as *const libc::c_char,
13620 +                     0 as *const libc::c_char,
13621 +                 ],
13622 +                 output_names: [
13623 +                     b"sma\0" as *const u8 as *const libc::c_char,
13624 +                     0 as *const libc::c_char,
13625 +                     0 as *const libc::c_char,
13626 +                     0 as *const libc::c_char,
13627 +                     0 as *const libc::c_char,
13628 +                     0 as *const libc::c_char,
13629 +                     0 as *const libc::c_char,
13630 +                     0 as *const libc::c_char,
13631 +                     0 as *const libc::c_char,
13632 +                     0 as *const libc::c_char,
13633 +                     0 as *const libc::c_char,
13634 +                     0 as *const libc::c_char,
13635 +                     0 as *const libc::c_char,
13636 +                     0 as *const libc::c_char,
13637 +                     0 as *const libc::c_char,
13638 +                     0 as *const libc::c_char,
13639 +                 ],
13640 +                 stream_new: Some(
13641 +                     ti_sma_stream_new
13642 +                         as unsafe extern "C" fn(
13643 +                             *const libc::c_double,
13644 +                             *mut *mut ti_stream,
13645 +                         ) -> libc::c_int,
13646 +                 ),
13647 +                 stream_run: Some(
13648 +                     ti_sma_stream_run
13649 +                         as unsafe extern "C" fn(
13650 +                             *mut ti_stream,
13651 +                             libc::c_int,
13652 +                             *const *const libc::c_double,
13653 +                             *const *mut libc::c_double,
13654 +                         ) -> libc::c_int,
13655 +                 ),
13656 +                 stream_free: Some(
13657 +                     ti_sma_stream_free as unsafe extern "C" fn(*mut ti_stream) -> (),
13658 +                 ),
13659 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:13741:13
      |
13662 | /             let mut init = ti_indicator_info {
13663 | |                 name: b"sqrt\0" as *const u8 as *const libc::c_char,
13664 | |                 full_name: b"Vector Square Root\0" as *const u8 as *const libc::c_char,
13665 | |                 start: Some(
...     |
13739 | |                 stream_free: None,
13740 | |             };
      | |______________- unnecessary `let` binding
13741 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
13662 ~             
13663 ~             ti_indicator_info {
13664 +                 name: b"sqrt\0" as *const u8 as *const libc::c_char,
13665 +                 full_name: b"Vector Square Root\0" as *const u8 as *const libc::c_char,
13666 +                 start: Some(
13667 +                     ti_sqrt_start
13668 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
13669 +                 ),
13670 +                 indicator: Some(
13671 +                     ti_sqrt
13672 +                         as unsafe extern "C" fn(
13673 +                             libc::c_int,
13674 +                             *const *const libc::c_double,
13675 +                             *const libc::c_double,
13676 +                             *const *mut libc::c_double,
13677 +                         ) -> libc::c_int,
13678 +                 ),
13679 +                 indicator_ref: None,
13680 +                 type_0: 4 as libc::c_int,
13681 +                 inputs: 1 as libc::c_int,
13682 +                 options: 0 as libc::c_int,
13683 +                 outputs: 1 as libc::c_int,
13684 +                 input_names: [
13685 +                     b"real\0" as *const u8 as *const libc::c_char,
13686 +                     0 as *const libc::c_char,
13687 +                     0 as *const libc::c_char,
13688 +                     0 as *const libc::c_char,
13689 +                     0 as *const libc::c_char,
13690 +                     0 as *const libc::c_char,
13691 +                     0 as *const libc::c_char,
13692 +                     0 as *const libc::c_char,
13693 +                     0 as *const libc::c_char,
13694 +                     0 as *const libc::c_char,
13695 +                     0 as *const libc::c_char,
13696 +                     0 as *const libc::c_char,
13697 +                     0 as *const libc::c_char,
13698 +                     0 as *const libc::c_char,
13699 +                     0 as *const libc::c_char,
13700 +                     0 as *const libc::c_char,
13701 +                 ],
13702 +                 option_names: [
13703 +                     b"\0" as *const u8 as *const libc::c_char,
13704 +                     0 as *const libc::c_char,
13705 +                     0 as *const libc::c_char,
13706 +                     0 as *const libc::c_char,
13707 +                     0 as *const libc::c_char,
13708 +                     0 as *const libc::c_char,
13709 +                     0 as *const libc::c_char,
13710 +                     0 as *const libc::c_char,
13711 +                     0 as *const libc::c_char,
13712 +                     0 as *const libc::c_char,
13713 +                     0 as *const libc::c_char,
13714 +                     0 as *const libc::c_char,
13715 +                     0 as *const libc::c_char,
13716 +                     0 as *const libc::c_char,
13717 +                     0 as *const libc::c_char,
13718 +                     0 as *const libc::c_char,
13719 +                 ],
13720 +                 output_names: [
13721 +                     b"sqrt\0" as *const u8 as *const libc::c_char,
13722 +                     0 as *const libc::c_char,
13723 +                     0 as *const libc::c_char,
13724 +                     0 as *const libc::c_char,
13725 +                     0 as *const libc::c_char,
13726 +                     0 as *const libc::c_char,
13727 +                     0 as *const libc::c_char,
13728 +                     0 as *const libc::c_char,
13729 +                     0 as *const libc::c_char,
13730 +                     0 as *const libc::c_char,
13731 +                     0 as *const libc::c_char,
13732 +                     0 as *const libc::c_char,
13733 +                     0 as *const libc::c_char,
13734 +                     0 as *const libc::c_char,
13735 +                     0 as *const libc::c_char,
13736 +                     0 as *const libc::c_char,
13737 +                 ],
13738 +                 stream_new: None,
13739 +                 stream_run: None,
13740 +                 stream_free: None,
13741 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:13824:13
      |
13744 | /             let mut init = ti_indicator_info {
13745 | |                 name: b"stddev\0" as *const u8 as *const libc::c_char,
13746 | |                 full_name: b"Standard Deviation Over Period\0" as *const u8
13747 | |                     as *const libc::c_char,
...     |
13822 | |                 stream_free: None,
13823 | |             };
      | |______________- unnecessary `let` binding
13824 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
13744 ~             
13745 ~             ti_indicator_info {
13746 +                 name: b"stddev\0" as *const u8 as *const libc::c_char,
13747 +                 full_name: b"Standard Deviation Over Period\0" as *const u8
13748 +                     as *const libc::c_char,
13749 +                 start: Some(
13750 +                     ti_stddev_start
13751 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
13752 +                 ),
13753 +                 indicator: Some(
13754 +                     ti_stddev
13755 +                         as unsafe extern "C" fn(
13756 +                             libc::c_int,
13757 +                             *const *const libc::c_double,
13758 +                             *const libc::c_double,
13759 +                             *const *mut libc::c_double,
13760 +                         ) -> libc::c_int,
13761 +                 ),
13762 +                 indicator_ref: None,
13763 +                 type_0: 3 as libc::c_int,
13764 +                 inputs: 1 as libc::c_int,
13765 +                 options: 1 as libc::c_int,
13766 +                 outputs: 1 as libc::c_int,
13767 +                 input_names: [
13768 +                     b"real\0" as *const u8 as *const libc::c_char,
13769 +                     0 as *const libc::c_char,
13770 +                     0 as *const libc::c_char,
13771 +                     0 as *const libc::c_char,
13772 +                     0 as *const libc::c_char,
13773 +                     0 as *const libc::c_char,
13774 +                     0 as *const libc::c_char,
13775 +                     0 as *const libc::c_char,
13776 +                     0 as *const libc::c_char,
13777 +                     0 as *const libc::c_char,
13778 +                     0 as *const libc::c_char,
13779 +                     0 as *const libc::c_char,
13780 +                     0 as *const libc::c_char,
13781 +                     0 as *const libc::c_char,
13782 +                     0 as *const libc::c_char,
13783 +                     0 as *const libc::c_char,
13784 +                 ],
13785 +                 option_names: [
13786 +                     b"period\0" as *const u8 as *const libc::c_char,
13787 +                     0 as *const libc::c_char,
13788 +                     0 as *const libc::c_char,
13789 +                     0 as *const libc::c_char,
13790 +                     0 as *const libc::c_char,
13791 +                     0 as *const libc::c_char,
13792 +                     0 as *const libc::c_char,
13793 +                     0 as *const libc::c_char,
13794 +                     0 as *const libc::c_char,
13795 +                     0 as *const libc::c_char,
13796 +                     0 as *const libc::c_char,
13797 +                     0 as *const libc::c_char,
13798 +                     0 as *const libc::c_char,
13799 +                     0 as *const libc::c_char,
13800 +                     0 as *const libc::c_char,
13801 +                     0 as *const libc::c_char,
13802 +                 ],
13803 +                 output_names: [
13804 +                     b"stddev\0" as *const u8 as *const libc::c_char,
13805 +                     0 as *const libc::c_char,
13806 +                     0 as *const libc::c_char,
13807 +                     0 as *const libc::c_char,
13808 +                     0 as *const libc::c_char,
13809 +                     0 as *const libc::c_char,
13810 +                     0 as *const libc::c_char,
13811 +                     0 as *const libc::c_char,
13812 +                     0 as *const libc::c_char,
13813 +                     0 as *const libc::c_char,
13814 +                     0 as *const libc::c_char,
13815 +                     0 as *const libc::c_char,
13816 +                     0 as *const libc::c_char,
13817 +                     0 as *const libc::c_char,
13818 +                     0 as *const libc::c_char,
13819 +                     0 as *const libc::c_char,
13820 +                 ],
13821 +                 stream_new: None,
13822 +                 stream_run: None,
13823 +                 stream_free: None,
13824 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:13907:13
      |
13827 | /             let mut init = ti_indicator_info {
13828 | |                 name: b"stderr\0" as *const u8 as *const libc::c_char,
13829 | |                 full_name: b"Standard Error Over Period\0" as *const u8
13830 | |                     as *const libc::c_char,
...     |
13905 | |                 stream_free: None,
13906 | |             };
      | |______________- unnecessary `let` binding
13907 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
13827 ~             
13828 ~             ti_indicator_info {
13829 +                 name: b"stderr\0" as *const u8 as *const libc::c_char,
13830 +                 full_name: b"Standard Error Over Period\0" as *const u8
13831 +                     as *const libc::c_char,
13832 +                 start: Some(
13833 +                     ti_stderr_start
13834 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
13835 +                 ),
13836 +                 indicator: Some(
13837 +                     ti_stderr
13838 +                         as unsafe extern "C" fn(
13839 +                             libc::c_int,
13840 +                             *const *const libc::c_double,
13841 +                             *const libc::c_double,
13842 +                             *const *mut libc::c_double,
13843 +                         ) -> libc::c_int,
13844 +                 ),
13845 +                 indicator_ref: None,
13846 +                 type_0: 3 as libc::c_int,
13847 +                 inputs: 1 as libc::c_int,
13848 +                 options: 1 as libc::c_int,
13849 +                 outputs: 1 as libc::c_int,
13850 +                 input_names: [
13851 +                     b"real\0" as *const u8 as *const libc::c_char,
13852 +                     0 as *const libc::c_char,
13853 +                     0 as *const libc::c_char,
13854 +                     0 as *const libc::c_char,
13855 +                     0 as *const libc::c_char,
13856 +                     0 as *const libc::c_char,
13857 +                     0 as *const libc::c_char,
13858 +                     0 as *const libc::c_char,
13859 +                     0 as *const libc::c_char,
13860 +                     0 as *const libc::c_char,
13861 +                     0 as *const libc::c_char,
13862 +                     0 as *const libc::c_char,
13863 +                     0 as *const libc::c_char,
13864 +                     0 as *const libc::c_char,
13865 +                     0 as *const libc::c_char,
13866 +                     0 as *const libc::c_char,
13867 +                 ],
13868 +                 option_names: [
13869 +                     b"period\0" as *const u8 as *const libc::c_char,
13870 +                     0 as *const libc::c_char,
13871 +                     0 as *const libc::c_char,
13872 +                     0 as *const libc::c_char,
13873 +                     0 as *const libc::c_char,
13874 +                     0 as *const libc::c_char,
13875 +                     0 as *const libc::c_char,
13876 +                     0 as *const libc::c_char,
13877 +                     0 as *const libc::c_char,
13878 +                     0 as *const libc::c_char,
13879 +                     0 as *const libc::c_char,
13880 +                     0 as *const libc::c_char,
13881 +                     0 as *const libc::c_char,
13882 +                     0 as *const libc::c_char,
13883 +                     0 as *const libc::c_char,
13884 +                     0 as *const libc::c_char,
13885 +                 ],
13886 +                 output_names: [
13887 +                     b"stderr\0" as *const u8 as *const libc::c_char,
13888 +                     0 as *const libc::c_char,
13889 +                     0 as *const libc::c_char,
13890 +                     0 as *const libc::c_char,
13891 +                     0 as *const libc::c_char,
13892 +                     0 as *const libc::c_char,
13893 +                     0 as *const libc::c_char,
13894 +                     0 as *const libc::c_char,
13895 +                     0 as *const libc::c_char,
13896 +                     0 as *const libc::c_char,
13897 +                     0 as *const libc::c_char,
13898 +                     0 as *const libc::c_char,
13899 +                     0 as *const libc::c_char,
13900 +                     0 as *const libc::c_char,
13901 +                     0 as *const libc::c_char,
13902 +                     0 as *const libc::c_char,
13903 +                 ],
13904 +                 stream_new: None,
13905 +                 stream_run: None,
13906 +                 stream_free: None,
13907 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:13990:13
      |
13910 | /             let mut init = ti_indicator_info {
13911 | |                 name: b"stoch\0" as *const u8 as *const libc::c_char,
13912 | |                 full_name: b"Stochastic Oscillator\0" as *const u8
13913 | |                     as *const libc::c_char,
...     |
13988 | |                 stream_free: None,
13989 | |             };
      | |______________- unnecessary `let` binding
13990 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
13910 ~             
13911 ~             ti_indicator_info {
13912 +                 name: b"stoch\0" as *const u8 as *const libc::c_char,
13913 +                 full_name: b"Stochastic Oscillator\0" as *const u8
13914 +                     as *const libc::c_char,
13915 +                 start: Some(
13916 +                     ti_stoch_start
13917 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
13918 +                 ),
13919 +                 indicator: Some(
13920 +                     ti_stoch
13921 +                         as unsafe extern "C" fn(
13922 +                             libc::c_int,
13923 +                             *const *const libc::c_double,
13924 +                             *const libc::c_double,
13925 +                             *const *mut libc::c_double,
13926 +                         ) -> libc::c_int,
13927 +                 ),
13928 +                 indicator_ref: None,
13929 +                 type_0: 2 as libc::c_int,
13930 +                 inputs: 3 as libc::c_int,
13931 +                 options: 3 as libc::c_int,
13932 +                 outputs: 2 as libc::c_int,
13933 +                 input_names: [
13934 +                     b"high\0" as *const u8 as *const libc::c_char,
13935 +                     b"low\0" as *const u8 as *const libc::c_char,
13936 +                     b"close\0" as *const u8 as *const libc::c_char,
13937 +                     0 as *const libc::c_char,
13938 +                     0 as *const libc::c_char,
13939 +                     0 as *const libc::c_char,
13940 +                     0 as *const libc::c_char,
13941 +                     0 as *const libc::c_char,
13942 +                     0 as *const libc::c_char,
13943 +                     0 as *const libc::c_char,
13944 +                     0 as *const libc::c_char,
13945 +                     0 as *const libc::c_char,
13946 +                     0 as *const libc::c_char,
13947 +                     0 as *const libc::c_char,
13948 +                     0 as *const libc::c_char,
13949 +                     0 as *const libc::c_char,
13950 +                 ],
13951 +                 option_names: [
13952 +                     b"k_period\0" as *const u8 as *const libc::c_char,
13953 +                     b"k_slowing_period\0" as *const u8 as *const libc::c_char,
13954 +                     b"d_period\0" as *const u8 as *const libc::c_char,
13955 +                     0 as *const libc::c_char,
13956 +                     0 as *const libc::c_char,
13957 +                     0 as *const libc::c_char,
13958 +                     0 as *const libc::c_char,
13959 +                     0 as *const libc::c_char,
13960 +                     0 as *const libc::c_char,
13961 +                     0 as *const libc::c_char,
13962 +                     0 as *const libc::c_char,
13963 +                     0 as *const libc::c_char,
13964 +                     0 as *const libc::c_char,
13965 +                     0 as *const libc::c_char,
13966 +                     0 as *const libc::c_char,
13967 +                     0 as *const libc::c_char,
13968 +                 ],
13969 +                 output_names: [
13970 +                     b"stoch_k\0" as *const u8 as *const libc::c_char,
13971 +                     b"stoch_d\0" as *const u8 as *const libc::c_char,
13972 +                     0 as *const libc::c_char,
13973 +                     0 as *const libc::c_char,
13974 +                     0 as *const libc::c_char,
13975 +                     0 as *const libc::c_char,
13976 +                     0 as *const libc::c_char,
13977 +                     0 as *const libc::c_char,
13978 +                     0 as *const libc::c_char,
13979 +                     0 as *const libc::c_char,
13980 +                     0 as *const libc::c_char,
13981 +                     0 as *const libc::c_char,
13982 +                     0 as *const libc::c_char,
13983 +                     0 as *const libc::c_char,
13984 +                     0 as *const libc::c_char,
13985 +                     0 as *const libc::c_char,
13986 +                 ],
13987 +                 stream_new: None,
13988 +                 stream_run: None,
13989 +                 stream_free: None,
13990 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:14072:13
      |
13993 | /             let mut init = ti_indicator_info {
13994 | |                 name: b"stochrsi\0" as *const u8 as *const libc::c_char,
13995 | |                 full_name: b"Stochastic RSI\0" as *const u8 as *const libc::c_char,
13996 | |                 start: Some(
...     |
14070 | |                 stream_free: None,
14071 | |             };
      | |______________- unnecessary `let` binding
14072 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
13993 ~             
13994 ~             ti_indicator_info {
13995 +                 name: b"stochrsi\0" as *const u8 as *const libc::c_char,
13996 +                 full_name: b"Stochastic RSI\0" as *const u8 as *const libc::c_char,
13997 +                 start: Some(
13998 +                     ti_stochrsi_start
13999 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
14000 +                 ),
14001 +                 indicator: Some(
14002 +                     ti_stochrsi
14003 +                         as unsafe extern "C" fn(
14004 +                             libc::c_int,
14005 +                             *const *const libc::c_double,
14006 +                             *const libc::c_double,
14007 +                             *const *mut libc::c_double,
14008 +                         ) -> libc::c_int,
14009 +                 ),
14010 +                 indicator_ref: None,
14011 +                 type_0: 2 as libc::c_int,
14012 +                 inputs: 1 as libc::c_int,
14013 +                 options: 1 as libc::c_int,
14014 +                 outputs: 1 as libc::c_int,
14015 +                 input_names: [
14016 +                     b"real\0" as *const u8 as *const libc::c_char,
14017 +                     0 as *const libc::c_char,
14018 +                     0 as *const libc::c_char,
14019 +                     0 as *const libc::c_char,
14020 +                     0 as *const libc::c_char,
14021 +                     0 as *const libc::c_char,
14022 +                     0 as *const libc::c_char,
14023 +                     0 as *const libc::c_char,
14024 +                     0 as *const libc::c_char,
14025 +                     0 as *const libc::c_char,
14026 +                     0 as *const libc::c_char,
14027 +                     0 as *const libc::c_char,
14028 +                     0 as *const libc::c_char,
14029 +                     0 as *const libc::c_char,
14030 +                     0 as *const libc::c_char,
14031 +                     0 as *const libc::c_char,
14032 +                 ],
14033 +                 option_names: [
14034 +                     b"period\0" as *const u8 as *const libc::c_char,
14035 +                     0 as *const libc::c_char,
14036 +                     0 as *const libc::c_char,
14037 +                     0 as *const libc::c_char,
14038 +                     0 as *const libc::c_char,
14039 +                     0 as *const libc::c_char,
14040 +                     0 as *const libc::c_char,
14041 +                     0 as *const libc::c_char,
14042 +                     0 as *const libc::c_char,
14043 +                     0 as *const libc::c_char,
14044 +                     0 as *const libc::c_char,
14045 +                     0 as *const libc::c_char,
14046 +                     0 as *const libc::c_char,
14047 +                     0 as *const libc::c_char,
14048 +                     0 as *const libc::c_char,
14049 +                     0 as *const libc::c_char,
14050 +                 ],
14051 +                 output_names: [
14052 +                     b"stochrsi\0" as *const u8 as *const libc::c_char,
14053 +                     0 as *const libc::c_char,
14054 +                     0 as *const libc::c_char,
14055 +                     0 as *const libc::c_char,
14056 +                     0 as *const libc::c_char,
14057 +                     0 as *const libc::c_char,
14058 +                     0 as *const libc::c_char,
14059 +                     0 as *const libc::c_char,
14060 +                     0 as *const libc::c_char,
14061 +                     0 as *const libc::c_char,
14062 +                     0 as *const libc::c_char,
14063 +                     0 as *const libc::c_char,
14064 +                     0 as *const libc::c_char,
14065 +                     0 as *const libc::c_char,
14066 +                     0 as *const libc::c_char,
14067 +                     0 as *const libc::c_char,
14068 +                 ],
14069 +                 stream_new: None,
14070 +                 stream_run: None,
14071 +                 stream_free: None,
14072 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:14154:13
      |
14075 | /             let mut init = ti_indicator_info {
14076 | |                 name: b"sub\0" as *const u8 as *const libc::c_char,
14077 | |                 full_name: b"Vector Subtraction\0" as *const u8 as *const libc::c_char,
14078 | |                 start: Some(
...     |
14152 | |                 stream_free: None,
14153 | |             };
      | |______________- unnecessary `let` binding
14154 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
14075 ~             
14076 ~             ti_indicator_info {
14077 +                 name: b"sub\0" as *const u8 as *const libc::c_char,
14078 +                 full_name: b"Vector Subtraction\0" as *const u8 as *const libc::c_char,
14079 +                 start: Some(
14080 +                     ti_sub_start
14081 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
14082 +                 ),
14083 +                 indicator: Some(
14084 +                     ti_sub
14085 +                         as unsafe extern "C" fn(
14086 +                             libc::c_int,
14087 +                             *const *const libc::c_double,
14088 +                             *const libc::c_double,
14089 +                             *const *mut libc::c_double,
14090 +                         ) -> libc::c_int,
14091 +                 ),
14092 +                 indicator_ref: None,
14093 +                 type_0: 4 as libc::c_int,
14094 +                 inputs: 2 as libc::c_int,
14095 +                 options: 0 as libc::c_int,
14096 +                 outputs: 1 as libc::c_int,
14097 +                 input_names: [
14098 +                     b"real\0" as *const u8 as *const libc::c_char,
14099 +                     b"real\0" as *const u8 as *const libc::c_char,
14100 +                     0 as *const libc::c_char,
14101 +                     0 as *const libc::c_char,
14102 +                     0 as *const libc::c_char,
14103 +                     0 as *const libc::c_char,
14104 +                     0 as *const libc::c_char,
14105 +                     0 as *const libc::c_char,
14106 +                     0 as *const libc::c_char,
14107 +                     0 as *const libc::c_char,
14108 +                     0 as *const libc::c_char,
14109 +                     0 as *const libc::c_char,
14110 +                     0 as *const libc::c_char,
14111 +                     0 as *const libc::c_char,
14112 +                     0 as *const libc::c_char,
14113 +                     0 as *const libc::c_char,
14114 +                 ],
14115 +                 option_names: [
14116 +                     b"\0" as *const u8 as *const libc::c_char,
14117 +                     0 as *const libc::c_char,
14118 +                     0 as *const libc::c_char,
14119 +                     0 as *const libc::c_char,
14120 +                     0 as *const libc::c_char,
14121 +                     0 as *const libc::c_char,
14122 +                     0 as *const libc::c_char,
14123 +                     0 as *const libc::c_char,
14124 +                     0 as *const libc::c_char,
14125 +                     0 as *const libc::c_char,
14126 +                     0 as *const libc::c_char,
14127 +                     0 as *const libc::c_char,
14128 +                     0 as *const libc::c_char,
14129 +                     0 as *const libc::c_char,
14130 +                     0 as *const libc::c_char,
14131 +                     0 as *const libc::c_char,
14132 +                 ],
14133 +                 output_names: [
14134 +                     b"sub\0" as *const u8 as *const libc::c_char,
14135 +                     0 as *const libc::c_char,
14136 +                     0 as *const libc::c_char,
14137 +                     0 as *const libc::c_char,
14138 +                     0 as *const libc::c_char,
14139 +                     0 as *const libc::c_char,
14140 +                     0 as *const libc::c_char,
14141 +                     0 as *const libc::c_char,
14142 +                     0 as *const libc::c_char,
14143 +                     0 as *const libc::c_char,
14144 +                     0 as *const libc::c_char,
14145 +                     0 as *const libc::c_char,
14146 +                     0 as *const libc::c_char,
14147 +                     0 as *const libc::c_char,
14148 +                     0 as *const libc::c_char,
14149 +                     0 as *const libc::c_char,
14150 +                 ],
14151 +                 stream_new: None,
14152 +                 stream_run: None,
14153 +                 stream_free: None,
14154 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:14236:13
      |
14157 | /             let mut init = ti_indicator_info {
14158 | |                 name: b"sum\0" as *const u8 as *const libc::c_char,
14159 | |                 full_name: b"Sum Over Period\0" as *const u8 as *const libc::c_char,
14160 | |                 start: Some(
...     |
14234 | |                 stream_free: None,
14235 | |             };
      | |______________- unnecessary `let` binding
14236 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
14157 ~             
14158 ~             ti_indicator_info {
14159 +                 name: b"sum\0" as *const u8 as *const libc::c_char,
14160 +                 full_name: b"Sum Over Period\0" as *const u8 as *const libc::c_char,
14161 +                 start: Some(
14162 +                     ti_sum_start
14163 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
14164 +                 ),
14165 +                 indicator: Some(
14166 +                     ti_sum
14167 +                         as unsafe extern "C" fn(
14168 +                             libc::c_int,
14169 +                             *const *const libc::c_double,
14170 +                             *const libc::c_double,
14171 +                             *const *mut libc::c_double,
14172 +                         ) -> libc::c_int,
14173 +                 ),
14174 +                 indicator_ref: None,
14175 +                 type_0: 3 as libc::c_int,
14176 +                 inputs: 1 as libc::c_int,
14177 +                 options: 1 as libc::c_int,
14178 +                 outputs: 1 as libc::c_int,
14179 +                 input_names: [
14180 +                     b"real\0" as *const u8 as *const libc::c_char,
14181 +                     0 as *const libc::c_char,
14182 +                     0 as *const libc::c_char,
14183 +                     0 as *const libc::c_char,
14184 +                     0 as *const libc::c_char,
14185 +                     0 as *const libc::c_char,
14186 +                     0 as *const libc::c_char,
14187 +                     0 as *const libc::c_char,
14188 +                     0 as *const libc::c_char,
14189 +                     0 as *const libc::c_char,
14190 +                     0 as *const libc::c_char,
14191 +                     0 as *const libc::c_char,
14192 +                     0 as *const libc::c_char,
14193 +                     0 as *const libc::c_char,
14194 +                     0 as *const libc::c_char,
14195 +                     0 as *const libc::c_char,
14196 +                 ],
14197 +                 option_names: [
14198 +                     b"period\0" as *const u8 as *const libc::c_char,
14199 +                     0 as *const libc::c_char,
14200 +                     0 as *const libc::c_char,
14201 +                     0 as *const libc::c_char,
14202 +                     0 as *const libc::c_char,
14203 +                     0 as *const libc::c_char,
14204 +                     0 as *const libc::c_char,
14205 +                     0 as *const libc::c_char,
14206 +                     0 as *const libc::c_char,
14207 +                     0 as *const libc::c_char,
14208 +                     0 as *const libc::c_char,
14209 +                     0 as *const libc::c_char,
14210 +                     0 as *const libc::c_char,
14211 +                     0 as *const libc::c_char,
14212 +                     0 as *const libc::c_char,
14213 +                     0 as *const libc::c_char,
14214 +                 ],
14215 +                 output_names: [
14216 +                     b"sum\0" as *const u8 as *const libc::c_char,
14217 +                     0 as *const libc::c_char,
14218 +                     0 as *const libc::c_char,
14219 +                     0 as *const libc::c_char,
14220 +                     0 as *const libc::c_char,
14221 +                     0 as *const libc::c_char,
14222 +                     0 as *const libc::c_char,
14223 +                     0 as *const libc::c_char,
14224 +                     0 as *const libc::c_char,
14225 +                     0 as *const libc::c_char,
14226 +                     0 as *const libc::c_char,
14227 +                     0 as *const libc::c_char,
14228 +                     0 as *const libc::c_char,
14229 +                     0 as *const libc::c_char,
14230 +                     0 as *const libc::c_char,
14231 +                     0 as *const libc::c_char,
14232 +                 ],
14233 +                 stream_new: None,
14234 +                 stream_run: None,
14235 +                 stream_free: None,
14236 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:14318:13
      |
14239 | /             let mut init = ti_indicator_info {
14240 | |                 name: b"tan\0" as *const u8 as *const libc::c_char,
14241 | |                 full_name: b"Vector Tangent\0" as *const u8 as *const libc::c_char,
14242 | |                 start: Some(
...     |
14316 | |                 stream_free: None,
14317 | |             };
      | |______________- unnecessary `let` binding
14318 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
14239 ~             
14240 ~             ti_indicator_info {
14241 +                 name: b"tan\0" as *const u8 as *const libc::c_char,
14242 +                 full_name: b"Vector Tangent\0" as *const u8 as *const libc::c_char,
14243 +                 start: Some(
14244 +                     ti_tan_start
14245 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
14246 +                 ),
14247 +                 indicator: Some(
14248 +                     ti_tan
14249 +                         as unsafe extern "C" fn(
14250 +                             libc::c_int,
14251 +                             *const *const libc::c_double,
14252 +                             *const libc::c_double,
14253 +                             *const *mut libc::c_double,
14254 +                         ) -> libc::c_int,
14255 +                 ),
14256 +                 indicator_ref: None,
14257 +                 type_0: 4 as libc::c_int,
14258 +                 inputs: 1 as libc::c_int,
14259 +                 options: 0 as libc::c_int,
14260 +                 outputs: 1 as libc::c_int,
14261 +                 input_names: [
14262 +                     b"real\0" as *const u8 as *const libc::c_char,
14263 +                     0 as *const libc::c_char,
14264 +                     0 as *const libc::c_char,
14265 +                     0 as *const libc::c_char,
14266 +                     0 as *const libc::c_char,
14267 +                     0 as *const libc::c_char,
14268 +                     0 as *const libc::c_char,
14269 +                     0 as *const libc::c_char,
14270 +                     0 as *const libc::c_char,
14271 +                     0 as *const libc::c_char,
14272 +                     0 as *const libc::c_char,
14273 +                     0 as *const libc::c_char,
14274 +                     0 as *const libc::c_char,
14275 +                     0 as *const libc::c_char,
14276 +                     0 as *const libc::c_char,
14277 +                     0 as *const libc::c_char,
14278 +                 ],
14279 +                 option_names: [
14280 +                     b"\0" as *const u8 as *const libc::c_char,
14281 +                     0 as *const libc::c_char,
14282 +                     0 as *const libc::c_char,
14283 +                     0 as *const libc::c_char,
14284 +                     0 as *const libc::c_char,
14285 +                     0 as *const libc::c_char,
14286 +                     0 as *const libc::c_char,
14287 +                     0 as *const libc::c_char,
14288 +                     0 as *const libc::c_char,
14289 +                     0 as *const libc::c_char,
14290 +                     0 as *const libc::c_char,
14291 +                     0 as *const libc::c_char,
14292 +                     0 as *const libc::c_char,
14293 +                     0 as *const libc::c_char,
14294 +                     0 as *const libc::c_char,
14295 +                     0 as *const libc::c_char,
14296 +                 ],
14297 +                 output_names: [
14298 +                     b"tan\0" as *const u8 as *const libc::c_char,
14299 +                     0 as *const libc::c_char,
14300 +                     0 as *const libc::c_char,
14301 +                     0 as *const libc::c_char,
14302 +                     0 as *const libc::c_char,
14303 +                     0 as *const libc::c_char,
14304 +                     0 as *const libc::c_char,
14305 +                     0 as *const libc::c_char,
14306 +                     0 as *const libc::c_char,
14307 +                     0 as *const libc::c_char,
14308 +                     0 as *const libc::c_char,
14309 +                     0 as *const libc::c_char,
14310 +                     0 as *const libc::c_char,
14311 +                     0 as *const libc::c_char,
14312 +                     0 as *const libc::c_char,
14313 +                     0 as *const libc::c_char,
14314 +                 ],
14315 +                 stream_new: None,
14316 +                 stream_run: None,
14317 +                 stream_free: None,
14318 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:14401:13
      |
14321 | /             let mut init = ti_indicator_info {
14322 | |                 name: b"tanh\0" as *const u8 as *const libc::c_char,
14323 | |                 full_name: b"Vector Hyperbolic Tangent\0" as *const u8
14324 | |                     as *const libc::c_char,
...     |
14399 | |                 stream_free: None,
14400 | |             };
      | |______________- unnecessary `let` binding
14401 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
14321 ~             
14322 ~             ti_indicator_info {
14323 +                 name: b"tanh\0" as *const u8 as *const libc::c_char,
14324 +                 full_name: b"Vector Hyperbolic Tangent\0" as *const u8
14325 +                     as *const libc::c_char,
14326 +                 start: Some(
14327 +                     ti_tanh_start
14328 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
14329 +                 ),
14330 +                 indicator: Some(
14331 +                     ti_tanh
14332 +                         as unsafe extern "C" fn(
14333 +                             libc::c_int,
14334 +                             *const *const libc::c_double,
14335 +                             *const libc::c_double,
14336 +                             *const *mut libc::c_double,
14337 +                         ) -> libc::c_int,
14338 +                 ),
14339 +                 indicator_ref: None,
14340 +                 type_0: 4 as libc::c_int,
14341 +                 inputs: 1 as libc::c_int,
14342 +                 options: 0 as libc::c_int,
14343 +                 outputs: 1 as libc::c_int,
14344 +                 input_names: [
14345 +                     b"real\0" as *const u8 as *const libc::c_char,
14346 +                     0 as *const libc::c_char,
14347 +                     0 as *const libc::c_char,
14348 +                     0 as *const libc::c_char,
14349 +                     0 as *const libc::c_char,
14350 +                     0 as *const libc::c_char,
14351 +                     0 as *const libc::c_char,
14352 +                     0 as *const libc::c_char,
14353 +                     0 as *const libc::c_char,
14354 +                     0 as *const libc::c_char,
14355 +                     0 as *const libc::c_char,
14356 +                     0 as *const libc::c_char,
14357 +                     0 as *const libc::c_char,
14358 +                     0 as *const libc::c_char,
14359 +                     0 as *const libc::c_char,
14360 +                     0 as *const libc::c_char,
14361 +                 ],
14362 +                 option_names: [
14363 +                     b"\0" as *const u8 as *const libc::c_char,
14364 +                     0 as *const libc::c_char,
14365 +                     0 as *const libc::c_char,
14366 +                     0 as *const libc::c_char,
14367 +                     0 as *const libc::c_char,
14368 +                     0 as *const libc::c_char,
14369 +                     0 as *const libc::c_char,
14370 +                     0 as *const libc::c_char,
14371 +                     0 as *const libc::c_char,
14372 +                     0 as *const libc::c_char,
14373 +                     0 as *const libc::c_char,
14374 +                     0 as *const libc::c_char,
14375 +                     0 as *const libc::c_char,
14376 +                     0 as *const libc::c_char,
14377 +                     0 as *const libc::c_char,
14378 +                     0 as *const libc::c_char,
14379 +                 ],
14380 +                 output_names: [
14381 +                     b"tanh\0" as *const u8 as *const libc::c_char,
14382 +                     0 as *const libc::c_char,
14383 +                     0 as *const libc::c_char,
14384 +                     0 as *const libc::c_char,
14385 +                     0 as *const libc::c_char,
14386 +                     0 as *const libc::c_char,
14387 +                     0 as *const libc::c_char,
14388 +                     0 as *const libc::c_char,
14389 +                     0 as *const libc::c_char,
14390 +                     0 as *const libc::c_char,
14391 +                     0 as *const libc::c_char,
14392 +                     0 as *const libc::c_char,
14393 +                     0 as *const libc::c_char,
14394 +                     0 as *const libc::c_char,
14395 +                     0 as *const libc::c_char,
14396 +                     0 as *const libc::c_char,
14397 +                 ],
14398 +                 stream_new: None,
14399 +                 stream_run: None,
14400 +                 stream_free: None,
14401 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:14484:13
      |
14404 | /             let mut init = ti_indicator_info {
14405 | |                 name: b"tema\0" as *const u8 as *const libc::c_char,
14406 | |                 full_name: b"Triple Exponential Moving Average\0" as *const u8
14407 | |                     as *const libc::c_char,
...     |
14482 | |                 stream_free: None,
14483 | |             };
      | |______________- unnecessary `let` binding
14484 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
14404 ~             
14405 ~             ti_indicator_info {
14406 +                 name: b"tema\0" as *const u8 as *const libc::c_char,
14407 +                 full_name: b"Triple Exponential Moving Average\0" as *const u8
14408 +                     as *const libc::c_char,
14409 +                 start: Some(
14410 +                     ti_tema_start
14411 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
14412 +                 ),
14413 +                 indicator: Some(
14414 +                     ti_tema
14415 +                         as unsafe extern "C" fn(
14416 +                             libc::c_int,
14417 +                             *const *const libc::c_double,
14418 +                             *const libc::c_double,
14419 +                             *const *mut libc::c_double,
14420 +                         ) -> libc::c_int,
14421 +                 ),
14422 +                 indicator_ref: None,
14423 +                 type_0: 1 as libc::c_int,
14424 +                 inputs: 1 as libc::c_int,
14425 +                 options: 1 as libc::c_int,
14426 +                 outputs: 1 as libc::c_int,
14427 +                 input_names: [
14428 +                     b"real\0" as *const u8 as *const libc::c_char,
14429 +                     0 as *const libc::c_char,
14430 +                     0 as *const libc::c_char,
14431 +                     0 as *const libc::c_char,
14432 +                     0 as *const libc::c_char,
14433 +                     0 as *const libc::c_char,
14434 +                     0 as *const libc::c_char,
14435 +                     0 as *const libc::c_char,
14436 +                     0 as *const libc::c_char,
14437 +                     0 as *const libc::c_char,
14438 +                     0 as *const libc::c_char,
14439 +                     0 as *const libc::c_char,
14440 +                     0 as *const libc::c_char,
14441 +                     0 as *const libc::c_char,
14442 +                     0 as *const libc::c_char,
14443 +                     0 as *const libc::c_char,
14444 +                 ],
14445 +                 option_names: [
14446 +                     b"period\0" as *const u8 as *const libc::c_char,
14447 +                     0 as *const libc::c_char,
14448 +                     0 as *const libc::c_char,
14449 +                     0 as *const libc::c_char,
14450 +                     0 as *const libc::c_char,
14451 +                     0 as *const libc::c_char,
14452 +                     0 as *const libc::c_char,
14453 +                     0 as *const libc::c_char,
14454 +                     0 as *const libc::c_char,
14455 +                     0 as *const libc::c_char,
14456 +                     0 as *const libc::c_char,
14457 +                     0 as *const libc::c_char,
14458 +                     0 as *const libc::c_char,
14459 +                     0 as *const libc::c_char,
14460 +                     0 as *const libc::c_char,
14461 +                     0 as *const libc::c_char,
14462 +                 ],
14463 +                 output_names: [
14464 +                     b"tema\0" as *const u8 as *const libc::c_char,
14465 +                     0 as *const libc::c_char,
14466 +                     0 as *const libc::c_char,
14467 +                     0 as *const libc::c_char,
14468 +                     0 as *const libc::c_char,
14469 +                     0 as *const libc::c_char,
14470 +                     0 as *const libc::c_char,
14471 +                     0 as *const libc::c_char,
14472 +                     0 as *const libc::c_char,
14473 +                     0 as *const libc::c_char,
14474 +                     0 as *const libc::c_char,
14475 +                     0 as *const libc::c_char,
14476 +                     0 as *const libc::c_char,
14477 +                     0 as *const libc::c_char,
14478 +                     0 as *const libc::c_char,
14479 +                     0 as *const libc::c_char,
14480 +                 ],
14481 +                 stream_new: None,
14482 +                 stream_run: None,
14483 +                 stream_free: None,
14484 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:14567:13
      |
14487 | /             let mut init = ti_indicator_info {
14488 | |                 name: b"todeg\0" as *const u8 as *const libc::c_char,
14489 | |                 full_name: b"Vector Degree Conversion\0" as *const u8
14490 | |                     as *const libc::c_char,
...     |
14565 | |                 stream_free: None,
14566 | |             };
      | |______________- unnecessary `let` binding
14567 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
14487 ~             
14488 ~             ti_indicator_info {
14489 +                 name: b"todeg\0" as *const u8 as *const libc::c_char,
14490 +                 full_name: b"Vector Degree Conversion\0" as *const u8
14491 +                     as *const libc::c_char,
14492 +                 start: Some(
14493 +                     ti_todeg_start
14494 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
14495 +                 ),
14496 +                 indicator: Some(
14497 +                     ti_todeg
14498 +                         as unsafe extern "C" fn(
14499 +                             libc::c_int,
14500 +                             *const *const libc::c_double,
14501 +                             *const libc::c_double,
14502 +                             *const *mut libc::c_double,
14503 +                         ) -> libc::c_int,
14504 +                 ),
14505 +                 indicator_ref: None,
14506 +                 type_0: 4 as libc::c_int,
14507 +                 inputs: 1 as libc::c_int,
14508 +                 options: 0 as libc::c_int,
14509 +                 outputs: 1 as libc::c_int,
14510 +                 input_names: [
14511 +                     b"real\0" as *const u8 as *const libc::c_char,
14512 +                     0 as *const libc::c_char,
14513 +                     0 as *const libc::c_char,
14514 +                     0 as *const libc::c_char,
14515 +                     0 as *const libc::c_char,
14516 +                     0 as *const libc::c_char,
14517 +                     0 as *const libc::c_char,
14518 +                     0 as *const libc::c_char,
14519 +                     0 as *const libc::c_char,
14520 +                     0 as *const libc::c_char,
14521 +                     0 as *const libc::c_char,
14522 +                     0 as *const libc::c_char,
14523 +                     0 as *const libc::c_char,
14524 +                     0 as *const libc::c_char,
14525 +                     0 as *const libc::c_char,
14526 +                     0 as *const libc::c_char,
14527 +                 ],
14528 +                 option_names: [
14529 +                     b"\0" as *const u8 as *const libc::c_char,
14530 +                     0 as *const libc::c_char,
14531 +                     0 as *const libc::c_char,
14532 +                     0 as *const libc::c_char,
14533 +                     0 as *const libc::c_char,
14534 +                     0 as *const libc::c_char,
14535 +                     0 as *const libc::c_char,
14536 +                     0 as *const libc::c_char,
14537 +                     0 as *const libc::c_char,
14538 +                     0 as *const libc::c_char,
14539 +                     0 as *const libc::c_char,
14540 +                     0 as *const libc::c_char,
14541 +                     0 as *const libc::c_char,
14542 +                     0 as *const libc::c_char,
14543 +                     0 as *const libc::c_char,
14544 +                     0 as *const libc::c_char,
14545 +                 ],
14546 +                 output_names: [
14547 +                     b"degrees\0" as *const u8 as *const libc::c_char,
14548 +                     0 as *const libc::c_char,
14549 +                     0 as *const libc::c_char,
14550 +                     0 as *const libc::c_char,
14551 +                     0 as *const libc::c_char,
14552 +                     0 as *const libc::c_char,
14553 +                     0 as *const libc::c_char,
14554 +                     0 as *const libc::c_char,
14555 +                     0 as *const libc::c_char,
14556 +                     0 as *const libc::c_char,
14557 +                     0 as *const libc::c_char,
14558 +                     0 as *const libc::c_char,
14559 +                     0 as *const libc::c_char,
14560 +                     0 as *const libc::c_char,
14561 +                     0 as *const libc::c_char,
14562 +                     0 as *const libc::c_char,
14563 +                 ],
14564 +                 stream_new: None,
14565 +                 stream_run: None,
14566 +                 stream_free: None,
14567 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:14650:13
      |
14570 | /             let mut init = ti_indicator_info {
14571 | |                 name: b"torad\0" as *const u8 as *const libc::c_char,
14572 | |                 full_name: b"Vector Radian Conversion\0" as *const u8
14573 | |                     as *const libc::c_char,
...     |
14648 | |                 stream_free: None,
14649 | |             };
      | |______________- unnecessary `let` binding
14650 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
14570 ~             
14571 ~             ti_indicator_info {
14572 +                 name: b"torad\0" as *const u8 as *const libc::c_char,
14573 +                 full_name: b"Vector Radian Conversion\0" as *const u8
14574 +                     as *const libc::c_char,
14575 +                 start: Some(
14576 +                     ti_torad_start
14577 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
14578 +                 ),
14579 +                 indicator: Some(
14580 +                     ti_torad
14581 +                         as unsafe extern "C" fn(
14582 +                             libc::c_int,
14583 +                             *const *const libc::c_double,
14584 +                             *const libc::c_double,
14585 +                             *const *mut libc::c_double,
14586 +                         ) -> libc::c_int,
14587 +                 ),
14588 +                 indicator_ref: None,
14589 +                 type_0: 4 as libc::c_int,
14590 +                 inputs: 1 as libc::c_int,
14591 +                 options: 0 as libc::c_int,
14592 +                 outputs: 1 as libc::c_int,
14593 +                 input_names: [
14594 +                     b"real\0" as *const u8 as *const libc::c_char,
14595 +                     0 as *const libc::c_char,
14596 +                     0 as *const libc::c_char,
14597 +                     0 as *const libc::c_char,
14598 +                     0 as *const libc::c_char,
14599 +                     0 as *const libc::c_char,
14600 +                     0 as *const libc::c_char,
14601 +                     0 as *const libc::c_char,
14602 +                     0 as *const libc::c_char,
14603 +                     0 as *const libc::c_char,
14604 +                     0 as *const libc::c_char,
14605 +                     0 as *const libc::c_char,
14606 +                     0 as *const libc::c_char,
14607 +                     0 as *const libc::c_char,
14608 +                     0 as *const libc::c_char,
14609 +                     0 as *const libc::c_char,
14610 +                 ],
14611 +                 option_names: [
14612 +                     b"\0" as *const u8 as *const libc::c_char,
14613 +                     0 as *const libc::c_char,
14614 +                     0 as *const libc::c_char,
14615 +                     0 as *const libc::c_char,
14616 +                     0 as *const libc::c_char,
14617 +                     0 as *const libc::c_char,
14618 +                     0 as *const libc::c_char,
14619 +                     0 as *const libc::c_char,
14620 +                     0 as *const libc::c_char,
14621 +                     0 as *const libc::c_char,
14622 +                     0 as *const libc::c_char,
14623 +                     0 as *const libc::c_char,
14624 +                     0 as *const libc::c_char,
14625 +                     0 as *const libc::c_char,
14626 +                     0 as *const libc::c_char,
14627 +                     0 as *const libc::c_char,
14628 +                 ],
14629 +                 output_names: [
14630 +                     b"radians\0" as *const u8 as *const libc::c_char,
14631 +                     0 as *const libc::c_char,
14632 +                     0 as *const libc::c_char,
14633 +                     0 as *const libc::c_char,
14634 +                     0 as *const libc::c_char,
14635 +                     0 as *const libc::c_char,
14636 +                     0 as *const libc::c_char,
14637 +                     0 as *const libc::c_char,
14638 +                     0 as *const libc::c_char,
14639 +                     0 as *const libc::c_char,
14640 +                     0 as *const libc::c_char,
14641 +                     0 as *const libc::c_char,
14642 +                     0 as *const libc::c_char,
14643 +                     0 as *const libc::c_char,
14644 +                     0 as *const libc::c_char,
14645 +                     0 as *const libc::c_char,
14646 +                 ],
14647 +                 stream_new: None,
14648 +                 stream_run: None,
14649 +                 stream_free: None,
14650 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:14732:13
      |
14653 | /             let mut init = ti_indicator_info {
14654 | |                 name: b"tr\0" as *const u8 as *const libc::c_char,
14655 | |                 full_name: b"True Range\0" as *const u8 as *const libc::c_char,
14656 | |                 start: Some(
...     |
14730 | |                 stream_free: None,
14731 | |             };
      | |______________- unnecessary `let` binding
14732 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
14653 ~             
14654 ~             ti_indicator_info {
14655 +                 name: b"tr\0" as *const u8 as *const libc::c_char,
14656 +                 full_name: b"True Range\0" as *const u8 as *const libc::c_char,
14657 +                 start: Some(
14658 +                     ti_tr_start
14659 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
14660 +                 ),
14661 +                 indicator: Some(
14662 +                     ti_tr
14663 +                         as unsafe extern "C" fn(
14664 +                             libc::c_int,
14665 +                             *const *const libc::c_double,
14666 +                             *const libc::c_double,
14667 +                             *const *mut libc::c_double,
14668 +                         ) -> libc::c_int,
14669 +                 ),
14670 +                 indicator_ref: None,
14671 +                 type_0: 2 as libc::c_int,
14672 +                 inputs: 3 as libc::c_int,
14673 +                 options: 0 as libc::c_int,
14674 +                 outputs: 1 as libc::c_int,
14675 +                 input_names: [
14676 +                     b"high\0" as *const u8 as *const libc::c_char,
14677 +                     b"low\0" as *const u8 as *const libc::c_char,
14678 +                     b"close\0" as *const u8 as *const libc::c_char,
14679 +                     0 as *const libc::c_char,
14680 +                     0 as *const libc::c_char,
14681 +                     0 as *const libc::c_char,
14682 +                     0 as *const libc::c_char,
14683 +                     0 as *const libc::c_char,
14684 +                     0 as *const libc::c_char,
14685 +                     0 as *const libc::c_char,
14686 +                     0 as *const libc::c_char,
14687 +                     0 as *const libc::c_char,
14688 +                     0 as *const libc::c_char,
14689 +                     0 as *const libc::c_char,
14690 +                     0 as *const libc::c_char,
14691 +                     0 as *const libc::c_char,
14692 +                 ],
14693 +                 option_names: [
14694 +                     b"\0" as *const u8 as *const libc::c_char,
14695 +                     0 as *const libc::c_char,
14696 +                     0 as *const libc::c_char,
14697 +                     0 as *const libc::c_char,
14698 +                     0 as *const libc::c_char,
14699 +                     0 as *const libc::c_char,
14700 +                     0 as *const libc::c_char,
14701 +                     0 as *const libc::c_char,
14702 +                     0 as *const libc::c_char,
14703 +                     0 as *const libc::c_char,
14704 +                     0 as *const libc::c_char,
14705 +                     0 as *const libc::c_char,
14706 +                     0 as *const libc::c_char,
14707 +                     0 as *const libc::c_char,
14708 +                     0 as *const libc::c_char,
14709 +                     0 as *const libc::c_char,
14710 +                 ],
14711 +                 output_names: [
14712 +                     b"tr\0" as *const u8 as *const libc::c_char,
14713 +                     0 as *const libc::c_char,
14714 +                     0 as *const libc::c_char,
14715 +                     0 as *const libc::c_char,
14716 +                     0 as *const libc::c_char,
14717 +                     0 as *const libc::c_char,
14718 +                     0 as *const libc::c_char,
14719 +                     0 as *const libc::c_char,
14720 +                     0 as *const libc::c_char,
14721 +                     0 as *const libc::c_char,
14722 +                     0 as *const libc::c_char,
14723 +                     0 as *const libc::c_char,
14724 +                     0 as *const libc::c_char,
14725 +                     0 as *const libc::c_char,
14726 +                     0 as *const libc::c_char,
14727 +                     0 as *const libc::c_char,
14728 +                 ],
14729 +                 stream_new: None,
14730 +                 stream_run: None,
14731 +                 stream_free: None,
14732 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:14815:13
      |
14735 | /             let mut init = ti_indicator_info {
14736 | |                 name: b"trima\0" as *const u8 as *const libc::c_char,
14737 | |                 full_name: b"Triangular Moving Average\0" as *const u8
14738 | |                     as *const libc::c_char,
...     |
14813 | |                 stream_free: None,
14814 | |             };
      | |______________- unnecessary `let` binding
14815 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
14735 ~             
14736 ~             ti_indicator_info {
14737 +                 name: b"trima\0" as *const u8 as *const libc::c_char,
14738 +                 full_name: b"Triangular Moving Average\0" as *const u8
14739 +                     as *const libc::c_char,
14740 +                 start: Some(
14741 +                     ti_trima_start
14742 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
14743 +                 ),
14744 +                 indicator: Some(
14745 +                     ti_trima
14746 +                         as unsafe extern "C" fn(
14747 +                             libc::c_int,
14748 +                             *const *const libc::c_double,
14749 +                             *const libc::c_double,
14750 +                             *const *mut libc::c_double,
14751 +                         ) -> libc::c_int,
14752 +                 ),
14753 +                 indicator_ref: None,
14754 +                 type_0: 1 as libc::c_int,
14755 +                 inputs: 1 as libc::c_int,
14756 +                 options: 1 as libc::c_int,
14757 +                 outputs: 1 as libc::c_int,
14758 +                 input_names: [
14759 +                     b"real\0" as *const u8 as *const libc::c_char,
14760 +                     0 as *const libc::c_char,
14761 +                     0 as *const libc::c_char,
14762 +                     0 as *const libc::c_char,
14763 +                     0 as *const libc::c_char,
14764 +                     0 as *const libc::c_char,
14765 +                     0 as *const libc::c_char,
14766 +                     0 as *const libc::c_char,
14767 +                     0 as *const libc::c_char,
14768 +                     0 as *const libc::c_char,
14769 +                     0 as *const libc::c_char,
14770 +                     0 as *const libc::c_char,
14771 +                     0 as *const libc::c_char,
14772 +                     0 as *const libc::c_char,
14773 +                     0 as *const libc::c_char,
14774 +                     0 as *const libc::c_char,
14775 +                 ],
14776 +                 option_names: [
14777 +                     b"period\0" as *const u8 as *const libc::c_char,
14778 +                     0 as *const libc::c_char,
14779 +                     0 as *const libc::c_char,
14780 +                     0 as *const libc::c_char,
14781 +                     0 as *const libc::c_char,
14782 +                     0 as *const libc::c_char,
14783 +                     0 as *const libc::c_char,
14784 +                     0 as *const libc::c_char,
14785 +                     0 as *const libc::c_char,
14786 +                     0 as *const libc::c_char,
14787 +                     0 as *const libc::c_char,
14788 +                     0 as *const libc::c_char,
14789 +                     0 as *const libc::c_char,
14790 +                     0 as *const libc::c_char,
14791 +                     0 as *const libc::c_char,
14792 +                     0 as *const libc::c_char,
14793 +                 ],
14794 +                 output_names: [
14795 +                     b"trima\0" as *const u8 as *const libc::c_char,
14796 +                     0 as *const libc::c_char,
14797 +                     0 as *const libc::c_char,
14798 +                     0 as *const libc::c_char,
14799 +                     0 as *const libc::c_char,
14800 +                     0 as *const libc::c_char,
14801 +                     0 as *const libc::c_char,
14802 +                     0 as *const libc::c_char,
14803 +                     0 as *const libc::c_char,
14804 +                     0 as *const libc::c_char,
14805 +                     0 as *const libc::c_char,
14806 +                     0 as *const libc::c_char,
14807 +                     0 as *const libc::c_char,
14808 +                     0 as *const libc::c_char,
14809 +                     0 as *const libc::c_char,
14810 +                     0 as *const libc::c_char,
14811 +                 ],
14812 +                 stream_new: None,
14813 +                 stream_run: None,
14814 +                 stream_free: None,
14815 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:14897:13
      |
14818 | /             let mut init = ti_indicator_info {
14819 | |                 name: b"trix\0" as *const u8 as *const libc::c_char,
14820 | |                 full_name: b"Trix\0" as *const u8 as *const libc::c_char,
14821 | |                 start: Some(
...     |
14895 | |                 stream_free: None,
14896 | |             };
      | |______________- unnecessary `let` binding
14897 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
14818 ~             
14819 ~             ti_indicator_info {
14820 +                 name: b"trix\0" as *const u8 as *const libc::c_char,
14821 +                 full_name: b"Trix\0" as *const u8 as *const libc::c_char,
14822 +                 start: Some(
14823 +                     ti_trix_start
14824 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
14825 +                 ),
14826 +                 indicator: Some(
14827 +                     ti_trix
14828 +                         as unsafe extern "C" fn(
14829 +                             libc::c_int,
14830 +                             *const *const libc::c_double,
14831 +                             *const libc::c_double,
14832 +                             *const *mut libc::c_double,
14833 +                         ) -> libc::c_int,
14834 +                 ),
14835 +                 indicator_ref: None,
14836 +                 type_0: 2 as libc::c_int,
14837 +                 inputs: 1 as libc::c_int,
14838 +                 options: 1 as libc::c_int,
14839 +                 outputs: 1 as libc::c_int,
14840 +                 input_names: [
14841 +                     b"real\0" as *const u8 as *const libc::c_char,
14842 +                     0 as *const libc::c_char,
14843 +                     0 as *const libc::c_char,
14844 +                     0 as *const libc::c_char,
14845 +                     0 as *const libc::c_char,
14846 +                     0 as *const libc::c_char,
14847 +                     0 as *const libc::c_char,
14848 +                     0 as *const libc::c_char,
14849 +                     0 as *const libc::c_char,
14850 +                     0 as *const libc::c_char,
14851 +                     0 as *const libc::c_char,
14852 +                     0 as *const libc::c_char,
14853 +                     0 as *const libc::c_char,
14854 +                     0 as *const libc::c_char,
14855 +                     0 as *const libc::c_char,
14856 +                     0 as *const libc::c_char,
14857 +                 ],
14858 +                 option_names: [
14859 +                     b"period\0" as *const u8 as *const libc::c_char,
14860 +                     0 as *const libc::c_char,
14861 +                     0 as *const libc::c_char,
14862 +                     0 as *const libc::c_char,
14863 +                     0 as *const libc::c_char,
14864 +                     0 as *const libc::c_char,
14865 +                     0 as *const libc::c_char,
14866 +                     0 as *const libc::c_char,
14867 +                     0 as *const libc::c_char,
14868 +                     0 as *const libc::c_char,
14869 +                     0 as *const libc::c_char,
14870 +                     0 as *const libc::c_char,
14871 +                     0 as *const libc::c_char,
14872 +                     0 as *const libc::c_char,
14873 +                     0 as *const libc::c_char,
14874 +                     0 as *const libc::c_char,
14875 +                 ],
14876 +                 output_names: [
14877 +                     b"trix\0" as *const u8 as *const libc::c_char,
14878 +                     0 as *const libc::c_char,
14879 +                     0 as *const libc::c_char,
14880 +                     0 as *const libc::c_char,
14881 +                     0 as *const libc::c_char,
14882 +                     0 as *const libc::c_char,
14883 +                     0 as *const libc::c_char,
14884 +                     0 as *const libc::c_char,
14885 +                     0 as *const libc::c_char,
14886 +                     0 as *const libc::c_char,
14887 +                     0 as *const libc::c_char,
14888 +                     0 as *const libc::c_char,
14889 +                     0 as *const libc::c_char,
14890 +                     0 as *const libc::c_char,
14891 +                     0 as *const libc::c_char,
14892 +                     0 as *const libc::c_char,
14893 +                 ],
14894 +                 stream_new: None,
14895 +                 stream_run: None,
14896 +                 stream_free: None,
14897 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:14979:13
      |
14900 | /             let mut init = ti_indicator_info {
14901 | |                 name: b"trunc\0" as *const u8 as *const libc::c_char,
14902 | |                 full_name: b"Vector Truncate\0" as *const u8 as *const libc::c_char,
14903 | |                 start: Some(
...     |
14977 | |                 stream_free: None,
14978 | |             };
      | |______________- unnecessary `let` binding
14979 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
14900 ~             
14901 ~             ti_indicator_info {
14902 +                 name: b"trunc\0" as *const u8 as *const libc::c_char,
14903 +                 full_name: b"Vector Truncate\0" as *const u8 as *const libc::c_char,
14904 +                 start: Some(
14905 +                     ti_trunc_start
14906 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
14907 +                 ),
14908 +                 indicator: Some(
14909 +                     ti_trunc
14910 +                         as unsafe extern "C" fn(
14911 +                             libc::c_int,
14912 +                             *const *const libc::c_double,
14913 +                             *const libc::c_double,
14914 +                             *const *mut libc::c_double,
14915 +                         ) -> libc::c_int,
14916 +                 ),
14917 +                 indicator_ref: None,
14918 +                 type_0: 4 as libc::c_int,
14919 +                 inputs: 1 as libc::c_int,
14920 +                 options: 0 as libc::c_int,
14921 +                 outputs: 1 as libc::c_int,
14922 +                 input_names: [
14923 +                     b"real\0" as *const u8 as *const libc::c_char,
14924 +                     0 as *const libc::c_char,
14925 +                     0 as *const libc::c_char,
14926 +                     0 as *const libc::c_char,
14927 +                     0 as *const libc::c_char,
14928 +                     0 as *const libc::c_char,
14929 +                     0 as *const libc::c_char,
14930 +                     0 as *const libc::c_char,
14931 +                     0 as *const libc::c_char,
14932 +                     0 as *const libc::c_char,
14933 +                     0 as *const libc::c_char,
14934 +                     0 as *const libc::c_char,
14935 +                     0 as *const libc::c_char,
14936 +                     0 as *const libc::c_char,
14937 +                     0 as *const libc::c_char,
14938 +                     0 as *const libc::c_char,
14939 +                 ],
14940 +                 option_names: [
14941 +                     b"\0" as *const u8 as *const libc::c_char,
14942 +                     0 as *const libc::c_char,
14943 +                     0 as *const libc::c_char,
14944 +                     0 as *const libc::c_char,
14945 +                     0 as *const libc::c_char,
14946 +                     0 as *const libc::c_char,
14947 +                     0 as *const libc::c_char,
14948 +                     0 as *const libc::c_char,
14949 +                     0 as *const libc::c_char,
14950 +                     0 as *const libc::c_char,
14951 +                     0 as *const libc::c_char,
14952 +                     0 as *const libc::c_char,
14953 +                     0 as *const libc::c_char,
14954 +                     0 as *const libc::c_char,
14955 +                     0 as *const libc::c_char,
14956 +                     0 as *const libc::c_char,
14957 +                 ],
14958 +                 output_names: [
14959 +                     b"trunc\0" as *const u8 as *const libc::c_char,
14960 +                     0 as *const libc::c_char,
14961 +                     0 as *const libc::c_char,
14962 +                     0 as *const libc::c_char,
14963 +                     0 as *const libc::c_char,
14964 +                     0 as *const libc::c_char,
14965 +                     0 as *const libc::c_char,
14966 +                     0 as *const libc::c_char,
14967 +                     0 as *const libc::c_char,
14968 +                     0 as *const libc::c_char,
14969 +                     0 as *const libc::c_char,
14970 +                     0 as *const libc::c_char,
14971 +                     0 as *const libc::c_char,
14972 +                     0 as *const libc::c_char,
14973 +                     0 as *const libc::c_char,
14974 +                     0 as *const libc::c_char,
14975 +                 ],
14976 +                 stream_new: None,
14977 +                 stream_run: None,
14978 +                 stream_free: None,
14979 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:15061:13
      |
14982 | /             let mut init = ti_indicator_info {
14983 | |                 name: b"tsf\0" as *const u8 as *const libc::c_char,
14984 | |                 full_name: b"Time Series Forecast\0" as *const u8 as *const libc::c_char,
14985 | |                 start: Some(
...     |
15059 | |                 stream_free: None,
15060 | |             };
      | |______________- unnecessary `let` binding
15061 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
14982 ~             
14983 ~             ti_indicator_info {
14984 +                 name: b"tsf\0" as *const u8 as *const libc::c_char,
14985 +                 full_name: b"Time Series Forecast\0" as *const u8 as *const libc::c_char,
14986 +                 start: Some(
14987 +                     ti_tsf_start
14988 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
14989 +                 ),
14990 +                 indicator: Some(
14991 +                     ti_tsf
14992 +                         as unsafe extern "C" fn(
14993 +                             libc::c_int,
14994 +                             *const *const libc::c_double,
14995 +                             *const libc::c_double,
14996 +                             *const *mut libc::c_double,
14997 +                         ) -> libc::c_int,
14998 +                 ),
14999 +                 indicator_ref: None,
15000 +                 type_0: 1 as libc::c_int,
15001 +                 inputs: 1 as libc::c_int,
15002 +                 options: 1 as libc::c_int,
15003 +                 outputs: 1 as libc::c_int,
15004 +                 input_names: [
15005 +                     b"real\0" as *const u8 as *const libc::c_char,
15006 +                     0 as *const libc::c_char,
15007 +                     0 as *const libc::c_char,
15008 +                     0 as *const libc::c_char,
15009 +                     0 as *const libc::c_char,
15010 +                     0 as *const libc::c_char,
15011 +                     0 as *const libc::c_char,
15012 +                     0 as *const libc::c_char,
15013 +                     0 as *const libc::c_char,
15014 +                     0 as *const libc::c_char,
15015 +                     0 as *const libc::c_char,
15016 +                     0 as *const libc::c_char,
15017 +                     0 as *const libc::c_char,
15018 +                     0 as *const libc::c_char,
15019 +                     0 as *const libc::c_char,
15020 +                     0 as *const libc::c_char,
15021 +                 ],
15022 +                 option_names: [
15023 +                     b"period\0" as *const u8 as *const libc::c_char,
15024 +                     0 as *const libc::c_char,
15025 +                     0 as *const libc::c_char,
15026 +                     0 as *const libc::c_char,
15027 +                     0 as *const libc::c_char,
15028 +                     0 as *const libc::c_char,
15029 +                     0 as *const libc::c_char,
15030 +                     0 as *const libc::c_char,
15031 +                     0 as *const libc::c_char,
15032 +                     0 as *const libc::c_char,
15033 +                     0 as *const libc::c_char,
15034 +                     0 as *const libc::c_char,
15035 +                     0 as *const libc::c_char,
15036 +                     0 as *const libc::c_char,
15037 +                     0 as *const libc::c_char,
15038 +                     0 as *const libc::c_char,
15039 +                 ],
15040 +                 output_names: [
15041 +                     b"tsf\0" as *const u8 as *const libc::c_char,
15042 +                     0 as *const libc::c_char,
15043 +                     0 as *const libc::c_char,
15044 +                     0 as *const libc::c_char,
15045 +                     0 as *const libc::c_char,
15046 +                     0 as *const libc::c_char,
15047 +                     0 as *const libc::c_char,
15048 +                     0 as *const libc::c_char,
15049 +                     0 as *const libc::c_char,
15050 +                     0 as *const libc::c_char,
15051 +                     0 as *const libc::c_char,
15052 +                     0 as *const libc::c_char,
15053 +                     0 as *const libc::c_char,
15054 +                     0 as *const libc::c_char,
15055 +                     0 as *const libc::c_char,
15056 +                     0 as *const libc::c_char,
15057 +                 ],
15058 +                 stream_new: None,
15059 +                 stream_run: None,
15060 +                 stream_free: None,
15061 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:15143:13
      |
15064 | /             let mut init = ti_indicator_info {
15065 | |                 name: b"typprice\0" as *const u8 as *const libc::c_char,
15066 | |                 full_name: b"Typical Price\0" as *const u8 as *const libc::c_char,
15067 | |                 start: Some(
...     |
15141 | |                 stream_free: None,
15142 | |             };
      | |______________- unnecessary `let` binding
15143 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
15064 ~             
15065 ~             ti_indicator_info {
15066 +                 name: b"typprice\0" as *const u8 as *const libc::c_char,
15067 +                 full_name: b"Typical Price\0" as *const u8 as *const libc::c_char,
15068 +                 start: Some(
15069 +                     ti_typprice_start
15070 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
15071 +                 ),
15072 +                 indicator: Some(
15073 +                     ti_typprice
15074 +                         as unsafe extern "C" fn(
15075 +                             libc::c_int,
15076 +                             *const *const libc::c_double,
15077 +                             *const libc::c_double,
15078 +                             *const *mut libc::c_double,
15079 +                         ) -> libc::c_int,
15080 +                 ),
15081 +                 indicator_ref: None,
15082 +                 type_0: 1 as libc::c_int,
15083 +                 inputs: 3 as libc::c_int,
15084 +                 options: 0 as libc::c_int,
15085 +                 outputs: 1 as libc::c_int,
15086 +                 input_names: [
15087 +                     b"high\0" as *const u8 as *const libc::c_char,
15088 +                     b"low\0" as *const u8 as *const libc::c_char,
15089 +                     b"close\0" as *const u8 as *const libc::c_char,
15090 +                     0 as *const libc::c_char,
15091 +                     0 as *const libc::c_char,
15092 +                     0 as *const libc::c_char,
15093 +                     0 as *const libc::c_char,
15094 +                     0 as *const libc::c_char,
15095 +                     0 as *const libc::c_char,
15096 +                     0 as *const libc::c_char,
15097 +                     0 as *const libc::c_char,
15098 +                     0 as *const libc::c_char,
15099 +                     0 as *const libc::c_char,
15100 +                     0 as *const libc::c_char,
15101 +                     0 as *const libc::c_char,
15102 +                     0 as *const libc::c_char,
15103 +                 ],
15104 +                 option_names: [
15105 +                     b"\0" as *const u8 as *const libc::c_char,
15106 +                     0 as *const libc::c_char,
15107 +                     0 as *const libc::c_char,
15108 +                     0 as *const libc::c_char,
15109 +                     0 as *const libc::c_char,
15110 +                     0 as *const libc::c_char,
15111 +                     0 as *const libc::c_char,
15112 +                     0 as *const libc::c_char,
15113 +                     0 as *const libc::c_char,
15114 +                     0 as *const libc::c_char,
15115 +                     0 as *const libc::c_char,
15116 +                     0 as *const libc::c_char,
15117 +                     0 as *const libc::c_char,
15118 +                     0 as *const libc::c_char,
15119 +                     0 as *const libc::c_char,
15120 +                     0 as *const libc::c_char,
15121 +                 ],
15122 +                 output_names: [
15123 +                     b"typprice\0" as *const u8 as *const libc::c_char,
15124 +                     0 as *const libc::c_char,
15125 +                     0 as *const libc::c_char,
15126 +                     0 as *const libc::c_char,
15127 +                     0 as *const libc::c_char,
15128 +                     0 as *const libc::c_char,
15129 +                     0 as *const libc::c_char,
15130 +                     0 as *const libc::c_char,
15131 +                     0 as *const libc::c_char,
15132 +                     0 as *const libc::c_char,
15133 +                     0 as *const libc::c_char,
15134 +                     0 as *const libc::c_char,
15135 +                     0 as *const libc::c_char,
15136 +                     0 as *const libc::c_char,
15137 +                     0 as *const libc::c_char,
15138 +                     0 as *const libc::c_char,
15139 +                 ],
15140 +                 stream_new: None,
15141 +                 stream_run: None,
15142 +                 stream_free: None,
15143 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:15225:13
      |
15146 | /             let mut init = ti_indicator_info {
15147 | |                 name: b"ultosc\0" as *const u8 as *const libc::c_char,
15148 | |                 full_name: b"Ultimate Oscillator\0" as *const u8 as *const libc::c_char,
15149 | |                 start: Some(
...     |
15223 | |                 stream_free: None,
15224 | |             };
      | |______________- unnecessary `let` binding
15225 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
15146 ~             
15147 ~             ti_indicator_info {
15148 +                 name: b"ultosc\0" as *const u8 as *const libc::c_char,
15149 +                 full_name: b"Ultimate Oscillator\0" as *const u8 as *const libc::c_char,
15150 +                 start: Some(
15151 +                     ti_ultosc_start
15152 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
15153 +                 ),
15154 +                 indicator: Some(
15155 +                     ti_ultosc
15156 +                         as unsafe extern "C" fn(
15157 +                             libc::c_int,
15158 +                             *const *const libc::c_double,
15159 +                             *const libc::c_double,
15160 +                             *const *mut libc::c_double,
15161 +                         ) -> libc::c_int,
15162 +                 ),
15163 +                 indicator_ref: None,
15164 +                 type_0: 2 as libc::c_int,
15165 +                 inputs: 3 as libc::c_int,
15166 +                 options: 3 as libc::c_int,
15167 +                 outputs: 1 as libc::c_int,
15168 +                 input_names: [
15169 +                     b"high\0" as *const u8 as *const libc::c_char,
15170 +                     b"low\0" as *const u8 as *const libc::c_char,
15171 +                     b"close\0" as *const u8 as *const libc::c_char,
15172 +                     0 as *const libc::c_char,
15173 +                     0 as *const libc::c_char,
15174 +                     0 as *const libc::c_char,
15175 +                     0 as *const libc::c_char,
15176 +                     0 as *const libc::c_char,
15177 +                     0 as *const libc::c_char,
15178 +                     0 as *const libc::c_char,
15179 +                     0 as *const libc::c_char,
15180 +                     0 as *const libc::c_char,
15181 +                     0 as *const libc::c_char,
15182 +                     0 as *const libc::c_char,
15183 +                     0 as *const libc::c_char,
15184 +                     0 as *const libc::c_char,
15185 +                 ],
15186 +                 option_names: [
15187 +                     b"short_period\0" as *const u8 as *const libc::c_char,
15188 +                     b"medium_period\0" as *const u8 as *const libc::c_char,
15189 +                     b"long_period\0" as *const u8 as *const libc::c_char,
15190 +                     0 as *const libc::c_char,
15191 +                     0 as *const libc::c_char,
15192 +                     0 as *const libc::c_char,
15193 +                     0 as *const libc::c_char,
15194 +                     0 as *const libc::c_char,
15195 +                     0 as *const libc::c_char,
15196 +                     0 as *const libc::c_char,
15197 +                     0 as *const libc::c_char,
15198 +                     0 as *const libc::c_char,
15199 +                     0 as *const libc::c_char,
15200 +                     0 as *const libc::c_char,
15201 +                     0 as *const libc::c_char,
15202 +                     0 as *const libc::c_char,
15203 +                 ],
15204 +                 output_names: [
15205 +                     b"ultosc\0" as *const u8 as *const libc::c_char,
15206 +                     0 as *const libc::c_char,
15207 +                     0 as *const libc::c_char,
15208 +                     0 as *const libc::c_char,
15209 +                     0 as *const libc::c_char,
15210 +                     0 as *const libc::c_char,
15211 +                     0 as *const libc::c_char,
15212 +                     0 as *const libc::c_char,
15213 +                     0 as *const libc::c_char,
15214 +                     0 as *const libc::c_char,
15215 +                     0 as *const libc::c_char,
15216 +                     0 as *const libc::c_char,
15217 +                     0 as *const libc::c_char,
15218 +                     0 as *const libc::c_char,
15219 +                     0 as *const libc::c_char,
15220 +                     0 as *const libc::c_char,
15221 +                 ],
15222 +                 stream_new: None,
15223 +                 stream_run: None,
15224 +                 stream_free: None,
15225 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:15307:13
      |
15228 | /             let mut init = ti_indicator_info {
15229 | |                 name: b"var\0" as *const u8 as *const libc::c_char,
15230 | |                 full_name: b"Variance Over Period\0" as *const u8 as *const libc::c_char,
15231 | |                 start: Some(
...     |
15305 | |                 stream_free: None,
15306 | |             };
      | |______________- unnecessary `let` binding
15307 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
15228 ~             
15229 ~             ti_indicator_info {
15230 +                 name: b"var\0" as *const u8 as *const libc::c_char,
15231 +                 full_name: b"Variance Over Period\0" as *const u8 as *const libc::c_char,
15232 +                 start: Some(
15233 +                     ti_var_start
15234 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
15235 +                 ),
15236 +                 indicator: Some(
15237 +                     ti_var
15238 +                         as unsafe extern "C" fn(
15239 +                             libc::c_int,
15240 +                             *const *const libc::c_double,
15241 +                             *const libc::c_double,
15242 +                             *const *mut libc::c_double,
15243 +                         ) -> libc::c_int,
15244 +                 ),
15245 +                 indicator_ref: None,
15246 +                 type_0: 3 as libc::c_int,
15247 +                 inputs: 1 as libc::c_int,
15248 +                 options: 1 as libc::c_int,
15249 +                 outputs: 1 as libc::c_int,
15250 +                 input_names: [
15251 +                     b"real\0" as *const u8 as *const libc::c_char,
15252 +                     0 as *const libc::c_char,
15253 +                     0 as *const libc::c_char,
15254 +                     0 as *const libc::c_char,
15255 +                     0 as *const libc::c_char,
15256 +                     0 as *const libc::c_char,
15257 +                     0 as *const libc::c_char,
15258 +                     0 as *const libc::c_char,
15259 +                     0 as *const libc::c_char,
15260 +                     0 as *const libc::c_char,
15261 +                     0 as *const libc::c_char,
15262 +                     0 as *const libc::c_char,
15263 +                     0 as *const libc::c_char,
15264 +                     0 as *const libc::c_char,
15265 +                     0 as *const libc::c_char,
15266 +                     0 as *const libc::c_char,
15267 +                 ],
15268 +                 option_names: [
15269 +                     b"period\0" as *const u8 as *const libc::c_char,
15270 +                     0 as *const libc::c_char,
15271 +                     0 as *const libc::c_char,
15272 +                     0 as *const libc::c_char,
15273 +                     0 as *const libc::c_char,
15274 +                     0 as *const libc::c_char,
15275 +                     0 as *const libc::c_char,
15276 +                     0 as *const libc::c_char,
15277 +                     0 as *const libc::c_char,
15278 +                     0 as *const libc::c_char,
15279 +                     0 as *const libc::c_char,
15280 +                     0 as *const libc::c_char,
15281 +                     0 as *const libc::c_char,
15282 +                     0 as *const libc::c_char,
15283 +                     0 as *const libc::c_char,
15284 +                     0 as *const libc::c_char,
15285 +                 ],
15286 +                 output_names: [
15287 +                     b"var\0" as *const u8 as *const libc::c_char,
15288 +                     0 as *const libc::c_char,
15289 +                     0 as *const libc::c_char,
15290 +                     0 as *const libc::c_char,
15291 +                     0 as *const libc::c_char,
15292 +                     0 as *const libc::c_char,
15293 +                     0 as *const libc::c_char,
15294 +                     0 as *const libc::c_char,
15295 +                     0 as *const libc::c_char,
15296 +                     0 as *const libc::c_char,
15297 +                     0 as *const libc::c_char,
15298 +                     0 as *const libc::c_char,
15299 +                     0 as *const libc::c_char,
15300 +                     0 as *const libc::c_char,
15301 +                     0 as *const libc::c_char,
15302 +                     0 as *const libc::c_char,
15303 +                 ],
15304 +                 stream_new: None,
15305 +                 stream_run: None,
15306 +                 stream_free: None,
15307 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:15390:13
      |
15310 | /             let mut init = ti_indicator_info {
15311 | |                 name: b"vhf\0" as *const u8 as *const libc::c_char,
15312 | |                 full_name: b"Vertical Horizontal Filter\0" as *const u8
15313 | |                     as *const libc::c_char,
...     |
15388 | |                 stream_free: None,
15389 | |             };
      | |______________- unnecessary `let` binding
15390 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
15310 ~             
15311 ~             ti_indicator_info {
15312 +                 name: b"vhf\0" as *const u8 as *const libc::c_char,
15313 +                 full_name: b"Vertical Horizontal Filter\0" as *const u8
15314 +                     as *const libc::c_char,
15315 +                 start: Some(
15316 +                     ti_vhf_start
15317 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
15318 +                 ),
15319 +                 indicator: Some(
15320 +                     ti_vhf
15321 +                         as unsafe extern "C" fn(
15322 +                             libc::c_int,
15323 +                             *const *const libc::c_double,
15324 +                             *const libc::c_double,
15325 +                             *const *mut libc::c_double,
15326 +                         ) -> libc::c_int,
15327 +                 ),
15328 +                 indicator_ref: None,
15329 +                 type_0: 2 as libc::c_int,
15330 +                 inputs: 1 as libc::c_int,
15331 +                 options: 1 as libc::c_int,
15332 +                 outputs: 1 as libc::c_int,
15333 +                 input_names: [
15334 +                     b"real\0" as *const u8 as *const libc::c_char,
15335 +                     0 as *const libc::c_char,
15336 +                     0 as *const libc::c_char,
15337 +                     0 as *const libc::c_char,
15338 +                     0 as *const libc::c_char,
15339 +                     0 as *const libc::c_char,
15340 +                     0 as *const libc::c_char,
15341 +                     0 as *const libc::c_char,
15342 +                     0 as *const libc::c_char,
15343 +                     0 as *const libc::c_char,
15344 +                     0 as *const libc::c_char,
15345 +                     0 as *const libc::c_char,
15346 +                     0 as *const libc::c_char,
15347 +                     0 as *const libc::c_char,
15348 +                     0 as *const libc::c_char,
15349 +                     0 as *const libc::c_char,
15350 +                 ],
15351 +                 option_names: [
15352 +                     b"period\0" as *const u8 as *const libc::c_char,
15353 +                     0 as *const libc::c_char,
15354 +                     0 as *const libc::c_char,
15355 +                     0 as *const libc::c_char,
15356 +                     0 as *const libc::c_char,
15357 +                     0 as *const libc::c_char,
15358 +                     0 as *const libc::c_char,
15359 +                     0 as *const libc::c_char,
15360 +                     0 as *const libc::c_char,
15361 +                     0 as *const libc::c_char,
15362 +                     0 as *const libc::c_char,
15363 +                     0 as *const libc::c_char,
15364 +                     0 as *const libc::c_char,
15365 +                     0 as *const libc::c_char,
15366 +                     0 as *const libc::c_char,
15367 +                     0 as *const libc::c_char,
15368 +                 ],
15369 +                 output_names: [
15370 +                     b"vhf\0" as *const u8 as *const libc::c_char,
15371 +                     0 as *const libc::c_char,
15372 +                     0 as *const libc::c_char,
15373 +                     0 as *const libc::c_char,
15374 +                     0 as *const libc::c_char,
15375 +                     0 as *const libc::c_char,
15376 +                     0 as *const libc::c_char,
15377 +                     0 as *const libc::c_char,
15378 +                     0 as *const libc::c_char,
15379 +                     0 as *const libc::c_char,
15380 +                     0 as *const libc::c_char,
15381 +                     0 as *const libc::c_char,
15382 +                     0 as *const libc::c_char,
15383 +                     0 as *const libc::c_char,
15384 +                     0 as *const libc::c_char,
15385 +                     0 as *const libc::c_char,
15386 +                 ],
15387 +                 stream_new: None,
15388 +                 stream_run: None,
15389 +                 stream_free: None,
15390 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:15473:13
      |
15393 | /             let mut init = ti_indicator_info {
15394 | |                 name: b"vidya\0" as *const u8 as *const libc::c_char,
15395 | |                 full_name: b"Variable Index Dynamic Average\0" as *const u8
15396 | |                     as *const libc::c_char,
...     |
15471 | |                 stream_free: None,
15472 | |             };
      | |______________- unnecessary `let` binding
15473 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
15393 ~             
15394 ~             ti_indicator_info {
15395 +                 name: b"vidya\0" as *const u8 as *const libc::c_char,
15396 +                 full_name: b"Variable Index Dynamic Average\0" as *const u8
15397 +                     as *const libc::c_char,
15398 +                 start: Some(
15399 +                     ti_vidya_start
15400 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
15401 +                 ),
15402 +                 indicator: Some(
15403 +                     ti_vidya
15404 +                         as unsafe extern "C" fn(
15405 +                             libc::c_int,
15406 +                             *const *const libc::c_double,
15407 +                             *const libc::c_double,
15408 +                             *const *mut libc::c_double,
15409 +                         ) -> libc::c_int,
15410 +                 ),
15411 +                 indicator_ref: None,
15412 +                 type_0: 1 as libc::c_int,
15413 +                 inputs: 1 as libc::c_int,
15414 +                 options: 3 as libc::c_int,
15415 +                 outputs: 1 as libc::c_int,
15416 +                 input_names: [
15417 +                     b"real\0" as *const u8 as *const libc::c_char,
15418 +                     0 as *const libc::c_char,
15419 +                     0 as *const libc::c_char,
15420 +                     0 as *const libc::c_char,
15421 +                     0 as *const libc::c_char,
15422 +                     0 as *const libc::c_char,
15423 +                     0 as *const libc::c_char,
15424 +                     0 as *const libc::c_char,
15425 +                     0 as *const libc::c_char,
15426 +                     0 as *const libc::c_char,
15427 +                     0 as *const libc::c_char,
15428 +                     0 as *const libc::c_char,
15429 +                     0 as *const libc::c_char,
15430 +                     0 as *const libc::c_char,
15431 +                     0 as *const libc::c_char,
15432 +                     0 as *const libc::c_char,
15433 +                 ],
15434 +                 option_names: [
15435 +                     b"short_period\0" as *const u8 as *const libc::c_char,
15436 +                     b"long_period\0" as *const u8 as *const libc::c_char,
15437 +                     b"alpha\0" as *const u8 as *const libc::c_char,
15438 +                     0 as *const libc::c_char,
15439 +                     0 as *const libc::c_char,
15440 +                     0 as *const libc::c_char,
15441 +                     0 as *const libc::c_char,
15442 +                     0 as *const libc::c_char,
15443 +                     0 as *const libc::c_char,
15444 +                     0 as *const libc::c_char,
15445 +                     0 as *const libc::c_char,
15446 +                     0 as *const libc::c_char,
15447 +                     0 as *const libc::c_char,
15448 +                     0 as *const libc::c_char,
15449 +                     0 as *const libc::c_char,
15450 +                     0 as *const libc::c_char,
15451 +                 ],
15452 +                 output_names: [
15453 +                     b"vidya\0" as *const u8 as *const libc::c_char,
15454 +                     0 as *const libc::c_char,
15455 +                     0 as *const libc::c_char,
15456 +                     0 as *const libc::c_char,
15457 +                     0 as *const libc::c_char,
15458 +                     0 as *const libc::c_char,
15459 +                     0 as *const libc::c_char,
15460 +                     0 as *const libc::c_char,
15461 +                     0 as *const libc::c_char,
15462 +                     0 as *const libc::c_char,
15463 +                     0 as *const libc::c_char,
15464 +                     0 as *const libc::c_char,
15465 +                     0 as *const libc::c_char,
15466 +                     0 as *const libc::c_char,
15467 +                     0 as *const libc::c_char,
15468 +                     0 as *const libc::c_char,
15469 +                 ],
15470 +                 stream_new: None,
15471 +                 stream_run: None,
15472 +                 stream_free: None,
15473 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:15556:13
      |
15476 | /             let mut init = ti_indicator_info {
15477 | |                 name: b"volatility\0" as *const u8 as *const libc::c_char,
15478 | |                 full_name: b"Annualized Historical Volatility\0" as *const u8
15479 | |                     as *const libc::c_char,
...     |
15554 | |                 stream_free: None,
15555 | |             };
      | |______________- unnecessary `let` binding
15556 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
15476 ~             
15477 ~             ti_indicator_info {
15478 +                 name: b"volatility\0" as *const u8 as *const libc::c_char,
15479 +                 full_name: b"Annualized Historical Volatility\0" as *const u8
15480 +                     as *const libc::c_char,
15481 +                 start: Some(
15482 +                     ti_volatility_start
15483 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
15484 +                 ),
15485 +                 indicator: Some(
15486 +                     ti_volatility
15487 +                         as unsafe extern "C" fn(
15488 +                             libc::c_int,
15489 +                             *const *const libc::c_double,
15490 +                             *const libc::c_double,
15491 +                             *const *mut libc::c_double,
15492 +                         ) -> libc::c_int,
15493 +                 ),
15494 +                 indicator_ref: None,
15495 +                 type_0: 2 as libc::c_int,
15496 +                 inputs: 1 as libc::c_int,
15497 +                 options: 1 as libc::c_int,
15498 +                 outputs: 1 as libc::c_int,
15499 +                 input_names: [
15500 +                     b"real\0" as *const u8 as *const libc::c_char,
15501 +                     0 as *const libc::c_char,
15502 +                     0 as *const libc::c_char,
15503 +                     0 as *const libc::c_char,
15504 +                     0 as *const libc::c_char,
15505 +                     0 as *const libc::c_char,
15506 +                     0 as *const libc::c_char,
15507 +                     0 as *const libc::c_char,
15508 +                     0 as *const libc::c_char,
15509 +                     0 as *const libc::c_char,
15510 +                     0 as *const libc::c_char,
15511 +                     0 as *const libc::c_char,
15512 +                     0 as *const libc::c_char,
15513 +                     0 as *const libc::c_char,
15514 +                     0 as *const libc::c_char,
15515 +                     0 as *const libc::c_char,
15516 +                 ],
15517 +                 option_names: [
15518 +                     b"period\0" as *const u8 as *const libc::c_char,
15519 +                     0 as *const libc::c_char,
15520 +                     0 as *const libc::c_char,
15521 +                     0 as *const libc::c_char,
15522 +                     0 as *const libc::c_char,
15523 +                     0 as *const libc::c_char,
15524 +                     0 as *const libc::c_char,
15525 +                     0 as *const libc::c_char,
15526 +                     0 as *const libc::c_char,
15527 +                     0 as *const libc::c_char,
15528 +                     0 as *const libc::c_char,
15529 +                     0 as *const libc::c_char,
15530 +                     0 as *const libc::c_char,
15531 +                     0 as *const libc::c_char,
15532 +                     0 as *const libc::c_char,
15533 +                     0 as *const libc::c_char,
15534 +                 ],
15535 +                 output_names: [
15536 +                     b"volatility\0" as *const u8 as *const libc::c_char,
15537 +                     0 as *const libc::c_char,
15538 +                     0 as *const libc::c_char,
15539 +                     0 as *const libc::c_char,
15540 +                     0 as *const libc::c_char,
15541 +                     0 as *const libc::c_char,
15542 +                     0 as *const libc::c_char,
15543 +                     0 as *const libc::c_char,
15544 +                     0 as *const libc::c_char,
15545 +                     0 as *const libc::c_char,
15546 +                     0 as *const libc::c_char,
15547 +                     0 as *const libc::c_char,
15548 +                     0 as *const libc::c_char,
15549 +                     0 as *const libc::c_char,
15550 +                     0 as *const libc::c_char,
15551 +                     0 as *const libc::c_char,
15552 +                 ],
15553 +                 stream_new: None,
15554 +                 stream_run: None,
15555 +                 stream_free: None,
15556 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:15638:13
      |
15559 | /             let mut init = ti_indicator_info {
15560 | |                 name: b"vosc\0" as *const u8 as *const libc::c_char,
15561 | |                 full_name: b"Volume Oscillator\0" as *const u8 as *const libc::c_char,
15562 | |                 start: Some(
...     |
15636 | |                 stream_free: None,
15637 | |             };
      | |______________- unnecessary `let` binding
15638 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
15559 ~             
15560 ~             ti_indicator_info {
15561 +                 name: b"vosc\0" as *const u8 as *const libc::c_char,
15562 +                 full_name: b"Volume Oscillator\0" as *const u8 as *const libc::c_char,
15563 +                 start: Some(
15564 +                     ti_vosc_start
15565 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
15566 +                 ),
15567 +                 indicator: Some(
15568 +                     ti_vosc
15569 +                         as unsafe extern "C" fn(
15570 +                             libc::c_int,
15571 +                             *const *const libc::c_double,
15572 +                             *const libc::c_double,
15573 +                             *const *mut libc::c_double,
15574 +                         ) -> libc::c_int,
15575 +                 ),
15576 +                 indicator_ref: None,
15577 +                 type_0: 2 as libc::c_int,
15578 +                 inputs: 1 as libc::c_int,
15579 +                 options: 2 as libc::c_int,
15580 +                 outputs: 1 as libc::c_int,
15581 +                 input_names: [
15582 +                     b"volume\0" as *const u8 as *const libc::c_char,
15583 +                     0 as *const libc::c_char,
15584 +                     0 as *const libc::c_char,
15585 +                     0 as *const libc::c_char,
15586 +                     0 as *const libc::c_char,
15587 +                     0 as *const libc::c_char,
15588 +                     0 as *const libc::c_char,
15589 +                     0 as *const libc::c_char,
15590 +                     0 as *const libc::c_char,
15591 +                     0 as *const libc::c_char,
15592 +                     0 as *const libc::c_char,
15593 +                     0 as *const libc::c_char,
15594 +                     0 as *const libc::c_char,
15595 +                     0 as *const libc::c_char,
15596 +                     0 as *const libc::c_char,
15597 +                     0 as *const libc::c_char,
15598 +                 ],
15599 +                 option_names: [
15600 +                     b"short_period\0" as *const u8 as *const libc::c_char,
15601 +                     b"long_period\0" as *const u8 as *const libc::c_char,
15602 +                     0 as *const libc::c_char,
15603 +                     0 as *const libc::c_char,
15604 +                     0 as *const libc::c_char,
15605 +                     0 as *const libc::c_char,
15606 +                     0 as *const libc::c_char,
15607 +                     0 as *const libc::c_char,
15608 +                     0 as *const libc::c_char,
15609 +                     0 as *const libc::c_char,
15610 +                     0 as *const libc::c_char,
15611 +                     0 as *const libc::c_char,
15612 +                     0 as *const libc::c_char,
15613 +                     0 as *const libc::c_char,
15614 +                     0 as *const libc::c_char,
15615 +                     0 as *const libc::c_char,
15616 +                 ],
15617 +                 output_names: [
15618 +                     b"vosc\0" as *const u8 as *const libc::c_char,
15619 +                     0 as *const libc::c_char,
15620 +                     0 as *const libc::c_char,
15621 +                     0 as *const libc::c_char,
15622 +                     0 as *const libc::c_char,
15623 +                     0 as *const libc::c_char,
15624 +                     0 as *const libc::c_char,
15625 +                     0 as *const libc::c_char,
15626 +                     0 as *const libc::c_char,
15627 +                     0 as *const libc::c_char,
15628 +                     0 as *const libc::c_char,
15629 +                     0 as *const libc::c_char,
15630 +                     0 as *const libc::c_char,
15631 +                     0 as *const libc::c_char,
15632 +                     0 as *const libc::c_char,
15633 +                     0 as *const libc::c_char,
15634 +                 ],
15635 +                 stream_new: None,
15636 +                 stream_run: None,
15637 +                 stream_free: None,
15638 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:15721:13
      |
15641 | /             let mut init = ti_indicator_info {
15642 | |                 name: b"vwma\0" as *const u8 as *const libc::c_char,
15643 | |                 full_name: b"Volume Weighted Moving Average\0" as *const u8
15644 | |                     as *const libc::c_char,
...     |
15719 | |                 stream_free: None,
15720 | |             };
      | |______________- unnecessary `let` binding
15721 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
15641 ~             
15642 ~             ti_indicator_info {
15643 +                 name: b"vwma\0" as *const u8 as *const libc::c_char,
15644 +                 full_name: b"Volume Weighted Moving Average\0" as *const u8
15645 +                     as *const libc::c_char,
15646 +                 start: Some(
15647 +                     ti_vwma_start
15648 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
15649 +                 ),
15650 +                 indicator: Some(
15651 +                     ti_vwma
15652 +                         as unsafe extern "C" fn(
15653 +                             libc::c_int,
15654 +                             *const *const libc::c_double,
15655 +                             *const libc::c_double,
15656 +                             *const *mut libc::c_double,
15657 +                         ) -> libc::c_int,
15658 +                 ),
15659 +                 indicator_ref: None,
15660 +                 type_0: 1 as libc::c_int,
15661 +                 inputs: 2 as libc::c_int,
15662 +                 options: 1 as libc::c_int,
15663 +                 outputs: 1 as libc::c_int,
15664 +                 input_names: [
15665 +                     b"close\0" as *const u8 as *const libc::c_char,
15666 +                     b"volume\0" as *const u8 as *const libc::c_char,
15667 +                     0 as *const libc::c_char,
15668 +                     0 as *const libc::c_char,
15669 +                     0 as *const libc::c_char,
15670 +                     0 as *const libc::c_char,
15671 +                     0 as *const libc::c_char,
15672 +                     0 as *const libc::c_char,
15673 +                     0 as *const libc::c_char,
15674 +                     0 as *const libc::c_char,
15675 +                     0 as *const libc::c_char,
15676 +                     0 as *const libc::c_char,
15677 +                     0 as *const libc::c_char,
15678 +                     0 as *const libc::c_char,
15679 +                     0 as *const libc::c_char,
15680 +                     0 as *const libc::c_char,
15681 +                 ],
15682 +                 option_names: [
15683 +                     b"period\0" as *const u8 as *const libc::c_char,
15684 +                     0 as *const libc::c_char,
15685 +                     0 as *const libc::c_char,
15686 +                     0 as *const libc::c_char,
15687 +                     0 as *const libc::c_char,
15688 +                     0 as *const libc::c_char,
15689 +                     0 as *const libc::c_char,
15690 +                     0 as *const libc::c_char,
15691 +                     0 as *const libc::c_char,
15692 +                     0 as *const libc::c_char,
15693 +                     0 as *const libc::c_char,
15694 +                     0 as *const libc::c_char,
15695 +                     0 as *const libc::c_char,
15696 +                     0 as *const libc::c_char,
15697 +                     0 as *const libc::c_char,
15698 +                     0 as *const libc::c_char,
15699 +                 ],
15700 +                 output_names: [
15701 +                     b"vwma\0" as *const u8 as *const libc::c_char,
15702 +                     0 as *const libc::c_char,
15703 +                     0 as *const libc::c_char,
15704 +                     0 as *const libc::c_char,
15705 +                     0 as *const libc::c_char,
15706 +                     0 as *const libc::c_char,
15707 +                     0 as *const libc::c_char,
15708 +                     0 as *const libc::c_char,
15709 +                     0 as *const libc::c_char,
15710 +                     0 as *const libc::c_char,
15711 +                     0 as *const libc::c_char,
15712 +                     0 as *const libc::c_char,
15713 +                     0 as *const libc::c_char,
15714 +                     0 as *const libc::c_char,
15715 +                     0 as *const libc::c_char,
15716 +                     0 as *const libc::c_char,
15717 +                 ],
15718 +                 stream_new: None,
15719 +                 stream_run: None,
15720 +                 stream_free: None,
15721 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:15804:13
      |
15724 | /             let mut init = ti_indicator_info {
15725 | |                 name: b"wad\0" as *const u8 as *const libc::c_char,
15726 | |                 full_name: b"Williams Accumulation/Distribution\0" as *const u8
15727 | |                     as *const libc::c_char,
...     |
15802 | |                 stream_free: None,
15803 | |             };
      | |______________- unnecessary `let` binding
15804 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
15724 ~             
15725 ~             ti_indicator_info {
15726 +                 name: b"wad\0" as *const u8 as *const libc::c_char,
15727 +                 full_name: b"Williams Accumulation/Distribution\0" as *const u8
15728 +                     as *const libc::c_char,
15729 +                 start: Some(
15730 +                     ti_wad_start
15731 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
15732 +                 ),
15733 +                 indicator: Some(
15734 +                     ti_wad
15735 +                         as unsafe extern "C" fn(
15736 +                             libc::c_int,
15737 +                             *const *const libc::c_double,
15738 +                             *const libc::c_double,
15739 +                             *const *mut libc::c_double,
15740 +                         ) -> libc::c_int,
15741 +                 ),
15742 +                 indicator_ref: None,
15743 +                 type_0: 2 as libc::c_int,
15744 +                 inputs: 3 as libc::c_int,
15745 +                 options: 0 as libc::c_int,
15746 +                 outputs: 1 as libc::c_int,
15747 +                 input_names: [
15748 +                     b"high\0" as *const u8 as *const libc::c_char,
15749 +                     b"low\0" as *const u8 as *const libc::c_char,
15750 +                     b"close\0" as *const u8 as *const libc::c_char,
15751 +                     0 as *const libc::c_char,
15752 +                     0 as *const libc::c_char,
15753 +                     0 as *const libc::c_char,
15754 +                     0 as *const libc::c_char,
15755 +                     0 as *const libc::c_char,
15756 +                     0 as *const libc::c_char,
15757 +                     0 as *const libc::c_char,
15758 +                     0 as *const libc::c_char,
15759 +                     0 as *const libc::c_char,
15760 +                     0 as *const libc::c_char,
15761 +                     0 as *const libc::c_char,
15762 +                     0 as *const libc::c_char,
15763 +                     0 as *const libc::c_char,
15764 +                 ],
15765 +                 option_names: [
15766 +                     b"\0" as *const u8 as *const libc::c_char,
15767 +                     0 as *const libc::c_char,
15768 +                     0 as *const libc::c_char,
15769 +                     0 as *const libc::c_char,
15770 +                     0 as *const libc::c_char,
15771 +                     0 as *const libc::c_char,
15772 +                     0 as *const libc::c_char,
15773 +                     0 as *const libc::c_char,
15774 +                     0 as *const libc::c_char,
15775 +                     0 as *const libc::c_char,
15776 +                     0 as *const libc::c_char,
15777 +                     0 as *const libc::c_char,
15778 +                     0 as *const libc::c_char,
15779 +                     0 as *const libc::c_char,
15780 +                     0 as *const libc::c_char,
15781 +                     0 as *const libc::c_char,
15782 +                 ],
15783 +                 output_names: [
15784 +                     b"wad\0" as *const u8 as *const libc::c_char,
15785 +                     0 as *const libc::c_char,
15786 +                     0 as *const libc::c_char,
15787 +                     0 as *const libc::c_char,
15788 +                     0 as *const libc::c_char,
15789 +                     0 as *const libc::c_char,
15790 +                     0 as *const libc::c_char,
15791 +                     0 as *const libc::c_char,
15792 +                     0 as *const libc::c_char,
15793 +                     0 as *const libc::c_char,
15794 +                     0 as *const libc::c_char,
15795 +                     0 as *const libc::c_char,
15796 +                     0 as *const libc::c_char,
15797 +                     0 as *const libc::c_char,
15798 +                     0 as *const libc::c_char,
15799 +                     0 as *const libc::c_char,
15800 +                 ],
15801 +                 stream_new: None,
15802 +                 stream_run: None,
15803 +                 stream_free: None,
15804 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:15886:13
      |
15807 | /             let mut init = ti_indicator_info {
15808 | |                 name: b"wcprice\0" as *const u8 as *const libc::c_char,
15809 | |                 full_name: b"Weighted Close Price\0" as *const u8 as *const libc::c_char,
15810 | |                 start: Some(
...     |
15884 | |                 stream_free: None,
15885 | |             };
      | |______________- unnecessary `let` binding
15886 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
15807 ~             
15808 ~             ti_indicator_info {
15809 +                 name: b"wcprice\0" as *const u8 as *const libc::c_char,
15810 +                 full_name: b"Weighted Close Price\0" as *const u8 as *const libc::c_char,
15811 +                 start: Some(
15812 +                     ti_wcprice_start
15813 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
15814 +                 ),
15815 +                 indicator: Some(
15816 +                     ti_wcprice
15817 +                         as unsafe extern "C" fn(
15818 +                             libc::c_int,
15819 +                             *const *const libc::c_double,
15820 +                             *const libc::c_double,
15821 +                             *const *mut libc::c_double,
15822 +                         ) -> libc::c_int,
15823 +                 ),
15824 +                 indicator_ref: None,
15825 +                 type_0: 1 as libc::c_int,
15826 +                 inputs: 3 as libc::c_int,
15827 +                 options: 0 as libc::c_int,
15828 +                 outputs: 1 as libc::c_int,
15829 +                 input_names: [
15830 +                     b"high\0" as *const u8 as *const libc::c_char,
15831 +                     b"low\0" as *const u8 as *const libc::c_char,
15832 +                     b"close\0" as *const u8 as *const libc::c_char,
15833 +                     0 as *const libc::c_char,
15834 +                     0 as *const libc::c_char,
15835 +                     0 as *const libc::c_char,
15836 +                     0 as *const libc::c_char,
15837 +                     0 as *const libc::c_char,
15838 +                     0 as *const libc::c_char,
15839 +                     0 as *const libc::c_char,
15840 +                     0 as *const libc::c_char,
15841 +                     0 as *const libc::c_char,
15842 +                     0 as *const libc::c_char,
15843 +                     0 as *const libc::c_char,
15844 +                     0 as *const libc::c_char,
15845 +                     0 as *const libc::c_char,
15846 +                 ],
15847 +                 option_names: [
15848 +                     b"\0" as *const u8 as *const libc::c_char,
15849 +                     0 as *const libc::c_char,
15850 +                     0 as *const libc::c_char,
15851 +                     0 as *const libc::c_char,
15852 +                     0 as *const libc::c_char,
15853 +                     0 as *const libc::c_char,
15854 +                     0 as *const libc::c_char,
15855 +                     0 as *const libc::c_char,
15856 +                     0 as *const libc::c_char,
15857 +                     0 as *const libc::c_char,
15858 +                     0 as *const libc::c_char,
15859 +                     0 as *const libc::c_char,
15860 +                     0 as *const libc::c_char,
15861 +                     0 as *const libc::c_char,
15862 +                     0 as *const libc::c_char,
15863 +                     0 as *const libc::c_char,
15864 +                 ],
15865 +                 output_names: [
15866 +                     b"wcprice\0" as *const u8 as *const libc::c_char,
15867 +                     0 as *const libc::c_char,
15868 +                     0 as *const libc::c_char,
15869 +                     0 as *const libc::c_char,
15870 +                     0 as *const libc::c_char,
15871 +                     0 as *const libc::c_char,
15872 +                     0 as *const libc::c_char,
15873 +                     0 as *const libc::c_char,
15874 +                     0 as *const libc::c_char,
15875 +                     0 as *const libc::c_char,
15876 +                     0 as *const libc::c_char,
15877 +                     0 as *const libc::c_char,
15878 +                     0 as *const libc::c_char,
15879 +                     0 as *const libc::c_char,
15880 +                     0 as *const libc::c_char,
15881 +                     0 as *const libc::c_char,
15882 +                 ],
15883 +                 stream_new: None,
15884 +                 stream_run: None,
15885 +                 stream_free: None,
15886 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:15968:13
      |
15889 | /             let mut init = ti_indicator_info {
15890 | |                 name: b"wilders\0" as *const u8 as *const libc::c_char,
15891 | |                 full_name: b"Wilders Smoothing\0" as *const u8 as *const libc::c_char,
15892 | |                 start: Some(
...     |
15966 | |                 stream_free: None,
15967 | |             };
      | |______________- unnecessary `let` binding
15968 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
15889 ~             
15890 ~             ti_indicator_info {
15891 +                 name: b"wilders\0" as *const u8 as *const libc::c_char,
15892 +                 full_name: b"Wilders Smoothing\0" as *const u8 as *const libc::c_char,
15893 +                 start: Some(
15894 +                     ti_wilders_start
15895 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
15896 +                 ),
15897 +                 indicator: Some(
15898 +                     ti_wilders
15899 +                         as unsafe extern "C" fn(
15900 +                             libc::c_int,
15901 +                             *const *const libc::c_double,
15902 +                             *const libc::c_double,
15903 +                             *const *mut libc::c_double,
15904 +                         ) -> libc::c_int,
15905 +                 ),
15906 +                 indicator_ref: None,
15907 +                 type_0: 1 as libc::c_int,
15908 +                 inputs: 1 as libc::c_int,
15909 +                 options: 1 as libc::c_int,
15910 +                 outputs: 1 as libc::c_int,
15911 +                 input_names: [
15912 +                     b"real\0" as *const u8 as *const libc::c_char,
15913 +                     0 as *const libc::c_char,
15914 +                     0 as *const libc::c_char,
15915 +                     0 as *const libc::c_char,
15916 +                     0 as *const libc::c_char,
15917 +                     0 as *const libc::c_char,
15918 +                     0 as *const libc::c_char,
15919 +                     0 as *const libc::c_char,
15920 +                     0 as *const libc::c_char,
15921 +                     0 as *const libc::c_char,
15922 +                     0 as *const libc::c_char,
15923 +                     0 as *const libc::c_char,
15924 +                     0 as *const libc::c_char,
15925 +                     0 as *const libc::c_char,
15926 +                     0 as *const libc::c_char,
15927 +                     0 as *const libc::c_char,
15928 +                 ],
15929 +                 option_names: [
15930 +                     b"period\0" as *const u8 as *const libc::c_char,
15931 +                     0 as *const libc::c_char,
15932 +                     0 as *const libc::c_char,
15933 +                     0 as *const libc::c_char,
15934 +                     0 as *const libc::c_char,
15935 +                     0 as *const libc::c_char,
15936 +                     0 as *const libc::c_char,
15937 +                     0 as *const libc::c_char,
15938 +                     0 as *const libc::c_char,
15939 +                     0 as *const libc::c_char,
15940 +                     0 as *const libc::c_char,
15941 +                     0 as *const libc::c_char,
15942 +                     0 as *const libc::c_char,
15943 +                     0 as *const libc::c_char,
15944 +                     0 as *const libc::c_char,
15945 +                     0 as *const libc::c_char,
15946 +                 ],
15947 +                 output_names: [
15948 +                     b"wilders\0" as *const u8 as *const libc::c_char,
15949 +                     0 as *const libc::c_char,
15950 +                     0 as *const libc::c_char,
15951 +                     0 as *const libc::c_char,
15952 +                     0 as *const libc::c_char,
15953 +                     0 as *const libc::c_char,
15954 +                     0 as *const libc::c_char,
15955 +                     0 as *const libc::c_char,
15956 +                     0 as *const libc::c_char,
15957 +                     0 as *const libc::c_char,
15958 +                     0 as *const libc::c_char,
15959 +                     0 as *const libc::c_char,
15960 +                     0 as *const libc::c_char,
15961 +                     0 as *const libc::c_char,
15962 +                     0 as *const libc::c_char,
15963 +                     0 as *const libc::c_char,
15964 +                 ],
15965 +                 stream_new: None,
15966 +                 stream_run: None,
15967 +                 stream_free: None,
15968 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:16050:13
      |
15971 | /             let mut init = ti_indicator_info {
15972 | |                 name: b"willr\0" as *const u8 as *const libc::c_char,
15973 | |                 full_name: b"Williams %R\0" as *const u8 as *const libc::c_char,
15974 | |                 start: Some(
...     |
16048 | |                 stream_free: None,
16049 | |             };
      | |______________- unnecessary `let` binding
16050 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
15971 ~             
15972 ~             ti_indicator_info {
15973 +                 name: b"willr\0" as *const u8 as *const libc::c_char,
15974 +                 full_name: b"Williams %R\0" as *const u8 as *const libc::c_char,
15975 +                 start: Some(
15976 +                     ti_willr_start
15977 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
15978 +                 ),
15979 +                 indicator: Some(
15980 +                     ti_willr
15981 +                         as unsafe extern "C" fn(
15982 +                             libc::c_int,
15983 +                             *const *const libc::c_double,
15984 +                             *const libc::c_double,
15985 +                             *const *mut libc::c_double,
15986 +                         ) -> libc::c_int,
15987 +                 ),
15988 +                 indicator_ref: None,
15989 +                 type_0: 2 as libc::c_int,
15990 +                 inputs: 3 as libc::c_int,
15991 +                 options: 1 as libc::c_int,
15992 +                 outputs: 1 as libc::c_int,
15993 +                 input_names: [
15994 +                     b"high\0" as *const u8 as *const libc::c_char,
15995 +                     b"low\0" as *const u8 as *const libc::c_char,
15996 +                     b"close\0" as *const u8 as *const libc::c_char,
15997 +                     0 as *const libc::c_char,
15998 +                     0 as *const libc::c_char,
15999 +                     0 as *const libc::c_char,
16000 +                     0 as *const libc::c_char,
16001 +                     0 as *const libc::c_char,
16002 +                     0 as *const libc::c_char,
16003 +                     0 as *const libc::c_char,
16004 +                     0 as *const libc::c_char,
16005 +                     0 as *const libc::c_char,
16006 +                     0 as *const libc::c_char,
16007 +                     0 as *const libc::c_char,
16008 +                     0 as *const libc::c_char,
16009 +                     0 as *const libc::c_char,
16010 +                 ],
16011 +                 option_names: [
16012 +                     b"period\0" as *const u8 as *const libc::c_char,
16013 +                     0 as *const libc::c_char,
16014 +                     0 as *const libc::c_char,
16015 +                     0 as *const libc::c_char,
16016 +                     0 as *const libc::c_char,
16017 +                     0 as *const libc::c_char,
16018 +                     0 as *const libc::c_char,
16019 +                     0 as *const libc::c_char,
16020 +                     0 as *const libc::c_char,
16021 +                     0 as *const libc::c_char,
16022 +                     0 as *const libc::c_char,
16023 +                     0 as *const libc::c_char,
16024 +                     0 as *const libc::c_char,
16025 +                     0 as *const libc::c_char,
16026 +                     0 as *const libc::c_char,
16027 +                     0 as *const libc::c_char,
16028 +                 ],
16029 +                 output_names: [
16030 +                     b"willr\0" as *const u8 as *const libc::c_char,
16031 +                     0 as *const libc::c_char,
16032 +                     0 as *const libc::c_char,
16033 +                     0 as *const libc::c_char,
16034 +                     0 as *const libc::c_char,
16035 +                     0 as *const libc::c_char,
16036 +                     0 as *const libc::c_char,
16037 +                     0 as *const libc::c_char,
16038 +                     0 as *const libc::c_char,
16039 +                     0 as *const libc::c_char,
16040 +                     0 as *const libc::c_char,
16041 +                     0 as *const libc::c_char,
16042 +                     0 as *const libc::c_char,
16043 +                     0 as *const libc::c_char,
16044 +                     0 as *const libc::c_char,
16045 +                     0 as *const libc::c_char,
16046 +                 ],
16047 +                 stream_new: None,
16048 +                 stream_run: None,
16049 +                 stream_free: None,
16050 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:16133:13
      |
16053 | /             let mut init = ti_indicator_info {
16054 | |                 name: b"wma\0" as *const u8 as *const libc::c_char,
16055 | |                 full_name: b"Weighted Moving Average\0" as *const u8
16056 | |                     as *const libc::c_char,
...     |
16131 | |                 stream_free: None,
16132 | |             };
      | |______________- unnecessary `let` binding
16133 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
16053 ~             
16054 ~             ti_indicator_info {
16055 +                 name: b"wma\0" as *const u8 as *const libc::c_char,
16056 +                 full_name: b"Weighted Moving Average\0" as *const u8
16057 +                     as *const libc::c_char,
16058 +                 start: Some(
16059 +                     ti_wma_start
16060 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
16061 +                 ),
16062 +                 indicator: Some(
16063 +                     ti_wma
16064 +                         as unsafe extern "C" fn(
16065 +                             libc::c_int,
16066 +                             *const *const libc::c_double,
16067 +                             *const libc::c_double,
16068 +                             *const *mut libc::c_double,
16069 +                         ) -> libc::c_int,
16070 +                 ),
16071 +                 indicator_ref: None,
16072 +                 type_0: 1 as libc::c_int,
16073 +                 inputs: 1 as libc::c_int,
16074 +                 options: 1 as libc::c_int,
16075 +                 outputs: 1 as libc::c_int,
16076 +                 input_names: [
16077 +                     b"real\0" as *const u8 as *const libc::c_char,
16078 +                     0 as *const libc::c_char,
16079 +                     0 as *const libc::c_char,
16080 +                     0 as *const libc::c_char,
16081 +                     0 as *const libc::c_char,
16082 +                     0 as *const libc::c_char,
16083 +                     0 as *const libc::c_char,
16084 +                     0 as *const libc::c_char,
16085 +                     0 as *const libc::c_char,
16086 +                     0 as *const libc::c_char,
16087 +                     0 as *const libc::c_char,
16088 +                     0 as *const libc::c_char,
16089 +                     0 as *const libc::c_char,
16090 +                     0 as *const libc::c_char,
16091 +                     0 as *const libc::c_char,
16092 +                     0 as *const libc::c_char,
16093 +                 ],
16094 +                 option_names: [
16095 +                     b"period\0" as *const u8 as *const libc::c_char,
16096 +                     0 as *const libc::c_char,
16097 +                     0 as *const libc::c_char,
16098 +                     0 as *const libc::c_char,
16099 +                     0 as *const libc::c_char,
16100 +                     0 as *const libc::c_char,
16101 +                     0 as *const libc::c_char,
16102 +                     0 as *const libc::c_char,
16103 +                     0 as *const libc::c_char,
16104 +                     0 as *const libc::c_char,
16105 +                     0 as *const libc::c_char,
16106 +                     0 as *const libc::c_char,
16107 +                     0 as *const libc::c_char,
16108 +                     0 as *const libc::c_char,
16109 +                     0 as *const libc::c_char,
16110 +                     0 as *const libc::c_char,
16111 +                 ],
16112 +                 output_names: [
16113 +                     b"wma\0" as *const u8 as *const libc::c_char,
16114 +                     0 as *const libc::c_char,
16115 +                     0 as *const libc::c_char,
16116 +                     0 as *const libc::c_char,
16117 +                     0 as *const libc::c_char,
16118 +                     0 as *const libc::c_char,
16119 +                     0 as *const libc::c_char,
16120 +                     0 as *const libc::c_char,
16121 +                     0 as *const libc::c_char,
16122 +                     0 as *const libc::c_char,
16123 +                     0 as *const libc::c_char,
16124 +                     0 as *const libc::c_char,
16125 +                     0 as *const libc::c_char,
16126 +                     0 as *const libc::c_char,
16127 +                     0 as *const libc::c_char,
16128 +                     0 as *const libc::c_char,
16129 +                 ],
16130 +                 stream_new: None,
16131 +                 stream_run: None,
16132 +                 stream_free: None,
16133 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:16216:13
      |
16136 | /             let mut init = ti_indicator_info {
16137 | |                 name: b"zlema\0" as *const u8 as *const libc::c_char,
16138 | |                 full_name: b"Zero-Lag Exponential Moving Average\0" as *const u8
16139 | |                     as *const libc::c_char,
...     |
16214 | |                 stream_free: None,
16215 | |             };
      | |______________- unnecessary `let` binding
16216 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
16136 ~             
16137 ~             ti_indicator_info {
16138 +                 name: b"zlema\0" as *const u8 as *const libc::c_char,
16139 +                 full_name: b"Zero-Lag Exponential Moving Average\0" as *const u8
16140 +                     as *const libc::c_char,
16141 +                 start: Some(
16142 +                     ti_zlema_start
16143 +                         as unsafe extern "C" fn(*const libc::c_double) -> libc::c_int,
16144 +                 ),
16145 +                 indicator: Some(
16146 +                     ti_zlema
16147 +                         as unsafe extern "C" fn(
16148 +                             libc::c_int,
16149 +                             *const *const libc::c_double,
16150 +                             *const libc::c_double,
16151 +                             *const *mut libc::c_double,
16152 +                         ) -> libc::c_int,
16153 +                 ),
16154 +                 indicator_ref: None,
16155 +                 type_0: 1 as libc::c_int,
16156 +                 inputs: 1 as libc::c_int,
16157 +                 options: 1 as libc::c_int,
16158 +                 outputs: 1 as libc::c_int,
16159 +                 input_names: [
16160 +                     b"real\0" as *const u8 as *const libc::c_char,
16161 +                     0 as *const libc::c_char,
16162 +                     0 as *const libc::c_char,
16163 +                     0 as *const libc::c_char,
16164 +                     0 as *const libc::c_char,
16165 +                     0 as *const libc::c_char,
16166 +                     0 as *const libc::c_char,
16167 +                     0 as *const libc::c_char,
16168 +                     0 as *const libc::c_char,
16169 +                     0 as *const libc::c_char,
16170 +                     0 as *const libc::c_char,
16171 +                     0 as *const libc::c_char,
16172 +                     0 as *const libc::c_char,
16173 +                     0 as *const libc::c_char,
16174 +                     0 as *const libc::c_char,
16175 +                     0 as *const libc::c_char,
16176 +                 ],
16177 +                 option_names: [
16178 +                     b"period\0" as *const u8 as *const libc::c_char,
16179 +                     0 as *const libc::c_char,
16180 +                     0 as *const libc::c_char,
16181 +                     0 as *const libc::c_char,
16182 +                     0 as *const libc::c_char,
16183 +                     0 as *const libc::c_char,
16184 +                     0 as *const libc::c_char,
16185 +                     0 as *const libc::c_char,
16186 +                     0 as *const libc::c_char,
16187 +                     0 as *const libc::c_char,
16188 +                     0 as *const libc::c_char,
16189 +                     0 as *const libc::c_char,
16190 +                     0 as *const libc::c_char,
16191 +                     0 as *const libc::c_char,
16192 +                     0 as *const libc::c_char,
16193 +                     0 as *const libc::c_char,
16194 +                 ],
16195 +                 output_names: [
16196 +                     b"zlema\0" as *const u8 as *const libc::c_char,
16197 +                     0 as *const libc::c_char,
16198 +                     0 as *const libc::c_char,
16199 +                     0 as *const libc::c_char,
16200 +                     0 as *const libc::c_char,
16201 +                     0 as *const libc::c_char,
16202 +                     0 as *const libc::c_char,
16203 +                     0 as *const libc::c_char,
16204 +                     0 as *const libc::c_char,
16205 +                     0 as *const libc::c_char,
16206 +                     0 as *const libc::c_char,
16207 +                     0 as *const libc::c_char,
16208 +                     0 as *const libc::c_char,
16209 +                     0 as *const libc::c_char,
16210 +                     0 as *const libc::c_char,
16211 +                     0 as *const libc::c_char,
16212 +                 ],
16213 +                 stream_new: None,
16214 +                 stream_run: None,
16215 +                 stream_free: None,
16216 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:16287:13
      |
16219 | /             let mut init = ti_indicator_info {
16220 | |                 name: 0 as *const libc::c_char,
16221 | |                 full_name: 0 as *const libc::c_char,
16222 | |                 start: None,
...     |
16285 | |                 stream_free: None,
16286 | |             };
      | |______________- unnecessary `let` binding
16287 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
16219 ~             
16220 ~             ti_indicator_info {
16221 +                 name: 0 as *const libc::c_char,
16222 +                 full_name: 0 as *const libc::c_char,
16223 +                 start: None,
16224 +                 indicator: None,
16225 +                 indicator_ref: None,
16226 +                 type_0: 0 as libc::c_int,
16227 +                 inputs: 0 as libc::c_int,
16228 +                 options: 0 as libc::c_int,
16229 +                 outputs: 0 as libc::c_int,
16230 +                 input_names: [
16231 +                     0 as *const libc::c_char,
16232 +                     0 as *const libc::c_char,
16233 +                     0 as *const libc::c_char,
16234 +                     0 as *const libc::c_char,
16235 +                     0 as *const libc::c_char,
16236 +                     0 as *const libc::c_char,
16237 +                     0 as *const libc::c_char,
16238 +                     0 as *const libc::c_char,
16239 +                     0 as *const libc::c_char,
16240 +                     0 as *const libc::c_char,
16241 +                     0 as *const libc::c_char,
16242 +                     0 as *const libc::c_char,
16243 +                     0 as *const libc::c_char,
16244 +                     0 as *const libc::c_char,
16245 +                     0 as *const libc::c_char,
16246 +                     0 as *const libc::c_char,
16247 +                 ],
16248 +                 option_names: [
16249 +                     0 as *const libc::c_char,
16250 +                     0 as *const libc::c_char,
16251 +                     0 as *const libc::c_char,
16252 +                     0 as *const libc::c_char,
16253 +                     0 as *const libc::c_char,
16254 +                     0 as *const libc::c_char,
16255 +                     0 as *const libc::c_char,
16256 +                     0 as *const libc::c_char,
16257 +                     0 as *const libc::c_char,
16258 +                     0 as *const libc::c_char,
16259 +                     0 as *const libc::c_char,
16260 +                     0 as *const libc::c_char,
16261 +                     0 as *const libc::c_char,
16262 +                     0 as *const libc::c_char,
16263 +                     0 as *const libc::c_char,
16264 +                     0 as *const libc::c_char,
16265 +                 ],
16266 +                 output_names: [
16267 +                     0 as *const libc::c_char,
16268 +                     0 as *const libc::c_char,
16269 +                     0 as *const libc::c_char,
16270 +                     0 as *const libc::c_char,
16271 +                     0 as *const libc::c_char,
16272 +                     0 as *const libc::c_char,
16273 +                     0 as *const libc::c_char,
16274 +                     0 as *const libc::c_char,
16275 +                     0 as *const libc::c_char,
16276 +                     0 as *const libc::c_char,
16277 +                     0 as *const libc::c_char,
16278 +                     0 as *const libc::c_char,
16279 +                     0 as *const libc::c_char,
16280 +                     0 as *const libc::c_char,
16281 +                     0 as *const libc::c_char,
16282 +                     0 as *const libc::c_char,
16283 +                 ],
16284 +                 stream_new: None,
16285 +                 stream_run: None,
16286 +                 stream_free: None,
16287 +             }
      |

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:16292:1
      |
16292 | / pub unsafe extern "C" fn ti_stream_run(
16293 | |     mut stream: *mut ti_stream,
16294 | |     mut size: libc::c_int,
16295 | |     mut inputs: *const *const libc::c_double,
...     |
16299 | |         .expect("non-null function pointer")(stream, size, inputs, outputs);
16300 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:16298:5
      |
16298 | /     return (ti_indicators[(*stream).index as usize].stream_run)
16299 | |         .expect("non-null function pointer")(stream, size, inputs, outputs);
      | |____________________________________________________________________________^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
      |
16298 ~     (ti_indicators[(*stream).index as usize].stream_run)
16299 +         .expect("non-null function pointer")(stream, size, inputs, outputs)
      |

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:16302:1
      |
16302 | / pub unsafe extern "C" fn ti_stream_get_info(
16303 | |     mut stream: *mut ti_stream,
16304 | | ) -> *mut ti_indicator_info {
16305 | |     return ti_indicators.as_mut_ptr().offset((*stream).index as isize);
16306 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:16305:5
      |
16305 |     return ti_indicators.as_mut_ptr().offset((*stream).index as isize);
      |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `ti_indicators.as_mut_ptr().offset((*stream).index as isize)`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:16308:1
      |
16308 | / pub unsafe extern "C" fn ti_stream_get_progress(
16309 | |     mut stream: *mut ti_stream,
16310 | | ) -> libc::c_int {
16311 | |     return (*stream).progress;
16312 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:16311:5
      |
16311 |     return (*stream).progress;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `(*stream).progress`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:16314:1
      |
16314 | / pub unsafe extern "C" fn ti_stream_free(mut stream: *mut ti_stream) {
16315 | |     (ti_indicators[(*stream).index as usize].stream_free)
16316 | |         .expect("non-null function pointer")(stream);
16317 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:16319:1
      |
16319 | / pub unsafe extern "C" fn ti_find_indicator(
16320 | |     mut name: *const libc::c_char,
16321 | | ) -> *const ti_indicator_info {
16322 | |     let mut imin: libc::c_int = 0 as libc::c_int;
...     |
16338 | |     return 0 as *const ti_indicator_info;
16339 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:16338:5
      |
16338 |     return 0 as *const ti_indicator_info;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as *const ti_indicator_info`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `if` chain can be rewritten with `match`
     --> src/tiamalgamation.rs:16330:9
      |
16330 | /         if c == 0 as libc::c_int {
16331 | |             return ti_indicators.as_mut_ptr().offset(i as isize)
16332 | |         } else if c > 0 as libc::c_int {
16333 | |             imin = i + 1 as libc::c_int;
16334 | |         } else {
16335 | |             imax = i - 1 as libc::c_int;
16336 | |         }
      | |_________^
      |
      = help: consider rewriting the `if` chain to use `cmp` and `match`
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain

warning: `0 as *const _` detected
     --> src/tiamalgamation.rs:16338:12
      |
16338 |     return 0 as *const ti_indicator_info;
      |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<ti_indicator_info>()`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:16341:1
      |
16341 | / pub unsafe extern "C" fn tc_version() -> *const libc::c_char {
16342 | |     return b"0.9.2\0" as *const u8 as *const libc::c_char;
16343 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:16342:5
      |
16342 |     return b"0.9.2\0" as *const u8 as *const libc::c_char;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `b"0.9.2\0" as *const u8 as *const libc::c_char`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:16345:1
      |
16345 | / pub unsafe extern "C" fn tc_build() -> libc::c_long {
16346 | |     return 1743602909 as libc::c_int as libc::c_long;
16347 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:16346:5
      |
16346 |     return 1743602909 as libc::c_int as libc::c_long;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1743602909 as libc::c_int as libc::c_long`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:16349:1
      |
16349 | / pub unsafe extern "C" fn tc_candle_count() -> libc::c_int {
16350 | |     return 26 as libc::c_int;
16351 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:16350:5
      |
16350 |     return 26 as libc::c_int;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `26 as libc::c_int`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:16353:1
      |
16353 | / pub unsafe extern "C" fn tc_config_default() -> *const tc_config {
16354 | |     static mut default_config: tc_config = {
16355 | |         let mut init = tc_config {
16356 | |             period: 10 as libc::c_int,
...     |
16366 | |     return &mut default_config;
16367 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:16366:5
      |
16366 |     return &mut default_config;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `&mut default_config`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:16364:9
      |
16355 | /         let mut init = tc_config {
16356 | |             period: 10 as libc::c_int,
16357 | |             body_none: 0.05f64,
16358 | |             body_short: 0.5f64,
...     |
16362 | |             near: 0.3f64,
16363 | |         };
      | |__________- unnecessary `let` binding
16364 |           init
      |           ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
16355 ~         
16356 ~         tc_config {
16357 +             period: 10 as libc::c_int,
16358 +             body_none: 0.05f64,
16359 +             body_short: 0.5f64,
16360 +             body_long: 1.4f64,
16361 +             wick_none: 0.05f64,
16362 +             wick_long: 0.6f64,
16363 +             near: 0.3f64,
16364 +         }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:16386:13
      |
16372 | /             let mut init = tc_candle_info {
16373 | |                 name: b"abandoned_baby_bear\0" as *const u8 as *const libc::c_char,
16374 | |                 full_name: b"Abandoned Baby Bear\0" as *const u8 as *const libc::c_char,
16375 | |                 pattern: ((1 as libc::c_long) << 0 as libc::c_int) as tc_set,
...     |
16384 | |                 ),
16385 | |             };
      | |______________- unnecessary `let` binding
16386 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
16372 ~             
16373 ~             tc_candle_info {
16374 +                 name: b"abandoned_baby_bear\0" as *const u8 as *const libc::c_char,
16375 +                 full_name: b"Abandoned Baby Bear\0" as *const u8 as *const libc::c_char,
16376 +                 pattern: ((1 as libc::c_long) << 0 as libc::c_int) as tc_set,
16377 +                 candle: Some(
16378 +                     tc_abandoned_baby_bear
16379 +                         as unsafe extern "C" fn(
16380 +                             libc::c_int,
16381 +                             *const *const TC_REAL,
16382 +                             *const tc_config,
16383 +                             *mut tc_result,
16384 +                         ) -> libc::c_int,
16385 +                 ),
16386 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:16403:13
      |
16389 | /             let mut init = tc_candle_info {
16390 | |                 name: b"abandoned_baby_bull\0" as *const u8 as *const libc::c_char,
16391 | |                 full_name: b"Abandoned Baby Bull\0" as *const u8 as *const libc::c_char,
16392 | |                 pattern: ((1 as libc::c_long) << 1 as libc::c_int) as tc_set,
...     |
16401 | |                 ),
16402 | |             };
      | |______________- unnecessary `let` binding
16403 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
16389 ~             
16390 ~             tc_candle_info {
16391 +                 name: b"abandoned_baby_bull\0" as *const u8 as *const libc::c_char,
16392 +                 full_name: b"Abandoned Baby Bull\0" as *const u8 as *const libc::c_char,
16393 +                 pattern: ((1 as libc::c_long) << 1 as libc::c_int) as tc_set,
16394 +                 candle: Some(
16395 +                     tc_abandoned_baby_bull
16396 +                         as unsafe extern "C" fn(
16397 +                             libc::c_int,
16398 +                             *const *const TC_REAL,
16399 +                             *const tc_config,
16400 +                             *mut tc_result,
16401 +                         ) -> libc::c_int,
16402 +                 ),
16403 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:16420:13
      |
16406 | /             let mut init = tc_candle_info {
16407 | |                 name: b"big_black_candle\0" as *const u8 as *const libc::c_char,
16408 | |                 full_name: b"Big Black Candle\0" as *const u8 as *const libc::c_char,
16409 | |                 pattern: ((1 as libc::c_long) << 2 as libc::c_int) as tc_set,
...     |
16418 | |                 ),
16419 | |             };
      | |______________- unnecessary `let` binding
16420 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
16406 ~             
16407 ~             tc_candle_info {
16408 +                 name: b"big_black_candle\0" as *const u8 as *const libc::c_char,
16409 +                 full_name: b"Big Black Candle\0" as *const u8 as *const libc::c_char,
16410 +                 pattern: ((1 as libc::c_long) << 2 as libc::c_int) as tc_set,
16411 +                 candle: Some(
16412 +                     tc_big_black_candle
16413 +                         as unsafe extern "C" fn(
16414 +                             libc::c_int,
16415 +                             *const *const TC_REAL,
16416 +                             *const tc_config,
16417 +                             *mut tc_result,
16418 +                         ) -> libc::c_int,
16419 +                 ),
16420 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:16437:13
      |
16423 | /             let mut init = tc_candle_info {
16424 | |                 name: b"big_white_candle\0" as *const u8 as *const libc::c_char,
16425 | |                 full_name: b"Big White Candle\0" as *const u8 as *const libc::c_char,
16426 | |                 pattern: ((1 as libc::c_long) << 3 as libc::c_int) as tc_set,
...     |
16435 | |                 ),
16436 | |             };
      | |______________- unnecessary `let` binding
16437 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
16423 ~             
16424 ~             tc_candle_info {
16425 +                 name: b"big_white_candle\0" as *const u8 as *const libc::c_char,
16426 +                 full_name: b"Big White Candle\0" as *const u8 as *const libc::c_char,
16427 +                 pattern: ((1 as libc::c_long) << 3 as libc::c_int) as tc_set,
16428 +                 candle: Some(
16429 +                     tc_big_white_candle
16430 +                         as unsafe extern "C" fn(
16431 +                             libc::c_int,
16432 +                             *const *const TC_REAL,
16433 +                             *const tc_config,
16434 +                             *mut tc_result,
16435 +                         ) -> libc::c_int,
16436 +                 ),
16437 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:16454:13
      |
16440 | /             let mut init = tc_candle_info {
16441 | |                 name: b"black_marubozu\0" as *const u8 as *const libc::c_char,
16442 | |                 full_name: b"Black Marubozu\0" as *const u8 as *const libc::c_char,
16443 | |                 pattern: ((1 as libc::c_long) << 4 as libc::c_int) as tc_set,
...     |
16452 | |                 ),
16453 | |             };
      | |______________- unnecessary `let` binding
16454 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
16440 ~             
16441 ~             tc_candle_info {
16442 +                 name: b"black_marubozu\0" as *const u8 as *const libc::c_char,
16443 +                 full_name: b"Black Marubozu\0" as *const u8 as *const libc::c_char,
16444 +                 pattern: ((1 as libc::c_long) << 4 as libc::c_int) as tc_set,
16445 +                 candle: Some(
16446 +                     tc_black_marubozu
16447 +                         as unsafe extern "C" fn(
16448 +                             libc::c_int,
16449 +                             *const *const TC_REAL,
16450 +                             *const tc_config,
16451 +                             *mut tc_result,
16452 +                         ) -> libc::c_int,
16453 +                 ),
16454 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:16471:13
      |
16457 | /             let mut init = tc_candle_info {
16458 | |                 name: b"doji\0" as *const u8 as *const libc::c_char,
16459 | |                 full_name: b"Doji\0" as *const u8 as *const libc::c_char,
16460 | |                 pattern: ((1 as libc::c_long) << 5 as libc::c_int) as tc_set,
...     |
16469 | |                 ),
16470 | |             };
      | |______________- unnecessary `let` binding
16471 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
16457 ~             
16458 ~             tc_candle_info {
16459 +                 name: b"doji\0" as *const u8 as *const libc::c_char,
16460 +                 full_name: b"Doji\0" as *const u8 as *const libc::c_char,
16461 +                 pattern: ((1 as libc::c_long) << 5 as libc::c_int) as tc_set,
16462 +                 candle: Some(
16463 +                     tc_doji
16464 +                         as unsafe extern "C" fn(
16465 +                             libc::c_int,
16466 +                             *const *const TC_REAL,
16467 +                             *const tc_config,
16468 +                             *mut tc_result,
16469 +                         ) -> libc::c_int,
16470 +                 ),
16471 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:16488:13
      |
16474 | /             let mut init = tc_candle_info {
16475 | |                 name: b"dragonfly_doji\0" as *const u8 as *const libc::c_char,
16476 | |                 full_name: b"Dragonfly Doji\0" as *const u8 as *const libc::c_char,
16477 | |                 pattern: ((1 as libc::c_long) << 6 as libc::c_int) as tc_set,
...     |
16486 | |                 ),
16487 | |             };
      | |______________- unnecessary `let` binding
16488 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
16474 ~             
16475 ~             tc_candle_info {
16476 +                 name: b"dragonfly_doji\0" as *const u8 as *const libc::c_char,
16477 +                 full_name: b"Dragonfly Doji\0" as *const u8 as *const libc::c_char,
16478 +                 pattern: ((1 as libc::c_long) << 6 as libc::c_int) as tc_set,
16479 +                 candle: Some(
16480 +                     tc_dragonfly_doji
16481 +                         as unsafe extern "C" fn(
16482 +                             libc::c_int,
16483 +                             *const *const TC_REAL,
16484 +                             *const tc_config,
16485 +                             *mut tc_result,
16486 +                         ) -> libc::c_int,
16487 +                 ),
16488 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:16505:13
      |
16491 | /             let mut init = tc_candle_info {
16492 | |                 name: b"engulfing_bear\0" as *const u8 as *const libc::c_char,
16493 | |                 full_name: b"Engulfing Bear\0" as *const u8 as *const libc::c_char,
16494 | |                 pattern: ((1 as libc::c_long) << 7 as libc::c_int) as tc_set,
...     |
16503 | |                 ),
16504 | |             };
      | |______________- unnecessary `let` binding
16505 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
16491 ~             
16492 ~             tc_candle_info {
16493 +                 name: b"engulfing_bear\0" as *const u8 as *const libc::c_char,
16494 +                 full_name: b"Engulfing Bear\0" as *const u8 as *const libc::c_char,
16495 +                 pattern: ((1 as libc::c_long) << 7 as libc::c_int) as tc_set,
16496 +                 candle: Some(
16497 +                     tc_engulfing_bear
16498 +                         as unsafe extern "C" fn(
16499 +                             libc::c_int,
16500 +                             *const *const TC_REAL,
16501 +                             *const tc_config,
16502 +                             *mut tc_result,
16503 +                         ) -> libc::c_int,
16504 +                 ),
16505 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:16522:13
      |
16508 | /             let mut init = tc_candle_info {
16509 | |                 name: b"engulfing_bull\0" as *const u8 as *const libc::c_char,
16510 | |                 full_name: b"Engulfing Bull\0" as *const u8 as *const libc::c_char,
16511 | |                 pattern: ((1 as libc::c_long) << 8 as libc::c_int) as tc_set,
...     |
16520 | |                 ),
16521 | |             };
      | |______________- unnecessary `let` binding
16522 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
16508 ~             
16509 ~             tc_candle_info {
16510 +                 name: b"engulfing_bull\0" as *const u8 as *const libc::c_char,
16511 +                 full_name: b"Engulfing Bull\0" as *const u8 as *const libc::c_char,
16512 +                 pattern: ((1 as libc::c_long) << 8 as libc::c_int) as tc_set,
16513 +                 candle: Some(
16514 +                     tc_engulfing_bull
16515 +                         as unsafe extern "C" fn(
16516 +                             libc::c_int,
16517 +                             *const *const TC_REAL,
16518 +                             *const tc_config,
16519 +                             *mut tc_result,
16520 +                         ) -> libc::c_int,
16521 +                 ),
16522 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:16539:13
      |
16525 | /             let mut init = tc_candle_info {
16526 | |                 name: b"evening_doji_star\0" as *const u8 as *const libc::c_char,
16527 | |                 full_name: b"Evening Doji Star\0" as *const u8 as *const libc::c_char,
16528 | |                 pattern: ((1 as libc::c_long) << 9 as libc::c_int) as tc_set,
...     |
16537 | |                 ),
16538 | |             };
      | |______________- unnecessary `let` binding
16539 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
16525 ~             
16526 ~             tc_candle_info {
16527 +                 name: b"evening_doji_star\0" as *const u8 as *const libc::c_char,
16528 +                 full_name: b"Evening Doji Star\0" as *const u8 as *const libc::c_char,
16529 +                 pattern: ((1 as libc::c_long) << 9 as libc::c_int) as tc_set,
16530 +                 candle: Some(
16531 +                     tc_evening_doji_star
16532 +                         as unsafe extern "C" fn(
16533 +                             libc::c_int,
16534 +                             *const *const TC_REAL,
16535 +                             *const tc_config,
16536 +                             *mut tc_result,
16537 +                         ) -> libc::c_int,
16538 +                 ),
16539 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:16556:13
      |
16542 | /             let mut init = tc_candle_info {
16543 | |                 name: b"evening_star\0" as *const u8 as *const libc::c_char,
16544 | |                 full_name: b"Evening Star\0" as *const u8 as *const libc::c_char,
16545 | |                 pattern: ((1 as libc::c_long) << 10 as libc::c_int) as tc_set,
...     |
16554 | |                 ),
16555 | |             };
      | |______________- unnecessary `let` binding
16556 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
16542 ~             
16543 ~             tc_candle_info {
16544 +                 name: b"evening_star\0" as *const u8 as *const libc::c_char,
16545 +                 full_name: b"Evening Star\0" as *const u8 as *const libc::c_char,
16546 +                 pattern: ((1 as libc::c_long) << 10 as libc::c_int) as tc_set,
16547 +                 candle: Some(
16548 +                     tc_evening_star
16549 +                         as unsafe extern "C" fn(
16550 +                             libc::c_int,
16551 +                             *const *const TC_REAL,
16552 +                             *const tc_config,
16553 +                             *mut tc_result,
16554 +                         ) -> libc::c_int,
16555 +                 ),
16556 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:16573:13
      |
16559 | /             let mut init = tc_candle_info {
16560 | |                 name: b"four_price_doji\0" as *const u8 as *const libc::c_char,
16561 | |                 full_name: b"Four Price Doji\0" as *const u8 as *const libc::c_char,
16562 | |                 pattern: ((1 as libc::c_long) << 11 as libc::c_int) as tc_set,
...     |
16571 | |                 ),
16572 | |             };
      | |______________- unnecessary `let` binding
16573 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
16559 ~             
16560 ~             tc_candle_info {
16561 +                 name: b"four_price_doji\0" as *const u8 as *const libc::c_char,
16562 +                 full_name: b"Four Price Doji\0" as *const u8 as *const libc::c_char,
16563 +                 pattern: ((1 as libc::c_long) << 11 as libc::c_int) as tc_set,
16564 +                 candle: Some(
16565 +                     tc_four_price_doji
16566 +                         as unsafe extern "C" fn(
16567 +                             libc::c_int,
16568 +                             *const *const TC_REAL,
16569 +                             *const tc_config,
16570 +                             *mut tc_result,
16571 +                         ) -> libc::c_int,
16572 +                 ),
16573 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:16590:13
      |
16576 | /             let mut init = tc_candle_info {
16577 | |                 name: b"gravestone_doji\0" as *const u8 as *const libc::c_char,
16578 | |                 full_name: b"Gravestone Doji\0" as *const u8 as *const libc::c_char,
16579 | |                 pattern: ((1 as libc::c_long) << 12 as libc::c_int) as tc_set,
...     |
16588 | |                 ),
16589 | |             };
      | |______________- unnecessary `let` binding
16590 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
16576 ~             
16577 ~             tc_candle_info {
16578 +                 name: b"gravestone_doji\0" as *const u8 as *const libc::c_char,
16579 +                 full_name: b"Gravestone Doji\0" as *const u8 as *const libc::c_char,
16580 +                 pattern: ((1 as libc::c_long) << 12 as libc::c_int) as tc_set,
16581 +                 candle: Some(
16582 +                     tc_gravestone_doji
16583 +                         as unsafe extern "C" fn(
16584 +                             libc::c_int,
16585 +                             *const *const TC_REAL,
16586 +                             *const tc_config,
16587 +                             *mut tc_result,
16588 +                         ) -> libc::c_int,
16589 +                 ),
16590 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:16607:13
      |
16593 | /             let mut init = tc_candle_info {
16594 | |                 name: b"hammer\0" as *const u8 as *const libc::c_char,
16595 | |                 full_name: b"Hammer\0" as *const u8 as *const libc::c_char,
16596 | |                 pattern: ((1 as libc::c_long) << 13 as libc::c_int) as tc_set,
...     |
16605 | |                 ),
16606 | |             };
      | |______________- unnecessary `let` binding
16607 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
16593 ~             
16594 ~             tc_candle_info {
16595 +                 name: b"hammer\0" as *const u8 as *const libc::c_char,
16596 +                 full_name: b"Hammer\0" as *const u8 as *const libc::c_char,
16597 +                 pattern: ((1 as libc::c_long) << 13 as libc::c_int) as tc_set,
16598 +                 candle: Some(
16599 +                     tc_hammer
16600 +                         as unsafe extern "C" fn(
16601 +                             libc::c_int,
16602 +                             *const *const TC_REAL,
16603 +                             *const tc_config,
16604 +                             *mut tc_result,
16605 +                         ) -> libc::c_int,
16606 +                 ),
16607 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:16624:13
      |
16610 | /             let mut init = tc_candle_info {
16611 | |                 name: b"hanging_man\0" as *const u8 as *const libc::c_char,
16612 | |                 full_name: b"Hanging Man\0" as *const u8 as *const libc::c_char,
16613 | |                 pattern: ((1 as libc::c_long) << 14 as libc::c_int) as tc_set,
...     |
16622 | |                 ),
16623 | |             };
      | |______________- unnecessary `let` binding
16624 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
16610 ~             
16611 ~             tc_candle_info {
16612 +                 name: b"hanging_man\0" as *const u8 as *const libc::c_char,
16613 +                 full_name: b"Hanging Man\0" as *const u8 as *const libc::c_char,
16614 +                 pattern: ((1 as libc::c_long) << 14 as libc::c_int) as tc_set,
16615 +                 candle: Some(
16616 +                     tc_hanging_man
16617 +                         as unsafe extern "C" fn(
16618 +                             libc::c_int,
16619 +                             *const *const TC_REAL,
16620 +                             *const tc_config,
16621 +                             *mut tc_result,
16622 +                         ) -> libc::c_int,
16623 +                 ),
16624 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:16641:13
      |
16627 | /             let mut init = tc_candle_info {
16628 | |                 name: b"inverted_hammer\0" as *const u8 as *const libc::c_char,
16629 | |                 full_name: b"Inverted Hammer\0" as *const u8 as *const libc::c_char,
16630 | |                 pattern: ((1 as libc::c_long) << 15 as libc::c_int) as tc_set,
...     |
16639 | |                 ),
16640 | |             };
      | |______________- unnecessary `let` binding
16641 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
16627 ~             
16628 ~             tc_candle_info {
16629 +                 name: b"inverted_hammer\0" as *const u8 as *const libc::c_char,
16630 +                 full_name: b"Inverted Hammer\0" as *const u8 as *const libc::c_char,
16631 +                 pattern: ((1 as libc::c_long) << 15 as libc::c_int) as tc_set,
16632 +                 candle: Some(
16633 +                     tc_inverted_hammer
16634 +                         as unsafe extern "C" fn(
16635 +                             libc::c_int,
16636 +                             *const *const TC_REAL,
16637 +                             *const tc_config,
16638 +                             *mut tc_result,
16639 +                         ) -> libc::c_int,
16640 +                 ),
16641 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:16658:13
      |
16644 | /             let mut init = tc_candle_info {
16645 | |                 name: b"long_legged_doji\0" as *const u8 as *const libc::c_char,
16646 | |                 full_name: b"Long Legged Doji\0" as *const u8 as *const libc::c_char,
16647 | |                 pattern: ((1 as libc::c_long) << 16 as libc::c_int) as tc_set,
...     |
16656 | |                 ),
16657 | |             };
      | |______________- unnecessary `let` binding
16658 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
16644 ~             
16645 ~             tc_candle_info {
16646 +                 name: b"long_legged_doji\0" as *const u8 as *const libc::c_char,
16647 +                 full_name: b"Long Legged Doji\0" as *const u8 as *const libc::c_char,
16648 +                 pattern: ((1 as libc::c_long) << 16 as libc::c_int) as tc_set,
16649 +                 candle: Some(
16650 +                     tc_long_legged_doji
16651 +                         as unsafe extern "C" fn(
16652 +                             libc::c_int,
16653 +                             *const *const TC_REAL,
16654 +                             *const tc_config,
16655 +                             *mut tc_result,
16656 +                         ) -> libc::c_int,
16657 +                 ),
16658 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:16675:13
      |
16661 | /             let mut init = tc_candle_info {
16662 | |                 name: b"marubozu\0" as *const u8 as *const libc::c_char,
16663 | |                 full_name: b"Marubozu\0" as *const u8 as *const libc::c_char,
16664 | |                 pattern: ((1 as libc::c_long) << 17 as libc::c_int) as tc_set,
...     |
16673 | |                 ),
16674 | |             };
      | |______________- unnecessary `let` binding
16675 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
16661 ~             
16662 ~             tc_candle_info {
16663 +                 name: b"marubozu\0" as *const u8 as *const libc::c_char,
16664 +                 full_name: b"Marubozu\0" as *const u8 as *const libc::c_char,
16665 +                 pattern: ((1 as libc::c_long) << 17 as libc::c_int) as tc_set,
16666 +                 candle: Some(
16667 +                     tc_marubozu
16668 +                         as unsafe extern "C" fn(
16669 +                             libc::c_int,
16670 +                             *const *const TC_REAL,
16671 +                             *const tc_config,
16672 +                             *mut tc_result,
16673 +                         ) -> libc::c_int,
16674 +                 ),
16675 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:16692:13
      |
16678 | /             let mut init = tc_candle_info {
16679 | |                 name: b"morning_doji_star\0" as *const u8 as *const libc::c_char,
16680 | |                 full_name: b"Morning Doji Star\0" as *const u8 as *const libc::c_char,
16681 | |                 pattern: ((1 as libc::c_long) << 18 as libc::c_int) as tc_set,
...     |
16690 | |                 ),
16691 | |             };
      | |______________- unnecessary `let` binding
16692 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
16678 ~             
16679 ~             tc_candle_info {
16680 +                 name: b"morning_doji_star\0" as *const u8 as *const libc::c_char,
16681 +                 full_name: b"Morning Doji Star\0" as *const u8 as *const libc::c_char,
16682 +                 pattern: ((1 as libc::c_long) << 18 as libc::c_int) as tc_set,
16683 +                 candle: Some(
16684 +                     tc_morning_doji_star
16685 +                         as unsafe extern "C" fn(
16686 +                             libc::c_int,
16687 +                             *const *const TC_REAL,
16688 +                             *const tc_config,
16689 +                             *mut tc_result,
16690 +                         ) -> libc::c_int,
16691 +                 ),
16692 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:16709:13
      |
16695 | /             let mut init = tc_candle_info {
16696 | |                 name: b"morning_star\0" as *const u8 as *const libc::c_char,
16697 | |                 full_name: b"Morning Star\0" as *const u8 as *const libc::c_char,
16698 | |                 pattern: ((1 as libc::c_long) << 19 as libc::c_int) as tc_set,
...     |
16707 | |                 ),
16708 | |             };
      | |______________- unnecessary `let` binding
16709 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
16695 ~             
16696 ~             tc_candle_info {
16697 +                 name: b"morning_star\0" as *const u8 as *const libc::c_char,
16698 +                 full_name: b"Morning Star\0" as *const u8 as *const libc::c_char,
16699 +                 pattern: ((1 as libc::c_long) << 19 as libc::c_int) as tc_set,
16700 +                 candle: Some(
16701 +                     tc_morning_star
16702 +                         as unsafe extern "C" fn(
16703 +                             libc::c_int,
16704 +                             *const *const TC_REAL,
16705 +                             *const tc_config,
16706 +                             *mut tc_result,
16707 +                         ) -> libc::c_int,
16708 +                 ),
16709 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:16726:13
      |
16712 | /             let mut init = tc_candle_info {
16713 | |                 name: b"shooting_star\0" as *const u8 as *const libc::c_char,
16714 | |                 full_name: b"Shooting Star\0" as *const u8 as *const libc::c_char,
16715 | |                 pattern: ((1 as libc::c_long) << 20 as libc::c_int) as tc_set,
...     |
16724 | |                 ),
16725 | |             };
      | |______________- unnecessary `let` binding
16726 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
16712 ~             
16713 ~             tc_candle_info {
16714 +                 name: b"shooting_star\0" as *const u8 as *const libc::c_char,
16715 +                 full_name: b"Shooting Star\0" as *const u8 as *const libc::c_char,
16716 +                 pattern: ((1 as libc::c_long) << 20 as libc::c_int) as tc_set,
16717 +                 candle: Some(
16718 +                     tc_shooting_star
16719 +                         as unsafe extern "C" fn(
16720 +                             libc::c_int,
16721 +                             *const *const TC_REAL,
16722 +                             *const tc_config,
16723 +                             *mut tc_result,
16724 +                         ) -> libc::c_int,
16725 +                 ),
16726 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:16743:13
      |
16729 | /             let mut init = tc_candle_info {
16730 | |                 name: b"spinning_top\0" as *const u8 as *const libc::c_char,
16731 | |                 full_name: b"Spinning Top\0" as *const u8 as *const libc::c_char,
16732 | |                 pattern: ((1 as libc::c_long) << 21 as libc::c_int) as tc_set,
...     |
16741 | |                 ),
16742 | |             };
      | |______________- unnecessary `let` binding
16743 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
16729 ~             
16730 ~             tc_candle_info {
16731 +                 name: b"spinning_top\0" as *const u8 as *const libc::c_char,
16732 +                 full_name: b"Spinning Top\0" as *const u8 as *const libc::c_char,
16733 +                 pattern: ((1 as libc::c_long) << 21 as libc::c_int) as tc_set,
16734 +                 candle: Some(
16735 +                     tc_spinning_top
16736 +                         as unsafe extern "C" fn(
16737 +                             libc::c_int,
16738 +                             *const *const TC_REAL,
16739 +                             *const tc_config,
16740 +                             *mut tc_result,
16741 +                         ) -> libc::c_int,
16742 +                 ),
16743 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:16760:13
      |
16746 | /             let mut init = tc_candle_info {
16747 | |                 name: b"star\0" as *const u8 as *const libc::c_char,
16748 | |                 full_name: b"Star\0" as *const u8 as *const libc::c_char,
16749 | |                 pattern: ((1 as libc::c_long) << 22 as libc::c_int) as tc_set,
...     |
16758 | |                 ),
16759 | |             };
      | |______________- unnecessary `let` binding
16760 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
16746 ~             
16747 ~             tc_candle_info {
16748 +                 name: b"star\0" as *const u8 as *const libc::c_char,
16749 +                 full_name: b"Star\0" as *const u8 as *const libc::c_char,
16750 +                 pattern: ((1 as libc::c_long) << 22 as libc::c_int) as tc_set,
16751 +                 candle: Some(
16752 +                     tc_star
16753 +                         as unsafe extern "C" fn(
16754 +                             libc::c_int,
16755 +                             *const *const TC_REAL,
16756 +                             *const tc_config,
16757 +                             *mut tc_result,
16758 +                         ) -> libc::c_int,
16759 +                 ),
16760 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:16777:13
      |
16763 | /             let mut init = tc_candle_info {
16764 | |                 name: b"three_black_crows\0" as *const u8 as *const libc::c_char,
16765 | |                 full_name: b"Three Black Crows\0" as *const u8 as *const libc::c_char,
16766 | |                 pattern: ((1 as libc::c_long) << 23 as libc::c_int) as tc_set,
...     |
16775 | |                 ),
16776 | |             };
      | |______________- unnecessary `let` binding
16777 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
16763 ~             
16764 ~             tc_candle_info {
16765 +                 name: b"three_black_crows\0" as *const u8 as *const libc::c_char,
16766 +                 full_name: b"Three Black Crows\0" as *const u8 as *const libc::c_char,
16767 +                 pattern: ((1 as libc::c_long) << 23 as libc::c_int) as tc_set,
16768 +                 candle: Some(
16769 +                     tc_three_black_crows
16770 +                         as unsafe extern "C" fn(
16771 +                             libc::c_int,
16772 +                             *const *const TC_REAL,
16773 +                             *const tc_config,
16774 +                             *mut tc_result,
16775 +                         ) -> libc::c_int,
16776 +                 ),
16777 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:16794:13
      |
16780 | /             let mut init = tc_candle_info {
16781 | |                 name: b"three_white_soldiers\0" as *const u8 as *const libc::c_char,
16782 | |                 full_name: b"Three White Soldiers\0" as *const u8 as *const libc::c_char,
16783 | |                 pattern: ((1 as libc::c_long) << 24 as libc::c_int) as tc_set,
...     |
16792 | |                 ),
16793 | |             };
      | |______________- unnecessary `let` binding
16794 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
16780 ~             
16781 ~             tc_candle_info {
16782 +                 name: b"three_white_soldiers\0" as *const u8 as *const libc::c_char,
16783 +                 full_name: b"Three White Soldiers\0" as *const u8 as *const libc::c_char,
16784 +                 pattern: ((1 as libc::c_long) << 24 as libc::c_int) as tc_set,
16785 +                 candle: Some(
16786 +                     tc_three_white_soldiers
16787 +                         as unsafe extern "C" fn(
16788 +                             libc::c_int,
16789 +                             *const *const TC_REAL,
16790 +                             *const tc_config,
16791 +                             *mut tc_result,
16792 +                         ) -> libc::c_int,
16793 +                 ),
16794 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:16811:13
      |
16797 | /             let mut init = tc_candle_info {
16798 | |                 name: b"white_marubozu\0" as *const u8 as *const libc::c_char,
16799 | |                 full_name: b"White Marubozu\0" as *const u8 as *const libc::c_char,
16800 | |                 pattern: ((1 as libc::c_long) << 25 as libc::c_int) as tc_set,
...     |
16809 | |                 ),
16810 | |             };
      | |______________- unnecessary `let` binding
16811 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
16797 ~             
16798 ~             tc_candle_info {
16799 +                 name: b"white_marubozu\0" as *const u8 as *const libc::c_char,
16800 +                 full_name: b"White Marubozu\0" as *const u8 as *const libc::c_char,
16801 +                 pattern: ((1 as libc::c_long) << 25 as libc::c_int) as tc_set,
16802 +                 candle: Some(
16803 +                     tc_white_marubozu
16804 +                         as unsafe extern "C" fn(
16805 +                             libc::c_int,
16806 +                             *const *const TC_REAL,
16807 +                             *const tc_config,
16808 +                             *mut tc_result,
16809 +                         ) -> libc::c_int,
16810 +                 ),
16811 +             }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:16820:13
      |
16814 | /             let mut init = tc_candle_info {
16815 | |                 name: 0 as *const libc::c_char,
16816 | |                 full_name: 0 as *const libc::c_char,
16817 | |                 pattern: 0 as libc::c_int as tc_set,
16818 | |                 candle: None,
16819 | |             };
      | |______________- unnecessary `let` binding
16820 |               init
      |               ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
16814 ~             
16815 ~             tc_candle_info {
16816 +                 name: 0 as *const libc::c_char,
16817 +                 full_name: 0 as *const libc::c_char,
16818 +                 pattern: 0 as libc::c_int as tc_set,
16819 +                 candle: None,
16820 +             }
      |

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:16825:1
      |
16825 | / pub unsafe extern "C" fn tc_find_candle(
16826 | |     mut name: *const libc::c_char,
16827 | | ) -> *const tc_candle_info {
16828 | |     let mut imin: libc::c_int = 0 as libc::c_int;
...     |
16844 | |     return 0 as *const tc_candle_info;
16845 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:16844:5
      |
16844 |     return 0 as *const tc_candle_info;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as *const tc_candle_info`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `if` chain can be rewritten with `match`
     --> src/tiamalgamation.rs:16836:9
      |
16836 | /         if c == 0 as libc::c_int {
16837 | |             return tc_candles.as_mut_ptr().offset(i as isize)
16838 | |         } else if c > 0 as libc::c_int {
16839 | |             imin = i + 1 as libc::c_int;
16840 | |         } else {
16841 | |             imax = i - 1 as libc::c_int;
16842 | |         }
      | |_________^
      |
      = help: consider rewriting the `if` chain to use `cmp` and `match`
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain

warning: `0 as *const _` detected
     --> src/tiamalgamation.rs:16844:12
      |
16844 |     return 0 as *const tc_candle_info;
      |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<tc_candle_info>()`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:16847:1
      |
16847 | / pub unsafe extern "C" fn tc_get_info(mut pattern: tc_set) -> *const tc_candle_info {
16848 | |     if pattern == 0 {
16849 | |         return 0 as *const tc_candle_info;
16850 | |     }
...     |
16867 | |     return 0 as *const tc_candle_info;
16868 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:16867:5
      |
16867 |     return 0 as *const tc_candle_info;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as *const tc_candle_info`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *const _` detected
     --> src/tiamalgamation.rs:16849:16
      |
16849 |         return 0 as *const tc_candle_info;
      |                ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<tc_candle_info>()`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `if` chain can be rewritten with `match`
     --> src/tiamalgamation.rs:16859:9
      |
16859 | /         if k == tc_candles[i as usize].pattern {
16860 | |             return tc_candles.as_mut_ptr().offset(i as isize)
16861 | |         } else if k > tc_candles[i as usize].pattern {
16862 | |             imin = i + 1 as libc::c_int;
16863 | |         } else {
16864 | |             imax = i - 1 as libc::c_int;
16865 | |         }
      | |_________^
      |
      = help: consider rewriting the `if` chain to use `cmp` and `match`
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain

warning: `0 as *const _` detected
     --> src/tiamalgamation.rs:16867:12
      |
16867 |     return 0 as *const tc_candle_info;
      |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<tc_candle_info>()`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:16870:1
      |
16870 | / pub unsafe extern "C" fn tc_config_set_to_default(mut config: *mut tc_config) {
16871 | |     memcpy(
16872 | |         config as *mut libc::c_void,
16873 | |         tc_config_default() as *const libc::c_void,
16874 | |         ::core::mem::size_of::<tc_config>() as libc::c_ulong,
16875 | |     );
16876 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:16878:1
      |
16878 | / pub unsafe extern "C" fn tc_result_new() -> *mut tc_result {
16879 | |     let mut k: *mut tc_result = malloc(
16880 | |         ::core::mem::size_of::<tc_result>() as libc::c_ulong,
16881 | |     ) as *mut tc_result;
...     |
16890 | |     return k;
16891 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:16890:5
      |
16890 |     return k;
      |     ^^^^^^^^^ help: remove `return`: `k`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
     --> src/tiamalgamation.rs:16883:16
      |
16883 |         return 0 as *mut tc_result;
      |                ^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<tc_result>()`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:16898:1
      |
16898 | / pub unsafe extern "C" fn tc_result_free(mut result: *mut tc_result) {
16899 | |     if result.is_null() {
16900 | |         return;
16901 | |     }
16902 | |     free((*result).hits as *mut libc::c_void);
16903 | |     free(result as *mut libc::c_void);
16904 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:16906:1
      |
16906 | / pub unsafe extern "C" fn tc_result_count(mut result: *const tc_result) -> libc::c_int {
16907 | |     return (*result).count;
16908 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:16907:5
      |
16907 |     return (*result).count;
      |     ^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `(*result).count`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:16910:1
      |
16910 | / pub unsafe extern "C" fn tc_result_pattern_count(
16911 | |     mut result: *const tc_result,
16912 | | ) -> libc::c_int {
16913 | |     return (*result).pattern_count;
16914 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:16913:5
      |
16913 |     return (*result).pattern_count;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `(*result).pattern_count`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:16916:1
      |
16916 | / pub unsafe extern "C" fn tc_result_get(
16917 | |     mut result: *const tc_result,
16918 | |     mut index: libc::c_int,
16919 | | ) -> tc_hit {
...     |
16930 | |     return hit;
16931 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:16930:5
      |
16930 |     return hit;
      |     ^^^^^^^^^^^ help: remove `return`: `hit`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:16928:9
      |
16924 | /         let mut init = tc_hit {
16925 | |             index: 0 as libc::c_int,
16926 | |             patterns: 0,
16927 | |         };
      | |__________- unnecessary `let` binding
16928 |           init
      |           ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
16924 ~         
16925 ~         tc_hit {
16926 +             index: 0 as libc::c_int,
16927 +             patterns: 0,
16928 +         }
      |

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:16933:1
      |
16933 | / pub unsafe extern "C" fn tc_result_at(
16934 | |     mut result: *const tc_result,
16935 | |     mut index: libc::c_int,
16936 | | ) -> tc_set {
...     |
16976 | |     return 0 as libc::c_int as tc_set;
16977 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:16976:5
      |
16976 |     return 0 as libc::c_int as tc_set;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int as tc_set`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `if` chain can be rewritten with `match`
     --> src/tiamalgamation.rs:16968:9
      |
16968 | /         if index == (*((*result).hits).offset(i as isize)).index {
16969 | |             return (*((*result).hits).offset(i as isize)).patterns
16970 | |         } else if index > (*((*result).hits).offset(i as isize)).index {
16971 | |             imin = i + 1 as libc::c_int;
16972 | |         } else {
16973 | |             imax = i - 1 as libc::c_int;
16974 | |         }
      | |_________^
      |
      = help: consider rewriting the `if` chain to use `cmp` and `match`
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:17016:5
      |
17016 |     return 0 as libc::c_int;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
     --> src/tiamalgamation.rs:16983:5
      |
16983 |     (*result).pattern_count;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
     --> src/tiamalgamation.rs:17015:5
      |
17015 |     (*result).count;
      |     ^^^^^^^^^^^^^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:17019:1
      |
17019 | / pub unsafe extern "C" fn tc_run(
17020 | |     mut patterns: tc_set,
17021 | |     mut size: libc::c_int,
17022 | |     mut inputs: *const *const TC_REAL,
...     |
17916 | |     return 0 as libc::c_int;
17917 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:17916:5
      |
17916 |     return 0 as libc::c_int;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
     --> src/tiamalgamation.rs:17129:9
      |
17129 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:17172:17
      |
17168 | /                 let mut init = tc_hit {
17169 | |                     index: i,
17170 | |                     patterns: ((1 as libc::c_long) << 0 as libc::c_int) as tc_set,
17171 | |                 };
      | |__________________- unnecessary `let` binding
17172 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
17168 ~                 
17169 ~                 tc_hit {
17170 +                     index: i,
17171 +                     patterns: ((1 as libc::c_long) << 0 as libc::c_int) as tc_set,
17172 +                 }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:17203:17
      |
17199 | /                 let mut init = tc_hit {
17200 | |                     index: i,
17201 | |                     patterns: ((1 as libc::c_long) << 1 as libc::c_int) as tc_set,
17202 | |                 };
      | |__________________- unnecessary `let` binding
17203 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
17199 ~                 
17200 ~                 tc_hit {
17201 +                     index: i,
17202 +                     patterns: ((1 as libc::c_long) << 1 as libc::c_int) as tc_set,
17203 +                 }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:17220:17
      |
17216 | /                 let mut init = tc_hit {
17217 | |                     index: i,
17218 | |                     patterns: ((1 as libc::c_long) << 2 as libc::c_int) as tc_set,
17219 | |                 };
      | |__________________- unnecessary `let` binding
17220 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
17216 ~                 
17217 ~                 tc_hit {
17218 +                     index: i,
17219 +                     patterns: ((1 as libc::c_long) << 2 as libc::c_int) as tc_set,
17220 +                 }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:17237:17
      |
17233 | /                 let mut init = tc_hit {
17234 | |                     index: i,
17235 | |                     patterns: ((1 as libc::c_long) << 3 as libc::c_int) as tc_set,
17236 | |                 };
      | |__________________- unnecessary `let` binding
17237 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
17233 ~                 
17234 ~                 tc_hit {
17235 +                     index: i,
17236 +                     patterns: ((1 as libc::c_long) << 3 as libc::c_int) as tc_set,
17237 +                 }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:17256:17
      |
17252 | /                 let mut init = tc_hit {
17253 | |                     index: i,
17254 | |                     patterns: ((1 as libc::c_long) << 4 as libc::c_int) as tc_set,
17255 | |                 };
      | |__________________- unnecessary `let` binding
17256 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
17252 ~                 
17253 ~                 tc_hit {
17254 +                     index: i,
17255 +                     patterns: ((1 as libc::c_long) << 4 as libc::c_int) as tc_set,
17256 +                 }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:17272:17
      |
17268 | /                 let mut init = tc_hit {
17269 | |                     index: i,
17270 | |                     patterns: ((1 as libc::c_long) << 5 as libc::c_int) as tc_set,
17271 | |                 };
      | |__________________- unnecessary `let` binding
17272 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
17268 ~                 
17269 ~                 tc_hit {
17270 +                     index: i,
17271 +                     patterns: ((1 as libc::c_long) << 5 as libc::c_int) as tc_set,
17272 +                 }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:17290:17
      |
17286 | /                 let mut init = tc_hit {
17287 | |                     index: i,
17288 | |                     patterns: ((1 as libc::c_long) << 6 as libc::c_int) as tc_set,
17289 | |                 };
      | |__________________- unnecessary `let` binding
17290 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
17286 ~                 
17287 ~                 tc_hit {
17288 +                     index: i,
17289 +                     patterns: ((1 as libc::c_long) << 6 as libc::c_int) as tc_set,
17290 +                 }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:17310:17
      |
17306 | /                 let mut init = tc_hit {
17307 | |                     index: i,
17308 | |                     patterns: ((1 as libc::c_long) << 7 as libc::c_int) as tc_set,
17309 | |                 };
      | |__________________- unnecessary `let` binding
17310 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
17306 ~                 
17307 ~                 tc_hit {
17308 +                     index: i,
17309 +                     patterns: ((1 as libc::c_long) << 7 as libc::c_int) as tc_set,
17310 +                 }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:17330:17
      |
17326 | /                 let mut init = tc_hit {
17327 | |                     index: i,
17328 | |                     patterns: ((1 as libc::c_long) << 8 as libc::c_int) as tc_set,
17329 | |                 };
      | |__________________- unnecessary `let` binding
17330 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
17326 ~                 
17327 ~                 tc_hit {
17328 +                     index: i,
17329 +                     patterns: ((1 as libc::c_long) << 8 as libc::c_int) as tc_set,
17330 +                 }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:17384:17
      |
17380 | /                 let mut init = tc_hit {
17381 | |                     index: i,
17382 | |                     patterns: ((1 as libc::c_long) << 9 as libc::c_int) as tc_set,
17383 | |                 };
      | |__________________- unnecessary `let` binding
17384 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
17380 ~                 
17381 ~                 tc_hit {
17382 +                     index: i,
17383 +                     patterns: ((1 as libc::c_long) << 9 as libc::c_int) as tc_set,
17384 +                 }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:17438:17
      |
17434 | /                 let mut init = tc_hit {
17435 | |                     index: i,
17436 | |                     patterns: ((1 as libc::c_long) << 10 as libc::c_int) as tc_set,
17437 | |                 };
      | |__________________- unnecessary `let` binding
17438 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
17434 ~                 
17435 ~                 tc_hit {
17436 +                     index: i,
17437 +                     patterns: ((1 as libc::c_long) << 10 as libc::c_int) as tc_set,
17438 +                 }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:17456:17
      |
17452 | /                 let mut init = tc_hit {
17453 | |                     index: i,
17454 | |                     patterns: ((1 as libc::c_long) << 11 as libc::c_int) as tc_set,
17455 | |                 };
      | |__________________- unnecessary `let` binding
17456 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
17452 ~                 
17453 ~                 tc_hit {
17454 +                     index: i,
17455 +                     patterns: ((1 as libc::c_long) << 11 as libc::c_int) as tc_set,
17456 +                 }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:17474:17
      |
17470 | /                 let mut init = tc_hit {
17471 | |                     index: i,
17472 | |                     patterns: ((1 as libc::c_long) << 12 as libc::c_int) as tc_set,
17473 | |                 };
      | |__________________- unnecessary `let` binding
17474 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
17470 ~                 
17471 ~                 tc_hit {
17472 +                     index: i,
17473 +                     patterns: ((1 as libc::c_long) << 12 as libc::c_int) as tc_set,
17474 +                 }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:17500:17
      |
17496 | /                 let mut init = tc_hit {
17497 | |                     index: i,
17498 | |                     patterns: ((1 as libc::c_long) << 13 as libc::c_int) as tc_set,
17499 | |                 };
      | |__________________- unnecessary `let` binding
17500 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
17496 ~                 
17497 ~                 tc_hit {
17498 +                     index: i,
17499 +                     patterns: ((1 as libc::c_long) << 13 as libc::c_int) as tc_set,
17500 +                 }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:17526:17
      |
17522 | /                 let mut init = tc_hit {
17523 | |                     index: i,
17524 | |                     patterns: ((1 as libc::c_long) << 14 as libc::c_int) as tc_set,
17525 | |                 };
      | |__________________- unnecessary `let` binding
17526 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
17522 ~                 
17523 ~                 tc_hit {
17524 +                     index: i,
17525 +                     patterns: ((1 as libc::c_long) << 14 as libc::c_int) as tc_set,
17526 +                 }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:17557:17
      |
17553 | /                 let mut init = tc_hit {
17554 | |                     index: i,
17555 | |                     patterns: ((1 as libc::c_long) << 15 as libc::c_int) as tc_set,
17556 | |                 };
      | |__________________- unnecessary `let` binding
17557 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
17553 ~                 
17554 ~                 tc_hit {
17555 +                     index: i,
17556 +                     patterns: ((1 as libc::c_long) << 15 as libc::c_int) as tc_set,
17557 +                 }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:17575:17
      |
17571 | /                 let mut init = tc_hit {
17572 | |                     index: i,
17573 | |                     patterns: ((1 as libc::c_long) << 16 as libc::c_int) as tc_set,
17574 | |                 };
      | |__________________- unnecessary `let` binding
17575 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
17571 ~                 
17572 ~                 tc_hit {
17573 +                     index: i,
17574 +                     patterns: ((1 as libc::c_long) << 16 as libc::c_int) as tc_set,
17575 +                 }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:17593:17
      |
17589 | /                 let mut init = tc_hit {
17590 | |                     index: i,
17591 | |                     patterns: ((1 as libc::c_long) << 17 as libc::c_int) as tc_set,
17592 | |                 };
      | |__________________- unnecessary `let` binding
17593 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
17589 ~                 
17590 ~                 tc_hit {
17591 +                     index: i,
17592 +                     patterns: ((1 as libc::c_long) << 17 as libc::c_int) as tc_set,
17593 +                 }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:17647:17
      |
17643 | /                 let mut init = tc_hit {
17644 | |                     index: i,
17645 | |                     patterns: ((1 as libc::c_long) << 18 as libc::c_int) as tc_set,
17646 | |                 };
      | |__________________- unnecessary `let` binding
17647 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
17643 ~                 
17644 ~                 tc_hit {
17645 +                     index: i,
17646 +                     patterns: ((1 as libc::c_long) << 18 as libc::c_int) as tc_set,
17647 +                 }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:17701:17
      |
17697 | /                 let mut init = tc_hit {
17698 | |                     index: i,
17699 | |                     patterns: ((1 as libc::c_long) << 19 as libc::c_int) as tc_set,
17700 | |                 };
      | |__________________- unnecessary `let` binding
17701 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
17697 ~                 
17698 ~                 tc_hit {
17699 +                     index: i,
17700 +                     patterns: ((1 as libc::c_long) << 19 as libc::c_int) as tc_set,
17701 +                 }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:17732:17
      |
17728 | /                 let mut init = tc_hit {
17729 | |                     index: i,
17730 | |                     patterns: ((1 as libc::c_long) << 20 as libc::c_int) as tc_set,
17731 | |                 };
      | |__________________- unnecessary `let` binding
17732 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
17728 ~                 
17729 ~                 tc_hit {
17730 +                     index: i,
17731 +                     patterns: ((1 as libc::c_long) << 20 as libc::c_int) as tc_set,
17732 +                 }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:17752:17
      |
17748 | /                 let mut init = tc_hit {
17749 | |                     index: i,
17750 | |                     patterns: ((1 as libc::c_long) << 21 as libc::c_int) as tc_set,
17751 | |                 };
      | |__________________- unnecessary `let` binding
17752 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
17748 ~                 
17749 ~                 tc_hit {
17750 +                     index: i,
17751 +                     patterns: ((1 as libc::c_long) << 21 as libc::c_int) as tc_set,
17752 +                 }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:17770:17
      |
17766 | /                 let mut init = tc_hit {
17767 | |                     index: i,
17768 | |                     patterns: ((1 as libc::c_long) << 22 as libc::c_int) as tc_set,
17769 | |                 };
      | |__________________- unnecessary `let` binding
17770 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
17766 ~                 
17767 ~                 tc_hit {
17768 +                     index: i,
17769 +                     patterns: ((1 as libc::c_long) << 22 as libc::c_int) as tc_set,
17770 +                 }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:17824:17
      |
17820 | /                 let mut init = tc_hit {
17821 | |                     index: i,
17822 | |                     patterns: ((1 as libc::c_long) << 23 as libc::c_int) as tc_set,
17823 | |                 };
      | |__________________- unnecessary `let` binding
17824 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
17820 ~                 
17821 ~                 tc_hit {
17822 +                     index: i,
17823 +                     patterns: ((1 as libc::c_long) << 23 as libc::c_int) as tc_set,
17824 +                 }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:17878:17
      |
17874 | /                 let mut init = tc_hit {
17875 | |                     index: i,
17876 | |                     patterns: ((1 as libc::c_long) << 24 as libc::c_int) as tc_set,
17877 | |                 };
      | |__________________- unnecessary `let` binding
17878 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
17874 ~                 
17875 ~                 tc_hit {
17876 +                     index: i,
17877 +                     patterns: ((1 as libc::c_long) << 24 as libc::c_int) as tc_set,
17878 +                 }
      |

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:17897:17
      |
17893 | /                 let mut init = tc_hit {
17894 | |                     index: i,
17895 | |                     patterns: ((1 as libc::c_long) << 25 as libc::c_int) as tc_set,
17896 | |                 };
      | |__________________- unnecessary `let` binding
17897 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
17893 ~                 
17894 ~                 tc_hit {
17895 +                     index: i,
17896 +                     patterns: ((1 as libc::c_long) << 25 as libc::c_int) as tc_set,
17897 +                 }
      |

warning: statement with no effect
     --> src/tiamalgamation.rs:17914:9
      |
17914 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:17919:1
      |
17919 | / pub unsafe extern "C" fn tc_abandoned_baby_bear(
17920 | |     mut size: libc::c_int,
17921 | |     mut inputs: *const *const TC_REAL,
17922 | |     mut options: *const tc_config,
...     |
18006 | |     return 0 as libc::c_int;
18007 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:18006:5
      |
18006 |     return 0 as libc::c_int;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
     --> src/tiamalgamation.rs:17945:9
      |
17945 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:17987:17
      |
17983 | /                 let mut init = tc_hit {
17984 | |                     index: i,
17985 | |                     patterns: ((1 as libc::c_long) << 0 as libc::c_int) as tc_set,
17986 | |                 };
      | |__________________- unnecessary `let` binding
17987 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
17983 ~                 
17984 ~                 tc_hit {
17985 +                     index: i,
17986 +                     patterns: ((1 as libc::c_long) << 0 as libc::c_int) as tc_set,
17987 +                 }
      |

warning: statement with no effect
     --> src/tiamalgamation.rs:18004:9
      |
18004 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:18009:1
      |
18009 | / pub unsafe extern "C" fn tc_abandoned_baby_bull(
18010 | |     mut size: libc::c_int,
18011 | |     mut inputs: *const *const TC_REAL,
18012 | |     mut options: *const tc_config,
...     |
18096 | |     return 0 as libc::c_int;
18097 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:18096:5
      |
18096 |     return 0 as libc::c_int;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
     --> src/tiamalgamation.rs:18035:9
      |
18035 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:18077:17
      |
18073 | /                 let mut init = tc_hit {
18074 | |                     index: i,
18075 | |                     patterns: ((1 as libc::c_long) << 1 as libc::c_int) as tc_set,
18076 | |                 };
      | |__________________- unnecessary `let` binding
18077 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
18073 ~                 
18074 ~                 tc_hit {
18075 +                     index: i,
18076 +                     patterns: ((1 as libc::c_long) << 1 as libc::c_int) as tc_set,
18077 +                 }
      |

warning: statement with no effect
     --> src/tiamalgamation.rs:18094:9
      |
18094 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:18099:1
      |
18099 | / pub unsafe extern "C" fn tc_big_black_candle(
18100 | |     mut size: libc::c_int,
18101 | |     mut inputs: *const *const TC_REAL,
18102 | |     mut options: *const tc_config,
...     |
18172 | |     return 0 as libc::c_int;
18173 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:18172:5
      |
18172 |     return 0 as libc::c_int;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
     --> src/tiamalgamation.rs:18125:9
      |
18125 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:18153:17
      |
18149 | /                 let mut init = tc_hit {
18150 | |                     index: i,
18151 | |                     patterns: ((1 as libc::c_long) << 2 as libc::c_int) as tc_set,
18152 | |                 };
      | |__________________- unnecessary `let` binding
18153 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
18149 ~                 
18150 ~                 tc_hit {
18151 +                     index: i,
18152 +                     patterns: ((1 as libc::c_long) << 2 as libc::c_int) as tc_set,
18153 +                 }
      |

warning: statement with no effect
     --> src/tiamalgamation.rs:18170:9
      |
18170 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:18175:1
      |
18175 | / pub unsafe extern "C" fn tc_big_white_candle(
18176 | |     mut size: libc::c_int,
18177 | |     mut inputs: *const *const TC_REAL,
18178 | |     mut options: *const tc_config,
...     |
18248 | |     return 0 as libc::c_int;
18249 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:18248:5
      |
18248 |     return 0 as libc::c_int;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
     --> src/tiamalgamation.rs:18201:9
      |
18201 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:18229:17
      |
18225 | /                 let mut init = tc_hit {
18226 | |                     index: i,
18227 | |                     patterns: ((1 as libc::c_long) << 3 as libc::c_int) as tc_set,
18228 | |                 };
      | |__________________- unnecessary `let` binding
18229 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
18225 ~                 
18226 ~                 tc_hit {
18227 +                     index: i,
18228 +                     patterns: ((1 as libc::c_long) << 3 as libc::c_int) as tc_set,
18229 +                 }
      |

warning: statement with no effect
     --> src/tiamalgamation.rs:18246:9
      |
18246 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:18251:1
      |
18251 | / pub unsafe extern "C" fn tc_black_marubozu(
18252 | |     mut size: libc::c_int,
18253 | |     mut inputs: *const *const TC_REAL,
18254 | |     mut options: *const tc_config,
...     |
18326 | |     return 0 as libc::c_int;
18327 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:18326:5
      |
18326 |     return 0 as libc::c_int;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
     --> src/tiamalgamation.rs:18277:9
      |
18277 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:18307:17
      |
18303 | /                 let mut init = tc_hit {
18304 | |                     index: i,
18305 | |                     patterns: ((1 as libc::c_long) << 4 as libc::c_int) as tc_set,
18306 | |                 };
      | |__________________- unnecessary `let` binding
18307 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
18303 ~                 
18304 ~                 tc_hit {
18305 +                     index: i,
18306 +                     patterns: ((1 as libc::c_long) << 4 as libc::c_int) as tc_set,
18307 +                 }
      |

warning: statement with no effect
     --> src/tiamalgamation.rs:18324:9
      |
18324 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:18329:1
      |
18329 | / pub unsafe extern "C" fn tc_doji(
18330 | |     mut size: libc::c_int,
18331 | |     mut inputs: *const *const TC_REAL,
18332 | |     mut options: *const tc_config,
...     |
18401 | |     return 0 as libc::c_int;
18402 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:18401:5
      |
18401 |     return 0 as libc::c_int;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
     --> src/tiamalgamation.rs:18355:9
      |
18355 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:18382:17
      |
18378 | /                 let mut init = tc_hit {
18379 | |                     index: i,
18380 | |                     patterns: ((1 as libc::c_long) << 5 as libc::c_int) as tc_set,
18381 | |                 };
      | |__________________- unnecessary `let` binding
18382 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
18378 ~                 
18379 ~                 tc_hit {
18380 +                     index: i,
18381 +                     patterns: ((1 as libc::c_long) << 5 as libc::c_int) as tc_set,
18382 +                 }
      |

warning: statement with no effect
     --> src/tiamalgamation.rs:18399:9
      |
18399 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:18404:1
      |
18404 | / pub unsafe extern "C" fn tc_dragonfly_doji(
18405 | |     mut size: libc::c_int,
18406 | |     mut inputs: *const *const TC_REAL,
18407 | |     mut options: *const tc_config,
...     |
18478 | |     return 0 as libc::c_int;
18479 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:18478:5
      |
18478 |     return 0 as libc::c_int;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
     --> src/tiamalgamation.rs:18430:9
      |
18430 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:18459:17
      |
18455 | /                 let mut init = tc_hit {
18456 | |                     index: i,
18457 | |                     patterns: ((1 as libc::c_long) << 6 as libc::c_int) as tc_set,
18458 | |                 };
      | |__________________- unnecessary `let` binding
18459 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
18455 ~                 
18456 ~                 tc_hit {
18457 +                     index: i,
18458 +                     patterns: ((1 as libc::c_long) << 6 as libc::c_int) as tc_set,
18459 +                 }
      |

warning: statement with no effect
     --> src/tiamalgamation.rs:18476:9
      |
18476 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:18481:1
      |
18481 | / pub unsafe extern "C" fn tc_engulfing_bear(
18482 | |     mut size: libc::c_int,
18483 | |     mut inputs: *const *const TC_REAL,
18484 | |     mut options: *const tc_config,
...     |
18556 | |     return 0 as libc::c_int;
18557 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:18556:5
      |
18556 |     return 0 as libc::c_int;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
     --> src/tiamalgamation.rs:18507:9
      |
18507 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:18537:17
      |
18533 | /                 let mut init = tc_hit {
18534 | |                     index: i,
18535 | |                     patterns: ((1 as libc::c_long) << 7 as libc::c_int) as tc_set,
18536 | |                 };
      | |__________________- unnecessary `let` binding
18537 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
18533 ~                 
18534 ~                 tc_hit {
18535 +                     index: i,
18536 +                     patterns: ((1 as libc::c_long) << 7 as libc::c_int) as tc_set,
18537 +                 }
      |

warning: statement with no effect
     --> src/tiamalgamation.rs:18554:9
      |
18554 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:18559:1
      |
18559 | / pub unsafe extern "C" fn tc_engulfing_bull(
18560 | |     mut size: libc::c_int,
18561 | |     mut inputs: *const *const TC_REAL,
18562 | |     mut options: *const tc_config,
...     |
18634 | |     return 0 as libc::c_int;
18635 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:18634:5
      |
18634 |     return 0 as libc::c_int;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
     --> src/tiamalgamation.rs:18585:9
      |
18585 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:18615:17
      |
18611 | /                 let mut init = tc_hit {
18612 | |                     index: i,
18613 | |                     patterns: ((1 as libc::c_long) << 8 as libc::c_int) as tc_set,
18614 | |                 };
      | |__________________- unnecessary `let` binding
18615 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
18611 ~                 
18612 ~                 tc_hit {
18613 +                     index: i,
18614 +                     patterns: ((1 as libc::c_long) << 8 as libc::c_int) as tc_set,
18615 +                 }
      |

warning: statement with no effect
     --> src/tiamalgamation.rs:18632:9
      |
18632 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:18637:1
      |
18637 | / pub unsafe extern "C" fn tc_evening_doji_star(
18638 | |     mut size: libc::c_int,
18639 | |     mut inputs: *const *const TC_REAL,
18640 | |     mut options: *const tc_config,
...     |
18747 | |     return 0 as libc::c_int;
18748 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:18747:5
      |
18747 |     return 0 as libc::c_int;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
     --> src/tiamalgamation.rs:18663:9
      |
18663 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:18728:17
      |
18724 | /                 let mut init = tc_hit {
18725 | |                     index: i,
18726 | |                     patterns: ((1 as libc::c_long) << 9 as libc::c_int) as tc_set,
18727 | |                 };
      | |__________________- unnecessary `let` binding
18728 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
18724 ~                 
18725 ~                 tc_hit {
18726 +                     index: i,
18727 +                     patterns: ((1 as libc::c_long) << 9 as libc::c_int) as tc_set,
18728 +                 }
      |

warning: statement with no effect
     --> src/tiamalgamation.rs:18745:9
      |
18745 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:18750:1
      |
18750 | / pub unsafe extern "C" fn tc_evening_star(
18751 | |     mut size: libc::c_int,
18752 | |     mut inputs: *const *const TC_REAL,
18753 | |     mut options: *const tc_config,
...     |
18860 | |     return 0 as libc::c_int;
18861 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:18860:5
      |
18860 |     return 0 as libc::c_int;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
     --> src/tiamalgamation.rs:18776:9
      |
18776 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:18841:17
      |
18837 | /                 let mut init = tc_hit {
18838 | |                     index: i,
18839 | |                     patterns: ((1 as libc::c_long) << 10 as libc::c_int) as tc_set,
18840 | |                 };
      | |__________________- unnecessary `let` binding
18841 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
18837 ~                 
18838 ~                 tc_hit {
18839 +                     index: i,
18840 +                     patterns: ((1 as libc::c_long) << 10 as libc::c_int) as tc_set,
18841 +                 }
      |

warning: statement with no effect
     --> src/tiamalgamation.rs:18858:9
      |
18858 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:18863:1
      |
18863 | / pub unsafe extern "C" fn tc_four_price_doji(
18864 | |     mut size: libc::c_int,
18865 | |     mut inputs: *const *const TC_REAL,
18866 | |     mut options: *const tc_config,
...     |
18937 | |     return 0 as libc::c_int;
18938 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:18937:5
      |
18937 |     return 0 as libc::c_int;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
     --> src/tiamalgamation.rs:18889:9
      |
18889 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:18918:17
      |
18914 | /                 let mut init = tc_hit {
18915 | |                     index: i,
18916 | |                     patterns: ((1 as libc::c_long) << 11 as libc::c_int) as tc_set,
18917 | |                 };
      | |__________________- unnecessary `let` binding
18918 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
18914 ~                 
18915 ~                 tc_hit {
18916 +                     index: i,
18917 +                     patterns: ((1 as libc::c_long) << 11 as libc::c_int) as tc_set,
18918 +                 }
      |

warning: statement with no effect
     --> src/tiamalgamation.rs:18935:9
      |
18935 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:18940:1
      |
18940 | / pub unsafe extern "C" fn tc_gravestone_doji(
18941 | |     mut size: libc::c_int,
18942 | |     mut inputs: *const *const TC_REAL,
18943 | |     mut options: *const tc_config,
...     |
19014 | |     return 0 as libc::c_int;
19015 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:19014:5
      |
19014 |     return 0 as libc::c_int;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
     --> src/tiamalgamation.rs:18966:9
      |
18966 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:18995:17
      |
18991 | /                 let mut init = tc_hit {
18992 | |                     index: i,
18993 | |                     patterns: ((1 as libc::c_long) << 12 as libc::c_int) as tc_set,
18994 | |                 };
      | |__________________- unnecessary `let` binding
18995 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
18991 ~                 
18992 ~                 tc_hit {
18993 +                     index: i,
18994 +                     patterns: ((1 as libc::c_long) << 12 as libc::c_int) as tc_set,
18995 +                 }
      |

warning: statement with no effect
     --> src/tiamalgamation.rs:19012:9
      |
19012 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:19017:1
      |
19017 | / pub unsafe extern "C" fn tc_hammer(
19018 | |     mut size: libc::c_int,
19019 | |     mut inputs: *const *const TC_REAL,
19020 | |     mut options: *const tc_config,
...     |
19099 | |     return 0 as libc::c_int;
19100 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:19099:5
      |
19099 |     return 0 as libc::c_int;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
     --> src/tiamalgamation.rs:19043:9
      |
19043 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:19080:17
      |
19076 | /                 let mut init = tc_hit {
19077 | |                     index: i,
19078 | |                     patterns: ((1 as libc::c_long) << 13 as libc::c_int) as tc_set,
19079 | |                 };
      | |__________________- unnecessary `let` binding
19080 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
19076 ~                 
19077 ~                 tc_hit {
19078 +                     index: i,
19079 +                     patterns: ((1 as libc::c_long) << 13 as libc::c_int) as tc_set,
19080 +                 }
      |

warning: statement with no effect
     --> src/tiamalgamation.rs:19097:9
      |
19097 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:19102:1
      |
19102 | / pub unsafe extern "C" fn tc_hanging_man(
19103 | |     mut size: libc::c_int,
19104 | |     mut inputs: *const *const TC_REAL,
19105 | |     mut options: *const tc_config,
...     |
19184 | |     return 0 as libc::c_int;
19185 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:19184:5
      |
19184 |     return 0 as libc::c_int;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
     --> src/tiamalgamation.rs:19128:9
      |
19128 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:19165:17
      |
19161 | /                 let mut init = tc_hit {
19162 | |                     index: i,
19163 | |                     patterns: ((1 as libc::c_long) << 14 as libc::c_int) as tc_set,
19164 | |                 };
      | |__________________- unnecessary `let` binding
19165 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
19161 ~                 
19162 ~                 tc_hit {
19163 +                     index: i,
19164 +                     patterns: ((1 as libc::c_long) << 14 as libc::c_int) as tc_set,
19165 +                 }
      |

warning: statement with no effect
     --> src/tiamalgamation.rs:19182:9
      |
19182 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:19187:1
      |
19187 | / pub unsafe extern "C" fn tc_inverted_hammer(
19188 | |     mut size: libc::c_int,
19189 | |     mut inputs: *const *const TC_REAL,
19190 | |     mut options: *const tc_config,
...     |
19274 | |     return 0 as libc::c_int;
19275 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:19274:5
      |
19274 |     return 0 as libc::c_int;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
     --> src/tiamalgamation.rs:19213:9
      |
19213 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:19255:17
      |
19251 | /                 let mut init = tc_hit {
19252 | |                     index: i,
19253 | |                     patterns: ((1 as libc::c_long) << 15 as libc::c_int) as tc_set,
19254 | |                 };
      | |__________________- unnecessary `let` binding
19255 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
19251 ~                 
19252 ~                 tc_hit {
19253 +                     index: i,
19254 +                     patterns: ((1 as libc::c_long) << 15 as libc::c_int) as tc_set,
19255 +                 }
      |

warning: statement with no effect
     --> src/tiamalgamation.rs:19272:9
      |
19272 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:19277:1
      |
19277 | / pub unsafe extern "C" fn tc_long_legged_doji(
19278 | |     mut size: libc::c_int,
19279 | |     mut inputs: *const *const TC_REAL,
19280 | |     mut options: *const tc_config,
...     |
19351 | |     return 0 as libc::c_int;
19352 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:19351:5
      |
19351 |     return 0 as libc::c_int;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
     --> src/tiamalgamation.rs:19303:9
      |
19303 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:19332:17
      |
19328 | /                 let mut init = tc_hit {
19329 | |                     index: i,
19330 | |                     patterns: ((1 as libc::c_long) << 16 as libc::c_int) as tc_set,
19331 | |                 };
      | |__________________- unnecessary `let` binding
19332 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
19328 ~                 
19329 ~                 tc_hit {
19330 +                     index: i,
19331 +                     patterns: ((1 as libc::c_long) << 16 as libc::c_int) as tc_set,
19332 +                 }
      |

warning: statement with no effect
     --> src/tiamalgamation.rs:19349:9
      |
19349 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:19354:1
      |
19354 | / pub unsafe extern "C" fn tc_marubozu(
19355 | |     mut size: libc::c_int,
19356 | |     mut inputs: *const *const TC_REAL,
19357 | |     mut options: *const tc_config,
...     |
19428 | |     return 0 as libc::c_int;
19429 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:19428:5
      |
19428 |     return 0 as libc::c_int;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
     --> src/tiamalgamation.rs:19380:9
      |
19380 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:19409:17
      |
19405 | /                 let mut init = tc_hit {
19406 | |                     index: i,
19407 | |                     patterns: ((1 as libc::c_long) << 17 as libc::c_int) as tc_set,
19408 | |                 };
      | |__________________- unnecessary `let` binding
19409 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
19405 ~                 
19406 ~                 tc_hit {
19407 +                     index: i,
19408 +                     patterns: ((1 as libc::c_long) << 17 as libc::c_int) as tc_set,
19409 +                 }
      |

warning: statement with no effect
     --> src/tiamalgamation.rs:19426:9
      |
19426 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:19431:1
      |
19431 | / pub unsafe extern "C" fn tc_morning_doji_star(
19432 | |     mut size: libc::c_int,
19433 | |     mut inputs: *const *const TC_REAL,
19434 | |     mut options: *const tc_config,
...     |
19541 | |     return 0 as libc::c_int;
19542 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:19541:5
      |
19541 |     return 0 as libc::c_int;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
     --> src/tiamalgamation.rs:19457:9
      |
19457 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:19522:17
      |
19518 | /                 let mut init = tc_hit {
19519 | |                     index: i,
19520 | |                     patterns: ((1 as libc::c_long) << 18 as libc::c_int) as tc_set,
19521 | |                 };
      | |__________________- unnecessary `let` binding
19522 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
19518 ~                 
19519 ~                 tc_hit {
19520 +                     index: i,
19521 +                     patterns: ((1 as libc::c_long) << 18 as libc::c_int) as tc_set,
19522 +                 }
      |

warning: statement with no effect
     --> src/tiamalgamation.rs:19539:9
      |
19539 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:19544:1
      |
19544 | / pub unsafe extern "C" fn tc_morning_star(
19545 | |     mut size: libc::c_int,
19546 | |     mut inputs: *const *const TC_REAL,
19547 | |     mut options: *const tc_config,
...     |
19654 | |     return 0 as libc::c_int;
19655 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:19654:5
      |
19654 |     return 0 as libc::c_int;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
     --> src/tiamalgamation.rs:19570:9
      |
19570 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:19635:17
      |
19631 | /                 let mut init = tc_hit {
19632 | |                     index: i,
19633 | |                     patterns: ((1 as libc::c_long) << 19 as libc::c_int) as tc_set,
19634 | |                 };
      | |__________________- unnecessary `let` binding
19635 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
19631 ~                 
19632 ~                 tc_hit {
19633 +                     index: i,
19634 +                     patterns: ((1 as libc::c_long) << 19 as libc::c_int) as tc_set,
19635 +                 }
      |

warning: statement with no effect
     --> src/tiamalgamation.rs:19652:9
      |
19652 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:19657:1
      |
19657 | / pub unsafe extern "C" fn tc_shooting_star(
19658 | |     mut size: libc::c_int,
19659 | |     mut inputs: *const *const TC_REAL,
19660 | |     mut options: *const tc_config,
...     |
19744 | |     return 0 as libc::c_int;
19745 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:19744:5
      |
19744 |     return 0 as libc::c_int;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
     --> src/tiamalgamation.rs:19683:9
      |
19683 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:19725:17
      |
19721 | /                 let mut init = tc_hit {
19722 | |                     index: i,
19723 | |                     patterns: ((1 as libc::c_long) << 20 as libc::c_int) as tc_set,
19724 | |                 };
      | |__________________- unnecessary `let` binding
19725 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
19721 ~                 
19722 ~                 tc_hit {
19723 +                     index: i,
19724 +                     patterns: ((1 as libc::c_long) << 20 as libc::c_int) as tc_set,
19725 +                 }
      |

warning: statement with no effect
     --> src/tiamalgamation.rs:19742:9
      |
19742 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:19747:1
      |
19747 | / pub unsafe extern "C" fn tc_spinning_top(
19748 | |     mut size: libc::c_int,
19749 | |     mut inputs: *const *const TC_REAL,
19750 | |     mut options: *const tc_config,
...     |
19823 | |     return 0 as libc::c_int;
19824 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:19823:5
      |
19823 |     return 0 as libc::c_int;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
     --> src/tiamalgamation.rs:19773:9
      |
19773 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:19804:17
      |
19800 | /                 let mut init = tc_hit {
19801 | |                     index: i,
19802 | |                     patterns: ((1 as libc::c_long) << 21 as libc::c_int) as tc_set,
19803 | |                 };
      | |__________________- unnecessary `let` binding
19804 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
19800 ~                 
19801 ~                 tc_hit {
19802 +                     index: i,
19803 +                     patterns: ((1 as libc::c_long) << 21 as libc::c_int) as tc_set,
19804 +                 }
      |

warning: statement with no effect
     --> src/tiamalgamation.rs:19821:9
      |
19821 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:19826:1
      |
19826 | / pub unsafe extern "C" fn tc_star(
19827 | |     mut size: libc::c_int,
19828 | |     mut inputs: *const *const TC_REAL,
19829 | |     mut options: *const tc_config,
...     |
19900 | |     return 0 as libc::c_int;
19901 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:19900:5
      |
19900 |     return 0 as libc::c_int;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
     --> src/tiamalgamation.rs:19852:9
      |
19852 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:19881:17
      |
19877 | /                 let mut init = tc_hit {
19878 | |                     index: i,
19879 | |                     patterns: ((1 as libc::c_long) << 22 as libc::c_int) as tc_set,
19880 | |                 };
      | |__________________- unnecessary `let` binding
19881 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
19877 ~                 
19878 ~                 tc_hit {
19879 +                     index: i,
19880 +                     patterns: ((1 as libc::c_long) << 22 as libc::c_int) as tc_set,
19881 +                 }
      |

warning: statement with no effect
     --> src/tiamalgamation.rs:19898:9
      |
19898 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:19903:1
      |
19903 | / pub unsafe extern "C" fn tc_three_black_crows(
19904 | |     mut size: libc::c_int,
19905 | |     mut inputs: *const *const TC_REAL,
19906 | |     mut options: *const tc_config,
...     |
20013 | |     return 0 as libc::c_int;
20014 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:20013:5
      |
20013 |     return 0 as libc::c_int;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
     --> src/tiamalgamation.rs:19929:9
      |
19929 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:19994:17
      |
19990 | /                 let mut init = tc_hit {
19991 | |                     index: i,
19992 | |                     patterns: ((1 as libc::c_long) << 23 as libc::c_int) as tc_set,
19993 | |                 };
      | |__________________- unnecessary `let` binding
19994 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
19990 ~                 
19991 ~                 tc_hit {
19992 +                     index: i,
19993 +                     patterns: ((1 as libc::c_long) << 23 as libc::c_int) as tc_set,
19994 +                 }
      |

warning: statement with no effect
     --> src/tiamalgamation.rs:20011:9
      |
20011 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:20016:1
      |
20016 | / pub unsafe extern "C" fn tc_three_white_soldiers(
20017 | |     mut size: libc::c_int,
20018 | |     mut inputs: *const *const TC_REAL,
20019 | |     mut options: *const tc_config,
...     |
20126 | |     return 0 as libc::c_int;
20127 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:20126:5
      |
20126 |     return 0 as libc::c_int;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
     --> src/tiamalgamation.rs:20042:9
      |
20042 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:20107:17
      |
20103 | /                 let mut init = tc_hit {
20104 | |                     index: i,
20105 | |                     patterns: ((1 as libc::c_long) << 24 as libc::c_int) as tc_set,
20106 | |                 };
      | |__________________- unnecessary `let` binding
20107 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
20103 ~                 
20104 ~                 tc_hit {
20105 +                     index: i,
20106 +                     patterns: ((1 as libc::c_long) << 24 as libc::c_int) as tc_set,
20107 +                 }
      |

warning: statement with no effect
     --> src/tiamalgamation.rs:20124:9
      |
20124 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
     --> src/tiamalgamation.rs:20129:1
      |
20129 | / pub unsafe extern "C" fn tc_white_marubozu(
20130 | |     mut size: libc::c_int,
20131 | |     mut inputs: *const *const TC_REAL,
20132 | |     mut options: *const tc_config,
...     |
20204 | |     return 0 as libc::c_int;
20205 | | }
      | |_^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
     --> src/tiamalgamation.rs:20204:5
      |
20204 |     return 0 as libc::c_int;
      |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
     --> src/tiamalgamation.rs:20155:9
      |
20155 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: returning the result of a `let` binding from a block
     --> src/tiamalgamation.rs:20185:17
      |
20181 | /                 let mut init = tc_hit {
20182 | |                     index: i,
20183 | |                     patterns: ((1 as libc::c_long) << 25 as libc::c_int) as tc_set,
20184 | |                 };
      | |__________________- unnecessary `let` binding
20185 |                   init
      |                   ^^^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
      |
20181 ~                 
20182 ~                 tc_hit {
20183 +                     index: i,
20184 +                     patterns: ((1 as libc::c_long) << 25 as libc::c_int) as tc_set,
20185 +                 }
      |

warning: statement with no effect
     --> src/tiamalgamation.rs:20202:9
      |
20202 |         i;
      |         ^^
      |
      = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/beta/abands.rs:24:1
   |
24 | / pub unsafe extern "C" fn ti_abands_start(
25 | |     mut options: *const libc::c_double,
26 | | ) -> libc::c_int {
27 | |     let period: libc::c_double = *options.offset(0 as libc::c_int as isize);
28 | |     return period as libc::c_int - 1 as libc::c_int;
29 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/beta/abands.rs:28:5
   |
28 |     return period as libc::c_int - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `period as libc::c_int - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/abands.rs:31:1
    |
31  | / pub unsafe extern "C" fn ti_abands(
32  | |     mut size: libc::c_int,
33  | |     mut inputs: *const *const libc::c_double,
34  | |     mut options: *const libc::c_double,
...   |
198 | |     return 0 as libc::c_int;
199 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/abands.rs:198:5
    |
198 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: manual implementation of an assign operation
  --> src/beta/abands.rs:72:9
   |
72 |         (*buffer_high).index = (*buffer_high).index + 1 as libc::c_int;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*buffer_high).index += 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: manual implementation of an assign operation
  --> src/beta/abands.rs:88:9
   |
88 |         (*buffer_low).index = (*buffer_low).index + 1 as libc::c_int;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*buffer_low).index += 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
  --> src/beta/abands.rs:94:9
   |
94 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: manual implementation of an assign operation
   --> src/beta/abands.rs:123:9
    |
123 |         (*buffer_high).index = (*buffer_high).index + 1 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*buffer_high).index += 1 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: manual implementation of an assign operation
   --> src/beta/abands.rs:140:9
    |
140 |         (*buffer_low).index = (*buffer_low).index + 1 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*buffer_low).index += 1 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
   --> src/beta/abands.rs:156:9
    |
156 |         i_0;
    |         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unnecessary operation
   --> src/beta/abands.rs:178:5
    |
178 | /     'c_3579: {
179 | |         if lower_band.offset_from(*outputs.offset(0 as libc::c_int as isize))
180 | |             as libc::c_long == (size - ti_abands_start(options)) as libc::c_long
181 | |         {} else {
...   |
196 | |         }
197 | |     };
    | |______^
    |
    = note: `#[warn(clippy::unnecessary_operation)]` on by default
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_operation
help: statement can be reduced to
    |
178 ~     if lower_band.offset_from(*outputs.offset(0 as libc::c_int as isize))
179 +             as libc::c_long == (size - ti_abands_start(options)) as libc::c_long
180 +         {} else {
181 +             __assert_fail(
182 +                 b"lower_band - outputs[0] == size - ti_abands_start(options)\0"
183 +                     as *const u8 as *const libc::c_char,
184 +                 b"/mnt/c/Users/mazin/Downloads/School/Research/datasets/tulipindicators/beta/abands.c\0"
185 +                     as *const u8 as *const libc::c_char,
186 +                 94 as libc::c_int as libc::c_uint,
187 +                 (*::core::mem::transmute::<
188 +                     &[u8; 75],
189 +                     &[libc::c_char; 75],
190 +                 >(
191 +                     b"int ti_abands(int, const double *const *, const double *, double *const *)\0",
192 +                 ))
193 +                     .as_ptr(),
194 +             );
195 +         };
    |

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/abands.rs:201:1
    |
201 | / pub unsafe extern "C" fn ti_abands_ref(
202 | |     mut size: libc::c_int,
203 | |     mut inputs: *const *const libc::c_double,
204 | |     mut options: *const libc::c_double,
...   |
297 | |     return 0 as libc::c_int;
298 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/abands.rs:297:5
    |
297 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/beta/abands.rs:245:13
    |
245 |             j;
    |             ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/abands.rs:257:9
    |
257 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unnecessary operation
   --> src/beta/abands.rs:277:5
    |
277 | /     'c_4400: {
278 | |         if lower_band.offset_from(*outputs.offset(0 as libc::c_int as isize))
279 | |             as libc::c_long == (size - ti_abands_start(options)) as libc::c_long
280 | |         {} else {
...   |
295 | |         }
296 | |     };
    | |______^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_operation
help: statement can be reduced to
    |
277 ~     if lower_band.offset_from(*outputs.offset(0 as libc::c_int as isize))
278 +             as libc::c_long == (size - ti_abands_start(options)) as libc::c_long
279 +         {} else {
280 +             __assert_fail(
281 +                 b"lower_band - outputs[0] == size - ti_abands_start(options)\0"
282 +                     as *const u8 as *const libc::c_char,
283 +                 b"/mnt/c/Users/mazin/Downloads/School/Research/datasets/tulipindicators/beta/abands.c\0"
284 +                     as *const u8 as *const libc::c_char,
285 +                 126 as libc::c_int as libc::c_uint,
286 +                 (*::core::mem::transmute::<
287 +                     &[u8; 79],
288 +                     &[libc::c_char; 79],
289 +                 >(
290 +                     b"int ti_abands_ref(int, const double *const *, const double *, double *const *)\0",
291 +                 ))
292 +                     .as_ptr(),
293 +             );
294 +         };
    |

warning: unsafe function's docs miss `# Safety` section
  --> src/beta/alma.rs:20:1
   |
20 | / pub unsafe extern "C" fn ti_alma_start(
21 | |     mut options: *const libc::c_double,
22 | | ) -> libc::c_int {
23 | |     let window: libc::c_int = *options.offset(0 as libc::c_int as isize) as libc::c_int;
24 | |     return window - 1 as libc::c_int;
25 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/beta/alma.rs:24:5
   |
24 |     return window - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `window - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/alma.rs:27:1
    |
27  | / pub unsafe extern "C" fn ti_alma(
28  | |     mut size: libc::c_int,
29  | |     mut inputs: *const *const libc::c_double,
30  | |     mut options: *const libc::c_double,
...   |
143 | |     return 0 as libc::c_int;
144 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/alma.rs:143:5
    |
143 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/beta/alma.rs:79:9
   |
79 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/beta/alma.rs:85:9
   |
85 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/beta/alma.rs:96:13
   |
96 |             j;
   |             ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/alma.rs:102:9
    |
102 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unnecessary operation
   --> src/beta/alma.rs:123:5
    |
123 | /     'c_3559: {
124 | |         if output.offset_from(*outputs.offset(0 as libc::c_int as isize)) as libc::c_long
125 | |             == (size - ti_sma_start(options)) as libc::c_long
126 | |         {} else {
...   |
141 | |         }
142 | |     };
    | |______^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_operation
help: statement can be reduced to
    |
123 ~     if output.offset_from(*outputs.offset(0 as libc::c_int as isize)) as libc::c_long
124 +             == (size - ti_sma_start(options)) as libc::c_long
125 +         {} else {
126 +             __assert_fail(
127 +                 b"output - outputs[0] == size - ti_sma_start(options)\0" as *const u8
128 +                     as *const libc::c_char,
129 +                 b"/mnt/c/Users/mazin/Downloads/School/Research/datasets/tulipindicators/beta/alma.c\0"
130 +                     as *const u8 as *const libc::c_char,
131 +                 82 as libc::c_int as libc::c_uint,
132 +                 (*::core::mem::transmute::<
133 +                     &[u8; 73],
134 +                     &[libc::c_char; 73],
135 +                 >(
136 +                     b"int ti_alma(int, const double *const *, const double *, double *const *)\0",
137 +                 ))
138 +                     .as_ptr(),
139 +             );
140 +         };
    |

warning: unsafe function's docs miss `# Safety` section
  --> src/beta/ce.rs:52:1
   |
52 | / pub unsafe extern "C" fn ti_ce_start(mut options: *const libc::c_double) -> libc::c_int {
53 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
54 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/beta/ce.rs:53:5
   |
53 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/ce.rs:56:1
    |
56  | / pub unsafe extern "C" fn ti_ce(
57  | |     mut size: libc::c_int,
58  | |     mut inputs: *const *const libc::c_double,
59  | |     mut options: *const libc::c_double,
...   |
162 | |     return 0 as libc::c_int;
163 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/ce.rs:162:5
    |
162 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/beta/ce.rs:99:9
   |
99 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/ce.rs:131:17
    |
131 |                 j;
    |                 ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/ce.rs:150:17
    |
150 |                 j_0;
    |                 ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/ce.rs:160:9
    |
160 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/ce.rs:165:1
    |
165 | / pub unsafe extern "C" fn ti_ce_ref(
166 | |     mut size: libc::c_int,
167 | |     mut inputs: *const *const libc::c_double,
168 | |     mut options: *const libc::c_double,
...   |
214 | |     return 0 as libc::c_int;
215 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/ce.rs:214:5
    |
214 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: the function `ti_atr` doesn't need a mutable reference
   --> src/beta/ce.rs:187:35
    |
187 |     ti_atr(size, inputs, options, &mut atr);
    |                                   ^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `ti_max` doesn't need a mutable reference
   --> src/beta/ce.rs:192:18
    |
192 |     ti_max(size, &mut high, options, &mut max);
    |                  ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `ti_max` doesn't need a mutable reference
   --> src/beta/ce.rs:192:38
    |
192 |     ti_max(size, &mut high, options, &mut max);
    |                                      ^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `ti_min` doesn't need a mutable reference
   --> src/beta/ce.rs:197:18
    |
197 |     ti_min(size, &mut low, options, &mut min);
    |                  ^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `ti_min` doesn't need a mutable reference
   --> src/beta/ce.rs:197:37
    |
197 |     ti_min(size, &mut low, options, &mut min);
    |                                     ^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: statement with no effect
   --> src/beta/ce.rs:209:9
    |
209 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/ce.rs:217:1
    |
217 | / pub unsafe extern "C" fn ti_ce_stream_new(
218 | |     mut options: *const libc::c_double,
219 | |     mut stream_in: *mut *mut ti_stream,
220 | | ) -> libc::c_int {
...   |
262 | |     return 0 as libc::c_int;
263 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/ce.rs:262:5
    |
262 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/beta/ce.rs:260:9
    |
260 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/ce.rs:265:1
    |
265 | / pub unsafe extern "C" fn ti_ce_stream_free(mut stream: *mut ti_stream) {
266 | |     free(stream as *mut libc::c_void);
267 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/ce.rs:269:1
    |
269 | / pub unsafe extern "C" fn ti_ce_stream_run(
270 | |     mut stream_in: *mut ti_stream,
271 | |     mut size: libc::c_int,
272 | |     mut inputs: *const *const libc::c_double,
...   |
559 | |     return 0 as libc::c_int;
560 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/ce.rs:559:5
    |
559 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/beta/ce.rs:327:17
    |
327 |                 j;
    |                 ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/ce.rs:350:17
    |
350 |                 j_0;
    |                 ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/ce.rs:358:9
    |
358 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/ce.rs:360:9
    |
360 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/ce.rs:412:17
    |
412 |                 j_1;
    |                 ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/ce.rs:435:17
    |
435 |                 j_2;
    |                 ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/ce.rs:443:9
    |
443 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/ce.rs:445:9
    |
445 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/ce.rs:509:17
    |
509 |                 j_3;
    |                 ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/ce.rs:532:17
    |
532 |                 j_4;
    |                 ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/ce.rs:552:9
    |
552 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/ce.rs:554:9
    |
554 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/beta/cmf.rs:14:1
   |
14 | / pub unsafe extern "C" fn ti_cmf_start(
15 | |     mut options: *const libc::c_double,
16 | | ) -> libc::c_int {
17 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
18 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/beta/cmf.rs:17:5
   |
17 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/cmf.rs:20:1
    |
20  | / pub unsafe extern "C" fn ti_cmf(
21  | |     mut size: libc::c_int,
22  | |     mut inputs: *const *const libc::c_double,
23  | |     mut options: *const libc::c_double,
...   |
127 | |     return 0 as libc::c_int;
128 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/cmf.rs:127:5
    |
127 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/beta/cmf.rs:54:9
   |
54 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/beta/cmf.rs:87:9
   |
87 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unnecessary operation
   --> src/beta/cmf.rs:107:5
    |
107 | /     'c_3549: {
108 | |         if output.offset_from(*outputs.offset(0 as libc::c_int as isize)) as libc::c_long
109 | |             == (size - ti_cmf_start(options)) as libc::c_long
110 | |         {} else {
...   |
125 | |         }
126 | |     };
    | |______^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_operation
help: statement can be reduced to
    |
107 ~     if output.offset_from(*outputs.offset(0 as libc::c_int as isize)) as libc::c_long
108 +             == (size - ti_cmf_start(options)) as libc::c_long
109 +         {} else {
110 +             __assert_fail(
111 +                 b"output - outputs[0] == size - ti_cmf_start(options)\0" as *const u8
112 +                     as *const libc::c_char,
113 +                 b"/mnt/c/Users/mazin/Downloads/School/Research/datasets/tulipindicators/beta/cmf.c\0"
114 +                     as *const u8 as *const libc::c_char,
115 +                 69 as libc::c_int as libc::c_uint,
116 +                 (*::core::mem::transmute::<
117 +                     &[u8; 72],
118 +                     &[libc::c_char; 72],
119 +                 >(
120 +                     b"int ti_cmf(int, const double *const *, const double *, double *const *)\0",
121 +                 ))
122 +                     .as_ptr(),
123 +             );
124 +         };
    |

warning: unsafe function's docs miss `# Safety` section
  --> src/beta/copp.rs:86:1
   |
86 | / pub unsafe extern "C" fn ti_copp_start(
87 | |     mut options: *const libc::c_double,
88 | | ) -> libc::c_int {
89 | |     let roc_longer_period: libc::c_int = *options.offset(1 as libc::c_int as isize)
...  |
93 | |     return ((roc_longer_period + wma_period) as libc::c_double - 1.0f64) as libc::c_int;
94 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/beta/copp.rs:93:5
   |
93 |     return ((roc_longer_period + wma_period) as libc::c_double - 1.0f64) as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `((roc_longer_period + wma_period) as libc::c_double - 1.0f64) as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/copp.rs:96:1
    |
96  | / pub unsafe extern "C" fn ti_copp(
97  | |     mut size: libc::c_int,
98  | |     mut inputs: *const *const libc::c_double,
99  | |     mut options: *const libc::c_double,
...   |
348 | |     return 0 as libc::c_int;
349 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/copp.rs:348:5
    |
348 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/beta/copp.rs:116:9
    |
116 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `0 as *mut _` detected
   --> src/beta/copp.rs:124:43
    |
124 |     let mut buffers: *mut C2RustUnnamed = 0 as *mut C2RustUnnamed;
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<C2RustUnnamed>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: statement with no effect
   --> src/beta/copp.rs:179:9
    |
179 |         i_0;
    |         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/copp.rs:253:9
    |
253 |         i_0;
    |         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/copp.rs:345:9
    |
345 |         i_0;
    |         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/copp.rs:351:1
    |
351 | / pub unsafe extern "C" fn ti_copp_ref(
352 | |     mut size: libc::c_int,
353 | |     mut inputs: *const *const libc::c_double,
354 | |     mut options: *const libc::c_double,
...   |
410 | |     return 0 as libc::c_int;
411 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/copp.rs:410:5
    |
410 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/beta/copp.rs:368:9
    |
368 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: the function `ti_roc` doesn't need a mutable reference
   --> src/beta/copp.rs:390:18
    |
390 |     ti_roc(size, &mut real, &roc_shorter_period, &mut roc_short);
    |                  ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `ti_roc` doesn't need a mutable reference
   --> src/beta/copp.rs:390:50
    |
390 |     ti_roc(size, &mut real, &roc_shorter_period, &mut roc_short);
    |                                                  ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `ti_roc` doesn't need a mutable reference
   --> src/beta/copp.rs:391:18
    |
391 |     ti_roc(size, &mut real, &roc_longer_period, &mut roc_long);
    |                  ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `ti_roc` doesn't need a mutable reference
   --> src/beta/copp.rs:391:49
    |
391 |     ti_roc(size, &mut real, &roc_longer_period, &mut roc_long);
    |                                                 ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: statement with no effect
   --> src/beta/copp.rs:401:9
    |
401 |         i_0;
    |         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: the function `ti_wma` doesn't need a mutable reference
   --> src/beta/copp.rs:406:67
    |
406 |     ti_wma(roc_long_len, ti_wma_inputs.as_mut_ptr(), &wma_period, &mut copp);
    |                                                                   ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/copp.rs:413:1
    |
413 | / pub unsafe extern "C" fn ti_copp_stream_free(mut stream: *mut ti_stream) {
414 | |     free(stream as *mut libc::c_void);
415 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/copp.rs:417:1
    |
417 | / pub unsafe extern "C" fn ti_copp_stream_run(
418 | |     mut stream_in: *mut ti_stream,
419 | |     mut size: libc::c_int,
420 | |     mut inputs: *const *const libc::c_double,
...   |
640 | |     return 0 as libc::c_int;
641 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/copp.rs:640:5
    |
640 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/beta/copp.rs:453:9
    |
453 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/copp.rs:455:9
    |
455 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/copp.rs:536:9
    |
536 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/copp.rs:538:9
    |
538 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/copp.rs:633:9
    |
633 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/copp.rs:635:9
    |
635 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/beta/dc.rs:53:1
   |
53 | / pub unsafe extern "C" fn ti_dc_start(mut options: *const libc::c_double) -> libc::c_int {
54 | |     let period: libc::c_int = *options.offset(0 as libc::c_int as isize) as libc::c_int;
55 | |     return period - 1 as libc::c_int;
56 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/beta/dc.rs:55:5
   |
55 |     return period - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `period - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/beta/dc.rs:58:1
   |
58 | / pub unsafe extern "C" fn ti_dc(
59 | |     mut size: libc::c_int,
60 | |     mut inputs: *const *const libc::c_double,
61 | |     mut options: *const libc::c_double,
...  |
76 | |     return 0 as libc::c_int;
77 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/beta/dc.rs:76:5
   |
76 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: the function `ti_min` doesn't need a mutable reference
  --> src/beta/dc.rs:74:18
   |
74 |     ti_min(size, &mut real, options, &mut dc_lower);
   |                  ^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `ti_min` doesn't need a mutable reference
  --> src/beta/dc.rs:74:38
   |
74 |     ti_min(size, &mut real, options, &mut dc_lower);
   |                                      ^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `ti_max` doesn't need a mutable reference
  --> src/beta/dc.rs:75:18
   |
75 |     ti_max(size, &mut real, options, &mut dc_upper);
   |                  ^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `ti_max` doesn't need a mutable reference
  --> src/beta/dc.rs:75:38
   |
75 |     ti_max(size, &mut real, options, &mut dc_upper);
   |                                      ^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: unsafe function's docs miss `# Safety` section
  --> src/beta/dc.rs:79:1
   |
79 | / pub unsafe extern "C" fn ti_dc_stream_free(mut stream: *mut ti_stream) {
80 | |     free(stream as *mut libc::c_void);
81 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/dc.rs:83:1
    |
83  | / pub unsafe extern "C" fn ti_dc_stream_run(
84  | |     mut stream_in: *mut ti_stream,
85  | |     mut size: libc::c_int,
86  | |     mut inputs: *const *const libc::c_double,
...   |
246 | |     return 0 as libc::c_int;
247 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/dc.rs:246:5
    |
246 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/beta/dc.rs:115:9
    |
115 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/dc.rs:117:9
    |
117 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/dc.rs:138:9
    |
138 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/dc.rs:140:9
    |
140 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/dc.rs:185:17
    |
185 |                 j;
    |                 ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/dc.rs:224:17
    |
224 |                 j_0;
    |                 ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/dc.rs:237:9
    |
237 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/dc.rs:239:9
    |
239 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/beta/fi.rs:23:1
   |
23 | / pub unsafe extern "C" fn ti_fi_start(mut options: *const libc::c_double) -> libc::c_int {
24 | |     return 1 as libc::c_int;
25 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/beta/fi.rs:24:5
   |
24 |     return 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/beta/fi.rs:27:1
   |
27 | / pub unsafe extern "C" fn ti_fi(
28 | |     mut size: libc::c_int,
29 | |     mut inputs: *const *const libc::c_double,
30 | |     mut options: *const libc::c_double,
...  |
58 | |     return 0 as libc::c_int;
59 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/beta/fi.rs:58:5
   |
58 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/beta/fi.rs:56:9
   |
56 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/beta/fi.rs:61:1
   |
61 | / pub unsafe extern "C" fn ti_fi_ref(
62 | |     mut size: libc::c_int,
63 | |     mut inputs: *const *const libc::c_double,
64 | |     mut options: *const libc::c_double,
...  |
87 | |     return 0 as libc::c_int;
88 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/beta/fi.rs:87:5
   |
87 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/beta/fi.rs:83:9
   |
83 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: the function `ti_ema` doesn't need a mutable reference
  --> src/beta/fi.rs:86:74
   |
86 |     ti_ema(size - 1 as libc::c_int, ti_ema_inputs.as_mut_ptr(), &period, &mut fi);
   |                                                                          ^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: unsafe function's docs miss `# Safety` section
  --> src/beta/fi.rs:90:1
   |
90 | / pub unsafe extern "C" fn ti_fi_stream_free(mut stream: *mut ti_stream) {
91 | |     free(stream as *mut libc::c_void);
92 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/fi.rs:94:1
    |
94  | / pub unsafe extern "C" fn ti_fi_stream_run(
95  | |     mut stream_in: *mut ti_stream,
96  | |     mut size: libc::c_int,
97  | |     mut inputs: *const *const libc::c_double,
...   |
142 | |     return 0 as libc::c_int;
143 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/fi.rs:142:5
    |
142 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/beta/fi.rs:112:9
    |
112 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/fi.rs:114:9
    |
114 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/fi.rs:123:9
    |
123 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/fi.rs:125:9
    |
125 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/fi.rs:135:9
    |
135 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/fi.rs:137:9
    |
137 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/beta/ikhts.rs:28:1
   |
28 | / pub unsafe extern "C" fn ti_ikhts_start(
29 | |     mut options: *const libc::c_double,
30 | | ) -> libc::c_int {
31 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
32 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/beta/ikhts.rs:31:5
   |
31 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/ikhts.rs:34:1
    |
34  | / pub unsafe extern "C" fn ti_ikhts(
35  | |     mut size: libc::c_int,
36  | |     mut inputs: *const *const libc::c_double,
37  | |     mut options: *const libc::c_double,
...   |
189 | |     return 0 as libc::c_int;
190 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/ikhts.rs:189:5
    |
189 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
  --> src/beta/ikhts.rs:58:51
   |
58 |     let mut tmp_outs: [*mut libc::c_double; 1] = [0 as *mut libc::c_double; 1];
   |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unnecessary operation
  --> src/beta/ikhts.rs:81:5
   |
81 | /     'c_3783: {
82 | |         if ret == 0 as libc::c_int {} else {
83 | |             __assert_fail(
84 | |                 b"ret == TI_OKAY\0" as *const u8 as *const libc::c_char,
...  |
96 | |         }
97 | |     };
   | |______^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_operation
help: statement can be reduced to
   |
81 ~     if ret == 0 as libc::c_int {} else {
82 +             __assert_fail(
83 +                 b"ret == TI_OKAY\0" as *const u8 as *const libc::c_char,
84 +                 b"/mnt/c/Users/mazin/Downloads/School/Research/datasets/tulipindicators/beta/ikhts.c\0"
85 +                     as *const u8 as *const libc::c_char,
86 +                 50 as libc::c_int as libc::c_uint,
87 +                 (*::core::mem::transmute::<
88 +                     &[u8; 74],
89 +                     &[libc::c_char; 74],
90 +                 >(
91 +                     b"int ti_ikhts(int, const double *const *, const double *, double *const *)\0",
92 +                 ))
93 +                     .as_ptr(),
94 +             );
95 +         };
   |

warning: unnecessary operation
   --> src/beta/ikhts.rs:120:5
    |
120 | /     'c_3702: {
121 | |         if ret == 0 as libc::c_int {} else {
122 | |             __assert_fail(
123 | |                 b"ret == TI_OKAY\0" as *const u8 as *const libc::c_char,
...   |
135 | |         }
136 | |     };
    | |______^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_operation
help: statement can be reduced to
    |
120 ~     if ret == 0 as libc::c_int {} else {
121 +             __assert_fail(
122 +                 b"ret == TI_OKAY\0" as *const u8 as *const libc::c_char,
123 +                 b"/mnt/c/Users/mazin/Downloads/School/Research/datasets/tulipindicators/beta/ikhts.c\0"
124 +                     as *const u8 as *const libc::c_char,
125 +                 54 as libc::c_int as libc::c_uint,
126 +                 (*::core::mem::transmute::<
127 +                     &[u8; 74],
128 +                     &[libc::c_char; 74],
129 +                 >(
130 +                     b"int ti_ikhts(int, const double *const *, const double *, double *const *)\0",
131 +                 ))
132 +                     .as_ptr(),
133 +             );
134 +         };
    |

warning: statement with no effect
   --> src/beta/ikhts.rs:148:9
    |
148 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unnecessary operation
   --> src/beta/ikhts.rs:169:5
    |
169 | /     'c_3554: {
170 | |         if output.offset_from(*outputs.offset(0 as libc::c_int as isize)) as libc::c_long
171 | |             == (size - ti_ikhts_start(options)) as libc::c_long
172 | |         {} else {
...   |
187 | |         }
188 | |     };
    | |______^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_operation
help: statement can be reduced to
    |
169 ~     if output.offset_from(*outputs.offset(0 as libc::c_int as isize)) as libc::c_long
170 +             == (size - ti_ikhts_start(options)) as libc::c_long
171 +         {} else {
172 +             __assert_fail(
173 +                 b"output - outputs[0] == size - ti_ikhts_start(options)\0" as *const u8
174 +                     as *const libc::c_char,
175 +                 b"/mnt/c/Users/mazin/Downloads/School/Research/datasets/tulipindicators/beta/ikhts.c\0"
176 +                     as *const u8 as *const libc::c_char,
177 +                 63 as libc::c_int as libc::c_uint,
178 +                 (*::core::mem::transmute::<
179 +                     &[u8; 74],
180 +                     &[libc::c_char; 74],
181 +                 >(
182 +                     b"int ti_ikhts(int, const double *const *, const double *, double *const *)\0",
183 +                 ))
184 +                     .as_ptr(),
185 +             );
186 +         };
    |

warning: unsafe function's docs miss `# Safety` section
  --> src/beta/kc.rs:41:1
   |
41 | / pub unsafe extern "C" fn ti_kc_start(mut options: *const libc::c_double) -> libc::c_int {
42 | |     return 0 as libc::c_int;
43 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/beta/kc.rs:42:5
   |
42 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/beta/kc.rs:45:1
   |
45 | / pub unsafe extern "C" fn ti_kc(
46 | |     mut size: libc::c_int,
47 | |     mut inputs: *const *const libc::c_double,
48 | |     mut options: *const libc::c_double,
...  |
94 | |     return 0 as libc::c_int;
95 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/beta/kc.rs:94:5
   |
94 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/beta/kc.rs:92:9
   |
92 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/kc.rs:97:1
    |
97  | / pub unsafe extern "C" fn ti_kc_stream_new(
98  | |     mut options: *const libc::c_double,
99  | |     mut stream_in: *mut *mut ti_stream,
100 | | ) -> libc::c_int {
...   |
142 | |     return 0 as libc::c_int;
143 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/kc.rs:142:5
    |
142 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/kc.rs:145:1
    |
145 | / pub unsafe extern "C" fn ti_kc_stream_free(mut stream: *mut ti_stream) {
146 | |     free(stream as *mut libc::c_void);
147 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/kc.rs:149:1
    |
149 | / pub unsafe extern "C" fn ti_kc_stream_run(
150 | |     mut stream_in: *mut ti_stream,
151 | |     mut size: libc::c_int,
152 | |     mut inputs: *const *const libc::c_double,
...   |
250 | |     return 0 as libc::c_int;
251 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/kc.rs:250:5
    |
250 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/beta/kc.rs:194:9
    |
194 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/kc.rs:196:9
    |
196 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/kc.rs:243:9
    |
243 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/kc.rs:245:9
    |
245 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/beta/kst.rs:29:1
   |
29 | / pub unsafe extern "C" fn ti_kst_start(
30 | |     mut options: *const libc::c_double,
31 | | ) -> libc::c_int {
32 | |     let roc4: libc::c_int = *options.offset(3 as libc::c_int as isize) as libc::c_int;
33 | |     return roc4;
34 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/beta/kst.rs:33:5
   |
33 |     return roc4;
   |     ^^^^^^^^^^^^ help: remove `return`: `roc4`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/kst.rs:36:1
    |
36  | / pub unsafe extern "C" fn ti_kst(
37  | |     mut size: libc::c_int,
38  | |     mut inputs: *const *const libc::c_double,
39  | |     mut options: *const libc::c_double,
...   |
184 | |     return 0 as libc::c_int;
185 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/kst.rs:184:5
    |
184 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/beta/kst.rs:62:9
   |
62 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/beta/kst.rs:93:9
   |
93 |         i_0;
   |         ^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/kst.rs:100:9
    |
100 |         i_1;
    |         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/kst.rs:107:9
    |
107 |         i_2;
    |         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/kst.rs:114:9
    |
114 |         i_3;
    |         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/kst.rs:144:9
    |
144 |         i_4;
    |         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unnecessary operation
   --> src/beta/kst.rs:164:5
    |
164 | /     'c_3572: {
165 | |         if kst.offset_from(*outputs.offset(0 as libc::c_int as isize)) as libc::c_long
166 | |             == (size - ti_kst_start(options)) as libc::c_long
167 | |         {} else {
...   |
182 | |         }
183 | |     };
    | |______^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_operation
help: statement can be reduced to
    |
164 ~     if kst.offset_from(*outputs.offset(0 as libc::c_int as isize)) as libc::c_long
165 +             == (size - ti_kst_start(options)) as libc::c_long
166 +         {} else {
167 +             __assert_fail(
168 +                 b"kst - outputs[0] == size - ti_kst_start(options)\0" as *const u8
169 +                     as *const libc::c_char,
170 +                 b"/mnt/c/Users/mazin/Downloads/School/Research/datasets/tulipindicators/beta/kst.c\0"
171 +                     as *const u8 as *const libc::c_char,
172 +                 111 as libc::c_int as libc::c_uint,
173 +                 (*::core::mem::transmute::<
174 +                     &[u8; 72],
175 +                     &[libc::c_char; 72],
176 +                 >(
177 +                     b"int ti_kst(int, const double *const *, const double *, double *const *)\0",
178 +                 ))
179 +                     .as_ptr(),
180 +             );
181 +         };
    |

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/kst.rs:187:1
    |
187 | / pub unsafe extern "C" fn ti_kst_ref(
188 | |     mut size: libc::c_int,
189 | |     mut inputs: *const *const libc::c_double,
190 | |     mut options: *const libc::c_double,
...   |
333 | |     return 0 as libc::c_int;
334 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/kst.rs:333:5
    |
333 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/beta/kst.rs:212:9
    |
212 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `0 as *mut _` detected
   --> src/beta/kst.rs:216:50
    |
216 |     let mut roc_mem: [*mut libc::c_double; 4] = [0 as *mut libc::c_double; 4];
    |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/beta/kst.rs:217:50
    |
217 |     let mut ema_mem: [*mut libc::c_double; 4] = [0 as *mut libc::c_double; 4];
    |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: the function `ti_roc` doesn't need a mutable reference
   --> src/beta/kst.rs:230:13
    |
230 |             &mut real,
    |             ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: statement with no effect
   --> src/beta/kst.rs:249:9
    |
249 |         i_0;
    |         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/kst.rs:258:9
    |
258 |         i_1;
    |         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/kst.rs:265:9
    |
265 |         i_2;
    |         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/kst.rs:281:9
    |
281 |         i_3;
    |         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: the function `ti_ema` doesn't need a mutable reference
   --> src/beta/kst.rs:287:51
    |
287 |     ti_ema(min_len, ti_ema_inputs_0.as_mut_ptr(), &mut signal_period, &mut kst_signal);
    |                                                   ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `ti_ema` doesn't need a mutable reference
   --> src/beta/kst.rs:287:71
    |
287 |     ti_ema(min_len, ti_ema_inputs_0.as_mut_ptr(), &mut signal_period, &mut kst_signal);
    |                                                                       ^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: statement with no effect
   --> src/beta/kst.rs:293:9
    |
293 |         i_4;
    |         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unnecessary operation
   --> src/beta/kst.rs:313:5
    |
313 | /     'c_4523: {
314 | |         if kst.offset_from(*outputs.offset(0 as libc::c_int as isize)) as libc::c_long
315 | |             == (size - ti_kst_start(options)) as libc::c_long
316 | |         {} else {
...   |
331 | |         }
332 | |     };
    | |______^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_operation
help: statement can be reduced to
    |
313 ~     if kst.offset_from(*outputs.offset(0 as libc::c_int as isize)) as libc::c_long
314 +             == (size - ti_kst_start(options)) as libc::c_long
315 +         {} else {
316 +             __assert_fail(
317 +                 b"kst - outputs[0] == size - ti_kst_start(options)\0" as *const u8
318 +                     as *const libc::c_char,
319 +                 b"/mnt/c/Users/mazin/Downloads/School/Research/datasets/tulipindicators/beta/kst.c\0"
320 +                     as *const u8 as *const libc::c_char,
321 +                 171 as libc::c_int as libc::c_uint,
322 +                 (*::core::mem::transmute::<
323 +                     &[u8; 76],
324 +                     &[libc::c_char; 76],
325 +                 >(
326 +                     b"int ti_kst_ref(int, const double *const *, const double *, double *const *)\0",
327 +                 ))
328 +                     .as_ptr(),
329 +             );
330 +         };
    |

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/mama.rs:180:1
    |
180 | / pub unsafe extern "C" fn ti_mama_start(
181 | |     mut options: *const libc::c_double,
182 | | ) -> libc::c_int {
183 | |     return 6 as libc::c_int;
184 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/mama.rs:183:5
    |
183 |     return 6 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `6 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/beta/mama.rs:186:1
     |
186  | / pub unsafe extern "C" fn ti_mama(
187  | |     mut size: libc::c_int,
188  | |     mut inputs: *const *const libc::c_double,
189  | |     mut options: *const libc::c_double,
...    |
1368 | |     return 0 as libc::c_int;
1369 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/beta/mama.rs:1368:5
     |
1368 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/beta/mama.rs:201:9
    |
201 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `0 as *mut _` detected
   --> src/beta/mama.rs:206:33
    |
206 |     let mut data_0: *mut data = 0 as *mut data;
    |                                 ^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<data>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: statement with no effect
   --> src/beta/mama.rs:523:9
    |
523 |         i_0;
    |         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/beta/mama.rs:1365:9
     |
1365 |         i_1;
     |         ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/beta/mama.rs:1371:1
     |
1371 | / pub unsafe extern "C" fn ti_mama_ref(
1372 | |     mut size: libc::c_int,
1373 | |     mut inputs: *const *const libc::c_double,
1374 | |     mut options: *const libc::c_double,
...    |
1621 | |     return 0 as libc::c_int;
1622 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/beta/mama.rs:1621:5
     |
1621 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/beta/mama.rs:1388:9
     |
1388 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/beta/mama.rs:1592:9
     |
1592 |         mama;
     |         ^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/beta/mama.rs:1602:9
     |
1602 |         fama;
     |         ^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/beta/mama.rs:1604:9
     |
1604 |         i_0;
     |         ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/beta/mama.rs:1624:1
     |
1624 | / pub unsafe extern "C" fn ti_mama_stream_run(
1625 | |     mut stream_in: *mut ti_stream,
1626 | |     mut size: libc::c_int,
1627 | |     mut inputs: *const *const libc::c_double,
...    |
2718 | |     return 0 as libc::c_int;
2719 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/beta/mama.rs:2718:5
     |
2718 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
    --> src/beta/mama.rs:1638:5
     |
1638 |     progress == -(6 as libc::c_int);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/beta/mama.rs:1808:9
     |
1808 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/beta/mama.rs:1810:9
     |
1810 |         progress;
     |         ^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/beta/mama.rs:2713:9
     |
2713 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/beta/mama.rs:2715:9
     |
2715 |         progress;
     |         ^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
    --> src/beta/mama.rs:2721:1
     |
2721 | / pub unsafe extern "C" fn ti_mama_stream_free(mut stream: *mut ti_stream) {
2722 | |     free(stream as *mut libc::c_void);
2723 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
  --> src/beta/pbands.rs:62:1
   |
62 | / pub unsafe extern "C" fn ti_pbands_start(
63 | |     mut options: *const libc::c_double,
64 | | ) -> libc::c_int {
65 | |     let period: libc::c_int = *options.offset(0 as libc::c_int as isize) as libc::c_int;
66 | |     return period - 1 as libc::c_int;
67 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/beta/pbands.rs:66:5
   |
66 |     return period - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `period - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/pbands.rs:69:1
    |
69  | / pub unsafe extern "C" fn ti_pbands(
70  | |     mut size: libc::c_int,
71  | |     mut inputs: *const *const libc::c_double,
72  | |     mut options: *const libc::c_double,
...   |
173 | |     return 0 as libc::c_int;
174 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/pbands.rs:173:5
    |
173 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/beta/pbands.rs:101:9
    |
101 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/pbands.rs:104:5
    |
104 |     i;
    |     ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/pbands.rs:116:9
    |
116 |         j;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/pbands.rs:125:9
    |
125 |         j_0;
    |         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/pbands.rs:134:5
    |
134 |     i;
    |     ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/pbands.rs:151:13
    |
151 |             j_1;
    |             ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/pbands.rs:162:13
    |
162 |             j_2;
    |             ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/pbands.rs:171:9
    |
171 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/pbands.rs:176:1
    |
176 | / pub unsafe extern "C" fn ti_pbands_ref(
177 | |     mut size: libc::c_int,
178 | |     mut inputs: *const *const libc::c_double,
179 | |     mut options: *const libc::c_double,
...   |
240 | |     return 0 as libc::c_int;
241 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/pbands.rs:240:5
    |
240 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: the function `ti_linregslope` doesn't need a mutable reference
   --> src/beta/pbands.rs:201:26
    |
201 |     ti_linregslope(size, &mut close, &period, &mut b);
    |                          ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `ti_linregslope` doesn't need a mutable reference
   --> src/beta/pbands.rs:201:47
    |
201 |     ti_linregslope(size, &mut close, &period, &mut b);
    |                                               ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: statement with no effect
   --> src/beta/pbands.rs:215:13
    |
215 |             j;
    |             ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/pbands.rs:228:13
    |
228 |             j_0;
    |             ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/pbands.rs:237:9
    |
237 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/pbands.rs:243:1
    |
243 | / pub unsafe extern "C" fn ti_pbands_stream_free(mut stream: *mut ti_stream) {
244 | |     free(stream as *mut libc::c_void);
245 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/pbands.rs:247:1
    |
247 | / pub unsafe extern "C" fn ti_pbands_stream_run(
248 | |     mut stream_in: *mut ti_stream,
249 | |     mut size: libc::c_int,
250 | |     mut inputs: *const *const libc::c_double,
...   |
466 | |     return 0 as libc::c_int;
467 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/pbands.rs:466:5
    |
466 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/beta/pbands.rs:303:9
    |
303 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/pbands.rs:305:9
    |
305 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/pbands.rs:309:9
    |
309 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/pbands.rs:311:9
    |
311 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/pbands.rs:334:13
    |
334 |             j;
    |             ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/pbands.rs:354:13
    |
354 |             j_0;
    |             ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/pbands.rs:363:9
    |
363 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/pbands.rs:365:9
    |
365 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/pbands.rs:430:13
    |
430 |             j_1;
    |             ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/pbands.rs:450:13
    |
450 |             j_2;
    |             ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/pbands.rs:459:9
    |
459 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/pbands.rs:461:9
    |
461 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/beta/pc.rs:57:1
   |
57 | / pub unsafe extern "C" fn ti_pc_start(mut options: *const libc::c_double) -> libc::c_int {
58 | |     let period: libc::c_int = *options.offset(0 as libc::c_int as isize) as libc::c_int;
59 | |     return period - 1 as libc::c_int;
60 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/beta/pc.rs:59:5
   |
59 |     return period - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `period - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/beta/pc.rs:62:1
   |
62 | / pub unsafe extern "C" fn ti_pc(
63 | |     mut size: libc::c_int,
64 | |     mut inputs: *const *const libc::c_double,
65 | |     mut options: *const libc::c_double,
...  |
81 | |     return 0 as libc::c_int;
82 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/beta/pc.rs:81:5
   |
81 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: the function `ti_min` doesn't need a mutable reference
  --> src/beta/pc.rs:79:18
   |
79 |     ti_min(size, &mut low, &period, &mut pc_low);
   |                  ^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `ti_min` doesn't need a mutable reference
  --> src/beta/pc.rs:79:37
   |
79 |     ti_min(size, &mut low, &period, &mut pc_low);
   |                                     ^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `ti_max` doesn't need a mutable reference
  --> src/beta/pc.rs:80:18
   |
80 |     ti_max(size, &mut high, &period, &mut pc_high);
   |                  ^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `ti_max` doesn't need a mutable reference
  --> src/beta/pc.rs:80:38
   |
80 |     ti_max(size, &mut high, &period, &mut pc_high);
   |                                      ^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: unsafe function's docs miss `# Safety` section
  --> src/beta/pc.rs:84:1
   |
84 | / pub unsafe extern "C" fn ti_pc_stream_free(mut stream: *mut ti_stream) {
85 | |     free(stream as *mut libc::c_void);
86 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/pc.rs:88:1
    |
88  | / pub unsafe extern "C" fn ti_pc_stream_run(
89  | |     mut stream_in: *mut ti_stream,
90  | |     mut size: libc::c_int,
91  | |     mut inputs: *const *const libc::c_double,
...   |
280 | |     return 0 as libc::c_int;
281 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/pc.rs:280:5
    |
280 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/beta/pc.rs:132:9
    |
132 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/pc.rs:134:9
    |
134 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/pc.rs:164:9
    |
164 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/pc.rs:166:9
    |
166 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/pc.rs:220:17
    |
220 |                 j;
    |                 ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/pc.rs:258:17
    |
258 |                 j_0;
    |                 ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/pc.rs:271:9
    |
271 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/pc.rs:273:9
    |
273 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/beta/pfe.rs:48:1
   |
48 | / pub unsafe extern "C" fn ti_pfe_start(
49 | |     mut options: *const libc::c_double,
50 | | ) -> libc::c_int {
51 | |     let period: libc::c_int = *options.offset(0 as libc::c_int as isize) as libc::c_int;
52 | |     return period;
53 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/beta/pfe.rs:52:5
   |
52 |     return period;
   |     ^^^^^^^^^^^^^^ help: remove `return`: `period`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/pfe.rs:55:1
    |
55  | / pub unsafe extern "C" fn ti_pfe(
56  | |     mut size: libc::c_int,
57  | |     mut inputs: *const *const libc::c_double,
58  | |     mut options: *const libc::c_double,
...   |
237 | |     return 0 as libc::c_int;
238 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/pfe.rs:237:5
    |
237 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: manual implementation of an assign operation
   --> src/beta/pfe.rs:100:9
    |
100 |         (*denom).index = (*denom).index + 1 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*denom).index += 1 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
   --> src/beta/pfe.rs:105:9
    |
105 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: manual implementation of an assign operation
   --> src/beta/pfe.rs:128:5
    |
128 |     (*denom).index = (*denom).index + 1 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*denom).index += 1 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: manual implementation of an assign operation
   --> src/beta/pfe.rs:174:9
    |
174 |         (*denom).index = (*denom).index + 1 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*denom).index += 1 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
   --> src/beta/pfe.rs:196:9
    |
196 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unnecessary operation
   --> src/beta/pfe.rs:217:5
    |
217 | /     'c_3573: {
218 | |         if pfe.offset_from(*outputs.offset(0 as libc::c_int as isize)) as libc::c_long
219 | |             == (size - ti_pfe_start(options)) as libc::c_long
220 | |         {} else {
...   |
235 | |         }
236 | |     };
    | |______^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_operation
help: statement can be reduced to
    |
217 ~     if pfe.offset_from(*outputs.offset(0 as libc::c_int as isize)) as libc::c_long
218 +             == (size - ti_pfe_start(options)) as libc::c_long
219 +         {} else {
220 +             __assert_fail(
221 +                 b"pfe - outputs[0] == size - ti_pfe_start(options)\0" as *const u8
222 +                     as *const libc::c_char,
223 +                 b"/mnt/c/Users/mazin/Downloads/School/Research/datasets/tulipindicators/beta/pfe.c\0"
224 +                     as *const u8 as *const libc::c_char,
225 +                 69 as libc::c_int as libc::c_uint,
226 +                 (*::core::mem::transmute::<
227 +                     &[u8; 72],
228 +                     &[libc::c_char; 72],
229 +                 >(
230 +                     b"int ti_pfe(int, const double *const *, const double *, double *const *)\0",
231 +                 ))
232 +                     .as_ptr(),
233 +             );
234 +         };
    |

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/pfe.rs:240:1
    |
240 | / pub unsafe extern "C" fn ti_pfe_ref(
241 | |     mut size: libc::c_int,
242 | |     mut inputs: *const *const libc::c_double,
243 | |     mut options: *const libc::c_double,
...   |
334 | |     return 0 as libc::c_int;
335 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/pfe.rs:334:5
    |
334 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/beta/pfe.rs:271:13
    |
271 |             j;
    |             ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/pfe.rs:289:9
    |
289 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unnecessary operation
   --> src/beta/pfe.rs:314:5
    |
314 | /     'c_4354: {
315 | |         if pfe.offset_from(*outputs.offset(0 as libc::c_int as isize)) as libc::c_long
316 | |             == (size - ti_pfe_start(options)) as libc::c_long
317 | |         {} else {
...   |
332 | |         }
333 | |     };
    | |______^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_operation
help: statement can be reduced to
    |
314 ~     if pfe.offset_from(*outputs.offset(0 as libc::c_int as isize)) as libc::c_long
315 +             == (size - ti_pfe_start(options)) as libc::c_long
316 +         {} else {
317 +             __assert_fail(
318 +                 b"pfe - outputs[0] == size - ti_pfe_start(options)\0" as *const u8
319 +                     as *const libc::c_char,
320 +                 b"/mnt/c/Users/mazin/Downloads/School/Research/datasets/tulipindicators/beta/pfe.c\0"
321 +                     as *const u8 as *const libc::c_char,
322 +                 100 as libc::c_int as libc::c_uint,
323 +                 (*::core::mem::transmute::<
324 +                     &[u8; 76],
325 +                     &[libc::c_char; 76],
326 +                 >(
327 +                     b"int ti_pfe_ref(int, const double *const *, const double *, double *const *)\0",
328 +                 ))
329 +                     .as_ptr(),
330 +             );
331 +         };
    |

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/pfe.rs:337:1
    |
337 | / pub unsafe extern "C" fn ti_pfe_stream_free(mut stream: *mut ti_stream) {
338 | |     free(stream as *mut libc::c_void);
339 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/pfe.rs:341:1
    |
341 | / pub unsafe extern "C" fn ti_pfe_stream_run(
342 | |     mut stream_in: *mut ti_stream,
343 | |     mut size: libc::c_int,
344 | |     mut inputs: *const *const libc::c_double,
...   |
535 | |     return 0 as libc::c_int;
536 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/pfe.rs:535:5
    |
535 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/beta/pfe.rs:363:9
    |
363 |         buffers_idx;
    |         ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/pfe.rs:376:9
    |
376 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/pfe.rs:378:9
    |
378 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/pfe.rs:390:9
    |
390 |         buffers_idx;
    |         ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/pfe.rs:411:9
    |
411 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/pfe.rs:413:9
    |
413 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
   --> src/beta/pfe.rs:442:13
    |
442 |         let ref mut fresh3 = (*(*buffer)
    |             ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#toplevel_ref_arg
help: try
    |
442 ~         let fresh3 = &mut (*(*buffer)
443 +             .as_mut_ptr()
444 +             .offset(buffers_idx as isize))[1 as libc::c_int as usize];
    |

warning: statement with no effect
   --> src/beta/pfe.rs:468:9
    |
468 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/pfe.rs:470:9
    |
470 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
   --> src/beta/pfe.rs:499:13
    |
499 |         let ref mut fresh5 = (*(*buffer)
    |             ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#toplevel_ref_arg
help: try
    |
499 ~         let fresh5 = &mut (*(*buffer)
500 +             .as_mut_ptr()
501 +             .offset(buffers_idx as isize))[1 as libc::c_int as usize];
    |

warning: statement with no effect
   --> src/beta/pfe.rs:525:9
    |
525 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/pfe.rs:527:9
    |
527 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/beta/posc.rs:70:1
   |
70 | / pub unsafe extern "C" fn ti_posc_start(
71 | |     mut options: *const libc::c_double,
72 | | ) -> libc::c_int {
73 | |     let period: libc::c_int = *options.offset(0 as libc::c_int as isize) as libc::c_int;
74 | |     return period - 1 as libc::c_int;
75 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/beta/posc.rs:74:5
   |
74 |     return period - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `period - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/posc.rs:77:1
    |
77  | / pub unsafe extern "C" fn ti_posc(
78  | |     mut size: libc::c_int,
79  | |     mut inputs: *const *const libc::c_double,
80  | |     mut options: *const libc::c_double,
...   |
183 | |     return 0 as libc::c_int;
184 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/posc.rs:183:5
    |
183 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/beta/posc.rs:112:9
    |
112 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/posc.rs:115:5
    |
115 |     i;
    |     ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/posc.rs:127:9
    |
127 |         j;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/posc.rs:136:9
    |
136 |         j_0;
    |         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/posc.rs:143:5
    |
143 |     i;
    |     ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/posc.rs:160:13
    |
160 |             j_1;
    |             ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/posc.rs:171:13
    |
171 |             j_2;
    |             ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/posc.rs:181:9
    |
181 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/posc.rs:186:1
    |
186 | / pub unsafe extern "C" fn ti_posc_ref(
187 | |     mut size: libc::c_int,
188 | |     mut inputs: *const *const libc::c_double,
189 | |     mut options: *const libc::c_double,
...   |
251 | |     return 0 as libc::c_int;
252 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/posc.rs:251:5
    |
251 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: the function `ti_linregslope` doesn't need a mutable reference
   --> src/beta/posc.rs:212:26
    |
212 |     ti_linregslope(size, &mut close, &period, &mut b);
    |                          ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `ti_linregslope` doesn't need a mutable reference
   --> src/beta/posc.rs:212:47
    |
212 |     ti_linregslope(size, &mut close, &period, &mut b);
    |                                               ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: statement with no effect
   --> src/beta/posc.rs:226:13
    |
226 |             j;
    |             ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/posc.rs:239:13
    |
239 |             j_0;
    |             ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/posc.rs:246:9
    |
246 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: the function `ti_ema` doesn't need a mutable reference
   --> src/beta/posc.rs:249:67
    |
249 |     ti_ema(size - start, ti_ema_inputs.as_mut_ptr(), &ema_period, &mut posc);
    |                                                                   ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/posc.rs:254:1
    |
254 | / pub unsafe extern "C" fn ti_posc_stream_free(mut stream: *mut ti_stream) {
255 | |     free(stream as *mut libc::c_void);
256 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/posc.rs:258:1
    |
258 | / pub unsafe extern "C" fn ti_posc_stream_run(
259 | |     mut stream_in: *mut ti_stream,
260 | |     mut size: libc::c_int,
261 | |     mut inputs: *const *const libc::c_double,
...   |
472 | |     return 0 as libc::c_int;
473 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/posc.rs:472:5
    |
472 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/beta/posc.rs:313:9
    |
313 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/posc.rs:315:9
    |
315 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/posc.rs:319:9
    |
319 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/posc.rs:342:13
    |
342 |             j;
    |             ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/posc.rs:362:13
    |
362 |             j_0;
    |             ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/posc.rs:369:9
    |
369 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/posc.rs:434:13
    |
434 |             j_1;
    |             ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/posc.rs:454:13
    |
454 |             j_2;
    |             ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/posc.rs:464:9
    |
464 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/posc.rs:466:9
    |
466 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/beta/rmi.rs:53:1
   |
53 | / pub unsafe extern "C" fn ti_rmi_start(
54 | |     mut options: *const libc::c_double,
55 | | ) -> libc::c_int {
56 | |     let lookback_period: libc::c_int = *options.offset(1 as libc::c_int as isize)
57 | |         as libc::c_int;
58 | |     return lookback_period;
59 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/beta/rmi.rs:58:5
   |
58 |     return lookback_period;
   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `lookback_period`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/rmi.rs:61:1
    |
61  | / pub unsafe extern "C" fn ti_rmi(
62  | |     mut size: libc::c_int,
63  | |     mut inputs: *const *const libc::c_double,
64  | |     mut options: *const libc::c_double,
...   |
126 | |     return 0 as libc::c_int;
127 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/rmi.rs:126:5
    |
126 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/beta/rmi.rs:99:5
   |
99 |     i;
   |     ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/rmi.rs:124:9
    |
124 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/rmi.rs:129:1
    |
129 | / pub unsafe extern "C" fn ti_rmi_ref(
130 | |     mut size: libc::c_int,
131 | |     mut inputs: *const *const libc::c_double,
132 | |     mut options: *const libc::c_double,
...   |
209 | |     return 0 as libc::c_int;
210 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/rmi.rs:209:5
    |
209 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/beta/rmi.rs:181:9
    |
181 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: the function `ti_ema` doesn't need a mutable reference
   --> src/beta/rmi.rs:187:62
    |
187 |     ti_ema(size - start, ti_ema_gains.as_mut_ptr(), options, &mut gains);
    |                                                              ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `ti_ema` doesn't need a mutable reference
   --> src/beta/rmi.rs:188:63
    |
188 |     ti_ema(size - start, ti_ema_losses.as_mut_ptr(), options, &mut losses);
    |                                                               ^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `ti_add` doesn't need a mutable reference
   --> src/beta/rmi.rs:197:9
    |
197 |         &mut losses,
    |         ^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: `0 as *const _` detected
   --> src/beta/rmi.rs:196:9
    |
196 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: statement with no effect
   --> src/beta/rmi.rs:205:9
    |
205 |         i_0;
    |         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/rmi.rs:212:1
    |
212 | / pub unsafe extern "C" fn ti_rmi_stream_free(mut stream: *mut ti_stream) {
213 | |     free(stream as *mut libc::c_void);
214 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/rmi.rs:216:1
    |
216 | / pub unsafe extern "C" fn ti_rmi_stream_run(
217 | |     mut stream_in: *mut ti_stream,
218 | |     mut size: libc::c_int,
219 | |     mut inputs: *const *const libc::c_double,
...   |
340 | |     return 0 as libc::c_int;
341 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/rmi.rs:340:5
    |
340 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/beta/rmi.rs:243:9
    |
243 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/rmi.rs:245:9
    |
245 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/rmi.rs:286:9
    |
286 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/rmi.rs:288:9
    |
288 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/rmi.rs:331:9
    |
331 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/rmi.rs:333:9
    |
333 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/beta/rmta.rs:13:1
   |
13 | / pub unsafe extern "C" fn ti_rmta_start(
14 | |     mut options: *const libc::c_double,
15 | | ) -> libc::c_int {
16 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
17 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/beta/rmta.rs:16:5
   |
16 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/rmta.rs:19:1
    |
19  | / pub unsafe extern "C" fn ti_rmta(
20  | |     mut size: libc::c_int,
21  | |     mut inputs: *const *const libc::c_double,
22  | |     mut options: *const libc::c_double,
...   |
103 | |     return 0 as libc::c_int;
104 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/rmta.rs:103:5
    |
103 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/beta/rmta.rs:50:9
   |
50 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/beta/rmta.rs:63:9
   |
63 |         i_0;
   |         ^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unnecessary operation
   --> src/beta/rmta.rs:83:5
    |
83  | /     'c_3547: {
84  | |         if output.offset_from(*outputs.offset(0 as libc::c_int as isize)) as libc::c_long
85  | |             == (size - ti_rmta_start(options)) as libc::c_long
86  | |         {} else {
...   |
101 | |         }
102 | |     };
    | |______^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_operation
help: statement can be reduced to
    |
83  ~     if output.offset_from(*outputs.offset(0 as libc::c_int as isize)) as libc::c_long
84  +             == (size - ti_rmta_start(options)) as libc::c_long
85  +         {} else {
86  +             __assert_fail(
87  +                 b"output - outputs[0] == size - ti_rmta_start(options)\0" as *const u8
88  +                     as *const libc::c_char,
89  +                 b"/mnt/c/Users/mazin/Downloads/School/Research/datasets/tulipindicators/beta/rmta.c\0"
90  +                     as *const u8 as *const libc::c_char,
91  +                 61 as libc::c_int as libc::c_uint,
92  +                 (*::core::mem::transmute::<
93  +                     &[u8; 73],
94  +                     &[libc::c_char; 73],
95  +                 >(
96  +                     b"int ti_rmta(int, const double *const *, const double *, double *const *)\0",
97  +                 ))
98  +                     .as_ptr(),
99  +             );
100 +         };
    |

warning: unsafe function's docs miss `# Safety` section
  --> src/beta/rvi.rs:49:1
   |
49 | / pub unsafe extern "C" fn ti_rvi_start(
50 | |     mut options: *const libc::c_double,
51 | | ) -> libc::c_int {
52 | |     let stddev_period: libc::c_int = *options.offset(1 as libc::c_int as isize)
53 | |         as libc::c_int;
54 | |     return stddev_period - 1 as libc::c_int;
55 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/beta/rvi.rs:54:5
   |
54 |     return stddev_period - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `stddev_period - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/rvi.rs:57:1
    |
57  | / pub unsafe extern "C" fn ti_rvi(
58  | |     mut size: libc::c_int,
59  | |     mut inputs: *const *const libc::c_double,
60  | |     mut options: *const libc::c_double,
...   |
156 | |     return 0 as libc::c_int;
157 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/rvi.rs:156:5
    |
156 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/beta/rvi.rs:92:9
   |
92 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/beta/rvi.rs:95:5
   |
95 |     i;
   |     ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/rvi.rs:121:5
    |
121 |     i;
    |     ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/rvi.rs:154:9
    |
154 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/rvi.rs:159:1
    |
159 | / pub unsafe extern "C" fn ti_rvi_stream_free(mut stream: *mut ti_stream) {
160 | |     free(stream as *mut libc::c_void);
161 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/rvi.rs:163:1
    |
163 | / pub unsafe extern "C" fn ti_rvi_stream_run(
164 | |     mut stream_in: *mut ti_stream,
165 | |     mut size: libc::c_int,
166 | |     mut inputs: *const *const libc::c_double,
...   |
296 | |     return 0 as libc::c_int;
297 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/rvi.rs:296:5
    |
296 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/beta/rvi.rs:199:9
    |
199 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/rvi.rs:201:9
    |
201 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/rvi.rs:205:9
    |
205 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/rvi.rs:231:9
    |
231 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/rvi.rs:285:9
    |
285 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/rvi.rs:287:9
    |
287 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/beta/smi.rs:71:1
   |
71 | / pub unsafe extern "C" fn ti_smi_start(
72 | |     mut options: *const libc::c_double,
73 | | ) -> libc::c_int {
74 | |     let q_period: libc::c_int = *options.offset(0 as libc::c_int as isize)
75 | |         as libc::c_int;
76 | |     return q_period - 1 as libc::c_int;
77 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/beta/smi.rs:76:5
   |
76 |     return q_period - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `q_period - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/smi.rs:79:1
    |
79  | / pub unsafe extern "C" fn ti_smi(
80  | |     mut size: libc::c_int,
81  | |     mut inputs: *const *const libc::c_double,
82  | |     mut options: *const libc::c_double,
...   |
211 | |     return 0 as libc::c_int;
212 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/smi.rs:211:5
    |
211 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/beta/smi.rs:101:9
    |
101 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/smi.rs:120:9
    |
120 |         i_0;
    |         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/smi.rs:122:9
    |
122 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/smi.rs:134:9
    |
134 |         i_0;
    |         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/smi.rs:136:9
    |
136 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/smi.rs:156:9
    |
156 |         i_0;
    |         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/smi.rs:158:9
    |
158 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/smi.rs:172:17
    |
172 |                 j;
    |                 ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/smi.rs:189:17
    |
189 |                 j_0;
    |                 ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/smi.rs:207:9
    |
207 |         i_0;
    |         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/smi.rs:209:9
    |
209 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/smi.rs:214:1
    |
214 | / pub unsafe extern "C" fn ti_smi_ref(
215 | |     mut size: libc::c_int,
216 | |     mut inputs: *const *const libc::c_double,
217 | |     mut options: *const libc::c_double,
...   |
291 | |     return 0 as libc::c_int;
292 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/smi.rs:291:5
    |
291 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/beta/smi.rs:233:9
    |
233 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: the function `ti_max` doesn't need a mutable reference
   --> src/beta/smi.rs:245:46
    |
245 |     ti_max(size, ti_max_inputs.as_mut_ptr(), &mut q_period, &mut max);
    |                                              ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `ti_max` doesn't need a mutable reference
   --> src/beta/smi.rs:245:61
    |
245 |     ti_max(size, ti_max_inputs.as_mut_ptr(), &mut q_period, &mut max);
    |                                                             ^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `ti_min` doesn't need a mutable reference
   --> src/beta/smi.rs:247:46
    |
247 |     ti_min(size, ti_min_inputs.as_mut_ptr(), &mut q_period, &mut min);
    |                                              ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `ti_min` doesn't need a mutable reference
   --> src/beta/smi.rs:247:61
    |
247 |     ti_min(size, ti_min_inputs.as_mut_ptr(), &mut q_period, &mut min);
    |                                                             ^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: statement with no effect
   --> src/beta/smi.rs:269:9
    |
269 |         i_0;
    |         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: the function `ti_ema` doesn't need a mutable reference
   --> src/beta/smi.rs:272:45
    |
272 |     ti_ema(outsize, num_input.as_mut_ptr(), &mut r_period, &mut num);
    |                                             ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `ti_ema` doesn't need a mutable reference
   --> src/beta/smi.rs:272:60
    |
272 |     ti_ema(outsize, num_input.as_mut_ptr(), &mut r_period, &mut num);
    |                                                            ^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `ti_ema` doesn't need a mutable reference
   --> src/beta/smi.rs:273:45
    |
273 |     ti_ema(outsize, num_input.as_mut_ptr(), &mut s_period, &mut num);
    |                                             ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `ti_ema` doesn't need a mutable reference
   --> src/beta/smi.rs:273:60
    |
273 |     ti_ema(outsize, num_input.as_mut_ptr(), &mut s_period, &mut num);
    |                                                            ^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `ti_ema` doesn't need a mutable reference
   --> src/beta/smi.rs:275:45
    |
275 |     ti_ema(outsize, den_input.as_mut_ptr(), &mut r_period, &mut den);
    |                                             ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `ti_ema` doesn't need a mutable reference
   --> src/beta/smi.rs:275:60
    |
275 |     ti_ema(outsize, den_input.as_mut_ptr(), &mut r_period, &mut den);
    |                                                            ^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `ti_ema` doesn't need a mutable reference
   --> src/beta/smi.rs:276:45
    |
276 |     ti_ema(outsize, den_input.as_mut_ptr(), &mut s_period, &mut den);
    |                                             ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `ti_ema` doesn't need a mutable reference
   --> src/beta/smi.rs:276:60
    |
276 |     ti_ema(outsize, den_input.as_mut_ptr(), &mut s_period, &mut den);
    |                                                            ^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: statement with no effect
   --> src/beta/smi.rs:285:9
    |
285 |         i_0;
    |         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/smi.rs:294:1
    |
294 | / pub unsafe extern "C" fn ti_smi_stream_free(mut stream: *mut ti_stream) {
295 | |     free(stream as *mut libc::c_void);
296 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/smi.rs:298:1
    |
298 | / pub unsafe extern "C" fn ti_smi_stream_run(
299 | |     mut stream_in: *mut ti_stream,
300 | |     mut size: libc::c_int,
301 | |     mut inputs: *const *const libc::c_double,
...   |
520 | |     return 0 as libc::c_int;
521 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/smi.rs:520:5
    |
520 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/beta/smi.rs:349:9
    |
349 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/smi.rs:351:9
    |
351 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/smi.rs:381:9
    |
381 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/smi.rs:383:9
    |
383 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/smi.rs:421:9
    |
421 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/smi.rs:423:9
    |
423 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/smi.rs:465:17
    |
465 |                 j;
    |                 ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/smi.rs:492:17
    |
492 |                 j_0;
    |                 ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/smi.rs:507:9
    |
507 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/smi.rs:509:9
    |
509 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/beta/tsi.rs:51:1
   |
51 | / pub unsafe extern "C" fn ti_tsi_start(
52 | |     mut options: *const libc::c_double,
53 | | ) -> libc::c_int {
54 | |     return 1 as libc::c_int;
55 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/beta/tsi.rs:54:5
   |
54 |     return 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/tsi.rs:57:1
    |
57  | / pub unsafe extern "C" fn ti_tsi(
58  | |     mut size: libc::c_int,
59  | |     mut inputs: *const *const libc::c_double,
60  | |     mut options: *const libc::c_double,
...   |
129 | |     return 0 as libc::c_int;
130 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/tsi.rs:129:5
    |
129 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/beta/tsi.rs:73:9
   |
73 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/beta/tsi.rs:85:9
   |
85 |         i_0;
   |         ^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/beta/tsi.rs:87:9
   |
87 |         progress;
   |         ^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/tsi.rs:104:9
    |
104 |         i_0;
    |         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/tsi.rs:106:9
    |
106 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/tsi.rs:125:9
    |
125 |         i_0;
    |         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/tsi.rs:127:9
    |
127 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/tsi.rs:132:1
    |
132 | / pub unsafe extern "C" fn ti_tsi_ref(
133 | |     mut size: libc::c_int,
134 | |     mut inputs: *const *const libc::c_double,
135 | |     mut options: *const libc::c_double,
...   |
188 | |     return 0 as libc::c_int;
189 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/tsi.rs:188:5
    |
188 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/beta/tsi.rs:148:9
    |
148 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: the function `ti_mom_start` doesn't need a mutable reference
   --> src/beta/tsi.rs:151:56
    |
151 |     let mut outsize: libc::c_int = size - ti_mom_start(&mut _one);
    |                                                        ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `ti_mom` doesn't need a mutable reference
   --> src/beta/tsi.rs:156:18
    |
156 |     ti_mom(size, &mut real, &mut _one, &mut momentum);
    |                  ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `ti_mom` doesn't need a mutable reference
   --> src/beta/tsi.rs:156:29
    |
156 |     ti_mom(size, &mut real, &mut _one, &mut momentum);
    |                             ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `ti_mom` doesn't need a mutable reference
   --> src/beta/tsi.rs:156:40
    |
156 |     ti_mom(size, &mut real, &mut _one, &mut momentum);
    |                                        ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `ti_abs` doesn't need a mutable reference
   --> src/beta/tsi.rs:168:9
    |
168 |         &mut absmomentum,
    |         ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: `0 as *const _` detected
   --> src/beta/tsi.rs:167:9
    |
167 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: the function `ti_ema` doesn't need a mutable reference
   --> src/beta/tsi.rs:170:61
    |
170 |     ti_ema(outsize, momentum_input.as_mut_ptr(), &y_period, &mut momentum);
    |                                                             ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `ti_ema` doesn't need a mutable reference
   --> src/beta/tsi.rs:171:61
    |
171 |     ti_ema(outsize, momentum_input.as_mut_ptr(), &z_period, &mut momentum);
    |                                                             ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `ti_ema` doesn't need a mutable reference
   --> src/beta/tsi.rs:175:64
    |
175 |     ti_ema(outsize, absmomentum_input.as_mut_ptr(), &y_period, &mut absmomentum);
    |                                                                ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `ti_ema` doesn't need a mutable reference
   --> src/beta/tsi.rs:176:64
    |
176 |     ti_ema(outsize, absmomentum_input.as_mut_ptr(), &z_period, &mut absmomentum);
    |                                                                ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: statement with no effect
   --> src/beta/tsi.rs:184:9
    |
184 |         i_0;
    |         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/tsi.rs:191:1
    |
191 | / pub unsafe extern "C" fn ti_tsi_stream_free(mut stream: *mut ti_stream) {
192 | |     free(stream as *mut libc::c_void);
193 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/tsi.rs:195:1
    |
195 | / pub unsafe extern "C" fn ti_tsi_stream_run(
196 | |     mut stream_in: *mut ti_stream,
197 | |     mut size: libc::c_int,
198 | |     mut inputs: *const *const libc::c_double,
...   |
266 | |     return 0 as libc::c_int;
267 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/tsi.rs:266:5
    |
266 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/beta/tsi.rs:216:9
    |
216 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/tsi.rs:218:9
    |
218 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/tsi.rs:235:9
    |
235 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/tsi.rs:237:9
    |
237 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/tsi.rs:256:9
    |
256 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/tsi.rs:258:9
    |
258 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/beta/vwap.rs:59:1
   |
59 | / pub unsafe extern "C" fn ti_vwap_start(
60 | |     mut options: *const libc::c_double,
61 | | ) -> libc::c_int {
62 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
63 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/beta/vwap.rs:62:5
   |
62 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/vwap.rs:65:1
    |
65  | / pub unsafe extern "C" fn ti_vwap(
66  | |     mut size: libc::c_int,
67  | |     mut inputs: *const *const libc::c_double,
68  | |     mut options: *const libc::c_double,
...   |
116 | |     return 0 as libc::c_int;
117 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/vwap.rs:116:5
    |
116 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/beta/vwap.rs:90:9
   |
90 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/beta/vwap.rs:92:9
   |
92 |         progress;
   |         ^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/vwap.rs:112:9
    |
112 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/vwap.rs:114:9
    |
114 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/vwap.rs:119:1
    |
119 | / pub unsafe extern "C" fn ti_vwap_ref(
120 | |     mut size: libc::c_int,
121 | |     mut inputs: *const *const libc::c_double,
122 | |     mut options: *const libc::c_double,
...   |
165 | |     return 0 as libc::c_int;
166 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/vwap.rs:165:5
    |
165 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: the function `ti_typprice` doesn't need a mutable reference
   --> src/beta/vwap.rs:136:59
    |
136 |     ti_typprice(size, inputs, 0 as *const libc::c_double, &mut typprice);
    |                                                           ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: `0 as *const _` detected
   --> src/beta/vwap.rs:136:31
    |
136 |     ti_typprice(size, inputs, 0 as *const libc::c_double, &mut typprice);
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: statement with no effect
   --> src/beta/vwap.rs:145:9
    |
145 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/vwap.rs:162:9
    |
162 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/vwap.rs:168:1
    |
168 | / pub unsafe extern "C" fn ti_vwap_stream_free(mut stream: *mut ti_stream) {
169 | |     free(stream as *mut libc::c_void);
170 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/beta/vwap.rs:172:1
    |
172 | / pub unsafe extern "C" fn ti_vwap_stream_run(
173 | |     mut stream_in: *mut ti_stream,
174 | |     mut size: libc::c_int,
175 | |     mut inputs: *const *const libc::c_double,
...   |
341 | |     return 0 as libc::c_int;
342 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/beta/vwap.rs:341:5
    |
341 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/beta/vwap.rs:235:9
    |
235 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/vwap.rs:237:9
    |
237 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/vwap.rs:334:9
    |
334 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/beta/vwap.rs:336:9
    |
336 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/abs.rs:6:1
   |
6  | / pub unsafe extern "C" fn ti_abs_start(
7  | |     mut options: *const libc::c_double,
8  | | ) -> libc::c_int {
9  | |     return 0 as libc::c_int;
10 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
 --> src/indicators/abs.rs:9:5
  |
9 |     return 0 as libc::c_int;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/abs.rs:12:1
   |
12 | / pub unsafe extern "C" fn ti_abs(
13 | |     mut size: libc::c_int,
14 | |     mut inputs: *const *const libc::c_double,
15 | |     mut options: *const libc::c_double,
...  |
27 | |     return 0 as libc::c_int;
28 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/abs.rs:27:5
   |
27 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/abs.rs:25:9
   |
25 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/acos.rs:6:1
   |
6  | / pub unsafe extern "C" fn ti_acos_start(
7  | |     mut options: *const libc::c_double,
8  | | ) -> libc::c_int {
9  | |     return 0 as libc::c_int;
10 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
 --> src/indicators/acos.rs:9:5
  |
9 |     return 0 as libc::c_int;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/acos.rs:12:1
   |
12 | / pub unsafe extern "C" fn ti_acos(
13 | |     mut size: libc::c_int,
14 | |     mut inputs: *const *const libc::c_double,
15 | |     mut options: *const libc::c_double,
...  |
27 | |     return 0 as libc::c_int;
28 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/acos.rs:27:5
   |
27 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/acos.rs:25:9
   |
25 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
 --> src/indicators/ad.rs:3:1
  |
3 | / pub unsafe extern "C" fn ti_ad_start(mut options: *const libc::c_double) -> libc::c_int {
4 | |     return 0 as libc::c_int;
5 | | }
  | |_^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
 --> src/indicators/ad.rs:4:5
  |
4 |     return 0 as libc::c_int;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/ad.rs:7:1
   |
7  | / pub unsafe extern "C" fn ti_ad(
8  | |     mut size: libc::c_int,
9  | |     mut inputs: *const *const libc::c_double,
10 | |     mut options: *const libc::c_double,
...  |
33 | |     return 0 as libc::c_int;
34 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/ad.rs:33:5
   |
33 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/ad.rs:31:9
   |
31 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
 --> src/indicators/add.rs:3:1
  |
3 | / pub unsafe extern "C" fn ti_add_start(
4 | |     mut options: *const libc::c_double,
5 | | ) -> libc::c_int {
6 | |     return 0 as libc::c_int;
7 | | }
  | |_^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
 --> src/indicators/add.rs:6:5
  |
6 |     return 0 as libc::c_int;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/add.rs:9:1
   |
9  | / pub unsafe extern "C" fn ti_add(
10 | |     mut size: libc::c_int,
11 | |     mut inputs: *const *const libc::c_double,
12 | |     mut options: *const libc::c_double,
...  |
25 | |     return 0 as libc::c_int;
26 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/add.rs:25:5
   |
25 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/add.rs:23:9
   |
23 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/adosc.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_adosc_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     return *options.offset(1 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
15 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/adosc.rs:14:5
   |
14 |     return *options.offset(1 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(1 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/adosc.rs:17:1
   |
17 | / pub unsafe extern "C" fn ti_adosc(
18 | |     mut size: libc::c_int,
19 | |     mut inputs: *const *const libc::c_double,
20 | |     mut options: *const libc::c_double,
...  |
91 | |     return 0 as libc::c_int;
92 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/adosc.rs:91:5
   |
91 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/adosc.rs:72:9
   |
72 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/adx.rs:12:1
   |
12 | / pub unsafe extern "C" fn ti_adx_start(
13 | |     mut options: *const libc::c_double,
14 | | ) -> libc::c_int {
15 | |     return (*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int)
16 | |         * 2 as libc::c_int;
17 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/adx.rs:15:5
   |
15 | /     return (*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int)
16 | |         * 2 as libc::c_int;
   | |___________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
15 ~     (*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int)
16 +         * 2 as libc::c_int
   |

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/adx.rs:19:1
    |
19  | / pub unsafe extern "C" fn ti_adx(
20  | |     mut size: libc::c_int,
21  | |     mut inputs: *const *const libc::c_double,
22  | |     mut options: *const libc::c_double,
...   |
126 | |     return 0 as libc::c_int;
127 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/indicators/adx.rs:126:5
    |
126 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/adx.rs:60:9
   |
60 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `if` chain can be rewritten with `match`
   --> src/indicators/adx.rs:93:9
    |
93  | /         if i - period < period - 2 as libc::c_int {
94  | |             adx += dx_0;
95  | |         } else if i - period == period - 2 as libc::c_int {
96  | |             adx += dx_0;
...   |
104 | |             *fresh1 = adx * invper;
105 | |         }
    | |_________^
    |
    = help: consider rewriting the `if` chain to use `cmp` and `match`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain

warning: statement with no effect
   --> src/indicators/adx.rs:107:9
    |
107 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/adxr.rs:23:1
   |
23 | / pub unsafe extern "C" fn ti_adxr_start(
24 | |     mut options: *const libc::c_double,
25 | | ) -> libc::c_int {
26 | |     return (*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int)
27 | |         * 3 as libc::c_int;
28 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/adxr.rs:26:5
   |
26 | /     return (*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int)
27 | |         * 3 as libc::c_int;
   | |___________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
26 ~     (*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int)
27 +         * 3 as libc::c_int
   |

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/adxr.rs:30:1
    |
30  | / pub unsafe extern "C" fn ti_adxr(
31  | |     mut size: libc::c_int,
32  | |     mut inputs: *const *const libc::c_double,
33  | |     mut options: *const libc::c_double,
...   |
156 | |     return 0 as libc::c_int;
157 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/indicators/adxr.rs:156:5
    |
156 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/adxr.rs:71:9
   |
71 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `if` chain can be rewritten with `match`
   --> src/indicators/adxr.rs:106:9
    |
106 | /         if i - period < period - 2 as libc::c_int {
107 | |             adx += dx_0;
108 | |         } else if i - period == period - 2 as libc::c_int {
109 | |             adx += dx_0;
...   |
133 | |             }
134 | |         }
    | |_________^
    |
    = help: consider rewriting the `if` chain to use `cmp` and `match`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain

warning: manual implementation of an assign operation
   --> src/indicators/adxr.rs:111:13
    |
111 |             (*adxr).index = (*adxr).index + 1 as libc::c_int;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*adxr).index += 1 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: manual implementation of an assign operation
   --> src/indicators/adxr.rs:130:13
    |
130 |             (*adxr).index = (*adxr).index + 1 as libc::c_int;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*adxr).index += 1 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
   --> src/indicators/adxr.rs:136:9
    |
136 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/ao.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_ao_start(mut options: *const libc::c_double) -> libc::c_int {
12 | |     return 33 as libc::c_int;
13 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/ao.rs:12:5
   |
12 |     return 33 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `33 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/ao.rs:15:1
   |
15 | / pub unsafe extern "C" fn ti_ao(
16 | |     mut size: libc::c_int,
17 | |     mut inputs: *const *const libc::c_double,
18 | |     mut options: *const libc::c_double,
...  |
84 | |     return 0 as libc::c_int;
85 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/ao.rs:84:5
   |
84 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/ao.rs:42:9
   |
42 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/ao.rs:65:9
   |
65 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/apo.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_apo_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     return 1 as libc::c_int;
15 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/apo.rs:14:5
   |
14 |     return 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/apo.rs:17:1
   |
17 | / pub unsafe extern "C" fn ti_apo(
18 | |     mut size: libc::c_int,
19 | |     mut inputs: *const *const libc::c_double,
20 | |     mut options: *const libc::c_double,
...  |
76 | |     return 0 as libc::c_int;
77 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/apo.rs:76:5
   |
76 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/apo.rs:57:9
   |
57 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/aroon.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_aroon_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
15 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/aroon.rs:14:5
   |
14 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/aroon.rs:17:1
    |
17  | / pub unsafe extern "C" fn ti_aroon(
18  | |     mut size: libc::c_int,
19  | |     mut inputs: *const *const libc::c_double,
20  | |     mut options: *const libc::c_double,
...   |
130 | |     return 0 as libc::c_int;
131 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this boolean expression can be simplified
  --> src/indicators/aroon.rs:52:20
   |
52 |                 if !(j <= i) {
   |                    ^^^^^^^^^ help: try: `j > i`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this boolean expression can be simplified
  --> src/indicators/aroon.rs:72:20
   |
72 |                 if !(j <= i) {
   |                    ^^^^^^^^^ help: try: `j > i`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
   --> src/indicators/aroon.rs:130:5
    |
130 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/aroon.rs:92:9
   |
92 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/aroon.rs:94:9
   |
94 |         trail;
   |         ^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/aroonosc.rs:12:1
   |
12 | / pub unsafe extern "C" fn ti_aroonosc_start(
13 | |     mut options: *const libc::c_double,
14 | | ) -> libc::c_int {
15 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
16 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/aroonosc.rs:15:5
   |
15 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/aroonosc.rs:18:1
    |
18  | / pub unsafe extern "C" fn ti_aroonosc(
19  | |     mut size: libc::c_int,
20  | |     mut inputs: *const *const libc::c_double,
21  | |     mut options: *const libc::c_double,
...   |
109 | |     return 0 as libc::c_int;
110 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this boolean expression can be simplified
  --> src/indicators/aroonosc.rs:51:20
   |
51 |                 if !(j <= i) {
   |                    ^^^^^^^^^ help: try: `j > i`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this boolean expression can be simplified
  --> src/indicators/aroonosc.rs:71:20
   |
71 |                 if !(j <= i) {
   |                    ^^^^^^^^^ help: try: `j > i`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
   --> src/indicators/aroonosc.rs:109:5
    |
109 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/aroonosc.rs:88:9
   |
88 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/aroonosc.rs:90:9
   |
90 |         trail;
   |         ^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/asin.rs:6:1
   |
6  | / pub unsafe extern "C" fn ti_asin(
7  | |     mut size: libc::c_int,
8  | |     mut inputs: *const *const libc::c_double,
9  | |     mut options: *const libc::c_double,
...  |
21 | |     return 0 as libc::c_int;
22 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/asin.rs:21:5
   |
21 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/asin.rs:19:9
   |
19 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/asin.rs:24:1
   |
24 | / pub unsafe extern "C" fn ti_asin_start(
25 | |     mut options: *const libc::c_double,
26 | | ) -> libc::c_int {
27 | |     return 0 as libc::c_int;
28 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/asin.rs:27:5
   |
27 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/atan.rs:6:1
   |
6  | / pub unsafe extern "C" fn ti_atan_start(
7  | |     mut options: *const libc::c_double,
8  | | ) -> libc::c_int {
9  | |     return 0 as libc::c_int;
10 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
 --> src/indicators/atan.rs:9:5
  |
9 |     return 0 as libc::c_int;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/atan.rs:12:1
   |
12 | / pub unsafe extern "C" fn ti_atan(
13 | |     mut size: libc::c_int,
14 | |     mut inputs: *const *const libc::c_double,
15 | |     mut options: *const libc::c_double,
...  |
27 | |     return 0 as libc::c_int;
28 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/atan.rs:27:5
   |
27 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/atan.rs:25:9
   |
25 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/atr.rs:39:1
   |
39 | / pub unsafe extern "C" fn ti_atr_start(
40 | |     mut options: *const libc::c_double,
41 | | ) -> libc::c_int {
42 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
43 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/atr.rs:42:5
   |
42 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/atr.rs:45:1
    |
45  | / pub unsafe extern "C" fn ti_atr(
46  | |     mut size: libc::c_int,
47  | |     mut inputs: *const *const libc::c_double,
48  | |     mut options: *const libc::c_double,
...   |
131 | |     return 0 as libc::c_int;
132 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/indicators/atr.rs:131:5
    |
131 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/atr.rs:86:9
   |
86 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/indicators/atr.rs:112:9
    |
112 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/atr.rs:134:1
    |
134 | / pub unsafe extern "C" fn ti_atr_ref(
135 | |     mut size: libc::c_int,
136 | |     mut inputs: *const *const libc::c_double,
137 | |     mut options: *const libc::c_double,
...   |
192 | |     return wilders_ret;
193 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/indicators/atr.rs:192:5
    |
192 |     return wilders_ret;
    |     ^^^^^^^^^^^^^^^^^^^ help: remove `return`: `wilders_ret`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *const _` detected
   --> src/indicators/atr.rs:160:9
    |
160 |         0 as *const libc::c_double,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_double>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/atr.rs:195:1
    |
195 | / pub unsafe extern "C" fn ti_atr_stream_new(
196 | |     mut options: *const libc::c_double,
197 | |     mut stream_in: *mut *mut ti_stream,
198 | | ) -> libc::c_int {
...   |
213 | |     return 0 as libc::c_int;
214 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/indicators/atr.rs:213:5
    |
213 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/atr.rs:216:1
    |
216 | / pub unsafe extern "C" fn ti_atr_stream_run(
217 | |     mut stream_in: *mut ti_stream,
218 | |     mut size: libc::c_int,
219 | |     mut inputs: *const *const libc::c_double,
...   |
304 | |     return 0 as libc::c_int;
305 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/indicators/atr.rs:304:5
    |
304 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/indicators/atr.rs:237:13
    |
237 |             (*stream).progress;
    |             ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/indicators/atr.rs:239:13
    |
239 |             i;
    |             ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/indicators/atr.rs:261:13
    |
261 |             (*stream).progress;
    |             ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/indicators/atr.rs:263:13
    |
263 |             i;
    |             ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/indicators/atr.rs:298:13
    |
298 |             (*stream).progress;
    |             ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/indicators/atr.rs:300:13
    |
300 |             i;
    |             ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/atr.rs:307:1
    |
307 | / pub unsafe extern "C" fn ti_atr_stream_free(mut stream: *mut ti_stream) {
308 | |     free(stream as *mut libc::c_void);
309 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
 --> src/indicators/avgprice.rs:3:1
  |
3 | / pub unsafe extern "C" fn ti_avgprice_start(
4 | |     mut options: *const libc::c_double,
5 | | ) -> libc::c_int {
6 | |     return 0 as libc::c_int;
7 | | }
  | |_^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
 --> src/indicators/avgprice.rs:6:5
  |
6 |     return 0 as libc::c_int;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/avgprice.rs:9:1
   |
9  | / pub unsafe extern "C" fn ti_avgprice(
10 | |     mut size: libc::c_int,
11 | |     mut inputs: *const *const libc::c_double,
12 | |     mut options: *const libc::c_double,
...  |
31 | |     return 0 as libc::c_int;
32 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/avgprice.rs:31:5
   |
31 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/avgprice.rs:29:9
   |
29 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/bbands.rs:12:1
   |
12 | / pub unsafe extern "C" fn ti_bbands_start(
13 | |     mut options: *const libc::c_double,
14 | | ) -> libc::c_int {
15 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
16 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/bbands.rs:15:5
   |
15 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/bbands.rs:18:1
    |
18  | / pub unsafe extern "C" fn ti_bbands(
19  | |     mut size: libc::c_int,
20  | |     mut inputs: *const *const libc::c_double,
21  | |     mut options: *const libc::c_double,
...   |
129 | |     return 0 as libc::c_int;
130 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/indicators/bbands.rs:129:5
    |
129 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/bbands.rs:45:9
   |
45 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/bbands.rs:56:5
   |
56 |     middle;
   |     ^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/bbands.rs:74:9
   |
74 |         middle;
   |         ^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/bbands.rs:76:9
   |
76 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
 --> src/indicators/bop.rs:3:1
  |
3 | / pub unsafe extern "C" fn ti_bop_start(
4 | |     mut options: *const libc::c_double,
5 | | ) -> libc::c_int {
6 | |     return 0 as libc::c_int;
7 | | }
  | |_^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
 --> src/indicators/bop.rs:6:5
  |
6 |     return 0 as libc::c_int;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/bop.rs:9:1
   |
9  | / pub unsafe extern "C" fn ti_bop(
10 | |     mut size: libc::c_int,
11 | |     mut inputs: *const *const libc::c_double,
12 | |     mut options: *const libc::c_double,
...  |
35 | |     return 0 as libc::c_int;
36 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/bop.rs:35:5
   |
35 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/bop.rs:33:9
   |
33 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/cci.rs:23:1
   |
23 | / pub unsafe extern "C" fn ti_cci_start(
24 | |     mut options: *const libc::c_double,
25 | | ) -> libc::c_int {
26 | |     let period: libc::c_int = *options.offset(0 as libc::c_int as isize) as libc::c_int;
27 | |     return (period - 1 as libc::c_int) * 2 as libc::c_int;
28 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/cci.rs:27:5
   |
27 |     return (period - 1 as libc::c_int) * 2 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `(period - 1 as libc::c_int) * 2 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/cci.rs:30:1
    |
30  | / pub unsafe extern "C" fn ti_cci(
31  | |     mut size: libc::c_int,
32  | |     mut inputs: *const *const libc::c_double,
33  | |     mut options: *const libc::c_double,
...   |
102 | |     return 0 as libc::c_int;
103 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/indicators/cci.rs:102:5
    |
102 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: manual implementation of an assign operation
  --> src/indicators/cci.rs:61:9
   |
61 |         (*sum).index = (*sum).index + 1 as libc::c_int;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*sum).index += 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
  --> src/indicators/cci.rs:72:17
   |
72 |                 j;
   |                 ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/cci.rs:82:9
   |
82 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/ceil.rs:6:1
   |
6  | / pub unsafe extern "C" fn ti_ceil_start(
7  | |     mut options: *const libc::c_double,
8  | | ) -> libc::c_int {
9  | |     return 0 as libc::c_int;
10 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
 --> src/indicators/ceil.rs:9:5
  |
9 |     return 0 as libc::c_int;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/ceil.rs:12:1
   |
12 | / pub unsafe extern "C" fn ti_ceil(
13 | |     mut size: libc::c_int,
14 | |     mut inputs: *const *const libc::c_double,
15 | |     mut options: *const libc::c_double,
...  |
27 | |     return 0 as libc::c_int;
28 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/ceil.rs:27:5
   |
27 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/ceil.rs:25:9
   |
25 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/cmo.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_cmo_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
15 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/cmo.rs:14:5
   |
14 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/cmo.rs:17:1
    |
17  | / pub unsafe extern "C" fn ti_cmo(
18  | |     mut size: libc::c_int,
19  | |     mut inputs: *const *const libc::c_double,
20  | |     mut options: *const libc::c_double,
...   |
124 | |     return 0 as libc::c_int;
125 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/indicators/cmo.rs:124:5
    |
124 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/cmo.rs:56:9
   |
56 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/indicators/cmo.rs:105:9
    |
105 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/cos.rs:6:1
   |
6  | / pub unsafe extern "C" fn ti_cos_start(
7  | |     mut options: *const libc::c_double,
8  | | ) -> libc::c_int {
9  | |     return 0 as libc::c_int;
10 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
 --> src/indicators/cos.rs:9:5
  |
9 |     return 0 as libc::c_int;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/cos.rs:12:1
   |
12 | / pub unsafe extern "C" fn ti_cos(
13 | |     mut size: libc::c_int,
14 | |     mut inputs: *const *const libc::c_double,
15 | |     mut options: *const libc::c_double,
...  |
27 | |     return 0 as libc::c_int;
28 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/cos.rs:27:5
   |
27 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/cos.rs:25:9
   |
25 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/cosh.rs:6:1
   |
6  | / pub unsafe extern "C" fn ti_cosh_start(
7  | |     mut options: *const libc::c_double,
8  | | ) -> libc::c_int {
9  | |     return 0 as libc::c_int;
10 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
 --> src/indicators/cosh.rs:9:5
  |
9 |     return 0 as libc::c_int;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/cosh.rs:12:1
   |
12 | / pub unsafe extern "C" fn ti_cosh(
13 | |     mut size: libc::c_int,
14 | |     mut inputs: *const *const libc::c_double,
15 | |     mut options: *const libc::c_double,
...  |
27 | |     return 0 as libc::c_int;
28 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/cosh.rs:27:5
   |
27 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/cosh.rs:25:9
   |
25 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
 --> src/indicators/crossany.rs:3:1
  |
3 | / pub unsafe extern "C" fn ti_crossany_start(
4 | |     mut options: *const libc::c_double,
5 | | ) -> libc::c_int {
6 | |     return 1 as libc::c_int;
7 | | }
  | |_^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
 --> src/indicators/crossany.rs:6:5
  |
6 |     return 1 as libc::c_int;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/crossany.rs:9:1
   |
9  | / pub unsafe extern "C" fn ti_crossany(
10 | |     mut size: libc::c_int,
11 | |     mut inputs: *const *const libc::c_double,
12 | |     mut options: *const libc::c_double,
...  |
33 | |     return 0 as libc::c_int;
34 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/crossany.rs:33:5
   |
33 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/crossany.rs:31:9
   |
31 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
 --> src/indicators/crossover.rs:3:1
  |
3 | / pub unsafe extern "C" fn ti_crossover_start(
4 | |     mut options: *const libc::c_double,
5 | | ) -> libc::c_int {
6 | |     return 1 as libc::c_int;
7 | | }
  | |_^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
 --> src/indicators/crossover.rs:6:5
  |
6 |     return 1 as libc::c_int;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/crossover.rs:9:1
   |
9  | / pub unsafe extern "C" fn ti_crossover(
10 | |     mut size: libc::c_int,
11 | |     mut inputs: *const *const libc::c_double,
12 | |     mut options: *const libc::c_double,
...  |
30 | |     return 0 as libc::c_int;
31 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/crossover.rs:30:5
   |
30 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/crossover.rs:28:9
   |
28 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/cvi.rs:22:1
   |
22 | / pub unsafe extern "C" fn ti_cvi_start(
23 | |     mut options: *const libc::c_double,
24 | | ) -> libc::c_int {
25 | |     let n: libc::c_int = *options.offset(0 as libc::c_int as isize) as libc::c_int;
26 | |     return n * 2 as libc::c_int - 1 as libc::c_int;
27 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/cvi.rs:26:5
   |
26 |     return n * 2 as libc::c_int - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `n * 2 as libc::c_int - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/cvi.rs:29:1
   |
29 | / pub unsafe extern "C" fn ti_cvi(
30 | |     mut size: libc::c_int,
31 | |     mut inputs: *const *const libc::c_double,
32 | |     mut options: *const libc::c_double,
...  |
97 | |     return 0 as libc::c_int;
98 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/cvi.rs:97:5
   |
97 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: manual implementation of an assign operation
  --> src/indicators/cvi.rs:55:9
   |
55 |         (*lag).index = (*lag).index + 1 as libc::c_int;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*lag).index += 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
  --> src/indicators/cvi.rs:60:9
   |
60 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: manual implementation of an assign operation
  --> src/indicators/cvi.rs:72:9
   |
72 |         (*lag).index = (*lag).index + 1 as libc::c_int;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*lag).index += 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
  --> src/indicators/cvi.rs:77:9
   |
77 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
 --> src/indicators/decay.rs:3:1
  |
3 | / pub unsafe extern "C" fn ti_decay_start(
4 | |     mut options: *const libc::c_double,
5 | | ) -> libc::c_int {
6 | |     return 0 as libc::c_int;
7 | | }
  | |_^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
 --> src/indicators/decay.rs:6:5
  |
6 |     return 0 as libc::c_int;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/decay.rs:9:1
   |
9  | / pub unsafe extern "C" fn ti_decay(
10 | |     mut size: libc::c_int,
11 | |     mut inputs: *const *const libc::c_double,
12 | |     mut options: *const libc::c_double,
...  |
36 | |     return 0 as libc::c_int;
37 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/decay.rs:36:5
   |
36 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/decay.rs:34:9
   |
34 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/dema.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_dema_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     let period: libc::c_int = *options.offset(0 as libc::c_int as isize) as libc::c_int;
15 | |     return (period - 1 as libc::c_int) * 2 as libc::c_int;
16 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/dema.rs:15:5
   |
15 |     return (period - 1 as libc::c_int) * 2 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `(period - 1 as libc::c_int) * 2 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/dema.rs:18:1
   |
18 | / pub unsafe extern "C" fn ti_dema(
19 | |     mut size: libc::c_int,
20 | |     mut inputs: *const *const libc::c_double,
21 | |     mut options: *const libc::c_double,
...  |
73 | |     return 0 as libc::c_int;
74 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/dema.rs:73:5
   |
73 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/dema.rs:50:17
   |
50 |                 output;
   |                 ^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/dema.rs:54:9
   |
54 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/di.rs:12:1
   |
12 | / pub unsafe extern "C" fn ti_di_start(mut options: *const libc::c_double) -> libc::c_int {
13 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
14 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/di.rs:13:5
   |
13 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/di.rs:16:1
    |
16  | / pub unsafe extern "C" fn ti_di(
17  | |     mut size: libc::c_int,
18  | |     mut inputs: *const *const libc::c_double,
19  | |     mut options: *const libc::c_double,
...   |
158 | |     return 0 as libc::c_int;
159 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/indicators/di.rs:158:5
    |
158 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/di.rs:74:9
   |
74 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/indicators/di.rs:122:9
    |
122 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/div.rs:3:1
   |
3  | / pub unsafe extern "C" fn ti_div(
4  | |     mut size: libc::c_int,
5  | |     mut inputs: *const *const libc::c_double,
6  | |     mut options: *const libc::c_double,
...  |
19 | |     return 0 as libc::c_int;
20 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/div.rs:19:5
   |
19 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/div.rs:17:9
   |
17 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/div.rs:22:1
   |
22 | / pub unsafe extern "C" fn ti_div_start(
23 | |     mut options: *const libc::c_double,
24 | | ) -> libc::c_int {
25 | |     return 0 as libc::c_int;
26 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/div.rs:25:5
   |
25 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/dm.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_dm_start(mut options: *const libc::c_double) -> libc::c_int {
12 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
13 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/dm.rs:12:5
   |
12 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/dm.rs:15:1
    |
15  | / pub unsafe extern "C" fn ti_dm(
16  | |     mut size: libc::c_int,
17  | |     mut inputs: *const *const libc::c_double,
18  | |     mut options: *const libc::c_double,
...   |
125 | |     return 0 as libc::c_int;
126 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/indicators/dm.rs:125:5
    |
125 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/dm.rs:56:9
   |
56 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/dm.rs:89:9
   |
89 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/dpo.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_dpo_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
15 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/dpo.rs:14:5
   |
14 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/dpo.rs:17:1
   |
17 | / pub unsafe extern "C" fn ti_dpo(
18 | |     mut size: libc::c_int,
19 | |     mut inputs: *const *const libc::c_double,
20 | |     mut options: *const libc::c_double,
...  |
72 | |     return 0 as libc::c_int;
73 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/dpo.rs:72:5
   |
72 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/dpo.rs:40:9
   |
40 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/dpo.rs:53:9
   |
53 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/dx.rs:12:1
   |
12 | / pub unsafe extern "C" fn ti_dx_start(mut options: *const libc::c_double) -> libc::c_int {
13 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
14 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/dx.rs:13:5
   |
13 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/dx.rs:16:1
    |
16  | / pub unsafe extern "C" fn ti_dx(
17  | |     mut size: libc::c_int,
18  | |     mut inputs: *const *const libc::c_double,
19  | |     mut options: *const libc::c_double,
...   |
113 | |     return 0 as libc::c_int;
114 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/indicators/dx.rs:113:5
    |
113 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/dx.rs:56:9
   |
56 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/dx.rs:94:9
   |
94 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
 --> src/indicators/edecay.rs:3:1
  |
3 | / pub unsafe extern "C" fn ti_edecay_start(
4 | |     mut options: *const libc::c_double,
5 | | ) -> libc::c_int {
6 | |     return 0 as libc::c_int;
7 | | }
  | |_^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
 --> src/indicators/edecay.rs:6:5
  |
6 |     return 0 as libc::c_int;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/edecay.rs:9:1
   |
9  | / pub unsafe extern "C" fn ti_edecay(
10 | |     mut size: libc::c_int,
11 | |     mut inputs: *const *const libc::c_double,
12 | |     mut options: *const libc::c_double,
...  |
36 | |     return 0 as libc::c_int;
37 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/edecay.rs:36:5
   |
36 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/edecay.rs:34:9
   |
34 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/ema.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_ema_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     return 0 as libc::c_int;
15 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/ema.rs:14:5
   |
14 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/ema.rs:17:1
   |
17 | / pub unsafe extern "C" fn ti_ema(
18 | |     mut size: libc::c_int,
19 | |     mut inputs: *const *const libc::c_double,
20 | |     mut options: *const libc::c_double,
...  |
65 | |     return 0 as libc::c_int;
66 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/ema.rs:65:5
   |
65 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/ema.rs:46:9
   |
46 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/emv.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_emv_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     return 1 as libc::c_int;
15 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/emv.rs:14:5
   |
14 |     return 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/emv.rs:17:1
   |
17 | / pub unsafe extern "C" fn ti_emv(
18 | |     mut size: libc::c_int,
19 | |     mut inputs: *const *const libc::c_double,
20 | |     mut options: *const libc::c_double,
...  |
63 | |     return 0 as libc::c_int;
64 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/emv.rs:63:5
   |
63 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/emv.rs:44:9
   |
44 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/exp.rs:6:1
   |
6  | / pub unsafe extern "C" fn ti_exp_start(
7  | |     mut options: *const libc::c_double,
8  | | ) -> libc::c_int {
9  | |     return 0 as libc::c_int;
10 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
 --> src/indicators/exp.rs:9:5
  |
9 |     return 0 as libc::c_int;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/exp.rs:12:1
   |
12 | / pub unsafe extern "C" fn ti_exp(
13 | |     mut size: libc::c_int,
14 | |     mut inputs: *const *const libc::c_double,
15 | |     mut options: *const libc::c_double,
...  |
27 | |     return 0 as libc::c_int;
28 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/exp.rs:27:5
   |
27 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/exp.rs:25:9
   |
25 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/fisher.rs:12:1
   |
12 | / pub unsafe extern "C" fn ti_fisher_start(
13 | |     mut options: *const libc::c_double,
14 | | ) -> libc::c_int {
15 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
16 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/fisher.rs:15:5
   |
15 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/fisher.rs:18:1
    |
18  | / pub unsafe extern "C" fn ti_fisher(
19  | |     mut size: libc::c_int,
20  | |     mut inputs: *const *const libc::c_double,
21  | |     mut options: *const libc::c_double,
...   |
150 | |     return 0 as libc::c_int;
151 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this boolean expression can be simplified
  --> src/indicators/fisher.rs:58:20
   |
58 |                 if !(j <= i) {
   |                    ^^^^^^^^^ help: try: `j > i`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this boolean expression can be simplified
  --> src/indicators/fisher.rs:78:20
   |
78 |                 if !(j <= i) {
   |                    ^^^^^^^^^ help: try: `j > i`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
   --> src/indicators/fisher.rs:150:5
    |
150 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/indicators/fisher.rs:112:9
    |
112 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/indicators/fisher.rs:114:9
    |
114 |         trail;
    |         ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/floor.rs:6:1
   |
6  | / pub unsafe extern "C" fn ti_floor(
7  | |     mut size: libc::c_int,
8  | |     mut inputs: *const *const libc::c_double,
9  | |     mut options: *const libc::c_double,
...  |
21 | |     return 0 as libc::c_int;
22 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/floor.rs:21:5
   |
21 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/floor.rs:19:9
   |
19 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/floor.rs:24:1
   |
24 | / pub unsafe extern "C" fn ti_floor_start(
25 | |     mut options: *const libc::c_double,
26 | | ) -> libc::c_int {
27 | |     return 0 as libc::c_int;
28 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/floor.rs:27:5
   |
27 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/fosc.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_fosc_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
15 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/fosc.rs:14:5
   |
14 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/fosc.rs:17:1
   |
17 | / pub unsafe extern "C" fn ti_fosc(
18 | |     mut size: libc::c_int,
19 | |     mut inputs: *const *const libc::c_double,
20 | |     mut options: *const libc::c_double,
...  |
86 | |     return 0 as libc::c_int;
87 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/fosc.rs:86:5
   |
86 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/fosc.rs:46:9
   |
46 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/fosc.rs:67:9
   |
67 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/hma.rs:23:1
   |
23 | / pub unsafe extern "C" fn ti_hma_start(
24 | |     mut options: *const libc::c_double,
25 | | ) -> libc::c_int {
26 | |     let period: libc::c_int = *options.offset(0 as libc::c_int as isize) as libc::c_int;
27 | |     let periodsqrt: libc::c_int = sqrt(period as libc::c_double) as libc::c_int;
28 | |     return period + periodsqrt - 2 as libc::c_int;
29 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/hma.rs:28:5
   |
28 |     return period + periodsqrt - 2 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `period + periodsqrt - 2 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/hma.rs:31:1
    |
31  | / pub unsafe extern "C" fn ti_hma(
32  | |     mut size: libc::c_int,
33  | |     mut inputs: *const *const libc::c_double,
34  | |     mut options: *const libc::c_double,
...   |
132 | |     return 0 as libc::c_int;
133 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/indicators/hma.rs:132:5
    |
132 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/hma.rs:73:9
   |
73 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: manual implementation of an assign operation
  --> src/indicators/hma.rs:88:9
   |
88 |         (*buff).index = (*buff).index + 1 as libc::c_int;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*buff).index += 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
   --> src/indicators/hma.rs:112:9
    |
112 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/kama.rs:13:1
   |
13 | / pub unsafe extern "C" fn ti_kama_start(
14 | |     mut options: *const libc::c_double,
15 | | ) -> libc::c_int {
16 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
17 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/kama.rs:16:5
   |
16 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/kama.rs:19:1
    |
19  | / pub unsafe extern "C" fn ti_kama(
20  | |     mut size: libc::c_int,
21  | |     mut inputs: *const *const libc::c_double,
22  | |     mut options: *const libc::c_double,
...   |
104 | |     return 0 as libc::c_int;
105 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/indicators/kama.rs:104:5
    |
104 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/kama.rs:48:9
   |
48 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/kama.rs:85:9
   |
85 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/kvo.rs:12:1
   |
12 | / pub unsafe extern "C" fn ti_kvo_start(
13 | |     mut options: *const libc::c_double,
14 | | ) -> libc::c_int {
15 | |     return 1 as libc::c_int;
16 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/kvo.rs:15:5
   |
15 |     return 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/kvo.rs:18:1
    |
18  | / pub unsafe extern "C" fn ti_kvo(
19  | |     mut size: libc::c_int,
20  | |     mut inputs: *const *const libc::c_double,
21  | |     mut options: *const libc::c_double,
...   |
106 | |     return 0 as libc::c_int;
107 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/indicators/kvo.rs:106:5
    |
106 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/kvo.rs:87:9
   |
87 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/lag.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_lag_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
15 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/lag.rs:14:5
   |
14 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/lag.rs:17:1
   |
17 | / pub unsafe extern "C" fn ti_lag(
18 | |     mut size: libc::c_int,
19 | |     mut inputs: *const *const libc::c_double,
20 | |     mut options: *const libc::c_double,
...  |
58 | |     return 0 as libc::c_int;
59 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/lag.rs:58:5
   |
58 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/lag.rs:39:9
   |
39 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/linreg.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_linreg_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
15 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/linreg.rs:14:5
   |
14 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/linreg.rs:17:1
   |
17 | / pub unsafe extern "C" fn ti_linreg(
18 | |     mut size: libc::c_int,
19 | |     mut inputs: *const *const libc::c_double,
20 | |     mut options: *const libc::c_double,
...  |
81 | |     return 0 as libc::c_int;
82 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/linreg.rs:81:5
   |
81 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/linreg.rs:45:9
   |
45 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/linreg.rs:62:9
   |
62 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/linregintercept.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_linregintercept_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
15 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/linregintercept.rs:14:5
   |
14 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/linregintercept.rs:17:1
   |
17 | / pub unsafe extern "C" fn ti_linregintercept(
18 | |     mut size: libc::c_int,
19 | |     mut inputs: *const *const libc::c_double,
20 | |     mut options: *const libc::c_double,
...  |
81 | |     return 0 as libc::c_int;
82 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/linregintercept.rs:81:5
   |
81 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/linregintercept.rs:45:9
   |
45 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/linregintercept.rs:62:9
   |
62 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/linregslope.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_linregslope_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
15 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/linregslope.rs:14:5
   |
14 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/linregslope.rs:17:1
   |
17 | / pub unsafe extern "C" fn ti_linregslope(
18 | |     mut size: libc::c_int,
19 | |     mut inputs: *const *const libc::c_double,
20 | |     mut options: *const libc::c_double,
...  |
79 | |     return 0 as libc::c_int;
80 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/linregslope.rs:79:5
   |
79 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/linregslope.rs:44:9
   |
44 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/linregslope.rs:60:9
   |
60 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/ln.rs:6:1
   |
6  | / pub unsafe extern "C" fn ti_ln(
7  | |     mut size: libc::c_int,
8  | |     mut inputs: *const *const libc::c_double,
9  | |     mut options: *const libc::c_double,
...  |
21 | |     return 0 as libc::c_int;
22 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/ln.rs:21:5
   |
21 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/ln.rs:19:9
   |
19 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/ln.rs:24:1
   |
24 | / pub unsafe extern "C" fn ti_ln_start(mut options: *const libc::c_double) -> libc::c_int {
25 | |     return 0 as libc::c_int;
26 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/ln.rs:25:5
   |
25 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/log10.rs:6:1
   |
6  | / pub unsafe extern "C" fn ti_log10_start(
7  | |     mut options: *const libc::c_double,
8  | | ) -> libc::c_int {
9  | |     return 0 as libc::c_int;
10 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
 --> src/indicators/log10.rs:9:5
  |
9 |     return 0 as libc::c_int;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/log10.rs:12:1
   |
12 | / pub unsafe extern "C" fn ti_log10(
13 | |     mut size: libc::c_int,
14 | |     mut inputs: *const *const libc::c_double,
15 | |     mut options: *const libc::c_double,
...  |
27 | |     return 0 as libc::c_int;
28 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/log10.rs:27:5
   |
27 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/log10.rs:25:9
   |
25 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/macd.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_macd_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     let long_period: libc::c_int = *options.offset(1 as libc::c_int as isize)
15 | |         as libc::c_int;
16 | |     return long_period - 1 as libc::c_int;
17 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/macd.rs:16:5
   |
16 |     return long_period - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `long_period - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/macd.rs:19:1
    |
19  | / pub unsafe extern "C" fn ti_macd(
20  | |     mut size: libc::c_int,
21  | |     mut inputs: *const *const libc::c_double,
22  | |     mut options: *const libc::c_double,
...   |
138 | |     return 0 as libc::c_int;
139 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/indicators/macd.rs:138:5
    |
138 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/macd.rs:85:9
   |
85 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/marketfi.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_marketfi_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     return 0 as libc::c_int;
15 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/marketfi.rs:14:5
   |
14 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/marketfi.rs:17:1
   |
17 | / pub unsafe extern "C" fn ti_marketfi(
18 | |     mut size: libc::c_int,
19 | |     mut inputs: *const *const libc::c_double,
20 | |     mut options: *const libc::c_double,
...  |
57 | |     return 0 as libc::c_int;
58 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/marketfi.rs:57:5
   |
57 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/marketfi.rs:38:9
   |
38 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/mass.rs:22:1
   |
22 | / pub unsafe extern "C" fn ti_mass_start(
23 | |     mut options: *const libc::c_double,
24 | | ) -> libc::c_int {
25 | |     let mut sum_p: libc::c_int = *options.offset(0 as libc::c_int as isize)
26 | |         as libc::c_int - 1 as libc::c_int;
27 | |     return 16 as libc::c_int + sum_p;
28 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/mass.rs:27:5
   |
27 |     return 16 as libc::c_int + sum_p;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `16 as libc::c_int + sum_p`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/mass.rs:30:1
    |
30  | / pub unsafe extern "C" fn ti_mass(
31  | |     mut size: libc::c_int,
32  | |     mut inputs: *const *const libc::c_double,
33  | |     mut options: *const libc::c_double,
...   |
103 | |     return 0 as libc::c_int;
104 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/indicators/mass.rs:103:5
    |
103 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: manual implementation of an assign operation
  --> src/indicators/mass.rs:71:17
   |
71 |                 (*sum).index = (*sum).index + 1 as libc::c_int;
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*sum).index += 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
  --> src/indicators/mass.rs:83:9
   |
83 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/max.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_max_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
15 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/max.rs:14:5
   |
14 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/max.rs:17:1
   |
17 | / pub unsafe extern "C" fn ti_max(
18 | |     mut size: libc::c_int,
19 | |     mut inputs: *const *const libc::c_double,
20 | |     mut options: *const libc::c_double,
...  |
84 | |     return 0 as libc::c_int;
85 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this boolean expression can be simplified
  --> src/indicators/max.rs:46:20
   |
46 |                 if !(j <= i) {
   |                    ^^^^^^^^^ help: try: `j > i`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
  --> src/indicators/max.rs:84:5
   |
84 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/max.rs:63:9
   |
63 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/max.rs:65:9
   |
65 |         trail;
   |         ^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/max.rs:87:1
    |
87  | / pub unsafe extern "C" fn ti_max_ref(
88  | |     mut size: libc::c_int,
89  | |     mut inputs: *const *const libc::c_double,
90  | |     mut options: *const libc::c_double,
...   |
122 | |     return 0 as libc::c_int;
123 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/indicators/max.rs:122:5
    |
122 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/indicators/max.rs:114:13
    |
114 |             j;
    |             ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/indicators/max.rs:120:9
    |
120 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/md.rs:12:1
   |
12 | / pub unsafe extern "C" fn ti_md_start(mut options: *const libc::c_double) -> libc::c_int {
13 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
14 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/md.rs:13:5
   |
13 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/md.rs:16:1
   |
16 | / pub unsafe extern "C" fn ti_md(
17 | |     mut size: libc::c_int,
18 | |     mut inputs: *const *const libc::c_double,
19 | |     mut options: *const libc::c_double,
...  |
75 | |     return 0 as libc::c_int;
76 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/md.rs:75:5
   |
75 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/md.rs:49:17
   |
49 |                 j;
   |                 ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/md.rs:56:9
   |
56 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
 --> src/indicators/medprice.rs:3:1
  |
3 | / pub unsafe extern "C" fn ti_medprice_start(
4 | |     mut options: *const libc::c_double,
5 | | ) -> libc::c_int {
6 | |     return 0 as libc::c_int;
7 | | }
  | |_^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
 --> src/indicators/medprice.rs:6:5
  |
6 |     return 0 as libc::c_int;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/medprice.rs:9:1
   |
9  | / pub unsafe extern "C" fn ti_medprice(
10 | |     mut size: libc::c_int,
11 | |     mut inputs: *const *const libc::c_double,
12 | |     mut options: *const libc::c_double,
...  |
28 | |     return 0 as libc::c_int;
29 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/medprice.rs:28:5
   |
28 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/medprice.rs:26:9
   |
26 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/mfi.rs:22:1
   |
22 | / pub unsafe extern "C" fn ti_mfi_start(
23 | |     mut options: *const libc::c_double,
24 | | ) -> libc::c_int {
25 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
26 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/mfi.rs:25:5
   |
25 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/mfi.rs:28:1
    |
28  | / pub unsafe extern "C" fn ti_mfi(
29  | |     mut size: libc::c_int,
30  | |     mut inputs: *const *const libc::c_double,
31  | |     mut options: *const libc::c_double,
...   |
152 | |     return 0 as libc::c_int;
153 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/indicators/mfi.rs:152:5
    |
152 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: manual implementation of an assign operation
  --> src/indicators/mfi.rs:64:13
   |
64 |             (*up).index = (*up).index + 1 as libc::c_int;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*up).index += 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: manual implementation of an assign operation
  --> src/indicators/mfi.rs:75:13
   |
75 |             (*down).index = (*down).index + 1 as libc::c_int;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*down).index += 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: manual implementation of an assign operation
  --> src/indicators/mfi.rs:87:13
   |
87 |             (*down).index = (*down).index + 1 as libc::c_int;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*down).index += 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: manual implementation of an assign operation
  --> src/indicators/mfi.rs:97:13
   |
97 |             (*up).index = (*up).index + 1 as libc::c_int;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*up).index += 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: manual implementation of an assign operation
   --> src/indicators/mfi.rs:108:13
    |
108 |             (*up).index = (*up).index + 1 as libc::c_int;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*up).index += 1 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: manual implementation of an assign operation
   --> src/indicators/mfi.rs:119:13
    |
119 |             (*down).index = (*down).index + 1 as libc::c_int;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*down).index += 1 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
   --> src/indicators/mfi.rs:131:9
    |
131 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/min.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_min_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
15 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/min.rs:14:5
   |
14 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/min.rs:17:1
   |
17 | / pub unsafe extern "C" fn ti_min(
18 | |     mut size: libc::c_int,
19 | |     mut inputs: *const *const libc::c_double,
20 | |     mut options: *const libc::c_double,
...  |
84 | |     return 0 as libc::c_int;
85 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this boolean expression can be simplified
  --> src/indicators/min.rs:46:20
   |
46 |                 if !(j <= i) {
   |                    ^^^^^^^^^ help: try: `j > i`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
  --> src/indicators/min.rs:84:5
   |
84 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/min.rs:63:9
   |
63 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/min.rs:65:9
   |
65 |         trail;
   |         ^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/min.rs:87:1
    |
87  | / pub unsafe extern "C" fn ti_min_ref(
88  | |     mut size: libc::c_int,
89  | |     mut inputs: *const *const libc::c_double,
90  | |     mut options: *const libc::c_double,
...   |
139 | |     return 0 as libc::c_int;
140 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/indicators/min.rs:139:5
    |
139 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/indicators/min.rs:114:13
    |
114 |             j;
    |             ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/indicators/min.rs:120:9
    |
120 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/mom.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_mom_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
15 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/mom.rs:14:5
   |
14 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/mom.rs:17:1
   |
17 | / pub unsafe extern "C" fn ti_mom(
18 | |     mut size: libc::c_int,
19 | |     mut inputs: *const *const libc::c_double,
20 | |     mut options: *const libc::c_double,
...  |
58 | |     return 0 as libc::c_int;
59 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/mom.rs:58:5
   |
58 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/mom.rs:39:9
   |
39 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/msw.rs:15:1
   |
15 | / pub unsafe extern "C" fn ti_msw_start(
16 | |     mut options: *const libc::c_double,
17 | | ) -> libc::c_int {
18 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
19 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/msw.rs:18:5
   |
18 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/msw.rs:21:1
    |
21  | / pub unsafe extern "C" fn ti_msw(
22  | |     mut size: libc::c_int,
23  | |     mut inputs: *const *const libc::c_double,
24  | |     mut options: *const libc::c_double,
...   |
121 | |     return 0 as libc::c_int;
122 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/indicators/msw.rs:121:5
    |
121 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: manual implementation of an assign operation
  --> src/indicators/msw.rs:53:13
   |
53 |             rp = rp + cos(tpi * j as libc::c_double / period as libc::c_double) * weight;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `rp += cos(tpi * j as libc::c_double / period as libc::c_double) * weight`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: manual implementation of an assign operation
  --> src/indicators/msw.rs:54:13
   |
54 |             ip = ip + sin(tpi * j as libc::c_double / period as libc::c_double) * weight;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `ip += sin(tpi * j as libc::c_double / period as libc::c_double) * weight`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
  --> src/indicators/msw.rs:56:13
   |
56 |             j;
   |             ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/msw.rs:85:9
   |
85 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
 --> src/indicators/mul.rs:3:1
  |
3 | / pub unsafe extern "C" fn ti_mul_start(
4 | |     mut options: *const libc::c_double,
5 | | ) -> libc::c_int {
6 | |     return 0 as libc::c_int;
7 | | }
  | |_^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
 --> src/indicators/mul.rs:6:5
  |
6 |     return 0 as libc::c_int;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/mul.rs:9:1
   |
9  | / pub unsafe extern "C" fn ti_mul(
10 | |     mut size: libc::c_int,
11 | |     mut inputs: *const *const libc::c_double,
12 | |     mut options: *const libc::c_double,
...  |
25 | |     return 0 as libc::c_int;
26 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/mul.rs:25:5
   |
25 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/mul.rs:23:9
   |
23 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/natr.rs:12:1
   |
12 | / pub unsafe extern "C" fn ti_natr_start(
13 | |     mut options: *const libc::c_double,
14 | | ) -> libc::c_int {
15 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
16 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/natr.rs:15:5
   |
15 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/natr.rs:18:1
    |
18  | / pub unsafe extern "C" fn ti_natr(
19  | |     mut size: libc::c_int,
20  | |     mut inputs: *const *const libc::c_double,
21  | |     mut options: *const libc::c_double,
...   |
105 | |     return 0 as libc::c_int;
106 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/indicators/natr.rs:105:5
    |
105 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/natr.rs:59:9
   |
59 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/natr.rs:86:9
   |
86 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/nvi.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_nvi_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     return 0 as libc::c_int;
15 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/nvi.rs:14:5
   |
14 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/nvi.rs:17:1
   |
17 | / pub unsafe extern "C" fn ti_nvi(
18 | |     mut size: libc::c_int,
19 | |     mut inputs: *const *const libc::c_double,
20 | |     mut options: *const libc::c_double,
...  |
65 | |     return 0 as libc::c_int;
66 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/nvi.rs:65:5
   |
65 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/nvi.rs:46:9
   |
46 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
 --> src/indicators/obv.rs:3:1
  |
3 | / pub unsafe extern "C" fn ti_obv_start(
4 | |     mut options: *const libc::c_double,
5 | | ) -> libc::c_int {
6 | |     return 0 as libc::c_int;
7 | | }
  | |_^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
 --> src/indicators/obv.rs:6:5
  |
6 |     return 0 as libc::c_int;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/obv.rs:9:1
   |
9  | / pub unsafe extern "C" fn ti_obv(
10 | |     mut size: libc::c_int,
11 | |     mut inputs: *const *const libc::c_double,
12 | |     mut options: *const libc::c_double,
...  |
38 | |     return 0 as libc::c_int;
39 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/obv.rs:38:5
   |
38 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/obv.rs:36:9
   |
36 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/ppo.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_ppo_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     return 1 as libc::c_int;
15 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/ppo.rs:14:5
   |
14 |     return 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/ppo.rs:17:1
   |
17 | / pub unsafe extern "C" fn ti_ppo(
18 | |     mut size: libc::c_int,
19 | |     mut inputs: *const *const libc::c_double,
20 | |     mut options: *const libc::c_double,
...  |
76 | |     return 0 as libc::c_int;
77 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/ppo.rs:76:5
   |
76 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/ppo.rs:57:9
   |
57 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/psar.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_psar_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     return 1 as libc::c_int;
15 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/psar.rs:14:5
   |
14 |     return 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/psar.rs:17:1
    |
17  | / pub unsafe extern "C" fn ti_psar(
18  | |     mut size: libc::c_int,
19  | |     mut inputs: *const *const libc::c_double,
20  | |     mut options: *const libc::c_double,
...   |
132 | |     return 0 as libc::c_int;
133 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/indicators/psar.rs:132:5
    |
132 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/indicators/psar.rs:113:9
    |
113 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/pvi.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_pvi_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     return 0 as libc::c_int;
15 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/pvi.rs:14:5
   |
14 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/pvi.rs:17:1
   |
17 | / pub unsafe extern "C" fn ti_pvi(
18 | |     mut size: libc::c_int,
19 | |     mut inputs: *const *const libc::c_double,
20 | |     mut options: *const libc::c_double,
...  |
65 | |     return 0 as libc::c_int;
66 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/pvi.rs:65:5
   |
65 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/pvi.rs:46:9
   |
46 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/qstick.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_qstick_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
15 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/qstick.rs:14:5
   |
14 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/qstick.rs:17:1
   |
17 | / pub unsafe extern "C" fn ti_qstick(
18 | |     mut size: libc::c_int,
19 | |     mut inputs: *const *const libc::c_double,
20 | |     mut options: *const libc::c_double,
...  |
74 | |     return 0 as libc::c_int;
75 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/qstick.rs:74:5
   |
74 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/qstick.rs:40:9
   |
40 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/qstick.rs:55:9
   |
55 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/roc.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_roc_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
15 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/roc.rs:14:5
   |
14 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/roc.rs:17:1
   |
17 | / pub unsafe extern "C" fn ti_roc(
18 | |     mut size: libc::c_int,
19 | |     mut inputs: *const *const libc::c_double,
20 | |     mut options: *const libc::c_double,
...  |
59 | |     return 0 as libc::c_int;
60 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/roc.rs:59:5
   |
59 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/roc.rs:40:9
   |
40 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/rocr.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_rocr_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
15 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/rocr.rs:14:5
   |
14 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/rocr.rs:17:1
   |
17 | / pub unsafe extern "C" fn ti_rocr(
18 | |     mut size: libc::c_int,
19 | |     mut inputs: *const *const libc::c_double,
20 | |     mut options: *const libc::c_double,
...  |
58 | |     return 0 as libc::c_int;
59 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/rocr.rs:58:5
   |
58 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/rocr.rs:39:9
   |
39 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/round.rs:6:1
   |
6  | / pub unsafe extern "C" fn ti_round_start(
7  | |     mut options: *const libc::c_double,
8  | | ) -> libc::c_int {
9  | |     return 0 as libc::c_int;
10 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
 --> src/indicators/round.rs:9:5
  |
9 |     return 0 as libc::c_int;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/round.rs:12:1
   |
12 | / pub unsafe extern "C" fn ti_round(
13 | |     mut size: libc::c_int,
14 | |     mut inputs: *const *const libc::c_double,
15 | |     mut options: *const libc::c_double,
...  |
27 | |     return 0 as libc::c_int;
28 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/round.rs:27:5
   |
27 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/round.rs:25:9
   |
25 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/rsi.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_rsi_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
15 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/rsi.rs:14:5
   |
14 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/rsi.rs:17:1
    |
17  | / pub unsafe extern "C" fn ti_rsi(
18  | |     mut size: libc::c_int,
19  | |     mut inputs: *const *const libc::c_double,
20  | |     mut options: *const libc::c_double,
...   |
103 | |     return 0 as libc::c_int;
104 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/indicators/rsi.rs:103:5
    |
103 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/rsi.rs:55:9
   |
55 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/rsi.rs:84:9
   |
84 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/sin.rs:6:1
   |
6  | / pub unsafe extern "C" fn ti_sin_start(
7  | |     mut options: *const libc::c_double,
8  | | ) -> libc::c_int {
9  | |     return 0 as libc::c_int;
10 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
 --> src/indicators/sin.rs:9:5
  |
9 |     return 0 as libc::c_int;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/sin.rs:12:1
   |
12 | / pub unsafe extern "C" fn ti_sin(
13 | |     mut size: libc::c_int,
14 | |     mut inputs: *const *const libc::c_double,
15 | |     mut options: *const libc::c_double,
...  |
27 | |     return 0 as libc::c_int;
28 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/sin.rs:27:5
   |
27 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/sin.rs:25:9
   |
25 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/sinh.rs:6:1
   |
6  | / pub unsafe extern "C" fn ti_sinh_start(
7  | |     mut options: *const libc::c_double,
8  | | ) -> libc::c_int {
9  | |     return 0 as libc::c_int;
10 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
 --> src/indicators/sinh.rs:9:5
  |
9 |     return 0 as libc::c_int;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/sinh.rs:12:1
   |
12 | / pub unsafe extern "C" fn ti_sinh(
13 | |     mut size: libc::c_int,
14 | |     mut inputs: *const *const libc::c_double,
15 | |     mut options: *const libc::c_double,
...  |
27 | |     return 0 as libc::c_int;
28 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/sinh.rs:27:5
   |
27 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/sinh.rs:25:9
   |
25 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/sma.rs:25:1
   |
25 | / pub unsafe extern "C" fn ti_sma_start(
26 | |     mut options: *const libc::c_double,
27 | | ) -> libc::c_int {
28 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
29 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/sma.rs:28:5
   |
28 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/sma.rs:31:1
   |
31 | / pub unsafe extern "C" fn ti_sma(
32 | |     mut size: libc::c_int,
33 | |     mut inputs: *const *const libc::c_double,
34 | |     mut options: *const libc::c_double,
...  |
85 | |     return 0 as libc::c_int;
86 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/sma.rs:85:5
   |
85 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/sma.rs:53:9
   |
53 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/sma.rs:66:9
   |
66 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/sma.rs:88:1
    |
88  | / pub unsafe extern "C" fn ti_sma_stream_new(
89  | |     mut options: *const libc::c_double,
90  | |     mut stream_in: *mut *mut ti_stream,
91  | | ) -> libc::c_int {
...   |
114 | |     return 0 as libc::c_int;
115 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/indicators/sma.rs:114:5
    |
114 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/sma.rs:117:1
    |
117 | / pub unsafe extern "C" fn ti_sma_stream_run(
118 | |     mut stream_in: *mut ti_stream,
119 | |     mut size: libc::c_int,
120 | |     mut inputs: *const *const libc::c_double,
...   |
172 | |     return 0 as libc::c_int;
173 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/indicators/sma.rs:172:5
    |
172 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
   --> src/indicators/sma.rs:132:5
    |
132 |     progress == -period + 1 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/indicators/sma.rs:137:9
    |
137 |         buffer_idx;
    |         ^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
   --> src/indicators/sma.rs:138:13
    |
138 |         let ref mut fresh2 = *buffer.offset(buffer_idx as isize);
    |         ----^^^^^^^^^^^^^^--------------------------------------- help: try: `let fresh2 = &mut (*buffer.offset(buffer_idx as isize));`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#toplevel_ref_arg

warning: statement with no effect
   --> src/indicators/sma.rs:142:9
    |
142 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/indicators/sma.rs:144:9
    |
144 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/indicators/sma.rs:153:9
    |
153 |         buffer_idx;
    |         ^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
   --> src/indicators/sma.rs:158:13
    |
158 |         let ref mut fresh4 = *buffer.offset(buffer_idx as isize);
    |         ----^^^^^^^^^^^^^^--------------------------------------- help: try: `let fresh4 = &mut (*buffer.offset(buffer_idx as isize));`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#toplevel_ref_arg

warning: statement with no effect
   --> src/indicators/sma.rs:165:9
    |
165 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/indicators/sma.rs:167:9
    |
167 |         progress;
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/sma.rs:175:1
    |
175 | / pub unsafe extern "C" fn ti_sma_stream_free(mut stream: *mut ti_stream) {
176 | |     free(stream as *mut libc::c_void);
177 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/sqrt.rs:6:1
   |
6  | / pub unsafe extern "C" fn ti_sqrt_start(
7  | |     mut options: *const libc::c_double,
8  | | ) -> libc::c_int {
9  | |     return 0 as libc::c_int;
10 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
 --> src/indicators/sqrt.rs:9:5
  |
9 |     return 0 as libc::c_int;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/sqrt.rs:12:1
   |
12 | / pub unsafe extern "C" fn ti_sqrt(
13 | |     mut size: libc::c_int,
14 | |     mut inputs: *const *const libc::c_double,
15 | |     mut options: *const libc::c_double,
...  |
27 | |     return 0 as libc::c_int;
28 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/sqrt.rs:27:5
   |
27 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/sqrt.rs:25:9
   |
25 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/stddev.rs:12:1
   |
12 | / pub unsafe extern "C" fn ti_stddev_start(
13 | |     mut options: *const libc::c_double,
14 | | ) -> libc::c_int {
15 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
16 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/stddev.rs:15:5
   |
15 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/stddev.rs:18:1
   |
18 | / pub unsafe extern "C" fn ti_stddev(
19 | |     mut size: libc::c_int,
20 | |     mut inputs: *const *const libc::c_double,
21 | |     mut options: *const libc::c_double,
...  |
86 | |     return 0 as libc::c_int;
87 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/stddev.rs:86:5
   |
86 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/stddev.rs:42:9
   |
42 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/stddev.rs:67:9
   |
67 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/stderr.rs:12:1
   |
12 | / pub unsafe extern "C" fn ti_stderr_start(
13 | |     mut options: *const libc::c_double,
14 | | ) -> libc::c_int {
15 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
16 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/stderr.rs:15:5
   |
15 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/stderr.rs:18:1
   |
18 | / pub unsafe extern "C" fn ti_stderr(
19 | |     mut size: libc::c_int,
20 | |     mut inputs: *const *const libc::c_double,
21 | |     mut options: *const libc::c_double,
...  |
87 | |     return 0 as libc::c_int;
88 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/stderr.rs:87:5
   |
87 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/stderr.rs:43:9
   |
43 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/stderr.rs:68:9
   |
68 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/stoch.rs:22:1
   |
22 | / pub unsafe extern "C" fn ti_stoch_start(
23 | |     mut options: *const libc::c_double,
24 | | ) -> libc::c_int {
25 | |     let kperiod: libc::c_int = *options.offset(0 as libc::c_int as isize) as libc::c_int;
...  |
28 | |     return kperiod + kslow + dperiod - 3 as libc::c_int;
29 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/stoch.rs:28:5
   |
28 |     return kperiod + kslow + dperiod - 3 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `kperiod + kslow + dperiod - 3 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/stoch.rs:31:1
    |
31  | / pub unsafe extern "C" fn ti_stoch(
32  | |     mut size: libc::c_int,
33  | |     mut inputs: *const *const libc::c_double,
34  | |     mut options: *const libc::c_double,
...   |
197 | |     return 0 as libc::c_int;
198 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this boolean expression can be simplified
  --> src/indicators/stoch.rs:82:20
   |
82 |                 if !(j <= i) {
   |                    ^^^^^^^^^ help: try: `j > i`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this boolean expression can be simplified
   --> src/indicators/stoch.rs:102:20
    |
102 |                 if !(j <= i) {
    |                    ^^^^^^^^^ help: try: `j > i`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
   --> src/indicators/stoch.rs:197:5
    |
197 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/stoch.rs:73:13
   |
73 |             trail;
   |             ^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: manual implementation of an assign operation
   --> src/indicators/stoch.rs:129:9
    |
129 |         (*k_sum).index = (*k_sum).index + 1 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*k_sum).index += 1 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: manual implementation of an assign operation
   --> src/indicators/stoch.rs:142:13
    |
142 |             (*d_sum).index = (*d_sum).index + 1 as libc::c_int;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*d_sum).index += 1 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
   --> src/indicators/stoch.rs:159:9
    |
159 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/stochrsi.rs:22:1
   |
22 | / pub unsafe extern "C" fn ti_stochrsi_start(
23 | |     mut options: *const libc::c_double,
24 | | ) -> libc::c_int {
25 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int * 2 as libc::c_int
26 | |         - 1 as libc::c_int;
27 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/stochrsi.rs:25:5
   |
25 | /     return *options.offset(0 as libc::c_int as isize) as libc::c_int * 2 as libc::c_int
26 | |         - 1 as libc::c_int;
   | |___________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
25 ~     *options.offset(0 as libc::c_int as isize) as libc::c_int * 2 as libc::c_int
26 +         - 1 as libc::c_int
   |

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/stochrsi.rs:29:1
    |
29  | / pub unsafe extern "C" fn ti_stochrsi(
30  | |     mut size: libc::c_int,
31  | |     mut inputs: *const *const libc::c_double,
32  | |     mut options: *const libc::c_double,
...   |
180 | |     return 0 as libc::c_int;
181 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this boolean expression can be simplified
   --> src/indicators/stochrsi.rs:114:20
    |
114 |                 if !(j == (*rsi).index) {
    |                    ^^^^^^^^^^^^^^^^^^^^ help: try: `j != (*rsi).index`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this boolean expression can be simplified
   --> src/indicators/stochrsi.rs:132:20
    |
132 |                 if !(j_0 == (*rsi).index) {
    |                    ^^^^^^^^^^^^^^^^^^^^^^ help: try: `j_0 != (*rsi).index`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
   --> src/indicators/stochrsi.rs:180:5
    |
180 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/stochrsi.rs:68:9
   |
68 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: manual implementation of an assign operation
  --> src/indicators/stochrsi.rs:79:5
   |
79 |     (*rsi).index = (*rsi).index + 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*rsi).index += 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
   --> src/indicators/stochrsi.rs:121:17
    |
121 |                 j;
    |                 ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/indicators/stochrsi.rs:139:17
    |
139 |                 j_0;
    |                 ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: manual implementation of an assign operation
   --> src/indicators/stochrsi.rs:143:9
    |
143 |         (*rsi).index = (*rsi).index + 1 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*rsi).index += 1 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
   --> src/indicators/stochrsi.rs:160:9
    |
160 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/sub.rs:3:1
   |
3  | / pub unsafe extern "C" fn ti_sub(
4  | |     mut size: libc::c_int,
5  | |     mut inputs: *const *const libc::c_double,
6  | |     mut options: *const libc::c_double,
...  |
19 | |     return 0 as libc::c_int;
20 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/sub.rs:19:5
   |
19 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/sub.rs:17:9
   |
17 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/sub.rs:22:1
   |
22 | / pub unsafe extern "C" fn ti_sub_start(
23 | |     mut options: *const libc::c_double,
24 | | ) -> libc::c_int {
25 | |     return 0 as libc::c_int;
26 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/sub.rs:25:5
   |
25 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/sum.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_sum_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
15 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/sum.rs:14:5
   |
14 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/sum.rs:17:1
   |
17 | / pub unsafe extern "C" fn ti_sum(
18 | |     mut size: libc::c_int,
19 | |     mut inputs: *const *const libc::c_double,
20 | |     mut options: *const libc::c_double,
...  |
70 | |     return 0 as libc::c_int;
71 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/sum.rs:70:5
   |
70 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/sum.rs:38:9
   |
38 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/sum.rs:51:9
   |
51 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/tan.rs:6:1
   |
6  | / pub unsafe extern "C" fn ti_tan_start(
7  | |     mut options: *const libc::c_double,
8  | | ) -> libc::c_int {
9  | |     return 0 as libc::c_int;
10 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
 --> src/indicators/tan.rs:9:5
  |
9 |     return 0 as libc::c_int;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/tan.rs:12:1
   |
12 | / pub unsafe extern "C" fn ti_tan(
13 | |     mut size: libc::c_int,
14 | |     mut inputs: *const *const libc::c_double,
15 | |     mut options: *const libc::c_double,
...  |
27 | |     return 0 as libc::c_int;
28 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/tan.rs:27:5
   |
27 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/tan.rs:25:9
   |
25 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/tanh.rs:6:1
   |
6  | / pub unsafe extern "C" fn ti_tanh(
7  | |     mut size: libc::c_int,
8  | |     mut inputs: *const *const libc::c_double,
9  | |     mut options: *const libc::c_double,
...  |
21 | |     return 0 as libc::c_int;
22 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/tanh.rs:21:5
   |
21 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/tanh.rs:19:9
   |
19 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/tanh.rs:24:1
   |
24 | / pub unsafe extern "C" fn ti_tanh_start(
25 | |     mut options: *const libc::c_double,
26 | | ) -> libc::c_int {
27 | |     return 0 as libc::c_int;
28 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/tanh.rs:27:5
   |
27 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/tema.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_tema_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     let period: libc::c_int = *options.offset(0 as libc::c_int as isize) as libc::c_int;
15 | |     return (period - 1 as libc::c_int) * 3 as libc::c_int;
16 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/tema.rs:15:5
   |
15 |     return (period - 1 as libc::c_int) * 3 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `(period - 1 as libc::c_int) * 3 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/tema.rs:18:1
   |
18 | / pub unsafe extern "C" fn ti_tema(
19 | |     mut size: libc::c_int,
20 | |     mut inputs: *const *const libc::c_double,
21 | |     mut options: *const libc::c_double,
...  |
81 | |     return 0 as libc::c_int;
82 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/tema.rs:81:5
   |
81 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/tema.rs:57:21
   |
57 |                     output;
   |                     ^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/tema.rs:62:9
   |
62 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
 --> src/indicators/todeg.rs:3:1
  |
3 | / pub unsafe extern "C" fn ti_todeg_start(
4 | |     mut options: *const libc::c_double,
5 | | ) -> libc::c_int {
6 | |     return 0 as libc::c_int;
7 | | }
  | |_^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
 --> src/indicators/todeg.rs:6:5
  |
6 |     return 0 as libc::c_int;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/todeg.rs:9:1
   |
9  | / pub unsafe extern "C" fn ti_todeg(
10 | |     mut size: libc::c_int,
11 | |     mut inputs: *const *const libc::c_double,
12 | |     mut options: *const libc::c_double,
...  |
27 | |     return 0 as libc::c_int;
28 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/todeg.rs:27:5
   |
27 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: float has excessive precision
  --> src/indicators/todeg.rs:23:55
   |
23 |             ) = *in1.offset(i as isize) * (180.0f64 / 3.14159265358979323846f64);
   |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `3.141_592_653_589_793_f64`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#excessive_precision

warning: statement with no effect
  --> src/indicators/todeg.rs:25:9
   |
25 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/torad.rs:3:1
   |
3  | / pub unsafe extern "C" fn ti_torad(
4  | |     mut size: libc::c_int,
5  | |     mut inputs: *const *const libc::c_double,
6  | |     mut options: *const libc::c_double,
...  |
21 | |     return 0 as libc::c_int;
22 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/torad.rs:21:5
   |
21 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: float has excessive precision
  --> src/indicators/torad.rs:17:44
   |
17 |             ) = *in1.offset(i as isize) * (3.14159265358979323846f64 / 180.0f64);
   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `3.141_592_653_589_793_f64`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#excessive_precision

warning: statement with no effect
  --> src/indicators/torad.rs:19:9
   |
19 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/torad.rs:24:1
   |
24 | / pub unsafe extern "C" fn ti_torad_start(
25 | |     mut options: *const libc::c_double,
26 | | ) -> libc::c_int {
27 | |     return 0 as libc::c_int;
28 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/torad.rs:27:5
   |
27 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
 --> src/indicators/tr.rs:6:1
  |
6 | / pub unsafe extern "C" fn ti_tr_start(mut options: *const libc::c_double) -> libc::c_int {
7 | |     return 0 as libc::c_int;
8 | | }
  | |_^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
 --> src/indicators/tr.rs:7:5
  |
7 |     return 0 as libc::c_int;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/tr.rs:10:1
   |
10 | / pub unsafe extern "C" fn ti_tr(
11 | |     mut size: libc::c_int,
12 | |     mut inputs: *const *const libc::c_double,
13 | |     mut options: *const libc::c_double,
...  |
46 | |     return 0 as libc::c_int;
47 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/tr.rs:46:5
   |
46 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/tr.rs:44:9
   |
44 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/trima.rs:17:1
   |
17 | / pub unsafe extern "C" fn ti_trima_start(
18 | |     mut options: *const libc::c_double,
19 | | ) -> libc::c_int {
20 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
21 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/trima.rs:20:5
   |
20 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/trima.rs:23:1
    |
23  | / pub unsafe extern "C" fn ti_trima(
24  | |     mut size: libc::c_int,
25  | |     mut inputs: *const *const libc::c_double,
26  | |     mut options: *const libc::c_double,
...   |
122 | |     return 0 as libc::c_int;
123 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/indicators/trima.rs:122:5
    |
122 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/trima.rs:70:13
   |
70 |             w;
   |             ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/trima.rs:74:13
   |
74 |             w;
   |             ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/trima.rs:77:9
   |
77 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: manual implementation of an assign operation
  --> src/indicators/trima.rs:94:9
   |
94 |         lsi = lsi + 1;
   |         ^^^^^^^^^^^^^ help: replace it with: `lsi += 1`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: manual implementation of an assign operation
  --> src/indicators/trima.rs:97:9
   |
97 |         tsi1 = tsi1 + 1;
   |         ^^^^^^^^^^^^^^^ help: replace it with: `tsi1 += 1`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: manual implementation of an assign operation
   --> src/indicators/trima.rs:100:9
    |
100 |         tsi2 = tsi2 + 1;
    |         ^^^^^^^^^^^^^^^ help: replace it with: `tsi2 += 1`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
   --> src/indicators/trima.rs:103:9
    |
103 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/trix.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_trix_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     let period: libc::c_int = *options.offset(0 as libc::c_int as isize) as libc::c_int;
15 | |     return (period - 1 as libc::c_int) * 3 as libc::c_int + 1 as libc::c_int;
16 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/trix.rs:15:5
   |
15 |     return (period - 1 as libc::c_int) * 3 as libc::c_int + 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `(period - 1 as libc::c_int) * 3 as libc::c_int + 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/trix.rs:18:1
    |
18  | / pub unsafe extern "C" fn ti_trix(
19  | |     mut size: libc::c_int,
20  | |     mut inputs: *const *const libc::c_double,
21  | |     mut options: *const libc::c_double,
...   |
99  | |     return 0 as libc::c_int;
100 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/trix.rs:99:5
   |
99 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `if` chain can be rewritten with `match`
  --> src/indicators/trix.rs:57:9
   |
57 | /         if i == period - 1 as libc::c_int {
58 | |             ema2 = ema1;
59 | |         } else if i > period - 1 as libc::c_int {
60 | |             ema2 = (ema1 - ema2) * per + ema2;
...  |
65 | |             }
66 | |         }
   | |_________^
   |
   = help: consider rewriting the `if` chain to use `cmp` and `match`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain

warning: `if` chain can be rewritten with `match`
  --> src/indicators/trix.rs:61:13
   |
61 | /             if i == period * 2 as libc::c_int - 2 as libc::c_int {
62 | |                 ema3 = ema2;
63 | |             } else if i > period * 2 as libc::c_int - 2 as libc::c_int {
64 | |                 ema3 = (ema2 - ema3) * per + ema3;
65 | |             }
   | |_____________^
   |
   = help: consider rewriting the `if` chain to use `cmp` and `match`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain

warning: statement with no effect
  --> src/indicators/trix.rs:68:9
   |
68 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/trix.rs:80:9
   |
80 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
 --> src/indicators/trunc.rs:3:1
  |
3 | / pub unsafe extern "C" fn ti_trunc_start(
4 | |     mut options: *const libc::c_double,
5 | | ) -> libc::c_int {
6 | |     return 0 as libc::c_int;
7 | | }
  | |_^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
 --> src/indicators/trunc.rs:6:5
  |
6 |     return 0 as libc::c_int;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/trunc.rs:9:1
   |
9  | / pub unsafe extern "C" fn ti_trunc(
10 | |     mut size: libc::c_int,
11 | |     mut inputs: *const *const libc::c_double,
12 | |     mut options: *const libc::c_double,
...  |
27 | |     return 0 as libc::c_int;
28 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/trunc.rs:27:5
   |
27 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/trunc.rs:25:9
   |
25 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/tsf.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_tsf_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
15 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/tsf.rs:14:5
   |
14 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/tsf.rs:17:1
   |
17 | / pub unsafe extern "C" fn ti_tsf(
18 | |     mut size: libc::c_int,
19 | |     mut inputs: *const *const libc::c_double,
20 | |     mut options: *const libc::c_double,
...  |
81 | |     return 0 as libc::c_int;
82 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/tsf.rs:81:5
   |
81 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/tsf.rs:45:9
   |
45 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/tsf.rs:62:9
   |
62 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
 --> src/indicators/typprice.rs:3:1
  |
3 | / pub unsafe extern "C" fn ti_typprice_start(
4 | |     mut options: *const libc::c_double,
5 | | ) -> libc::c_int {
6 | |     return 0 as libc::c_int;
7 | | }
  | |_^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
 --> src/indicators/typprice.rs:6:5
  |
6 |     return 0 as libc::c_int;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/typprice.rs:9:1
   |
9  | / pub unsafe extern "C" fn ti_typprice(
10 | |     mut size: libc::c_int,
11 | |     mut inputs: *const *const libc::c_double,
12 | |     mut options: *const libc::c_double,
...  |
30 | |     return 0 as libc::c_int;
31 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/typprice.rs:30:5
   |
30 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/typprice.rs:28:9
   |
28 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/ultosc.rs:22:1
   |
22 | / pub unsafe extern "C" fn ti_ultosc_start(
23 | |     mut options: *const libc::c_double,
24 | | ) -> libc::c_int {
25 | |     return *options.offset(2 as libc::c_int as isize) as libc::c_int;
26 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/ultosc.rs:25:5
   |
25 |     return *options.offset(2 as libc::c_int as isize) as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(2 as libc::c_int as isize) as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/ultosc.rs:28:1
    |
28  | / pub unsafe extern "C" fn ti_ultosc(
29  | |     mut size: libc::c_int,
30  | |     mut inputs: *const *const libc::c_double,
31  | |     mut options: *const libc::c_double,
...   |
161 | |     return 0 as libc::c_int;
162 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/indicators/ultosc.rs:161:5
    |
161 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: manual implementation of an assign operation
  --> src/indicators/ultosc.rs:92:9
   |
92 |         (*bp_buf).index = (*bp_buf).index + 1 as libc::c_int;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*bp_buf).index += 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: manual implementation of an assign operation
   --> src/indicators/ultosc.rs:103:9
    |
103 |         (*r_buf).index = (*r_buf).index + 1 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `(*r_buf).index += 1 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: statement with no effect
   --> src/indicators/ultosc.rs:140:9
    |
140 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/var.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_var_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
15 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/var.rs:14:5
   |
14 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/var.rs:17:1
   |
17 | / pub unsafe extern "C" fn ti_var(
18 | |     mut size: libc::c_int,
19 | |     mut inputs: *const *const libc::c_double,
20 | |     mut options: *const libc::c_double,
...  |
77 | |     return 0 as libc::c_int;
78 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/var.rs:77:5
   |
77 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/var.rs:41:9
   |
41 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/var.rs:58:9
   |
58 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/vhf.rs:12:1
   |
12 | / pub unsafe extern "C" fn ti_vhf_start(
13 | |     mut options: *const libc::c_double,
14 | | ) -> libc::c_int {
15 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
16 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/vhf.rs:15:5
   |
15 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/vhf.rs:18:1
    |
18  | / pub unsafe extern "C" fn ti_vhf(
19  | |     mut size: libc::c_int,
20  | |     mut inputs: *const *const libc::c_double,
21  | |     mut options: *const libc::c_double,
...   |
129 | |     return 0 as libc::c_int;
130 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this boolean expression can be simplified
  --> src/indicators/vhf.rs:71:20
   |
71 |                 if !(j <= i) {
   |                    ^^^^^^^^^ help: try: `j > i`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this boolean expression can be simplified
  --> src/indicators/vhf.rs:91:20
   |
91 |                 if !(j <= i) {
   |                    ^^^^^^^^^ help: try: `j > i`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
   --> src/indicators/vhf.rs:129:5
    |
129 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/vhf.rs:50:9
   |
50 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/indicators/vhf.rs:108:9
    |
108 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/indicators/vhf.rs:110:9
    |
110 |         trail;
    |         ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/vidya.rs:12:1
   |
12 | / pub unsafe extern "C" fn ti_vidya_start(
13 | |     mut options: *const libc::c_double,
14 | | ) -> libc::c_int {
15 | |     return *options.offset(1 as libc::c_int as isize) as libc::c_int - 2 as libc::c_int;
16 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/vidya.rs:15:5
   |
15 |     return *options.offset(1 as libc::c_int as isize) as libc::c_int - 2 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(1 as libc::c_int as isize) as libc::c_int - 2 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/vidya.rs:18:1
    |
18  | / pub unsafe extern "C" fn ti_vidya(
19  | |     mut size: libc::c_int,
20  | |     mut inputs: *const *const libc::c_double,
21  | |     mut options: *const libc::c_double,
...   |
135 | |     return 0 as libc::c_int;
136 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/indicators/vidya.rs:135:5
    |
135 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: manual `!RangeInclusive::contains` implementation
  --> src/indicators/vidya.rs:42:8
   |
42 |     if alpha < 0.0f64 || alpha > 1.0f64 {
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `!(0.0f64..=1.0f64).contains(&alpha)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains

warning: statement with no effect
  --> src/indicators/vidya.rs:62:9
   |
62 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/indicators/vidya.rs:116:9
    |
116 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/volatility.rs:12:1
   |
12 | / pub unsafe extern "C" fn ti_volatility_start(
13 | |     mut options: *const libc::c_double,
14 | | ) -> libc::c_int {
15 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
16 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/volatility.rs:15:5
   |
15 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/volatility.rs:18:1
   |
18 | / pub unsafe extern "C" fn ti_volatility(
19 | |     mut size: libc::c_int,
20 | |     mut inputs: *const *const libc::c_double,
21 | |     mut options: *const libc::c_double,
...  |
83 | |     return 0 as libc::c_int;
84 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/volatility.rs:83:5
   |
83 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/volatility.rs:45:9
   |
45 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/volatility.rs:64:9
   |
64 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/vosc.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_vosc_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     return *options.offset(1 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
15 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/vosc.rs:14:5
   |
14 |     return *options.offset(1 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(1 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/vosc.rs:17:1
   |
17 | / pub unsafe extern "C" fn ti_vosc(
18 | |     mut size: libc::c_int,
19 | |     mut inputs: *const *const libc::c_double,
20 | |     mut options: *const libc::c_double,
...  |
88 | |     return 0 as libc::c_int;
89 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/vosc.rs:88:5
   |
88 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/vosc.rs:50:9
   |
50 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/vosc.rs:69:9
   |
69 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/vwma.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_vwma_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
15 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/vwma.rs:14:5
   |
14 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/vwma.rs:17:1
   |
17 | / pub unsafe extern "C" fn ti_vwma(
18 | |     mut size: libc::c_int,
19 | |     mut inputs: *const *const libc::c_double,
20 | |     mut options: *const libc::c_double,
...  |
77 | |     return 0 as libc::c_int;
78 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/vwma.rs:77:5
   |
77 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/vwma.rs:41:9
   |
41 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/vwma.rs:58:9
   |
58 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/wad.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_wad_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     return 1 as libc::c_int;
15 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/wad.rs:14:5
   |
14 |     return 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/wad.rs:17:1
   |
17 | / pub unsafe extern "C" fn ti_wad(
18 | |     mut size: libc::c_int,
19 | |     mut inputs: *const *const libc::c_double,
20 | |     mut options: *const libc::c_double,
...  |
77 | |     return 0 as libc::c_int;
78 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/wad.rs:77:5
   |
77 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/wad.rs:58:9
   |
58 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
 --> src/indicators/wcprice.rs:3:1
  |
3 | / pub unsafe extern "C" fn ti_wcprice_start(
4 | |     mut options: *const libc::c_double,
5 | | ) -> libc::c_int {
6 | |     return 0 as libc::c_int;
7 | | }
  | |_^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
 --> src/indicators/wcprice.rs:6:5
  |
6 |     return 0 as libc::c_int;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/wcprice.rs:9:1
   |
9  | / pub unsafe extern "C" fn ti_wcprice(
10 | |     mut size: libc::c_int,
11 | |     mut inputs: *const *const libc::c_double,
12 | |     mut options: *const libc::c_double,
...  |
30 | |     return 0 as libc::c_int;
31 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/wcprice.rs:30:5
   |
30 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/wcprice.rs:28:9
   |
28 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/wilders.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_wilders_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
15 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/wilders.rs:14:5
   |
14 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/wilders.rs:17:1
   |
17 | / pub unsafe extern "C" fn ti_wilders(
18 | |     mut size: libc::c_int,
19 | |     mut inputs: *const *const libc::c_double,
20 | |     mut options: *const libc::c_double,
...  |
71 | |     return 0 as libc::c_int;
72 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/wilders.rs:71:5
   |
71 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/wilders.rs:39:9
   |
39 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/wilders.rs:52:9
   |
52 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/willr.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_willr_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
15 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/willr.rs:14:5
   |
14 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/indicators/willr.rs:17:1
    |
17  | / pub unsafe extern "C" fn ti_willr(
18  | |     mut size: libc::c_int,
19  | |     mut inputs: *const *const libc::c_double,
20  | |     mut options: *const libc::c_double,
...   |
116 | |     return 0 as libc::c_int;
117 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this boolean expression can be simplified
  --> src/indicators/willr.rs:51:20
   |
51 |                 if !(j <= i) {
   |                    ^^^^^^^^^ help: try: `j > i`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this boolean expression can be simplified
  --> src/indicators/willr.rs:71:20
   |
71 |                 if !(j <= i) {
   |                    ^^^^^^^^^ help: try: `j > i`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
   --> src/indicators/willr.rs:116:5
    |
116 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/willr.rs:95:9
   |
95 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/willr.rs:97:9
   |
97 |         trail;
   |         ^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/wma.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_wma_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
15 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/wma.rs:14:5
   |
14 |     return *options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/wma.rs:17:1
   |
17 | / pub unsafe extern "C" fn ti_wma(
18 | |     mut size: libc::c_int,
19 | |     mut inputs: *const *const libc::c_double,
20 | |     mut options: *const libc::c_double,
...  |
74 | |     return 0 as libc::c_int;
75 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/wma.rs:74:5
   |
74 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/wma.rs:43:9
   |
43 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/indicators/wma.rs:55:9
   |
55 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/zlema.rs:11:1
   |
11 | / pub unsafe extern "C" fn ti_zlema_start(
12 | |     mut options: *const libc::c_double,
13 | | ) -> libc::c_int {
14 | |     return (*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int)
15 | |         / 2 as libc::c_int - 1 as libc::c_int;
16 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/zlema.rs:14:5
   |
14 | /     return (*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int)
15 | |         / 2 as libc::c_int - 1 as libc::c_int;
   | |______________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
14 ~     (*options.offset(0 as libc::c_int as isize) as libc::c_int - 1 as libc::c_int)
15 +         / 2 as libc::c_int - 1 as libc::c_int
   |

warning: unsafe function's docs miss `# Safety` section
  --> src/indicators/zlema.rs:18:1
   |
18 | / pub unsafe extern "C" fn ti_zlema(
19 | |     mut size: libc::c_int,
20 | |     mut inputs: *const *const libc::c_double,
21 | |     mut options: *const libc::c_double,
...  |
69 | |     return 0 as libc::c_int;
70 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/indicators/zlema.rs:69:5
   |
69 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: statement with no effect
  --> src/indicators/zlema.rs:50:9
   |
50 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/templates/candles.rs:73:1
   |
73 | / pub unsafe extern "C" fn tc_config_default() -> *const tc_config {
74 | |     static mut default_config: tc_config = {
75 | |         let mut init = tc_config {
76 | |             period: 10 as libc::c_int,
...  |
86 | |     return &mut default_config;
87 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/templates/candles.rs:86:5
   |
86 |     return &mut default_config;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `&mut default_config`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: returning the result of a `let` binding from a block
  --> src/templates/candles.rs:84:9
   |
75 | /         let mut init = tc_config {
76 | |             period: 10 as libc::c_int,
77 | |             body_none: 0.05f64,
78 | |             body_short: 0.5f64,
...  |
82 | |             near: 0.3f64,
83 | |         };
   | |__________- unnecessary `let` binding
84 |           init
   |           ^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
   |
75 ~         
76 ~         tc_config {
77 +             period: 10 as libc::c_int,
78 +             body_none: 0.05f64,
79 +             body_short: 0.5f64,
80 +             body_long: 1.4f64,
81 +             wick_none: 0.05f64,
82 +             wick_long: 0.6f64,
83 +             near: 0.3f64,
84 +         }
   |

warning: unsafe function's docs miss `# Safety` section
   --> src/templates/candles.rs:96:1
    |
96  | / pub unsafe extern "C" fn tc_find_candle(
97  | |     mut name: *const libc::c_char,
98  | | ) -> *const tc_candle_info {
99  | |     let mut imin: libc::c_int = 0 as libc::c_int;
...   |
115 | |     return 0 as *const tc_candle_info;
116 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/templates/candles.rs:115:5
    |
115 |     return 0 as *const tc_candle_info;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as *const tc_candle_info`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `if` chain can be rewritten with `match`
   --> src/templates/candles.rs:107:9
    |
107 | /         if c == 0 as libc::c_int {
108 | |             return tc_candles.as_mut_ptr().offset(i as isize)
109 | |         } else if c > 0 as libc::c_int {
110 | |             imin = i + 1 as libc::c_int;
111 | |         } else {
112 | |             imax = i - 1 as libc::c_int;
113 | |         }
    | |_________^
    |
    = help: consider rewriting the `if` chain to use `cmp` and `match`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain

warning: `0 as *const _` detected
   --> src/templates/candles.rs:115:12
    |
115 |     return 0 as *const tc_candle_info;
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<tc_candle_info>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/templates/candles.rs:118:1
    |
118 | / pub unsafe extern "C" fn tc_get_info(mut pattern: tc_set) -> *const tc_candle_info {
119 | |     if pattern == 0 {
120 | |         return 0 as *const tc_candle_info;
121 | |     }
...   |
138 | |     return 0 as *const tc_candle_info;
139 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/templates/candles.rs:138:5
    |
138 |     return 0 as *const tc_candle_info;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as *const tc_candle_info`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *const _` detected
   --> src/templates/candles.rs:120:16
    |
120 |         return 0 as *const tc_candle_info;
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<tc_candle_info>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `if` chain can be rewritten with `match`
   --> src/templates/candles.rs:130:9
    |
130 | /         if k == tc_candles[i as usize].pattern {
131 | |             return tc_candles.as_mut_ptr().offset(i as isize)
132 | |         } else if k > tc_candles[i as usize].pattern {
133 | |             imin = i + 1 as libc::c_int;
134 | |         } else {
135 | |             imax = i - 1 as libc::c_int;
136 | |         }
    | |_________^
    |
    = help: consider rewriting the `if` chain to use `cmp` and `match`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain

warning: `0 as *const _` detected
   --> src/templates/candles.rs:138:12
    |
138 |     return 0 as *const tc_candle_info;
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<tc_candle_info>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/templates/candles.rs:141:1
    |
141 | / pub unsafe extern "C" fn tc_config_set_to_default(mut config: *mut tc_config) {
142 | |     memcpy(
143 | |         config as *mut libc::c_void,
144 | |         tc_config_default() as *const libc::c_void,
145 | |         ::core::mem::size_of::<tc_config>() as libc::c_ulong,
146 | |     );
147 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/templates/candles.rs:149:1
    |
149 | / pub unsafe extern "C" fn tc_result_new() -> *mut tc_result {
150 | |     let mut k: *mut tc_result = malloc(
151 | |         ::core::mem::size_of::<tc_result>() as libc::c_ulong,
152 | |     ) as *mut tc_result;
...   |
161 | |     return k;
162 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/templates/candles.rs:161:5
    |
161 |     return k;
    |     ^^^^^^^^^ help: remove `return`: `k`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
   --> src/templates/candles.rs:154:16
    |
154 |         return 0 as *mut tc_result;
    |                ^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<tc_result>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/templates/candles.rs:169:1
    |
169 | / pub unsafe extern "C" fn tc_result_free(mut result: *mut tc_result) {
170 | |     if result.is_null() {
171 | |         return;
172 | |     }
173 | |     free((*result).hits as *mut libc::c_void);
174 | |     free(result as *mut libc::c_void);
175 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/templates/candles.rs:177:1
    |
177 | / pub unsafe extern "C" fn tc_result_count(mut result: *const tc_result) -> libc::c_int {
178 | |     return (*result).count;
179 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/templates/candles.rs:178:5
    |
178 |     return (*result).count;
    |     ^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `(*result).count`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/templates/candles.rs:181:1
    |
181 | / pub unsafe extern "C" fn tc_result_pattern_count(
182 | |     mut result: *const tc_result,
183 | | ) -> libc::c_int {
184 | |     return (*result).pattern_count;
185 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/templates/candles.rs:184:5
    |
184 |     return (*result).pattern_count;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `(*result).pattern_count`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/templates/candles.rs:187:1
    |
187 | / pub unsafe extern "C" fn tc_result_get(
188 | |     mut result: *const tc_result,
189 | |     mut index: libc::c_int,
190 | | ) -> tc_hit {
...   |
201 | |     return hit;
202 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/templates/candles.rs:201:5
    |
201 |     return hit;
    |     ^^^^^^^^^^^ help: remove `return`: `hit`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: returning the result of a `let` binding from a block
   --> src/templates/candles.rs:199:9
    |
195 | /         let mut init = tc_hit {
196 | |             index: 0 as libc::c_int,
197 | |             patterns: 0,
198 | |         };
    | |__________- unnecessary `let` binding
199 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
195 ~         
196 ~         tc_hit {
197 +             index: 0 as libc::c_int,
198 +             patterns: 0,
199 +         }
    |

warning: unsafe function's docs miss `# Safety` section
   --> src/templates/candles.rs:204:1
    |
204 | / pub unsafe extern "C" fn tc_result_at(
205 | |     mut result: *const tc_result,
206 | |     mut index: libc::c_int,
207 | | ) -> tc_set {
...   |
279 | |     return 0 as libc::c_int as tc_set;
280 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/templates/candles.rs:279:5
    |
279 |     return 0 as libc::c_int as tc_set;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int as tc_set`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unnecessary operation
   --> src/templates/candles.rs:228:9
    |
228 | /         'c_3279: {
229 | |             if i >= 0 as libc::c_int {} else {
230 | |                 __assert_fail(
231 | |                     b"i >= 0\0" as *const u8 as *const libc::c_char,
...   |
241 | |             }
242 | |         };
    | |__________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_operation
help: statement can be reduced to
    |
228 ~         if i >= 0 as libc::c_int {} else {
229 +                 __assert_fail(
230 +                     b"i >= 0\0" as *const u8 as *const libc::c_char,
231 +                     b"/mnt/c/Users/mazin/Downloads/School/Research/datasets/tulipindicators/templates/candles.c\0"
232 +                         as *const u8 as *const libc::c_char,
233 +                     180 as libc::c_int as libc::c_uint,
234 +                     (*::core::mem::transmute::<
235 +                         &[u8; 44],
236 +                         &[libc::c_char; 44],
237 +                     >(b"tc_set tc_result_at(const tc_result *, int)\0"))
238 +                         .as_ptr(),
239 +                 );
240 +             };
    |

warning: unnecessary operation
   --> src/templates/candles.rs:256:9
    |
256 | /         'c_3232: {
257 | |             if i < (*result).count {} else {
258 | |                 __assert_fail(
259 | |                     b"i < result->count\0" as *const u8 as *const libc::c_char,
...   |
269 | |             }
270 | |         };
    | |__________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_operation
help: statement can be reduced to
    |
256 ~         if i < (*result).count {} else {
257 +                 __assert_fail(
258 +                     b"i < result->count\0" as *const u8 as *const libc::c_char,
259 +                     b"/mnt/c/Users/mazin/Downloads/School/Research/datasets/tulipindicators/templates/candles.c\0"
260 +                         as *const u8 as *const libc::c_char,
261 +                     181 as libc::c_int as libc::c_uint,
262 +                     (*::core::mem::transmute::<
263 +                         &[u8; 44],
264 +                         &[libc::c_char; 44],
265 +                     >(b"tc_set tc_result_at(const tc_result *, int)\0"))
266 +                         .as_ptr(),
267 +                 );
268 +             };
    |

warning: `if` chain can be rewritten with `match`
   --> src/templates/candles.rs:271:9
    |
271 | /         if index == (*((*result).hits).offset(i as isize)).index {
272 | |             return (*((*result).hits).offset(i as isize)).patterns
273 | |         } else if index > (*((*result).hits).offset(i as isize)).index {
274 | |             imin = i + 1 as libc::c_int;
275 | |         } else {
276 | |             imax = i - 1 as libc::c_int;
277 | |         }
    | |_________^
    |
    = help: consider rewriting the `if` chain to use `cmp` and `match`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain

warning: unsafe function's docs miss `# Safety` section
   --> src/templates/candles.rs:282:1
    |
282 | / pub unsafe extern "C" fn tc_run(
283 | |     mut patterns: tc_set,
284 | |     mut size: libc::c_int,
285 | |     mut inputs: *const *const TC_REAL,
...   |
343 | |     return 0 as libc::c_int;
344 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/templates/candles.rs:343:5
    |
343 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unnecessary operation
   --> src/templates/candles.rs:290:5
    |
290 | /     patterns & patterns.wrapping_sub(1 as libc::c_int as tc_set)
291 | |         == 0 as libc::c_int as tc_set;
    | |______________________________________^ help: statement can be reduced to: `patterns & patterns.wrapping_sub(1 as libc::c_int as tc_set);0 as libc::c_int as tc_set;`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_operation

warning: statement with no effect
   --> src/templates/candles.rs:312:9
    |
312 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/templates/candles.rs:341:9
    |
341 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/templates/indicators.rs:55:1
   |
55 | / pub unsafe extern "C" fn ti_indicator_count() -> libc::c_int {
56 | |     return 104 as libc::c_int;
57 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/templates/indicators.rs:56:5
   |
56 |     return 104 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `104 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/templates/indicators.rs:59:1
   |
59 | / pub unsafe extern "C" fn ti_stream_run(
60 | |     mut stream: *mut ti_stream,
61 | |     mut size: libc::c_int,
62 | |     mut inputs: *const *const libc::c_double,
...  |
66 | |         .expect("non-null function pointer")(stream, size, inputs, outputs);
67 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/templates/indicators.rs:65:5
   |
65 | /     return ((*ti_indicators.as_mut_ptr().offset((*stream).index as isize)).stream_run)
66 | |         .expect("non-null function pointer")(stream, size, inputs, outputs);
   | |____________________________________________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
65 ~     ((*ti_indicators.as_mut_ptr().offset((*stream).index as isize)).stream_run)
66 +         .expect("non-null function pointer")(stream, size, inputs, outputs)
   |

warning: unsafe function's docs miss `# Safety` section
  --> src/templates/indicators.rs:69:1
   |
69 | / pub unsafe extern "C" fn ti_stream_get_info(
70 | |     mut stream: *mut ti_stream,
71 | | ) -> *mut ti_indicator_info {
72 | |     return ti_indicators.as_mut_ptr().offset((*stream).index as isize);
73 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/templates/indicators.rs:72:5
   |
72 |     return ti_indicators.as_mut_ptr().offset((*stream).index as isize);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `ti_indicators.as_mut_ptr().offset((*stream).index as isize)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/templates/indicators.rs:75:1
   |
75 | / pub unsafe extern "C" fn ti_stream_get_progress(
76 | |     mut stream: *mut ti_stream,
77 | | ) -> libc::c_int {
78 | |     return (*stream).progress;
79 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/templates/indicators.rs:78:5
   |
78 |     return (*stream).progress;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `(*stream).progress`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/templates/indicators.rs:81:1
   |
81 | / pub unsafe extern "C" fn ti_stream_free(mut stream: *mut ti_stream) {
82 | |     ((*ti_indicators.as_mut_ptr().offset((*stream).index as isize)).stream_free)
83 | |         .expect("non-null function pointer")(stream);
84 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/templates/indicators.rs:86:1
    |
86  | / pub unsafe extern "C" fn ti_find_indicator(
87  | |     mut name: *const libc::c_char,
88  | | ) -> *const ti_indicator_info {
89  | |     let mut imin: libc::c_int = 0 as libc::c_int;
...   |
105 | |     return 0 as *const ti_indicator_info;
106 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/templates/indicators.rs:105:5
    |
105 |     return 0 as *const ti_indicator_info;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as *const ti_indicator_info`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `if` chain can be rewritten with `match`
   --> src/templates/indicators.rs:97:9
    |
97  | /         if c == 0 as libc::c_int {
98  | |             return ti_indicators.as_mut_ptr().offset(i as isize)
99  | |         } else if c > 0 as libc::c_int {
100 | |             imin = i + 1 as libc::c_int;
101 | |         } else {
102 | |             imax = i - 1 as libc::c_int;
103 | |         }
    | |_________^
    |
    = help: consider rewriting the `if` chain to use `cmp` and `match`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain

warning: `0 as *const _` detected
   --> src/templates/indicators.rs:105:12
    |
105 |     return 0 as *const ti_indicator_info;
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<ti_indicator_info>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
  --> src/utils/buffer.rs:16:1
   |
16 | / pub unsafe extern "C" fn ti_buffer_new(mut size: libc::c_int) -> *mut ti_buffer {
17 | |     let s: libc::c_int = ::core::mem::size_of::<ti_buffer>() as libc::c_ulong
18 | |         as libc::c_int
19 | |         + (size - 1 as libc::c_int)
...  |
27 | |     return ret;
28 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/utils/buffer.rs:27:5
   |
27 |     return ret;
   |     ^^^^^^^^^^^ help: remove `return`: `ret`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/utils/buffer.rs:30:1
   |
30 | / pub unsafe extern "C" fn ti_buffer_free(mut buffer: *mut ti_buffer) {
31 | |     free(buffer as *mut libc::c_void);
32 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: structure field `_IO_read_ptr` should have a snake case name
  --> src/benchmark.rs:62:9
   |
62 |     pub _IO_read_ptr: *mut libc::c_char,
   |         ^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_read_ptr`
   |
   = note: `#[warn(non_snake_case)]` on by default

warning: structure field `_IO_read_end` should have a snake case name
  --> src/benchmark.rs:63:9
   |
63 |     pub _IO_read_end: *mut libc::c_char,
   |         ^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_read_end`

warning: structure field `_IO_read_base` should have a snake case name
  --> src/benchmark.rs:64:9
   |
64 |     pub _IO_read_base: *mut libc::c_char,
   |         ^^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_read_base`

warning: structure field `_IO_write_base` should have a snake case name
  --> src/benchmark.rs:65:9
   |
65 |     pub _IO_write_base: *mut libc::c_char,
   |         ^^^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_write_base`

warning: structure field `_IO_write_ptr` should have a snake case name
  --> src/benchmark.rs:66:9
   |
66 |     pub _IO_write_ptr: *mut libc::c_char,
   |         ^^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_write_ptr`

warning: structure field `_IO_write_end` should have a snake case name
  --> src/benchmark.rs:67:9
   |
67 |     pub _IO_write_end: *mut libc::c_char,
   |         ^^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_write_end`

warning: structure field `_IO_buf_base` should have a snake case name
  --> src/benchmark.rs:68:9
   |
68 |     pub _IO_buf_base: *mut libc::c_char,
   |         ^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_buf_base`

warning: structure field `_IO_buf_end` should have a snake case name
  --> src/benchmark.rs:69:9
   |
69 |     pub _IO_buf_end: *mut libc::c_char,
   |         ^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_buf_end`

warning: structure field `_IO_save_base` should have a snake case name
  --> src/benchmark.rs:70:9
   |
70 |     pub _IO_save_base: *mut libc::c_char,
   |         ^^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_save_base`

warning: structure field `_IO_backup_base` should have a snake case name
  --> src/benchmark.rs:71:9
   |
71 |     pub _IO_backup_base: *mut libc::c_char,
   |         ^^^^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_backup_base`

warning: structure field `_IO_save_end` should have a snake case name
  --> src/benchmark.rs:72:9
   |
72 |     pub _IO_save_end: *mut libc::c_char,
   |         ^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_save_end`

warning: constant `_ISalnum` should have an upper case name
  --> src/benchmark.rs:95:11
   |
95 | pub const _ISalnum: C2RustUnnamed = 8;
   |           ^^^^^^^^ help: convert the identifier to upper case: `_ISALNUM`
   |
   = note: `#[warn(non_upper_case_globals)]` on by default

warning: constant `_ISpunct` should have an upper case name
  --> src/benchmark.rs:96:11
   |
96 | pub const _ISpunct: C2RustUnnamed = 4;
   |           ^^^^^^^^ help: convert the identifier to upper case: `_ISPUNCT`

warning: constant `_IScntrl` should have an upper case name
  --> src/benchmark.rs:97:11
   |
97 | pub const _IScntrl: C2RustUnnamed = 2;
   |           ^^^^^^^^ help: convert the identifier to upper case: `_ISCNTRL`

warning: constant `_ISblank` should have an upper case name
  --> src/benchmark.rs:98:11
   |
98 | pub const _ISblank: C2RustUnnamed = 1;
   |           ^^^^^^^^ help: convert the identifier to upper case: `_ISBLANK`

warning: constant `_ISgraph` should have an upper case name
  --> src/benchmark.rs:99:11
   |
99 | pub const _ISgraph: C2RustUnnamed = 32768;
   |           ^^^^^^^^ help: convert the identifier to upper case: `_ISGRAPH`

warning: constant `_ISprint` should have an upper case name
   --> src/benchmark.rs:100:11
    |
100 | pub const _ISprint: C2RustUnnamed = 16384;
    |           ^^^^^^^^ help: convert the identifier to upper case: `_ISPRINT`

warning: constant `_ISspace` should have an upper case name
   --> src/benchmark.rs:101:11
    |
101 | pub const _ISspace: C2RustUnnamed = 8192;
    |           ^^^^^^^^ help: convert the identifier to upper case: `_ISSPACE`

warning: constant `_ISxdigit` should have an upper case name
   --> src/benchmark.rs:102:11
    |
102 | pub const _ISxdigit: C2RustUnnamed = 4096;
    |           ^^^^^^^^^ help: convert the identifier to upper case: `_ISXDIGIT`

warning: constant `_ISdigit` should have an upper case name
   --> src/benchmark.rs:103:11
    |
103 | pub const _ISdigit: C2RustUnnamed = 2048;
    |           ^^^^^^^^ help: convert the identifier to upper case: `_ISDIGIT`

warning: constant `_ISalpha` should have an upper case name
   --> src/benchmark.rs:104:11
    |
104 | pub const _ISalpha: C2RustUnnamed = 1024;
    |           ^^^^^^^^ help: convert the identifier to upper case: `_ISALPHA`

warning: constant `_ISlower` should have an upper case name
   --> src/benchmark.rs:105:11
    |
105 | pub const _ISlower: C2RustUnnamed = 512;
    |           ^^^^^^^^ help: convert the identifier to upper case: `_ISLOWER`

warning: constant `_ISupper` should have an upper case name
   --> src/benchmark.rs:106:11
    |
106 | pub const _ISupper: C2RustUnnamed = 256;
    |           ^^^^^^^^ help: convert the identifier to upper case: `_ISUPPER`

warning: static variable `in_0` should have an upper case name
   --> src/benchmark.rs:199:16
    |
199 | pub static mut in_0: [[libc::c_double; 4000]; 5] = [[0.; 4000]; 5];
    |                ^^^^ help: convert the identifier to upper case: `IN_0`

warning: path statement with no effect
   --> src/benchmark.rs:381:9
    |
381 |         i;
    |         ^^
    |
    = note: `#[warn(path_statements)]` on by default

warning: path statement with no effect
   --> src/benchmark.rs:435:9
    |
435 |         j;
    |         ^^

warning: static variable `outputs` should have an upper case name
   --> src/benchmark.rs:438:12
    |
438 | static mut outputs: [*mut libc::c_double; 5] = [0 as *const libc::c_double
    |            ^^^^^^^ help: convert the identifier to upper case: `OUTPUTS`

warning: static variable `inputs` should have an upper case name
   --> src/benchmark.rs:446:16
    |
446 |     static mut inputs: [*mut libc::c_double; 5] = [
    |                ^^^^^^ help: convert the identifier to upper case: `INPUTS`

warning: path statement with no effect
   --> src/benchmark.rs:476:17
    |
476 |                 i;
    |                 ^^

warning: static variable `outputs_0` should have an upper case name
   --> src/benchmark.rs:498:12
    |
498 | static mut outputs_0: [*mut libc::c_double; 5] = [0 as *const libc::c_double
    |            ^^^^^^^^^ help: convert the identifier to upper case: `OUTPUTS_0`

warning: static variable `inputs` should have an upper case name
   --> src/benchmark.rs:506:16
    |
506 |     static mut inputs: [*mut libc::c_double; 5] = [
    |                ^^^^^^ help: convert the identifier to upper case: `INPUTS`

warning: path statement with no effect
   --> src/benchmark.rs:536:17
    |
536 |                 i;
    |                 ^^

warning: static variable `outputs_1` should have an upper case name
   --> src/benchmark.rs:558:12
    |
558 | static mut outputs_1: [*mut libc::c_double; 5] = [0 as *const libc::c_double
    |            ^^^^^^^^^ help: convert the identifier to upper case: `OUTPUTS_1`

warning: static variable `inputs` should have an upper case name
   --> src/benchmark.rs:566:16
    |
566 |     static mut inputs: [*mut libc::c_double; 5] = [
    |                ^^^^^^ help: convert the identifier to upper case: `INPUTS`

warning: path statement with no effect
   --> src/benchmark.rs:627:17
    |
627 |                 j;
    |                 ^^

warning: path statement with no effect
   --> src/benchmark.rs:645:17
    |
645 |                 j_0;
    |                 ^^^^

warning: path statement with no effect
   --> src/benchmark.rs:667:21
    |
667 |                     j_1;
    |                     ^^^^

warning: path statement with no effect
   --> src/benchmark.rs:672:13
    |
672 |             i;
    |             ^^

warning: static variable `outputs_2` should have an upper case name
   --> src/benchmark.rs:693:12
    |
693 | static mut outputs_2: [*mut libc::c_double; 5] = [0 as *const libc::c_double
    |            ^^^^^^^^^ help: convert the identifier to upper case: `OUTPUTS_2`

warning: static variable `inputs` should have an upper case name
   --> src/benchmark.rs:701:16
    |
701 |     static mut inputs: [*mut libc::c_double; 5] = [
    |                ^^^^^^ help: convert the identifier to upper case: `INPUTS`

warning: path statement with no effect
   --> src/benchmark.rs:759:17
    |
759 |                 i;
    |                 ^^

warning: path statement with no effect
   --> src/benchmark.rs:860:9
    |
860 |         i;
    |         ^^

warning: path statement with no effect
    --> src/benchmark.rs:1077:21
     |
1077 |                     fails;
     |                     ^^^^^^

warning: path statement with no effect
    --> src/benchmark.rs:1096:21
     |
1096 |                     i;
     |                     ^^

warning: path statement with no effect
    --> src/benchmark.rs:1101:9
     |
1101 |         j;
     |         ^^

warning: path statement with no effect
    --> src/benchmark.rs:1453:17
     |
1453 |                 iterations;
     |                 ^^^^^^^^^^^

warning: path statement with no effect
    --> src/benchmark.rs:1455:17
     |
1455 |                 period;
     |                 ^^^^^^^

warning: path statement with no effect
    --> src/benchmark.rs:1458:13
     |
1458 |             i;
     |             ^^

warning: path statement with no effect
    --> src/benchmark.rs:1487:9
     |
1487 |         best;
     |         ^^^^^

warning: path statement with no effect
    --> src/benchmark.rs:1529:9
     |
1529 |         i;
     |         ^^

warning: path statement with no effect
    --> src/benchmark.rs:1679:17
     |
1679 |                 iterations;
     |                 ^^^^^^^^^^^

warning: path statement with no effect
    --> src/benchmark.rs:1681:17
     |
1681 |                 period;
     |                 ^^^^^^^

warning: path statement with no effect
    --> src/benchmark.rs:1684:13
     |
1684 |             i;
     |             ^^

warning: path statement with no effect
    --> src/benchmark.rs:1705:9
     |
1705 |         best;
     |         ^^^^^

warning: structure field `_IO_read_ptr` should have a snake case name
  --> src/cli.rs:72:9
   |
72 |     pub _IO_read_ptr: *mut libc::c_char,
   |         ^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_read_ptr`

warning: structure field `_IO_read_end` should have a snake case name
  --> src/cli.rs:73:9
   |
73 |     pub _IO_read_end: *mut libc::c_char,
   |         ^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_read_end`

warning: structure field `_IO_read_base` should have a snake case name
  --> src/cli.rs:74:9
   |
74 |     pub _IO_read_base: *mut libc::c_char,
   |         ^^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_read_base`

warning: structure field `_IO_write_base` should have a snake case name
  --> src/cli.rs:75:9
   |
75 |     pub _IO_write_base: *mut libc::c_char,
   |         ^^^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_write_base`

warning: structure field `_IO_write_ptr` should have a snake case name
  --> src/cli.rs:76:9
   |
76 |     pub _IO_write_ptr: *mut libc::c_char,
   |         ^^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_write_ptr`

warning: structure field `_IO_write_end` should have a snake case name
  --> src/cli.rs:77:9
   |
77 |     pub _IO_write_end: *mut libc::c_char,
   |         ^^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_write_end`

warning: structure field `_IO_buf_base` should have a snake case name
  --> src/cli.rs:78:9
   |
78 |     pub _IO_buf_base: *mut libc::c_char,
   |         ^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_buf_base`

warning: structure field `_IO_buf_end` should have a snake case name
  --> src/cli.rs:79:9
   |
79 |     pub _IO_buf_end: *mut libc::c_char,
   |         ^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_buf_end`

warning: structure field `_IO_save_base` should have a snake case name
  --> src/cli.rs:80:9
   |
80 |     pub _IO_save_base: *mut libc::c_char,
   |         ^^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_save_base`

warning: structure field `_IO_backup_base` should have a snake case name
  --> src/cli.rs:81:9
   |
81 |     pub _IO_backup_base: *mut libc::c_char,
   |         ^^^^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_backup_base`

warning: structure field `_IO_save_end` should have a snake case name
  --> src/cli.rs:82:9
   |
82 |     pub _IO_save_end: *mut libc::c_char,
   |         ^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_save_end`

warning: static variable `buf` should have an upper case name
   --> src/cli.rs:109:16
    |
109 |     static mut buf: [libc::c_char; 131072] = [0; 131072];
    |                ^^^ help: convert the identifier to upper case: `BUF`

warning: path statement with no effect
   --> src/cli.rs:144:9
    |
144 |         inp;
    |         ^^^^

warning: path statement with no effect
   --> src/cli.rs:192:13
    |
192 |             o;
    |             ^^

warning: path statement with no effect
   --> src/cli.rs:262:9
    |
262 |         i;
    |         ^^

warning: path statement with no effect
   --> src/cli.rs:273:9
    |
273 |         i;
    |         ^^

warning: path statement with no effect
   --> src/cli.rs:322:13
    |
322 |             j;
    |             ^^

warning: path statement with no effect
   --> src/cli.rs:326:9
    |
326 |         i;
    |         ^^

warning: path statement with no effect
   --> src/cli.rs:333:9
    |
333 |         i;
    |         ^^

warning: path statement with no effect
   --> src/cli.rs:339:9
    |
339 |         i;
    |         ^^

warning: path statement with no effect
   --> src/fuzzer.rs:297:29
    |
297 | ...                   k;
    |                       ^^

warning: path statement with no effect
   --> src/fuzzer.rs:307:29
    |
307 | ...                   k;
    |                       ^^

warning: path statement with no effect
   --> src/fuzzer.rs:322:33
    |
322 | ...                   k;
    |                       ^^

warning: path statement with no effect
   --> src/fuzzer.rs:325:29
    |
325 | ...                   j;
    |                       ^^

warning: path statement with no effect
   --> src/fuzzer.rs:353:13
    |
353 |             i;
    |             ^^

warning: path statement with no effect
   --> src/fuzzer.rs:356:9
    |
356 |         o;
    |         ^^

warning: path statement with no effect
   --> src/fuzzer.rs:444:9
    |
444 |         i;
    |         ^^

warning: path statement with no effect
   --> src/fuzzer.rs:483:9
    |
483 |         count;
    |         ^^^^^^

warning: path statement with no effect
   --> src/fuzzer.rs:489:13
    |
489 |             j;
    |             ^^

warning: path statement with no effect
   --> src/fuzzer.rs:575:25
    |
575 |                         repeat;
    |                         ^^^^^^^

warning: path statement with no effect
   --> src/fuzzer.rs:581:13
    |
581 |             s;
    |             ^^

warning: path statement with no effect
   --> src/fuzzer.rs:725:13
    |
725 |             i;
    |             ^^

warning: path statement with no effect
   --> src/fuzzer.rs:746:13
    |
746 |             i_0;
    |             ^^^^

warning: path statement with no effect
   --> src/fuzzer.rs:778:9
    |
778 |         s;
    |         ^^

warning: path statement with no effect
   --> src/sample.rs:267:17
    |
267 |                 i;
    |                 ^^

warning: path statement with no effect
   --> src/sample.rs:283:17
    |
283 |                 i;
    |                 ^^

warning: path statement with no effect
   --> src/sample.rs:299:17
    |
299 |                 i;
    |                 ^^

warning: path statement with no effect
   --> src/sample.rs:405:9
    |
405 |         j;
    |         ^^

warning: path statement with no effect
   --> src/sample.rs:426:17
    |
426 |                 j;
    |                 ^^

warning: path statement with no effect
   --> src/sample.rs:431:13
    |
431 |             alt;
    |             ^^^^

warning: path statement with no effect
   --> src/sample.rs:449:17
    |
449 |                 k;
    |                 ^^

warning: path statement with no effect
   --> src/sample.rs:456:9
    |
456 |         i_0;
    |         ^^^^

warning: path statement with no effect
   --> src/sample.rs:505:13
    |
505 |             i_1;
    |             ^^^^

warning: path statement with no effect
   --> src/sample.rs:572:21
    |
572 |                     k_0;
    |                     ^^^^

warning: path statement with no effect
   --> src/sample.rs:577:13
    |
577 |             i_1;
    |             ^^^^

warning: path statement with no effect
   --> src/sample.rs:597:17
    |
597 |                 i_2;
    |                 ^^^^

warning: static variable `default_config` should have an upper case name
  --> src/candles.rs:85:16
   |
85 |     static mut default_config: tc_config = {
   |                ^^^^^^^^^^^^^^ help: convert the identifier to upper case: `DEFAULT_CONFIG`

warning: path statement with no effect
   --> src/candles.rs:860:9
    |
860 |         i;
    |         ^^

warning: path statement with no effect
    --> src/candles.rs:1645:9
     |
1645 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:1676:9
     |
1676 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:1735:9
     |
1735 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:1766:9
     |
1766 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:1825:9
     |
1825 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:1856:9
     |
1856 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:1901:9
     |
1901 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:1932:9
     |
1932 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:1977:9
     |
1977 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:2008:9
     |
2008 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:2055:9
     |
2055 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:2086:9
     |
2086 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:2130:9
     |
2130 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:2161:9
     |
2161 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:2207:9
     |
2207 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:2238:9
     |
2238 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:2285:9
     |
2285 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:2316:9
     |
2316 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:2363:9
     |
2363 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:2394:9
     |
2394 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:2476:9
     |
2476 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:2507:9
     |
2507 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:2589:9
     |
2589 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:2620:9
     |
2620 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:2666:9
     |
2666 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:2697:9
     |
2697 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:2743:9
     |
2743 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:2774:9
     |
2774 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:2828:9
     |
2828 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:2859:9
     |
2859 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:2913:9
     |
2913 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:2944:9
     |
2944 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:3003:9
     |
3003 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:3034:9
     |
3034 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:3080:9
     |
3080 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:3111:9
     |
3111 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:3157:9
     |
3157 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:3188:9
     |
3188 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:3270:9
     |
3270 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:3301:9
     |
3301 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:3383:9
     |
3383 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:3414:9
     |
3414 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:3473:9
     |
3473 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:3504:9
     |
3504 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:3552:9
     |
3552 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:3583:9
     |
3583 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:3629:9
     |
3629 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:3660:9
     |
3660 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:3742:9
     |
3742 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:3773:9
     |
3773 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:3855:9
     |
3855 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:3886:9
     |
3886 |         i;
     |         ^^

warning: path statement with no effect
    --> src/candles.rs:3933:9
     |
3933 |         i;
     |         ^^

warning: path statement with no effect
  --> src/example1.rs:29:9
   |
29 |         i;
   |         ^^

warning: path statement with no effect
  --> src/example2.rs:83:13
   |
83 |             i;
   |             ^^

warning: path statement with no effect
  --> src/example2.rs:99:13
   |
99 |             i;
   |             ^^

warning: path statement with no effect
   --> src/example2.rs:115:13
    |
115 |             i;
    |             ^^

warning: path statement with no effect
   --> src/example2.rs:120:9
    |
120 |         info;
    |         ^^^^^

warning: structure field `_IO_read_ptr` should have a snake case name
   --> src/smoke.rs:140:9
    |
140 |     pub _IO_read_ptr: *mut libc::c_char,
    |         ^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_read_ptr`

warning: structure field `_IO_read_end` should have a snake case name
   --> src/smoke.rs:141:9
    |
141 |     pub _IO_read_end: *mut libc::c_char,
    |         ^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_read_end`

warning: structure field `_IO_read_base` should have a snake case name
   --> src/smoke.rs:142:9
    |
142 |     pub _IO_read_base: *mut libc::c_char,
    |         ^^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_read_base`

warning: structure field `_IO_write_base` should have a snake case name
   --> src/smoke.rs:143:9
    |
143 |     pub _IO_write_base: *mut libc::c_char,
    |         ^^^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_write_base`

warning: structure field `_IO_write_ptr` should have a snake case name
   --> src/smoke.rs:144:9
    |
144 |     pub _IO_write_ptr: *mut libc::c_char,
    |         ^^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_write_ptr`

warning: structure field `_IO_write_end` should have a snake case name
   --> src/smoke.rs:145:9
    |
145 |     pub _IO_write_end: *mut libc::c_char,
    |         ^^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_write_end`

warning: structure field `_IO_buf_base` should have a snake case name
   --> src/smoke.rs:146:9
    |
146 |     pub _IO_buf_base: *mut libc::c_char,
    |         ^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_buf_base`

warning: structure field `_IO_buf_end` should have a snake case name
   --> src/smoke.rs:147:9
    |
147 |     pub _IO_buf_end: *mut libc::c_char,
    |         ^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_buf_end`

warning: structure field `_IO_save_base` should have a snake case name
   --> src/smoke.rs:148:9
    |
148 |     pub _IO_save_base: *mut libc::c_char,
    |         ^^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_save_base`

warning: structure field `_IO_backup_base` should have a snake case name
   --> src/smoke.rs:149:9
    |
149 |     pub _IO_backup_base: *mut libc::c_char,
    |         ^^^^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_backup_base`

warning: structure field `_IO_save_end` should have a snake case name
   --> src/smoke.rs:150:9
    |
150 |     pub _IO_save_end: *mut libc::c_char,
    |         ^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_save_end`

warning: static variable `ltests` should have an upper case name
   --> src/smoke.rs:209:12
    |
209 | static mut ltests: libc::c_int = 0 as libc::c_int;
    |            ^^^^^^ help: convert the identifier to upper case: `LTESTS`

warning: static variable `lfails` should have an upper case name
   --> src/smoke.rs:210:12
    |
210 | static mut lfails: libc::c_int = 0 as libc::c_int;
    |            ^^^^^^ help: convert the identifier to upper case: `LFAILS`

warning: path statement with no effect
   --> src/smoke.rs:356:5
    |
356 |     ltests;
    |     ^^^^^^^

warning: path statement with no effect
   --> src/smoke.rs:359:9
    |
359 |         lfails;
    |         ^^^^^^^

warning: path statement with no effect
   --> src/smoke.rs:375:9
    |
375 |         ltests;
    |         ^^^^^^^

warning: path statement with no effect
   --> src/smoke.rs:378:13
    |
378 |             lfails;
    |             ^^^^^^^

warning: path statement with no effect
   --> src/smoke.rs:388:9
    |
388 |         i;
    |         ^^

warning: path statement with no effect
   --> src/smoke.rs:400:13
    |
400 |             i;
    |             ^^

warning: static variable `buf` should have an upper case name
   --> src/smoke.rs:406:16
    |
406 |     static mut buf: [libc::c_char; 4096] = [0; 4096];
    |                ^^^ help: convert the identifier to upper case: `BUF`

warning: path statement with no effect
   --> src/smoke.rs:429:9
    |
429 |         ltests;
    |         ^^^^^^^

warning: path statement with no effect
   --> src/smoke.rs:432:13
    |
432 |             lfails;
    |             ^^^^^^^

warning: path statement with no effect
   --> src/smoke.rs:452:9
    |
452 |         inp;
    |         ^^^^

warning: static variable `buf` should have an upper case name
   --> src/smoke.rs:479:20
    |
479 |         static mut buf: [libc::c_char; 4096] = [0; 4096];
    |                    ^^^ help: convert the identifier to upper case: `BUF`

warning: path statement with no effect
   --> src/smoke.rs:504:9
    |
504 |         o;
    |         ^^

warning: path statement with no effect
   --> src/smoke.rs:507:5
    |
507 |     ltests;
    |     ^^^^^^^

warning: path statement with no effect
   --> src/smoke.rs:512:9
    |
512 |         lfails;
    |         ^^^^^^^

warning: path statement with no effect
   --> src/smoke.rs:586:9
    |
586 |         i;
    |         ^^

warning: path statement with no effect
   --> src/smoke.rs:603:9
    |
603 |         i;
    |         ^^

warning: path statement with no effect
   --> src/smoke.rs:615:5
    |
615 |     ltests;
    |     ^^^^^^^

warning: path statement with no effect
   --> src/smoke.rs:618:9
    |
618 |         lfails;
    |         ^^^^^^^

warning: path statement with no effect
   --> src/smoke.rs:639:9
    |
639 |         i;
    |         ^^

warning: path statement with no effect
   --> src/smoke.rs:651:13
    |
651 |             i;
    |             ^^

warning: path statement with no effect
   --> src/smoke.rs:663:9
    |
663 |         ltests;
    |         ^^^^^^^

warning: path statement with no effect
   --> src/smoke.rs:666:13
    |
666 |             lfails;
    |             ^^^^^^^

warning: path statement with no effect
   --> src/smoke.rs:687:13
    |
687 |             i;
    |             ^^

warning: path statement with no effect
   --> src/smoke.rs:718:17
    |
718 |                 i;
    |                 ^^

warning: path statement with no effect
   --> src/smoke.rs:724:13
    |
724 |             ltests;
    |             ^^^^^^^

warning: path statement with no effect
   --> src/smoke.rs:727:17
    |
727 |                 lfails;
    |                 ^^^^^^^

warning: path statement with no effect
   --> src/smoke.rs:735:13
    |
735 |             ltests;
    |             ^^^^^^^

warning: path statement with no effect
   --> src/smoke.rs:738:17
    |
738 |                 lfails;
    |                 ^^^^^^^

warning: path statement with no effect
   --> src/smoke.rs:787:21
    |
787 |                     i;
    |                     ^^

warning: path statement with no effect
   --> src/smoke.rs:797:21
    |
797 |                     i;
    |                     ^^

warning: path statement with no effect
   --> src/smoke.rs:813:17
    |
813 |                 ltests;
    |                 ^^^^^^^

warning: path statement with no effect
   --> src/smoke.rs:816:21
    |
816 |                     lfails;
    |                     ^^^^^^^

warning: path statement with no effect
   --> src/smoke.rs:832:13
    |
832 |             ltests;
    |             ^^^^^^^

warning: path statement with no effect
   --> src/smoke.rs:835:17
    |
835 |                 lfails;
    |                 ^^^^^^^

warning: path statement with no effect
   --> src/smoke.rs:853:17
    |
853 |                 i;
    |                 ^^

warning: path statement with no effect
   --> src/smoke.rs:857:13
    |
857 |             step_i;
    |             ^^^^^^^

warning: path statement with no effect
   --> src/smoke.rs:864:9
    |
864 |         i;
    |         ^^

warning: path statement with no effect
   --> src/smoke.rs:870:9
    |
870 |         i;
    |         ^^

warning: path statement with no effect
   --> src/smoke.rs:876:9
    |
876 |         i;
    |         ^^

warning: path statement with no effect
   --> src/smoke.rs:909:9
    |
909 |         i;
    |         ^^

warning: static variable `buf` should have an upper case name
   --> src/smoke.rs:930:16
    |
930 |     static mut buf: [libc::c_char; 4096] = [0; 4096];
    |                ^^^ help: convert the identifier to upper case: `BUF`

warning: path statement with no effect
   --> src/smoke.rs:947:13
    |
947 |             name;
    |             ^^^^^

warning: path statement with no effect
   --> src/smoke.rs:951:9
    |
951 |         ltests;
    |         ^^^^^^^

warning: path statement with no effect
   --> src/smoke.rs:954:13
    |
954 |             lfails;
    |             ^^^^^^^

warning: path statement with no effect
   --> src/smoke.rs:973:17
    |
973 |                 ltests;
    |                 ^^^^^^^

warning: path statement with no effect
   --> src/smoke.rs:976:21
    |
976 |                     lfails;
    |                     ^^^^^^^

warning: path statement with no effect
   --> src/smoke.rs:985:17
    |
985 |                 ltests;
    |                 ^^^^^^^

warning: path statement with no effect
   --> src/smoke.rs:988:21
    |
988 |                     lfails;
    |                     ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1015:9
     |
1015 |         ltests;
     |         ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1018:13
     |
1018 |             lfails;
     |             ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1037:13
     |
1037 |             ltests;
     |             ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1040:17
     |
1040 |                 lfails;
     |                 ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1088:5
     |
1088 |     ltests;
     |     ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1093:9
     |
1093 |         lfails;
     |         ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1101:5
     |
1101 |     ltests;
     |     ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1104:9
     |
1104 |         lfails;
     |         ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1112:5
     |
1112 |     ltests;
     |     ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1115:9
     |
1115 |         lfails;
     |         ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1123:5
     |
1123 |     ltests;
     |     ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1128:9
     |
1128 |         lfails;
     |         ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1136:5
     |
1136 |     ltests;
     |     ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1139:9
     |
1139 |         lfails;
     |         ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1147:5
     |
1147 |     ltests;
     |     ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1150:9
     |
1150 |         lfails;
     |         ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1158:5
     |
1158 |     ltests;
     |     ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1165:9
     |
1165 |         lfails;
     |         ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1173:5
     |
1173 |     ltests;
     |     ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1176:5
     |
1176 |     lfails;
     |     ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1200:5
     |
1200 |     ltests;
     |     ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1203:9
     |
1203 |         lfails;
     |         ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1223:5
     |
1223 |     ltests;
     |     ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1226:9
     |
1226 |         lfails;
     |         ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1246:5
     |
1246 |     ltests;
     |     ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1249:9
     |
1249 |         lfails;
     |         ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1269:5
     |
1269 |     ltests;
     |     ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1272:9
     |
1272 |         lfails;
     |         ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1292:5
     |
1292 |     ltests;
     |     ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1295:9
     |
1295 |         lfails;
     |         ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1315:5
     |
1315 |     ltests;
     |     ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1318:9
     |
1318 |         lfails;
     |         ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1338:5
     |
1338 |     ltests;
     |     ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1341:9
     |
1341 |         lfails;
     |         ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1361:5
     |
1361 |     ltests;
     |     ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1364:9
     |
1364 |         lfails;
     |         ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1374:5
     |
1374 |     ltests;
     |     ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1385:9
     |
1385 |         lfails;
     |         ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1400:5
     |
1400 |     ltests;
     |     ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1411:9
     |
1411 |         lfails;
     |         ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1426:5
     |
1426 |     ltests;
     |     ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1437:9
     |
1437 |         lfails;
     |         ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1452:5
     |
1452 |     ltests;
     |     ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1463:9
     |
1463 |         lfails;
     |         ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1507:5
     |
1507 |     ltests;
     |     ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1516:9
     |
1516 |         lfails;
     |         ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1552:5
     |
1552 |     ltests;
     |     ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1555:9
     |
1555 |         lfails;
     |         ^^^^^^^

warning: path statement with no effect
    --> src/smoke.rs:1625:9
     |
1625 |         i;
     |         ^^

warning: path statement with no effect
    --> src/smoke.rs:1636:9
     |
1636 |         i_0;
     |         ^^^^

warning: path statement with no effect
   --> src/tiamalgamation.rs:185:9
    |
185 |         i;
    |         ^^

warning: path statement with no effect
   --> src/tiamalgamation.rs:209:9
    |
209 |         i;
    |         ^^

warning: path statement with no effect
   --> src/tiamalgamation.rs:242:9
    |
242 |         i;
    |         ^^

warning: path statement with no effect
   --> src/tiamalgamation.rs:267:9
    |
267 |         i;
    |         ^^

warning: path statement with no effect
   --> src/tiamalgamation.rs:333:9
    |
333 |         i;
    |         ^^

warning: path statement with no effect
   --> src/tiamalgamation.rs:403:9
    |
403 |         i;
    |         ^^

warning: path statement with no effect
   --> src/tiamalgamation.rs:450:9
    |
450 |         i;
    |         ^^

warning: path statement with no effect
   --> src/tiamalgamation.rs:520:9
    |
520 |         i;
    |         ^^

warning: path statement with no effect
   --> src/tiamalgamation.rs:585:9
    |
585 |         i;
    |         ^^

warning: path statement with no effect
   --> src/tiamalgamation.rs:639:9
    |
639 |         i;
    |         ^^

warning: path statement with no effect
   --> src/tiamalgamation.rs:662:9
    |
662 |         i;
    |         ^^

warning: path statement with no effect
   --> src/tiamalgamation.rs:730:9
    |
730 |         i;
    |         ^^

warning: path statement with no effect
   --> src/tiamalgamation.rs:833:9
    |
833 |         i;
    |         ^^

warning: path statement with no effect
   --> src/tiamalgamation.rs:835:9
    |
835 |         trail;
    |         ^^^^^^

warning: path statement with no effect
   --> src/tiamalgamation.rs:950:9
    |
950 |         i;
    |         ^^

warning: path statement with no effect
   --> src/tiamalgamation.rs:952:9
    |
952 |         trail;
    |         ^^^^^^

warning: path statement with no effect
   --> src/tiamalgamation.rs:993:9
    |
993 |         i;
    |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:1017:9
     |
1017 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:1069:9
     |
1069 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:1095:9
     |
1095 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:1222:13
     |
1222 |             i;
     |             ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:1246:13
     |
1246 |             i;
     |             ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:1283:13
     |
1283 |             i;
     |             ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:1320:9
     |
1320 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:1358:9
     |
1358 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:1369:5
     |
1369 |     middle;
     |     ^^^^^^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:1387:9
     |
1387 |         middle;
     |         ^^^^^^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:1389:9
     |
1389 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:1475:9
     |
1475 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:1529:17
     |
1529 |                 j;
     |                 ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:1539:9
     |
1539 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:1581:9
     |
1581 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:1631:9
     |
1631 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:1680:9
     |
1680 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:1721:9
     |
1721 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:1745:9
     |
1745 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:1778:9
     |
1778 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:1808:9
     |
1808 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:1851:9
     |
1851 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:1868:9
     |
1868 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:1922:9
     |
1922 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:1966:17
     |
1966 |                 output;
     |                 ^^^^^^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:1970:9
     |
1970 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:2054:9
     |
2054 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:2102:9
     |
2102 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:2161:9
     |
2161 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:2211:9
     |
2211 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:2244:9
     |
2244 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:2312:9
     |
2312 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:2325:9
     |
2325 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:2391:9
     |
2391 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:2429:9
     |
2429 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:2482:9
     |
2482 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:2522:9
     |
2522 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:2577:9
     |
2577 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:2618:9
     |
2618 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:2723:9
     |
2723 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:2725:9
     |
2725 |         trail;
     |         ^^^^^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:2783:9
     |
2783 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:2823:9
     |
2823 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:2844:9
     |
2844 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:2916:9
     |
2916 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:2955:9
     |
2955 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:3013:9
     |
3013 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:3050:9
     |
3050 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:3147:9
     |
3147 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:3197:9
     |
3197 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:3253:9
     |
3253 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:3270:9
     |
3270 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:3326:9
     |
3326 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:3343:9
     |
3343 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:3398:9
     |
3398 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:3414:9
     |
3414 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:3453:9
     |
3453 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:3477:9
     |
3477 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:3556:9
     |
3556 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:3639:9
     |
3639 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:3722:9
     |
3722 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:3797:9
     |
3797 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:3799:9
     |
3799 |         trail;
     |         ^^^^^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:3848:13
     |
3848 |             j;
     |             ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:3854:9
     |
3854 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:3896:17
     |
3896 |                 j;
     |                 ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:3903:9
     |
3903 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:3948:9
     |
3948 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:4062:9
     |
4062 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:4138:9
     |
4138 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:4140:9
     |
4140 |         trail;
     |         ^^^^^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:4189:13
     |
4189 |             j;
     |             ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:4195:9
     |
4195 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:4245:9
     |
4245 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:4307:13
     |
4307 |             j;
     |             ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:4336:9
     |
4336 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:4395:9
     |
4395 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:4447:9
     |
4447 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:4475:9
     |
4475 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:4532:9
     |
4532 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:4587:9
     |
4587 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:4638:9
     |
4638 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:4762:9
     |
4762 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:4819:9
     |
4819 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:4870:9
     |
4870 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:4885:9
     |
4885 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:4936:9
     |
4936 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:4986:9
     |
4986 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:5027:9
     |
5027 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:5076:9
     |
5076 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:5105:9
     |
5105 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:5146:9
     |
5146 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:5170:9
     |
5170 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:5203:9
     |
5203 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:5216:9
     |
5216 |         i;
     |         ^^

warning: unused comparison that must be used
    --> src/tiamalgamation.rs:5282:5
     |
5282 |     progress == -period + 1 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the comparison produces a value
     |
     = note: `#[warn(unused_must_use)]` on by default
help: use `let _ = ...` to ignore the resulting value
     |
5282 |     let _ = progress == -period + 1 as libc::c_int;
     |     +++++++

warning: path statement with no effect
    --> src/tiamalgamation.rs:5287:9
     |
5287 |         buffer_idx;
     |         ^^^^^^^^^^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:5292:9
     |
5292 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:5294:9
     |
5294 |         progress;
     |         ^^^^^^^^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:5303:9
     |
5303 |         buffer_idx;
     |         ^^^^^^^^^^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:5315:9
     |
5315 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:5317:9
     |
5317 |         progress;
     |         ^^^^^^^^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:5348:9
     |
5348 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:5383:9
     |
5383 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:5408:9
     |
5408 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:5461:9
     |
5461 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:5486:9
     |
5486 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:5559:13
     |
5559 |             trail;
     |             ^^^^^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:5645:9
     |
5645 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:5732:9
     |
5732 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:5785:17
     |
5785 |                 j;
     |                 ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:5803:17
     |
5803 |                 j_0;
     |                 ^^^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:5824:9
     |
5824 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:5867:9
     |
5867 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:5899:9
     |
5899 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:5912:9
     |
5912 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:5953:9
     |
5953 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:5977:9
     |
5977 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:6028:21
     |
6028 |                     output;
     |                     ^^^^^^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:6033:9
     |
6033 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:6077:9
     |
6077 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:6104:9
     |
6104 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:6147:9
     |
6147 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:6205:13
     |
6205 |             w;
     |             ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:6209:13
     |
6209 |             w;
     |             ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:6212:9
     |
6212 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:6238:9
     |
6238 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:6317:9
     |
6317 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:6329:9
     |
6329 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:6373:9
     |
6373 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:6412:9
     |
6412 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:6429:9
     |
6429 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:6476:9
     |
6476 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:6599:9
     |
6599 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:6653:9
     |
6653 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:6670:9
     |
6670 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:6730:9
     |
6730 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:6788:9
     |
6788 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:6790:9
     |
6790 |         trail;
     |         ^^^^^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:6862:9
     |
6862 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:6916:9
     |
6916 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:6971:9
     |
6971 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:6990:9
     |
6990 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:7051:9
     |
7051 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:7070:9
     |
7070 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:7122:9
     |
7122 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:7139:9
     |
7139 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:7208:9
     |
7208 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:7255:9
     |
7255 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:7288:9
     |
7288 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:7301:9
     |
7301 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:7407:9
     |
7407 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:7409:9
     |
7409 |         trail;
     |         ^^^^^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:7463:9
     |
7463 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:7475:9
     |
7475 |         i;
     |         ^^

warning: path statement with no effect
    --> src/tiamalgamation.rs:7536:9
     |
7536 |         i;
     |         ^^

warning: static variable `default_config` should have an upper case name
     --> src/tiamalgamation.rs:16354:16
      |
16354 |     static mut default_config: tc_config = {
      |                ^^^^^^^^^^^^^^ help: convert the identifier to upper case: `DEFAULT_CONFIG`

warning: path statement with no effect
     --> src/tiamalgamation.rs:17129:9
      |
17129 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:17914:9
      |
17914 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:17945:9
      |
17945 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:18004:9
      |
18004 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:18035:9
      |
18035 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:18094:9
      |
18094 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:18125:9
      |
18125 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:18170:9
      |
18170 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:18201:9
      |
18201 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:18246:9
      |
18246 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:18277:9
      |
18277 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:18324:9
      |
18324 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:18355:9
      |
18355 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:18399:9
      |
18399 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:18430:9
      |
18430 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:18476:9
      |
18476 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:18507:9
      |
18507 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:18554:9
      |
18554 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:18585:9
      |
18585 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:18632:9
      |
18632 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:18663:9
      |
18663 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:18745:9
      |
18745 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:18776:9
      |
18776 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:18858:9
      |
18858 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:18889:9
      |
18889 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:18935:9
      |
18935 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:18966:9
      |
18966 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:19012:9
      |
19012 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:19043:9
      |
19043 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:19097:9
      |
19097 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:19128:9
      |
19128 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:19182:9
      |
19182 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:19213:9
      |
19213 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:19272:9
      |
19272 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:19303:9
      |
19303 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:19349:9
      |
19349 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:19380:9
      |
19380 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:19426:9
      |
19426 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:19457:9
      |
19457 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:19539:9
      |
19539 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:19570:9
      |
19570 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:19652:9
      |
19652 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:19683:9
      |
19683 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:19742:9
      |
19742 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:19773:9
      |
19773 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:19821:9
      |
19821 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:19852:9
      |
19852 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:19898:9
      |
19898 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:19929:9
      |
19929 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:20011:9
      |
20011 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:20042:9
      |
20042 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:20124:9
      |
20124 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:20155:9
      |
20155 |         i;
      |         ^^

warning: path statement with no effect
     --> src/tiamalgamation.rs:20202:9
      |
20202 |         i;
      |         ^^

warning: path statement with no effect
  --> src/beta/abands.rs:94:9
   |
94 |         i;
   |         ^^

warning: path statement with no effect
   --> src/beta/abands.rs:156:9
    |
156 |         i_0;
    |         ^^^^

warning: path statement with no effect
   --> src/beta/abands.rs:245:13
    |
245 |             j;
    |             ^^

warning: path statement with no effect
   --> src/beta/abands.rs:257:9
    |
257 |         i;
    |         ^^

warning: path statement with no effect
  --> src/beta/alma.rs:79:9
   |
79 |         i;
   |         ^^

warning: path statement with no effect
  --> src/beta/alma.rs:85:9
   |
85 |         i;
   |         ^^

warning: path statement with no effect
  --> src/beta/alma.rs:96:13
   |
96 |             j;
   |             ^^

warning: path statement with no effect
   --> src/beta/alma.rs:102:9
    |
102 |         i;
    |         ^^

warning: structure field `LP_HP` should have a snake case name
  --> src/beta/ce.rs:49:9
   |
49 |     pub LP_HP: ti_ringbuffer_minmax,
   |         ^^^^^ help: convert the identifier to snake case: `lp_hp`

warning: variable `HP` should have a snake case name
  --> src/beta/ce.rs:80:13
   |
80 |     let mut HP: libc::c_double = *high.offset(0 as libc::c_int as isize);
   |             ^^ help: convert the identifier to snake case: `hp`

warning: variable `HP_idx` should have a snake case name
  --> src/beta/ce.rs:81:13
   |
81 |     let mut HP_idx: libc::c_int = 0 as libc::c_int;
   |             ^^^^^^ help: convert the identifier to snake case: `hp_idx`

warning: variable `LP` should have a snake case name
  --> src/beta/ce.rs:82:13
   |
82 |     let mut LP: libc::c_double = *low.offset(0 as libc::c_int as isize);
   |             ^^ help: convert the identifier to snake case: `lp`

warning: variable `LP_idx` should have a snake case name
  --> src/beta/ce.rs:83:13
   |
83 |     let mut LP_idx: libc::c_int = 0 as libc::c_int;
   |             ^^^^^^ help: convert the identifier to snake case: `lp_idx`

warning: path statement with no effect
  --> src/beta/ce.rs:99:9
   |
99 |         i;
   |         ^^

warning: path statement with no effect
   --> src/beta/ce.rs:131:17
    |
131 |                 j;
    |                 ^^

warning: path statement with no effect
   --> src/beta/ce.rs:150:17
    |
150 |                 j_0;
    |                 ^^^^

warning: path statement with no effect
   --> src/beta/ce.rs:160:9
    |
160 |         i;
    |         ^^

warning: variable `HP` should have a snake case name
   --> src/beta/ce.rs:200:17
    |
200 |         let mut HP: libc::c_double = *max.offset(i as isize);
    |                 ^^ help: convert the identifier to snake case: `hp`

warning: variable `LP` should have a snake case name
   --> src/beta/ce.rs:204:17
    |
204 |         let mut LP: libc::c_double = *min.offset(i as isize);
    |                 ^^ help: convert the identifier to snake case: `lp`

warning: path statement with no effect
   --> src/beta/ce.rs:209:9
    |
209 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/ce.rs:260:9
    |
260 |         i;
    |         ^^

warning: variable `LP_HP` should have a snake case name
   --> src/beta/ce.rs:286:13
    |
286 |     let mut LP_HP: *mut ti_ringbuffer_minmax = &mut (*stream).LP_HP;
    |             ^^^^^ help: convert the identifier to snake case: `lp_hp`

warning: variable `LP` should have a snake case name
   --> src/beta/ce.rs:290:13
    |
290 |     let mut LP: libc::c_double = 0.;
    |             ^^ help: convert the identifier to snake case: `lp`

warning: variable `HP` should have a snake case name
   --> src/beta/ce.rs:291:13
    |
291 |     let mut HP: libc::c_double = 0.;
    |             ^^ help: convert the identifier to snake case: `hp`

warning: path statement with no effect
   --> src/beta/ce.rs:327:17
    |
327 |                 j;
    |                 ^^

warning: path statement with no effect
   --> src/beta/ce.rs:350:17
    |
350 |                 j_0;
    |                 ^^^^

warning: path statement with no effect
   --> src/beta/ce.rs:358:9
    |
358 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/ce.rs:360:9
    |
360 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/ce.rs:412:17
    |
412 |                 j_1;
    |                 ^^^^

warning: path statement with no effect
   --> src/beta/ce.rs:435:17
    |
435 |                 j_2;
    |                 ^^^^

warning: path statement with no effect
   --> src/beta/ce.rs:443:9
    |
443 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/ce.rs:445:9
    |
445 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/ce.rs:509:17
    |
509 |                 j_3;
    |                 ^^^^

warning: path statement with no effect
   --> src/beta/ce.rs:532:17
    |
532 |                 j_4;
    |                 ^^^^

warning: path statement with no effect
   --> src/beta/ce.rs:552:9
    |
552 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/ce.rs:554:9
    |
554 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
  --> src/beta/cmf.rs:54:9
   |
54 |         i;
   |         ^^

warning: path statement with no effect
  --> src/beta/cmf.rs:87:9
   |
87 |         i;
   |         ^^

warning: path statement with no effect
   --> src/beta/copp.rs:116:9
    |
116 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/copp.rs:179:9
    |
179 |         i_0;
    |         ^^^^

warning: path statement with no effect
   --> src/beta/copp.rs:253:9
    |
253 |         i_0;
    |         ^^^^

warning: path statement with no effect
   --> src/beta/copp.rs:345:9
    |
345 |         i_0;
    |         ^^^^

warning: path statement with no effect
   --> src/beta/copp.rs:368:9
    |
368 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/copp.rs:401:9
    |
401 |         i_0;
    |         ^^^^

warning: path statement with no effect
   --> src/beta/copp.rs:453:9
    |
453 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/copp.rs:455:9
    |
455 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/copp.rs:536:9
    |
536 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/copp.rs:538:9
    |
538 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/copp.rs:633:9
    |
633 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/copp.rs:635:9
    |
635 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/dc.rs:115:9
    |
115 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/dc.rs:117:9
    |
117 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/dc.rs:138:9
    |
138 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/dc.rs:140:9
    |
140 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/dc.rs:185:17
    |
185 |                 j;
    |                 ^^

warning: path statement with no effect
   --> src/beta/dc.rs:224:17
    |
224 |                 j_0;
    |                 ^^^^

warning: path statement with no effect
   --> src/beta/dc.rs:237:9
    |
237 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/dc.rs:239:9
    |
239 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
  --> src/beta/fi.rs:56:9
   |
56 |         i;
   |         ^^

warning: path statement with no effect
  --> src/beta/fi.rs:83:9
   |
83 |         i;
   |         ^^

warning: path statement with no effect
   --> src/beta/fi.rs:112:9
    |
112 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/fi.rs:114:9
    |
114 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/fi.rs:123:9
    |
123 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/fi.rs:125:9
    |
125 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/fi.rs:135:9
    |
135 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/fi.rs:137:9
    |
137 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/ikhts.rs:148:9
    |
148 |         i;
    |         ^^

warning: path statement with no effect
  --> src/beta/kc.rs:92:9
   |
92 |         i;
   |         ^^

warning: path statement with no effect
   --> src/beta/kc.rs:194:9
    |
194 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/kc.rs:196:9
    |
196 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/kc.rs:243:9
    |
243 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/kc.rs:245:9
    |
245 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
  --> src/beta/kst.rs:62:9
   |
62 |         i;
   |         ^^

warning: path statement with no effect
  --> src/beta/kst.rs:93:9
   |
93 |         i_0;
   |         ^^^^

warning: path statement with no effect
   --> src/beta/kst.rs:100:9
    |
100 |         i_1;
    |         ^^^^

warning: path statement with no effect
   --> src/beta/kst.rs:107:9
    |
107 |         i_2;
    |         ^^^^

warning: path statement with no effect
   --> src/beta/kst.rs:114:9
    |
114 |         i_3;
    |         ^^^^

warning: path statement with no effect
   --> src/beta/kst.rs:144:9
    |
144 |         i_4;
    |         ^^^^

warning: path statement with no effect
   --> src/beta/kst.rs:212:9
    |
212 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/kst.rs:249:9
    |
249 |         i_0;
    |         ^^^^

warning: path statement with no effect
   --> src/beta/kst.rs:258:9
    |
258 |         i_1;
    |         ^^^^

warning: path statement with no effect
   --> src/beta/kst.rs:265:9
    |
265 |         i_2;
    |         ^^^^

warning: path statement with no effect
   --> src/beta/kst.rs:281:9
    |
281 |         i_3;
    |         ^^^^

warning: path statement with no effect
   --> src/beta/kst.rs:293:9
    |
293 |         i_4;
    |         ^^^^

warning: structure field `offset_I1` should have a snake case name
  --> src/beta/mama.rs:32:9
   |
32 |     pub offset_I1: libc::c_int,
   |         ^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `offset_i1`

warning: structure field `size_I1` should have a snake case name
  --> src/beta/mama.rs:33:9
   |
33 |     pub size_I1: libc::c_int,
   |         ^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `size_i1`

warning: structure field `index_I1` should have a snake case name
  --> src/beta/mama.rs:34:9
   |
34 |     pub index_I1: libc::c_int,
   |         ^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `index_i1`

warning: structure field `padding_I1` should have a snake case name
  --> src/beta/mama.rs:35:9
   |
35 |     pub padding_I1: libc::c_int,
   |         ^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `padding_i1`

warning: structure field `offset_Q1` should have a snake case name
  --> src/beta/mama.rs:36:9
   |
36 |     pub offset_Q1: libc::c_int,
   |         ^^^^^^^^^ help: convert the identifier to snake case: `offset_q1`

warning: structure field `size_Q1` should have a snake case name
  --> src/beta/mama.rs:37:9
   |
37 |     pub size_Q1: libc::c_int,
   |         ^^^^^^^ help: convert the identifier to snake case: `size_q1`

warning: structure field `index_Q1` should have a snake case name
  --> src/beta/mama.rs:38:9
   |
38 |     pub index_Q1: libc::c_int,
   |         ^^^^^^^^ help: convert the identifier to snake case: `index_q1`

warning: structure field `padding_Q1` should have a snake case name
  --> src/beta/mama.rs:39:9
   |
39 |     pub padding_Q1: libc::c_int,
   |         ^^^^^^^^^^ help: convert the identifier to snake case: `padding_q1`

warning: structure field `offset_jI` should have a snake case name
  --> src/beta/mama.rs:40:9
   |
40 |     pub offset_jI: libc::c_int,
   |         ^^^^^^^^^ help: convert the identifier to snake case: `offset_j_i`

warning: structure field `size_jI` should have a snake case name
  --> src/beta/mama.rs:41:9
   |
41 |     pub size_jI: libc::c_int,
   |         ^^^^^^^ help: convert the identifier to snake case: `size_j_i`

warning: structure field `index_jI` should have a snake case name
  --> src/beta/mama.rs:42:9
   |
42 |     pub index_jI: libc::c_int,
   |         ^^^^^^^^ help: convert the identifier to snake case: `index_j_i`

warning: structure field `padding_jI` should have a snake case name
  --> src/beta/mama.rs:43:9
   |
43 |     pub padding_jI: libc::c_int,
   |         ^^^^^^^^^^ help: convert the identifier to snake case: `padding_j_i`

warning: structure field `offset_jQ` should have a snake case name
  --> src/beta/mama.rs:44:9
   |
44 |     pub offset_jQ: libc::c_int,
   |         ^^^^^^^^^ help: convert the identifier to snake case: `offset_j_q`

warning: structure field `size_jQ` should have a snake case name
  --> src/beta/mama.rs:45:9
   |
45 |     pub size_jQ: libc::c_int,
   |         ^^^^^^^ help: convert the identifier to snake case: `size_j_q`

warning: structure field `index_jQ` should have a snake case name
  --> src/beta/mama.rs:46:9
   |
46 |     pub index_jQ: libc::c_int,
   |         ^^^^^^^^ help: convert the identifier to snake case: `index_j_q`

warning: structure field `padding_jQ` should have a snake case name
  --> src/beta/mama.rs:47:9
   |
47 |     pub padding_jQ: libc::c_int,
   |         ^^^^^^^^^^ help: convert the identifier to snake case: `padding_j_q`

warning: structure field `offset_I2` should have a snake case name
  --> src/beta/mama.rs:48:9
   |
48 |     pub offset_I2: libc::c_int,
   |         ^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `offset_i2`

warning: structure field `size_I2` should have a snake case name
  --> src/beta/mama.rs:49:9
   |
49 |     pub size_I2: libc::c_int,
   |         ^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `size_i2`

warning: structure field `index_I2` should have a snake case name
  --> src/beta/mama.rs:50:9
   |
50 |     pub index_I2: libc::c_int,
   |         ^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `index_i2`

warning: structure field `padding_I2` should have a snake case name
  --> src/beta/mama.rs:51:9
   |
51 |     pub padding_I2: libc::c_int,
   |         ^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `padding_i2`

warning: structure field `offset_Q2` should have a snake case name
  --> src/beta/mama.rs:52:9
   |
52 |     pub offset_Q2: libc::c_int,
   |         ^^^^^^^^^ help: convert the identifier to snake case: `offset_q2`

warning: structure field `size_Q2` should have a snake case name
  --> src/beta/mama.rs:53:9
   |
53 |     pub size_Q2: libc::c_int,
   |         ^^^^^^^ help: convert the identifier to snake case: `size_q2`

warning: structure field `index_Q2` should have a snake case name
  --> src/beta/mama.rs:54:9
   |
54 |     pub index_Q2: libc::c_int,
   |         ^^^^^^^^ help: convert the identifier to snake case: `index_q2`

warning: structure field `padding_Q2` should have a snake case name
  --> src/beta/mama.rs:55:9
   |
55 |     pub padding_Q2: libc::c_int,
   |         ^^^^^^^^^^ help: convert the identifier to snake case: `padding_q2`

warning: structure field `offset_Re` should have a snake case name
  --> src/beta/mama.rs:56:9
   |
56 |     pub offset_Re: libc::c_int,
   |         ^^^^^^^^^ help: convert the identifier to snake case: `offset_re`

warning: structure field `size_Re` should have a snake case name
  --> src/beta/mama.rs:57:9
   |
57 |     pub size_Re: libc::c_int,
   |         ^^^^^^^ help: convert the identifier to snake case: `size_re`

warning: structure field `index_Re` should have a snake case name
  --> src/beta/mama.rs:58:9
   |
58 |     pub index_Re: libc::c_int,
   |         ^^^^^^^^ help: convert the identifier to snake case: `index_re`

warning: structure field `padding_Re` should have a snake case name
  --> src/beta/mama.rs:59:9
   |
59 |     pub padding_Re: libc::c_int,
   |         ^^^^^^^^^^ help: convert the identifier to snake case: `padding_re`

warning: structure field `offset_Im` should have a snake case name
  --> src/beta/mama.rs:60:9
   |
60 |     pub offset_Im: libc::c_int,
   |         ^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `offset_im`

warning: structure field `size_Im` should have a snake case name
  --> src/beta/mama.rs:61:9
   |
61 |     pub size_Im: libc::c_int,
   |         ^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `size_im`

warning: structure field `index_Im` should have a snake case name
  --> src/beta/mama.rs:62:9
   |
62 |     pub index_Im: libc::c_int,
   |         ^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `index_im`

warning: structure field `padding_Im` should have a snake case name
  --> src/beta/mama.rs:63:9
   |
63 |     pub padding_Im: libc::c_int,
   |         ^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `padding_im`

warning: structure field `offset_I1` should have a snake case name
   --> src/beta/mama.rs:118:9
    |
118 |     pub offset_I1: libc::c_int,
    |         ^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `offset_i1`

warning: structure field `size_I1` should have a snake case name
   --> src/beta/mama.rs:119:9
    |
119 |     pub size_I1: libc::c_int,
    |         ^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `size_i1`

warning: structure field `index_I1` should have a snake case name
   --> src/beta/mama.rs:120:9
    |
120 |     pub index_I1: libc::c_int,
    |         ^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `index_i1`

warning: structure field `padding_I1` should have a snake case name
   --> src/beta/mama.rs:121:9
    |
121 |     pub padding_I1: libc::c_int,
    |         ^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `padding_i1`

warning: structure field `offset_Q1` should have a snake case name
   --> src/beta/mama.rs:122:9
    |
122 |     pub offset_Q1: libc::c_int,
    |         ^^^^^^^^^ help: convert the identifier to snake case: `offset_q1`

warning: structure field `size_Q1` should have a snake case name
   --> src/beta/mama.rs:123:9
    |
123 |     pub size_Q1: libc::c_int,
    |         ^^^^^^^ help: convert the identifier to snake case: `size_q1`

warning: structure field `index_Q1` should have a snake case name
   --> src/beta/mama.rs:124:9
    |
124 |     pub index_Q1: libc::c_int,
    |         ^^^^^^^^ help: convert the identifier to snake case: `index_q1`

warning: structure field `padding_Q1` should have a snake case name
   --> src/beta/mama.rs:125:9
    |
125 |     pub padding_Q1: libc::c_int,
    |         ^^^^^^^^^^ help: convert the identifier to snake case: `padding_q1`

warning: structure field `offset_jI` should have a snake case name
   --> src/beta/mama.rs:126:9
    |
126 |     pub offset_jI: libc::c_int,
    |         ^^^^^^^^^ help: convert the identifier to snake case: `offset_j_i`

warning: structure field `size_jI` should have a snake case name
   --> src/beta/mama.rs:127:9
    |
127 |     pub size_jI: libc::c_int,
    |         ^^^^^^^ help: convert the identifier to snake case: `size_j_i`

warning: structure field `index_jI` should have a snake case name
   --> src/beta/mama.rs:128:9
    |
128 |     pub index_jI: libc::c_int,
    |         ^^^^^^^^ help: convert the identifier to snake case: `index_j_i`

warning: structure field `padding_jI` should have a snake case name
   --> src/beta/mama.rs:129:9
    |
129 |     pub padding_jI: libc::c_int,
    |         ^^^^^^^^^^ help: convert the identifier to snake case: `padding_j_i`

warning: structure field `offset_jQ` should have a snake case name
   --> src/beta/mama.rs:130:9
    |
130 |     pub offset_jQ: libc::c_int,
    |         ^^^^^^^^^ help: convert the identifier to snake case: `offset_j_q`

warning: structure field `size_jQ` should have a snake case name
   --> src/beta/mama.rs:131:9
    |
131 |     pub size_jQ: libc::c_int,
    |         ^^^^^^^ help: convert the identifier to snake case: `size_j_q`

warning: structure field `index_jQ` should have a snake case name
   --> src/beta/mama.rs:132:9
    |
132 |     pub index_jQ: libc::c_int,
    |         ^^^^^^^^ help: convert the identifier to snake case: `index_j_q`

warning: structure field `padding_jQ` should have a snake case name
   --> src/beta/mama.rs:133:9
    |
133 |     pub padding_jQ: libc::c_int,
    |         ^^^^^^^^^^ help: convert the identifier to snake case: `padding_j_q`

warning: structure field `offset_I2` should have a snake case name
   --> src/beta/mama.rs:134:9
    |
134 |     pub offset_I2: libc::c_int,
    |         ^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `offset_i2`

warning: structure field `size_I2` should have a snake case name
   --> src/beta/mama.rs:135:9
    |
135 |     pub size_I2: libc::c_int,
    |         ^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `size_i2`

warning: structure field `index_I2` should have a snake case name
   --> src/beta/mama.rs:136:9
    |
136 |     pub index_I2: libc::c_int,
    |         ^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `index_i2`

warning: structure field `padding_I2` should have a snake case name
   --> src/beta/mama.rs:137:9
    |
137 |     pub padding_I2: libc::c_int,
    |         ^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `padding_i2`

warning: structure field `offset_Q2` should have a snake case name
   --> src/beta/mama.rs:138:9
    |
138 |     pub offset_Q2: libc::c_int,
    |         ^^^^^^^^^ help: convert the identifier to snake case: `offset_q2`

warning: structure field `size_Q2` should have a snake case name
   --> src/beta/mama.rs:139:9
    |
139 |     pub size_Q2: libc::c_int,
    |         ^^^^^^^ help: convert the identifier to snake case: `size_q2`

warning: structure field `index_Q2` should have a snake case name
   --> src/beta/mama.rs:140:9
    |
140 |     pub index_Q2: libc::c_int,
    |         ^^^^^^^^ help: convert the identifier to snake case: `index_q2`

warning: structure field `padding_Q2` should have a snake case name
   --> src/beta/mama.rs:141:9
    |
141 |     pub padding_Q2: libc::c_int,
    |         ^^^^^^^^^^ help: convert the identifier to snake case: `padding_q2`

warning: structure field `offset_Re` should have a snake case name
   --> src/beta/mama.rs:142:9
    |
142 |     pub offset_Re: libc::c_int,
    |         ^^^^^^^^^ help: convert the identifier to snake case: `offset_re`

warning: structure field `size_Re` should have a snake case name
   --> src/beta/mama.rs:143:9
    |
143 |     pub size_Re: libc::c_int,
    |         ^^^^^^^ help: convert the identifier to snake case: `size_re`

warning: structure field `index_Re` should have a snake case name
   --> src/beta/mama.rs:144:9
    |
144 |     pub index_Re: libc::c_int,
    |         ^^^^^^^^ help: convert the identifier to snake case: `index_re`

warning: structure field `padding_Re` should have a snake case name
   --> src/beta/mama.rs:145:9
    |
145 |     pub padding_Re: libc::c_int,
    |         ^^^^^^^^^^ help: convert the identifier to snake case: `padding_re`

warning: structure field `offset_Im` should have a snake case name
   --> src/beta/mama.rs:146:9
    |
146 |     pub offset_Im: libc::c_int,
    |         ^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `offset_im`

warning: structure field `size_Im` should have a snake case name
   --> src/beta/mama.rs:147:9
    |
147 |     pub size_Im: libc::c_int,
    |         ^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `size_im`

warning: structure field `index_Im` should have a snake case name
   --> src/beta/mama.rs:148:9
    |
148 |     pub index_Im: libc::c_int,
    |         ^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `index_im`

warning: structure field `padding_Im` should have a snake case name
   --> src/beta/mama.rs:149:9
    |
149 |     pub padding_Im: libc::c_int,
    |         ^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `padding_im`

warning: path statement with no effect
   --> src/beta/mama.rs:201:9
    |
201 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/mama.rs:523:9
    |
523 |         i_0;
    |         ^^^^

warning: path statement with no effect
    --> src/beta/mama.rs:1365:9
     |
1365 |         i_1;
     |         ^^^^

warning: path statement with no effect
    --> src/beta/mama.rs:1388:9
     |
1388 |         i;
     |         ^^

warning: variable `I1` should have a snake case name
    --> src/beta/mama.rs:1400:13
     |
1400 |     let mut I1: *mut libc::c_double = calloc(
     |             ^^ help: convert the identifier to snake case (notice the capitalization): `i1`

warning: variable `Q1` should have a snake case name
    --> src/beta/mama.rs:1404:13
     |
1404 |     let mut Q1: *mut libc::c_double = calloc(
     |             ^^ help: convert the identifier to snake case: `q1`

warning: variable `jI` should have a snake case name
    --> src/beta/mama.rs:1408:13
     |
1408 |     let mut jI: *mut libc::c_double = calloc(
     |             ^^ help: convert the identifier to snake case: `j_i`

warning: variable `jQ` should have a snake case name
    --> src/beta/mama.rs:1412:13
     |
1412 |     let mut jQ: *mut libc::c_double = calloc(
     |             ^^ help: convert the identifier to snake case: `j_q`

warning: variable `I2` should have a snake case name
    --> src/beta/mama.rs:1416:13
     |
1416 |     let mut I2: *mut libc::c_double = calloc(
     |             ^^ help: convert the identifier to snake case (notice the capitalization): `i2`

warning: variable `Q2` should have a snake case name
    --> src/beta/mama.rs:1420:13
     |
1420 |     let mut Q2: *mut libc::c_double = calloc(
     |             ^^ help: convert the identifier to snake case: `q2`

warning: variable `Re` should have a snake case name
    --> src/beta/mama.rs:1424:13
     |
1424 |     let mut Re: *mut libc::c_double = calloc(
     |             ^^ help: convert the identifier to snake case: `re`

warning: variable `Im` should have a snake case name
    --> src/beta/mama.rs:1428:13
     |
1428 |     let mut Im: *mut libc::c_double = calloc(
     |             ^^ help: convert the identifier to snake case (notice the capitalization): `im`

warning: path statement with no effect
    --> src/beta/mama.rs:1592:9
     |
1592 |         mama;
     |         ^^^^^

warning: path statement with no effect
    --> src/beta/mama.rs:1602:9
     |
1602 |         fama;
     |         ^^^^^

warning: path statement with no effect
    --> src/beta/mama.rs:1604:9
     |
1604 |         i_0;
     |         ^^^^

warning: unused comparison that must be used
    --> src/beta/mama.rs:1638:5
     |
1638 |     progress == -(6 as libc::c_int);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the comparison produces a value
     |
help: use `let _ = ...` to ignore the resulting value
     |
1638 |     let _ = progress == -(6 as libc::c_int);
     |     +++++++

warning: path statement with no effect
    --> src/beta/mama.rs:1808:9
     |
1808 |         i;
     |         ^^

warning: path statement with no effect
    --> src/beta/mama.rs:1810:9
     |
1810 |         progress;
     |         ^^^^^^^^^

warning: path statement with no effect
    --> src/beta/mama.rs:2713:9
     |
2713 |         i;
     |         ^^

warning: path statement with no effect
    --> src/beta/mama.rs:2715:9
     |
2715 |         progress;
     |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/pbands.rs:101:9
    |
101 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/pbands.rs:104:5
    |
104 |     i;
    |     ^^

warning: path statement with no effect
   --> src/beta/pbands.rs:116:9
    |
116 |         j;
    |         ^^

warning: path statement with no effect
   --> src/beta/pbands.rs:125:9
    |
125 |         j_0;
    |         ^^^^

warning: path statement with no effect
   --> src/beta/pbands.rs:134:5
    |
134 |     i;
    |     ^^

warning: path statement with no effect
   --> src/beta/pbands.rs:151:13
    |
151 |             j_1;
    |             ^^^^

warning: path statement with no effect
   --> src/beta/pbands.rs:162:13
    |
162 |             j_2;
    |             ^^^^

warning: path statement with no effect
   --> src/beta/pbands.rs:171:9
    |
171 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/pbands.rs:215:13
    |
215 |             j;
    |             ^^

warning: path statement with no effect
   --> src/beta/pbands.rs:228:13
    |
228 |             j_0;
    |             ^^^^

warning: path statement with no effect
   --> src/beta/pbands.rs:237:9
    |
237 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/pbands.rs:303:9
    |
303 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/pbands.rs:305:9
    |
305 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/pbands.rs:309:9
    |
309 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/pbands.rs:311:9
    |
311 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/pbands.rs:334:13
    |
334 |             j;
    |             ^^

warning: path statement with no effect
   --> src/beta/pbands.rs:354:13
    |
354 |             j_0;
    |             ^^^^

warning: path statement with no effect
   --> src/beta/pbands.rs:363:9
    |
363 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/pbands.rs:365:9
    |
365 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/pbands.rs:430:13
    |
430 |             j_1;
    |             ^^^^

warning: path statement with no effect
   --> src/beta/pbands.rs:450:13
    |
450 |             j_2;
    |             ^^^^

warning: path statement with no effect
   --> src/beta/pbands.rs:459:9
    |
459 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/pbands.rs:461:9
    |
461 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/pc.rs:132:9
    |
132 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/pc.rs:134:9
    |
134 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/pc.rs:164:9
    |
164 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/pc.rs:166:9
    |
166 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/pc.rs:220:17
    |
220 |                 j;
    |                 ^^

warning: path statement with no effect
   --> src/beta/pc.rs:258:17
    |
258 |                 j_0;
    |                 ^^^^

warning: path statement with no effect
   --> src/beta/pc.rs:271:9
    |
271 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/pc.rs:273:9
    |
273 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/pfe.rs:105:9
    |
105 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/pfe.rs:196:9
    |
196 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/pfe.rs:271:13
    |
271 |             j;
    |             ^^

warning: path statement with no effect
   --> src/beta/pfe.rs:289:9
    |
289 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/pfe.rs:363:9
    |
363 |         buffers_idx;
    |         ^^^^^^^^^^^^

warning: path statement with no effect
   --> src/beta/pfe.rs:376:9
    |
376 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/pfe.rs:378:9
    |
378 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/pfe.rs:390:9
    |
390 |         buffers_idx;
    |         ^^^^^^^^^^^^

warning: path statement with no effect
   --> src/beta/pfe.rs:411:9
    |
411 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/pfe.rs:413:9
    |
413 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/pfe.rs:468:9
    |
468 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/pfe.rs:470:9
    |
470 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/pfe.rs:525:9
    |
525 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/pfe.rs:527:9
    |
527 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/posc.rs:112:9
    |
112 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/posc.rs:115:5
    |
115 |     i;
    |     ^^

warning: path statement with no effect
   --> src/beta/posc.rs:127:9
    |
127 |         j;
    |         ^^

warning: path statement with no effect
   --> src/beta/posc.rs:136:9
    |
136 |         j_0;
    |         ^^^^

warning: path statement with no effect
   --> src/beta/posc.rs:143:5
    |
143 |     i;
    |     ^^

warning: path statement with no effect
   --> src/beta/posc.rs:160:13
    |
160 |             j_1;
    |             ^^^^

warning: path statement with no effect
   --> src/beta/posc.rs:171:13
    |
171 |             j_2;
    |             ^^^^

warning: path statement with no effect
   --> src/beta/posc.rs:181:9
    |
181 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/posc.rs:226:13
    |
226 |             j;
    |             ^^

warning: path statement with no effect
   --> src/beta/posc.rs:239:13
    |
239 |             j_0;
    |             ^^^^

warning: path statement with no effect
   --> src/beta/posc.rs:246:9
    |
246 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/posc.rs:313:9
    |
313 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/posc.rs:315:9
    |
315 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/posc.rs:319:9
    |
319 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/posc.rs:342:13
    |
342 |             j;
    |             ^^

warning: path statement with no effect
   --> src/beta/posc.rs:362:13
    |
362 |             j_0;
    |             ^^^^

warning: path statement with no effect
   --> src/beta/posc.rs:369:9
    |
369 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/posc.rs:434:13
    |
434 |             j_1;
    |             ^^^^

warning: path statement with no effect
   --> src/beta/posc.rs:454:13
    |
454 |             j_2;
    |             ^^^^

warning: path statement with no effect
   --> src/beta/posc.rs:464:9
    |
464 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/posc.rs:466:9
    |
466 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
  --> src/beta/rmi.rs:99:5
   |
99 |     i;
   |     ^^

warning: path statement with no effect
   --> src/beta/rmi.rs:124:9
    |
124 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/rmi.rs:181:9
    |
181 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/rmi.rs:205:9
    |
205 |         i_0;
    |         ^^^^

warning: path statement with no effect
   --> src/beta/rmi.rs:243:9
    |
243 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/rmi.rs:245:9
    |
245 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/rmi.rs:286:9
    |
286 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/rmi.rs:288:9
    |
288 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/rmi.rs:331:9
    |
331 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/rmi.rs:333:9
    |
333 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
  --> src/beta/rmta.rs:50:9
   |
50 |         i;
   |         ^^

warning: path statement with no effect
  --> src/beta/rmta.rs:63:9
   |
63 |         i_0;
   |         ^^^^

warning: path statement with no effect
  --> src/beta/rvi.rs:92:9
   |
92 |         i;
   |         ^^

warning: path statement with no effect
  --> src/beta/rvi.rs:95:5
   |
95 |     i;
   |     ^^

warning: path statement with no effect
   --> src/beta/rvi.rs:121:5
    |
121 |     i;
    |     ^^

warning: path statement with no effect
   --> src/beta/rvi.rs:154:9
    |
154 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/rvi.rs:199:9
    |
199 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/rvi.rs:201:9
    |
201 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/rvi.rs:205:9
    |
205 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/rvi.rs:231:9
    |
231 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/rvi.rs:285:9
    |
285 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/rvi.rs:287:9
    |
287 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/smi.rs:101:9
    |
101 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/smi.rs:120:9
    |
120 |         i_0;
    |         ^^^^

warning: path statement with no effect
   --> src/beta/smi.rs:122:9
    |
122 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/smi.rs:134:9
    |
134 |         i_0;
    |         ^^^^

warning: path statement with no effect
   --> src/beta/smi.rs:136:9
    |
136 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/smi.rs:156:9
    |
156 |         i_0;
    |         ^^^^

warning: path statement with no effect
   --> src/beta/smi.rs:158:9
    |
158 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/smi.rs:172:17
    |
172 |                 j;
    |                 ^^

warning: path statement with no effect
   --> src/beta/smi.rs:189:17
    |
189 |                 j_0;
    |                 ^^^^

warning: path statement with no effect
   --> src/beta/smi.rs:207:9
    |
207 |         i_0;
    |         ^^^^

warning: path statement with no effect
   --> src/beta/smi.rs:209:9
    |
209 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/smi.rs:233:9
    |
233 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/smi.rs:269:9
    |
269 |         i_0;
    |         ^^^^

warning: path statement with no effect
   --> src/beta/smi.rs:285:9
    |
285 |         i_0;
    |         ^^^^

warning: path statement with no effect
   --> src/beta/smi.rs:349:9
    |
349 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/smi.rs:351:9
    |
351 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/smi.rs:381:9
    |
381 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/smi.rs:383:9
    |
383 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/smi.rs:421:9
    |
421 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/smi.rs:423:9
    |
423 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/smi.rs:465:17
    |
465 |                 j;
    |                 ^^

warning: path statement with no effect
   --> src/beta/smi.rs:492:17
    |
492 |                 j_0;
    |                 ^^^^

warning: path statement with no effect
   --> src/beta/smi.rs:507:9
    |
507 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/smi.rs:509:9
    |
509 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
  --> src/beta/tsi.rs:73:9
   |
73 |         i;
   |         ^^

warning: path statement with no effect
  --> src/beta/tsi.rs:85:9
   |
85 |         i_0;
   |         ^^^^

warning: path statement with no effect
  --> src/beta/tsi.rs:87:9
   |
87 |         progress;
   |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/tsi.rs:104:9
    |
104 |         i_0;
    |         ^^^^

warning: path statement with no effect
   --> src/beta/tsi.rs:106:9
    |
106 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/tsi.rs:125:9
    |
125 |         i_0;
    |         ^^^^

warning: path statement with no effect
   --> src/beta/tsi.rs:127:9
    |
127 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/tsi.rs:148:9
    |
148 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/tsi.rs:184:9
    |
184 |         i_0;
    |         ^^^^

warning: path statement with no effect
   --> src/beta/tsi.rs:216:9
    |
216 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/tsi.rs:218:9
    |
218 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/tsi.rs:235:9
    |
235 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/tsi.rs:237:9
    |
237 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/tsi.rs:256:9
    |
256 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/tsi.rs:258:9
    |
258 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
  --> src/beta/vwap.rs:90:9
   |
90 |         i;
   |         ^^

warning: path statement with no effect
  --> src/beta/vwap.rs:92:9
   |
92 |         progress;
   |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/vwap.rs:112:9
    |
112 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/vwap.rs:114:9
    |
114 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/vwap.rs:145:9
    |
145 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/vwap.rs:162:9
    |
162 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/vwap.rs:235:9
    |
235 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/vwap.rs:237:9
    |
237 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/beta/vwap.rs:334:9
    |
334 |         i;
    |         ^^

warning: path statement with no effect
   --> src/beta/vwap.rs:336:9
    |
336 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
  --> src/indicators/abs.rs:25:9
   |
25 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/acos.rs:25:9
   |
25 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/ad.rs:31:9
   |
31 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/add.rs:23:9
   |
23 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/adosc.rs:72:9
   |
72 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/adx.rs:60:9
   |
60 |         i;
   |         ^^

warning: path statement with no effect
   --> src/indicators/adx.rs:107:9
    |
107 |         i;
    |         ^^

warning: path statement with no effect
  --> src/indicators/adxr.rs:71:9
   |
71 |         i;
   |         ^^

warning: path statement with no effect
   --> src/indicators/adxr.rs:136:9
    |
136 |         i;
    |         ^^

warning: path statement with no effect
  --> src/indicators/ao.rs:42:9
   |
42 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/ao.rs:65:9
   |
65 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/apo.rs:57:9
   |
57 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/aroon.rs:92:9
   |
92 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/aroon.rs:94:9
   |
94 |         trail;
   |         ^^^^^^

warning: path statement with no effect
  --> src/indicators/aroonosc.rs:88:9
   |
88 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/aroonosc.rs:90:9
   |
90 |         trail;
   |         ^^^^^^

warning: path statement with no effect
  --> src/indicators/asin.rs:19:9
   |
19 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/atan.rs:25:9
   |
25 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/atr.rs:86:9
   |
86 |         i;
   |         ^^

warning: path statement with no effect
   --> src/indicators/atr.rs:112:9
    |
112 |         i;
    |         ^^

warning: path statement with no effect
   --> src/indicators/atr.rs:239:13
    |
239 |             i;
    |             ^^

warning: path statement with no effect
   --> src/indicators/atr.rs:263:13
    |
263 |             i;
    |             ^^

warning: path statement with no effect
   --> src/indicators/atr.rs:300:13
    |
300 |             i;
    |             ^^

warning: path statement with no effect
  --> src/indicators/avgprice.rs:29:9
   |
29 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/bbands.rs:45:9
   |
45 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/bbands.rs:56:5
   |
56 |     middle;
   |     ^^^^^^^

warning: path statement with no effect
  --> src/indicators/bbands.rs:74:9
   |
74 |         middle;
   |         ^^^^^^^

warning: path statement with no effect
  --> src/indicators/bbands.rs:76:9
   |
76 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/bop.rs:33:9
   |
33 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/cci.rs:72:17
   |
72 |                 j;
   |                 ^^

warning: path statement with no effect
  --> src/indicators/cci.rs:82:9
   |
82 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/ceil.rs:25:9
   |
25 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/cmo.rs:56:9
   |
56 |         i;
   |         ^^

warning: path statement with no effect
   --> src/indicators/cmo.rs:105:9
    |
105 |         i;
    |         ^^

warning: path statement with no effect
  --> src/indicators/cos.rs:25:9
   |
25 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/cosh.rs:25:9
   |
25 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/crossany.rs:31:9
   |
31 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/crossover.rs:28:9
   |
28 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/cvi.rs:60:9
   |
60 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/cvi.rs:77:9
   |
77 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/decay.rs:34:9
   |
34 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/dema.rs:50:17
   |
50 |                 output;
   |                 ^^^^^^^

warning: path statement with no effect
  --> src/indicators/dema.rs:54:9
   |
54 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/di.rs:74:9
   |
74 |         i;
   |         ^^

warning: path statement with no effect
   --> src/indicators/di.rs:122:9
    |
122 |         i;
    |         ^^

warning: path statement with no effect
  --> src/indicators/div.rs:17:9
   |
17 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/dm.rs:56:9
   |
56 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/dm.rs:89:9
   |
89 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/dpo.rs:40:9
   |
40 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/dpo.rs:53:9
   |
53 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/dx.rs:56:9
   |
56 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/dx.rs:94:9
   |
94 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/edecay.rs:34:9
   |
34 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/ema.rs:46:9
   |
46 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/emv.rs:44:9
   |
44 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/exp.rs:25:9
   |
25 |         i;
   |         ^^

warning: path statement with no effect
   --> src/indicators/fisher.rs:112:9
    |
112 |         i;
    |         ^^

warning: path statement with no effect
   --> src/indicators/fisher.rs:114:9
    |
114 |         trail;
    |         ^^^^^^

warning: path statement with no effect
  --> src/indicators/floor.rs:19:9
   |
19 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/fosc.rs:46:9
   |
46 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/fosc.rs:67:9
   |
67 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/hma.rs:73:9
   |
73 |         i;
   |         ^^

warning: path statement with no effect
   --> src/indicators/hma.rs:112:9
    |
112 |         i;
    |         ^^

warning: path statement with no effect
  --> src/indicators/kama.rs:48:9
   |
48 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/kama.rs:85:9
   |
85 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/kvo.rs:87:9
   |
87 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/lag.rs:39:9
   |
39 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/linreg.rs:45:9
   |
45 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/linreg.rs:62:9
   |
62 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/linregintercept.rs:45:9
   |
45 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/linregintercept.rs:62:9
   |
62 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/linregslope.rs:44:9
   |
44 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/linregslope.rs:60:9
   |
60 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/ln.rs:19:9
   |
19 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/log10.rs:25:9
   |
25 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/macd.rs:85:9
   |
85 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/marketfi.rs:38:9
   |
38 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/mass.rs:83:9
   |
83 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/max.rs:63:9
   |
63 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/max.rs:65:9
   |
65 |         trail;
   |         ^^^^^^

warning: path statement with no effect
   --> src/indicators/max.rs:114:13
    |
114 |             j;
    |             ^^

warning: path statement with no effect
   --> src/indicators/max.rs:120:9
    |
120 |         i;
    |         ^^

warning: path statement with no effect
  --> src/indicators/md.rs:49:17
   |
49 |                 j;
   |                 ^^

warning: path statement with no effect
  --> src/indicators/md.rs:56:9
   |
56 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/medprice.rs:26:9
   |
26 |         i;
   |         ^^

warning: path statement with no effect
   --> src/indicators/mfi.rs:131:9
    |
131 |         i;
    |         ^^

warning: path statement with no effect
  --> src/indicators/min.rs:63:9
   |
63 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/min.rs:65:9
   |
65 |         trail;
   |         ^^^^^^

warning: path statement with no effect
   --> src/indicators/min.rs:114:13
    |
114 |             j;
    |             ^^

warning: path statement with no effect
   --> src/indicators/min.rs:120:9
    |
120 |         i;
    |         ^^

warning: path statement with no effect
  --> src/indicators/mom.rs:39:9
   |
39 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/msw.rs:56:13
   |
56 |             j;
   |             ^^

warning: path statement with no effect
  --> src/indicators/msw.rs:85:9
   |
85 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/mul.rs:23:9
   |
23 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/natr.rs:59:9
   |
59 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/natr.rs:86:9
   |
86 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/nvi.rs:46:9
   |
46 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/obv.rs:36:9
   |
36 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/ppo.rs:57:9
   |
57 |         i;
   |         ^^

warning: path statement with no effect
   --> src/indicators/psar.rs:113:9
    |
113 |         i;
    |         ^^

warning: path statement with no effect
  --> src/indicators/pvi.rs:46:9
   |
46 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/qstick.rs:40:9
   |
40 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/qstick.rs:55:9
   |
55 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/roc.rs:40:9
   |
40 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/rocr.rs:39:9
   |
39 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/round.rs:25:9
   |
25 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/rsi.rs:55:9
   |
55 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/rsi.rs:84:9
   |
84 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/sin.rs:25:9
   |
25 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/sinh.rs:25:9
   |
25 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/sma.rs:53:9
   |
53 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/sma.rs:66:9
   |
66 |         i;
   |         ^^

warning: unused comparison that must be used
   --> src/indicators/sma.rs:132:5
    |
132 |     progress == -period + 1 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the comparison produces a value
    |
help: use `let _ = ...` to ignore the resulting value
    |
132 |     let _ = progress == -period + 1 as libc::c_int;
    |     +++++++

warning: path statement with no effect
   --> src/indicators/sma.rs:137:9
    |
137 |         buffer_idx;
    |         ^^^^^^^^^^^

warning: path statement with no effect
   --> src/indicators/sma.rs:142:9
    |
142 |         i;
    |         ^^

warning: path statement with no effect
   --> src/indicators/sma.rs:144:9
    |
144 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
   --> src/indicators/sma.rs:153:9
    |
153 |         buffer_idx;
    |         ^^^^^^^^^^^

warning: path statement with no effect
   --> src/indicators/sma.rs:165:9
    |
165 |         i;
    |         ^^

warning: path statement with no effect
   --> src/indicators/sma.rs:167:9
    |
167 |         progress;
    |         ^^^^^^^^^

warning: path statement with no effect
  --> src/indicators/sqrt.rs:25:9
   |
25 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/stddev.rs:42:9
   |
42 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/stddev.rs:67:9
   |
67 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/stderr.rs:43:9
   |
43 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/stderr.rs:68:9
   |
68 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/stoch.rs:73:13
   |
73 |             trail;
   |             ^^^^^^

warning: path statement with no effect
   --> src/indicators/stoch.rs:159:9
    |
159 |         i;
    |         ^^

warning: path statement with no effect
  --> src/indicators/stochrsi.rs:68:9
   |
68 |         i;
   |         ^^

warning: path statement with no effect
   --> src/indicators/stochrsi.rs:121:17
    |
121 |                 j;
    |                 ^^

warning: path statement with no effect
   --> src/indicators/stochrsi.rs:139:17
    |
139 |                 j_0;
    |                 ^^^^

warning: path statement with no effect
   --> src/indicators/stochrsi.rs:160:9
    |
160 |         i;
    |         ^^

warning: path statement with no effect
  --> src/indicators/sub.rs:17:9
   |
17 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/sum.rs:38:9
   |
38 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/sum.rs:51:9
   |
51 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/tan.rs:25:9
   |
25 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/tanh.rs:19:9
   |
19 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/tema.rs:57:21
   |
57 |                     output;
   |                     ^^^^^^^

warning: path statement with no effect
  --> src/indicators/tema.rs:62:9
   |
62 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/todeg.rs:25:9
   |
25 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/torad.rs:19:9
   |
19 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/tr.rs:44:9
   |
44 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/trima.rs:70:13
   |
70 |             w;
   |             ^^

warning: path statement with no effect
  --> src/indicators/trima.rs:74:13
   |
74 |             w;
   |             ^^

warning: path statement with no effect
  --> src/indicators/trima.rs:77:9
   |
77 |         i;
   |         ^^

warning: path statement with no effect
   --> src/indicators/trima.rs:103:9
    |
103 |         i;
    |         ^^

warning: path statement with no effect
  --> src/indicators/trix.rs:68:9
   |
68 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/trix.rs:80:9
   |
80 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/trunc.rs:25:9
   |
25 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/tsf.rs:45:9
   |
45 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/tsf.rs:62:9
   |
62 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/typprice.rs:28:9
   |
28 |         i;
   |         ^^

warning: path statement with no effect
   --> src/indicators/ultosc.rs:140:9
    |
140 |         i;
    |         ^^

warning: path statement with no effect
  --> src/indicators/var.rs:41:9
   |
41 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/var.rs:58:9
   |
58 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/vhf.rs:50:9
   |
50 |         i;
   |         ^^

warning: path statement with no effect
   --> src/indicators/vhf.rs:108:9
    |
108 |         i;
    |         ^^

warning: path statement with no effect
   --> src/indicators/vhf.rs:110:9
    |
110 |         trail;
    |         ^^^^^^

warning: path statement with no effect
  --> src/indicators/vidya.rs:62:9
   |
62 |         i;
   |         ^^

warning: path statement with no effect
   --> src/indicators/vidya.rs:116:9
    |
116 |         i;
    |         ^^

warning: path statement with no effect
  --> src/indicators/volatility.rs:45:9
   |
45 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/volatility.rs:64:9
   |
64 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/vosc.rs:50:9
   |
50 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/vosc.rs:69:9
   |
69 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/vwma.rs:41:9
   |
41 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/vwma.rs:58:9
   |
58 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/wad.rs:58:9
   |
58 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/wcprice.rs:28:9
   |
28 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/wilders.rs:39:9
   |
39 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/wilders.rs:52:9
   |
52 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/willr.rs:95:9
   |
95 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/willr.rs:97:9
   |
97 |         trail;
   |         ^^^^^^

warning: path statement with no effect
  --> src/indicators/wma.rs:43:9
   |
43 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/wma.rs:55:9
   |
55 |         i;
   |         ^^

warning: path statement with no effect
  --> src/indicators/zlema.rs:50:9
   |
50 |         i;
   |         ^^

warning: static variable `default_config` should have an upper case name
  --> src/templates/candles.rs:74:16
   |
74 |     static mut default_config: tc_config = {
   |                ^^^^^^^^^^^^^^ help: convert the identifier to upper case: `DEFAULT_CONFIG`

warning: unused comparison that must be used
   --> src/templates/candles.rs:290:5
    |
290 | /     patterns & patterns.wrapping_sub(1 as libc::c_int as tc_set)
291 | |         == 0 as libc::c_int as tc_set;
    | |_____________________________________^ the comparison produces a value
    |
help: use `let _ = ...` to ignore the resulting value
    |
290 |     let _ = patterns & patterns.wrapping_sub(1 as libc::c_int as tc_set)
    |     +++++++

warning: path statement with no effect
   --> src/templates/candles.rs:312:9
    |
312 |         i;
    |         ^^

warning: path statement with no effect
   --> src/templates/candles.rs:341:9
    |
341 |         i;
    |         ^^

warning: `tulipindicators` (lib) generated 8046 warnings
    Finished dev [unoptimized + debuginfo] target(s) in 14.69s
