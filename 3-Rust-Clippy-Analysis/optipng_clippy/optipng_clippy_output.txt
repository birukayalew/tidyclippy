   Compiling libc v0.2.171
    Checking optipng_clippy v0.1.0 (/mnt/c/Users/mazin/Downloads/School/Research/datasets/3-Rust-Clippy-Analysis/optipng_clippy)
error: extern blocks must be unsafe
  --> src/gifread/gifread.rs:2:1
   |
2  | / extern "C" {
3  | |     pub type _IO_wide_data;
4  | |     pub type _IO_codecvt;
5  | |     pub type _IO_marker;
...  |
24 | |     ) -> libc::c_int;
25 | | }
   | |_^

error: unsafe attribute used without unsafe
   --> src/gifread/gifread.rs:109:3
    |
109 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
109 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/gifread/gifread.rs:216:3
    |
216 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
216 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/gifread/gifread.rs:225:3
    |
225 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
225 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/gifread/gifread.rs:227:3
    |
227 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
227 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/gifread/gifread.rs:738:3
    |
738 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
738 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/gifread/gifread.rs:760:3
    |
760 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
760 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/gifread/gifread.rs:780:3
    |
780 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
780 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/gifread/gifread.rs:825:3
    |
825 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
825 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/gifread/gifread.rs:919:3
    |
919 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
919 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/gifread/gifread.rs:923:3
    |
923 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
923 | #[unsafe(no_mangle)]
    |   +++++++         +

error: extern blocks must be unsafe
  --> src/minitiff/tiffread.rs:2:1
   |
2  | / extern "C" {
3  | |     pub type _IO_wide_data;
4  | |     pub type _IO_codecvt;
5  | |     pub type _IO_marker;
...  |
29 | |     ) -> libc::c_int;
30 | | }
   | |_^

error: unsafe attribute used without unsafe
   --> src/minitiff/tiffread.rs:316:3
    |
316 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
316 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/minitiff/tiffread.rs:755:3
    |
755 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
755 | #[unsafe(no_mangle)]
    |   +++++++         +

error: extern blocks must be unsafe
  --> src/minitiff/tiffutil.rs:2:1
   |
2  | / extern "C" {
3  | |     pub type _IO_wide_data;
4  | |     pub type _IO_codecvt;
5  | |     pub type _IO_marker;
...  |
15 | |     ) -> *mut libc::c_void;
16 | | }
   | |_^

error: unsafe attribute used without unsafe
   --> src/minitiff/tiffutil.rs:116:3
    |
116 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
116 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/minitiff/tiffutil.rs:125:3
    |
125 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
125 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/minitiff/tiffutil.rs:171:3
    |
171 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
171 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/minitiff/tiffutil.rs:181:3
    |
181 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
181 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/minitiff/tiffutil.rs:200:3
    |
200 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
200 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/minitiff/tiffutil.rs:211:3
    |
211 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
211 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/minitiff/tiffutil.rs:218:3
    |
218 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
218 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/minitiff/tiffutil.rs:225:3
    |
225 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
225 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/minitiff/tiffutil.rs:232:3
    |
232 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
232 | #[unsafe(no_mangle)]
    |   +++++++         +

error: extern blocks must be unsafe
   --> src/opngreduc/opngreduc.rs:2:1
    |
2   | / extern "C" {
3   | |     pub type png_struct_def;
4   | |     pub type png_info_def;
5   | |     fn png_malloc(png_ptr: png_const_structrp, size: png_alloc_size_t) -> png_voidp;
...   |
126 | |     ) -> !;
127 | | }
    | |_^

error: unsafe attribute used without unsafe
   --> src/opngreduc/opngreduc.rs:192:3
    |
192 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
192 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
    --> src/opngreduc/opngreduc.rs:2910:3
     |
2910 | #[no_mangle]
     |   ^^^^^^^^^ usage of unsafe attribute
     |
help: wrap the attribute in `unsafe(...)`
     |
2910 | #[unsafe(no_mangle)]
     |   +++++++         +

error: extern blocks must be unsafe
 --> src/optipng/bitset.rs:2:1
  |
2 | / extern "C" {
3 | |     fn isspace(_: libc::c_int) -> libc::c_int;
4 | |     fn __errno_location() -> *mut libc::c_int;
5 | | }
  | |_^

error: unsafe attribute used without unsafe
  --> src/optipng/bitset.rs:10:3
   |
10 | #[no_mangle]
   |   ^^^^^^^^^ usage of unsafe attribute
   |
help: wrap the attribute in `unsafe(...)`
   |
10 | #[unsafe(no_mangle)]
   |   +++++++         +

error: unsafe attribute used without unsafe
  --> src/optipng/bitset.rs:21:3
   |
21 | #[no_mangle]
   |   ^^^^^^^^^ usage of unsafe attribute
   |
help: wrap the attribute in `unsafe(...)`
   |
21 | #[unsafe(no_mangle)]
   |   +++++++         +

error: unsafe attribute used without unsafe
  --> src/optipng/bitset.rs:34:3
   |
34 | #[no_mangle]
   |   ^^^^^^^^^ usage of unsafe attribute
   |
help: wrap the attribute in `unsafe(...)`
   |
34 | #[unsafe(no_mangle)]
   |   +++++++         +

error: unsafe attribute used without unsafe
  --> src/optipng/bitset.rs:51:3
   |
51 | #[no_mangle]
   |   ^^^^^^^^^ usage of unsafe attribute
   |
help: wrap the attribute in `unsafe(...)`
   |
51 | #[unsafe(no_mangle)]
   |   +++++++         +

error: unsafe attribute used without unsafe
  --> src/optipng/bitset.rs:64:3
   |
64 | #[no_mangle]
   |   ^^^^^^^^^ usage of unsafe attribute
   |
help: wrap the attribute in `unsafe(...)`
   |
64 | #[unsafe(no_mangle)]
   |   +++++++         +

error: unsafe attribute used without unsafe
  --> src/optipng/bitset.rs:84:3
   |
84 | #[no_mangle]
   |   ^^^^^^^^^ usage of unsafe attribute
   |
help: wrap the attribute in `unsafe(...)`
   |
84 | #[unsafe(no_mangle)]
   |   +++++++         +

error: extern blocks must be unsafe
  --> src/optipng/ioutil.rs:2:1
   |
2  | / extern "C" {
3  | |     pub type _IO_wide_data;
4  | |     pub type _IO_codecvt;
5  | |     pub type _IO_marker;
...  |
50 | |     ) -> libc::c_int;
51 | | }
   | |_^

error: unsafe attribute used without unsafe
   --> src/optipng/ioutil.rs:147:3
    |
147 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
147 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/optipng/ioutil.rs:151:3
    |
151 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
151 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/optipng/ioutil.rs:159:3
    |
159 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
159 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/optipng/ioutil.rs:188:3
    |
188 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
188 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/optipng/ioutil.rs:222:3
    |
222 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
222 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/optipng/ioutil.rs:253:3
    |
253 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
253 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/optipng/ioutil.rs:294:3
    |
294 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
294 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/optipng/ioutil.rs:338:3
    |
338 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
338 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/optipng/ioutil.rs:357:3
    |
357 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
357 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/optipng/ioutil.rs:370:3
    |
370 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
370 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/optipng/ioutil.rs:403:3
    |
403 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
403 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/optipng/ioutil.rs:448:3
    |
448 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
448 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/optipng/ioutil.rs:505:3
    |
505 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
505 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/optipng/ioutil.rs:559:3
    |
559 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
559 | #[unsafe(no_mangle)]
    |   +++++++         +

error: extern blocks must be unsafe
 --> src/optipng/optim.rs:2:1
  |
2 | / extern "C" {
3 | |     fn memset(
4 | |         _: *mut libc::c_void,
5 | |         _: libc::c_int,
6 | |         _: libc::c_ulong,
7 | |     ) -> *mut libc::c_void;
8 | | }
  | |_^

error: unsafe attribute used without unsafe
   --> src/optipng/optim.rs:138:3
    |
138 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
138 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/optipng/optim.rs:229:3
    |
229 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
229 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/optipng/optim.rs:258:3
    |
258 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
258 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/optipng/optim.rs:285:3
    |
285 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
285 | #[unsafe(no_mangle)]
    |   +++++++         +

error: extern blocks must be unsafe
  --> src/optipng/optipng.rs:2:1
   |
2  | / extern "C" {
3  | |     pub type _IO_wide_data;
4  | |     pub type _IO_codecvt;
5  | |     pub type _IO_marker;
...  |
61 | |     fn zlibVersion() -> *const libc::c_char;
62 | | }
   | |_^

error: extern blocks must be unsafe
 --> src/optipng/ratio.rs:2:1
  |
2 | / extern "C" {
3 | |     fn vsnprintf(
4 | |         _: *mut libc::c_char,
5 | |         _: libc::c_ulong,
... |
8 | |     ) -> libc::c_int;
9 | | }
  | |_^

error: unsafe attribute used without unsafe
   --> src/optipng/ratio.rs:141:3
    |
141 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
141 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/optipng/ratio.rs:151:3
    |
151 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
151 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/optipng/ratio.rs:161:3
    |
161 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
161 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/optipng/ratio.rs:171:3
    |
171 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
171 | #[unsafe(no_mangle)]
    |   +++++++         +

error: extern blocks must be unsafe
  --> src/pngxtern/pngxmem.rs:2:1
   |
2  | / extern "C" {
3  | |     pub type png_struct_def;
4  | |     pub type png_info_def;
5  | |     fn png_malloc(png_ptr: png_const_structrp, size: png_alloc_size_t) -> png_voidp;
...  |
31 | |     ) -> *mut libc::c_void;
32 | | }
   | |_^

error: unsafe attribute used without unsafe
  --> src/pngxtern/pngxmem.rs:49:3
   |
49 | #[no_mangle]
   |   ^^^^^^^^^ usage of unsafe attribute
   |
help: wrap the attribute in `unsafe(...)`
   |
49 | #[unsafe(no_mangle)]
   |   +++++++         +

error: unsafe attribute used without unsafe
  --> src/pngxtern/pngxmem.rs:62:3
   |
62 | #[no_mangle]
   |   ^^^^^^^^^ usage of unsafe attribute
   |
help: wrap the attribute in `unsafe(...)`
   |
62 | #[unsafe(no_mangle)]
   |   +++++++         +

error: extern blocks must be unsafe
  --> src/pngxtern/pngxrbmp.rs:2:1
   |
2  | / extern "C" {
3  | |     pub type _IO_wide_data;
4  | |     pub type _IO_codecvt;
5  | |     pub type _IO_marker;
...  |
66 | |     ) -> *mut libc::c_void;
67 | | }
   | |_^

error: unsafe attribute used without unsafe
   --> src/pngxtern/pngxrbmp.rs:636:3
    |
636 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
636 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/pngxtern/pngxrbmp.rs:678:3
    |
678 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
678 | #[unsafe(no_mangle)]
    |   +++++++         +

error: extern blocks must be unsafe
  --> src/pngxtern/pngxread.rs:2:1
   |
2  | / extern "C" {
3  | |     pub type _IO_wide_data;
4  | |     pub type _IO_codecvt;
5  | |     pub type _IO_marker;
...  |
90 | |     ) -> libc::c_int;
91 | | }
   | |_^

error: unsafe attribute used without unsafe
   --> src/pngxtern/pngxread.rs:280:3
    |
280 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
280 | #[unsafe(no_mangle)]
    |   +++++++         +

error: extern blocks must be unsafe
  --> src/pngxtern/pngxrgif.rs:2:1
   |
2  | / extern "C" {
3  | |     pub type _IO_wide_data;
4  | |     pub type _IO_codecvt;
5  | |     pub type _IO_marker;
...  |
74 | |     ) -> libc::c_int;
75 | | }
   | |_^

error: unsafe attribute used without unsafe
   --> src/pngxtern/pngxrgif.rs:219:3
    |
219 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
219 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/pngxtern/pngxrgif.rs:329:3
    |
329 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
329 | #[unsafe(no_mangle)]
    |   +++++++         +

error: extern blocks must be unsafe
  --> src/pngxtern/pngxrjpg.rs:2:1
   |
2  | / extern "C" {
3  | |     pub type _IO_wide_data;
4  | |     pub type _IO_codecvt;
5  | |     pub type _IO_marker;
...  |
19 | |     ) -> libc::c_int;
20 | | }
   | |_^

error: unsafe attribute used without unsafe
   --> src/pngxtern/pngxrjpg.rs:108:3
    |
108 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
108 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/pngxtern/pngxrjpg.rs:172:3
    |
172 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
172 | #[unsafe(no_mangle)]
    |   +++++++         +

error: extern blocks must be unsafe
  --> src/pngxtern/pngxrpnm.rs:2:1
   |
2  | / extern "C" {
3  | |     pub type _IO_wide_data;
4  | |     pub type _IO_codecvt;
5  | |     pub type _IO_marker;
...  |
53 | |     ) -> *mut libc::c_void;
54 | | }
   | |_^

error: unsafe attribute used without unsafe
   --> src/pngxtern/pngxrpnm.rs:159:3
    |
159 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
159 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/pngxtern/pngxrpnm.rs:253:3
    |
253 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
253 | #[unsafe(no_mangle)]
    |   +++++++         +

error: extern blocks must be unsafe
  --> src/pngxtern/pngxrtif.rs:2:1
   |
2  | / extern "C" {
3  | |     pub type _IO_wide_data;
4  | |     pub type _IO_codecvt;
5  | |     pub type _IO_marker;
...  |
43 | |     fn strstr(_: *const libc::c_char, _: *const libc::c_char) -> *mut libc::c_char;
44 | | }
   | |_^

error: unsafe attribute used without unsafe
   --> src/pngxtern/pngxrtif.rs:121:3
    |
121 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
121 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/pngxtern/pngxrtif.rs:163:3
    |
163 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
163 | #[unsafe(no_mangle)]
    |   +++++++         +

error: extern blocks must be unsafe
  --> src/pngxtern/pngxset.rs:2:1
   |
2  | / extern "C" {
3  | |     pub type png_struct_def;
4  | |     pub type png_info_def;
5  | |     fn png_get_IHDR(
...  |
26 | |     );
27 | | }
   | |_^

error: unsafe attribute used without unsafe
  --> src/pngxtern/pngxset.rs:36:3
   |
36 | #[no_mangle]
   |   ^^^^^^^^^ usage of unsafe attribute
   |
help: wrap the attribute in `unsafe(...)`
   |
36 | #[unsafe(no_mangle)]
   |   +++++++         +

error: unsafe attribute used without unsafe
  --> src/pngxtern/pngxset.rs:78:3
   |
78 | #[no_mangle]
   |   ^^^^^^^^^ usage of unsafe attribute
   |
help: wrap the attribute in `unsafe(...)`
   |
78 | #[unsafe(no_mangle)]
   |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/pngxtern/pngxset.rs:120:3
    |
120 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
120 | #[unsafe(no_mangle)]
    |   +++++++         +

error: extern blocks must be unsafe
  --> src/pnmio/pnmin.rs:2:1
   |
2  | / extern "C" {
3  | |     pub type _IO_wide_data;
4  | |     pub type _IO_codecvt;
5  | |     pub type _IO_marker;
...  |
20 | |     fn pnm_is_valid(pnm_ptr: *const pnm_struct) -> libc::c_int;
21 | | }
   | |_^

error: unsafe attribute used without unsafe
   --> src/pnmio/pnmin.rs:141:3
    |
141 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
141 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/pnmio/pnmin.rs:203:3
    |
203 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
203 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/pnmio/pnmin.rs:367:3
    |
367 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
367 | #[unsafe(no_mangle)]
    |   +++++++         +

error: extern blocks must be unsafe
  --> src/pnmio/pnmout.rs:2:1
   |
2  | / extern "C" {
3  | |     pub type _IO_wide_data;
4  | |     pub type _IO_codecvt;
5  | |     pub type _IO_marker;
...  |
15 | |     fn pnm_is_valid(pnm_ptr: *const pnm_struct) -> libc::c_int;
16 | | }
   | |_^

error: unsafe attribute used without unsafe
  --> src/pnmio/pnmout.rs:72:3
   |
72 | #[no_mangle]
   |   ^^^^^^^^^ usage of unsafe attribute
   |
help: wrap the attribute in `unsafe(...)`
   |
72 | #[unsafe(no_mangle)]
   |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/pnmio/pnmout.rs:128:3
    |
128 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
128 | #[unsafe(no_mangle)]
    |   +++++++         +

error: unsafe attribute used without unsafe
   --> src/pnmio/pnmout.rs:305:3
    |
305 | #[no_mangle]
    |   ^^^^^^^^^ usage of unsafe attribute
    |
help: wrap the attribute in `unsafe(...)`
    |
305 | #[unsafe(no_mangle)]
    |   +++++++         +

error: extern blocks must be unsafe
 --> src/pnmio/pnmutil.rs:2:1
  |
2 | / extern "C" {
3 | |     fn __errno_location() -> *mut libc::c_int;
4 | | }
  | |_^

error: unsafe attribute used without unsafe
  --> src/pnmio/pnmutil.rs:23:3
   |
23 | #[no_mangle]
   |   ^^^^^^^^^ usage of unsafe attribute
   |
help: wrap the attribute in `unsafe(...)`
   |
23 | #[unsafe(no_mangle)]
   |   +++++++         +

error: unsafe attribute used without unsafe
  --> src/pnmio/pnmutil.rs:65:3
   |
65 | #[no_mangle]
   |   ^^^^^^^^^ usage of unsafe attribute
   |
help: wrap the attribute in `unsafe(...)`
   |
65 | #[unsafe(no_mangle)]
   |   +++++++         +

error: unsafe attribute used without unsafe
  --> src/pnmio/pnmutil.rs:84:3
   |
84 | #[no_mangle]
   |   ^^^^^^^^^ usage of unsafe attribute
   |
help: wrap the attribute in `unsafe(...)`
   |
84 | #[unsafe(no_mangle)]
   |   +++++++         +

error[E0658]: extern types are experimental
 --> src/gifread/gifread.rs:3:5
  |
3 |     pub type _IO_wide_data;
  |     ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/gifread/gifread.rs:4:5
  |
4 |     pub type _IO_codecvt;
  |     ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/gifread/gifread.rs:5:5
  |
5 |     pub type _IO_marker;
  |     ^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/minitiff/tiffread.rs:3:5
  |
3 |     pub type _IO_wide_data;
  |     ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/minitiff/tiffread.rs:4:5
  |
4 |     pub type _IO_codecvt;
  |     ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/minitiff/tiffread.rs:5:5
  |
5 |     pub type _IO_marker;
  |     ^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/minitiff/tiffutil.rs:3:5
  |
3 |     pub type _IO_wide_data;
  |     ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/minitiff/tiffutil.rs:4:5
  |
4 |     pub type _IO_codecvt;
  |     ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/minitiff/tiffutil.rs:5:5
  |
5 |     pub type _IO_marker;
  |     ^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/opngreduc/opngreduc.rs:3:5
  |
3 |     pub type png_struct_def;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/opngreduc/opngreduc.rs:4:5
  |
4 |     pub type png_info_def;
  |     ^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/optipng/ioutil.rs:3:5
  |
3 |     pub type _IO_wide_data;
  |     ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/optipng/ioutil.rs:4:5
  |
4 |     pub type _IO_codecvt;
  |     ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/optipng/ioutil.rs:5:5
  |
5 |     pub type _IO_marker;
  |     ^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/optipng/optipng.rs:3:5
  |
3 |     pub type _IO_wide_data;
  |     ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/optipng/optipng.rs:4:5
  |
4 |     pub type _IO_codecvt;
  |     ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/optipng/optipng.rs:5:5
  |
5 |     pub type _IO_marker;
  |     ^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/optipng/optipng.rs:6:5
  |
6 |     pub type png_struct_def;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: C-variadic functions are unstable
   --> src/optipng/optipng.rs:226:1
    |
226 | / unsafe extern "C" fn error(mut fmt: *const libc::c_char, mut args: ...) {
227 | |     let mut arg_ptr: ::core::ffi::VaListImpl;
228 | |     fprintf(stderr, b"** Error: \0" as *const u8 as *const libc::c_char);
229 | |     arg_ptr = args.clone();
...   |
232 | |     exit(1 as libc::c_int);
233 | | }
    | |_^
    |
    = note: see issue #44930 <https://github.com/rust-lang/rust/issues/44930> for more information

error[E0658]: C-variadic functions are unstable
    --> src/optipng/optipng.rs:1012:1
     |
1012 | / unsafe extern "C" fn app_printf(mut fmt: *const libc::c_char, mut args: ...) {
1013 | |     let mut arg_ptr: ::core::ffi::VaListImpl;
1014 | |     if *fmt.offset(0 as libc::c_int as isize) as libc::c_int == '\0' as i32 {
1015 | |         return;
...    |
1033 | | }
     | |_^
     |
     = note: see issue #44930 <https://github.com/rust-lang/rust/issues/44930> for more information

error[E0658]: C-variadic functions are unstable
  --> src/optipng/ratio.rs:35:1
   |
35 | / unsafe extern "C" fn opng_snprintf_impl(
36 | |     mut buffer: *mut libc::c_char,
37 | |     mut buffer_size: size_t,
38 | |     mut format: *const libc::c_char,
...  |
54 | |     return result;
55 | | }
   | |_^
   |
   = note: see issue #44930 <https://github.com/rust-lang/rust/issues/44930> for more information

error[E0658]: extern types are experimental
 --> src/pngxtern/pngxmem.rs:3:5
  |
3 |     pub type png_struct_def;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pngxtern/pngxmem.rs:4:5
  |
4 |     pub type png_info_def;
  |     ^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pngxtern/pngxrbmp.rs:3:5
  |
3 |     pub type _IO_wide_data;
  |     ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pngxtern/pngxrbmp.rs:4:5
  |
4 |     pub type _IO_codecvt;
  |     ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pngxtern/pngxrbmp.rs:5:5
  |
5 |     pub type _IO_marker;
  |     ^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pngxtern/pngxrbmp.rs:6:5
  |
6 |     pub type png_struct_def;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pngxtern/pngxrbmp.rs:7:5
  |
7 |     pub type png_info_def;
  |     ^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pngxtern/pngxread.rs:3:5
  |
3 |     pub type _IO_wide_data;
  |     ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pngxtern/pngxread.rs:4:5
  |
4 |     pub type _IO_codecvt;
  |     ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pngxtern/pngxread.rs:5:5
  |
5 |     pub type _IO_marker;
  |     ^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pngxtern/pngxread.rs:6:5
  |
6 |     pub type png_struct_def;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pngxtern/pngxread.rs:7:5
  |
7 |     pub type png_info_def;
  |     ^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pngxtern/pngxrgif.rs:3:5
  |
3 |     pub type _IO_wide_data;
  |     ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pngxtern/pngxrgif.rs:4:5
  |
4 |     pub type _IO_codecvt;
  |     ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pngxtern/pngxrgif.rs:5:5
  |
5 |     pub type _IO_marker;
  |     ^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pngxtern/pngxrgif.rs:6:5
  |
6 |     pub type png_struct_def;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pngxtern/pngxrgif.rs:7:5
  |
7 |     pub type png_info_def;
  |     ^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pngxtern/pngxrjpg.rs:3:5
  |
3 |     pub type _IO_wide_data;
  |     ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pngxtern/pngxrjpg.rs:4:5
  |
4 |     pub type _IO_codecvt;
  |     ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pngxtern/pngxrjpg.rs:5:5
  |
5 |     pub type _IO_marker;
  |     ^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pngxtern/pngxrjpg.rs:6:5
  |
6 |     pub type png_struct_def;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pngxtern/pngxrjpg.rs:7:5
  |
7 |     pub type png_info_def;
  |     ^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pngxtern/pngxrpnm.rs:3:5
  |
3 |     pub type _IO_wide_data;
  |     ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pngxtern/pngxrpnm.rs:4:5
  |
4 |     pub type _IO_codecvt;
  |     ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pngxtern/pngxrpnm.rs:5:5
  |
5 |     pub type _IO_marker;
  |     ^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pngxtern/pngxrpnm.rs:6:5
  |
6 |     pub type png_struct_def;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pngxtern/pngxrpnm.rs:7:5
  |
7 |     pub type png_info_def;
  |     ^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pngxtern/pngxrtif.rs:3:5
  |
3 |     pub type _IO_wide_data;
  |     ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pngxtern/pngxrtif.rs:4:5
  |
4 |     pub type _IO_codecvt;
  |     ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pngxtern/pngxrtif.rs:5:5
  |
5 |     pub type _IO_marker;
  |     ^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pngxtern/pngxrtif.rs:6:5
  |
6 |     pub type png_struct_def;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pngxtern/pngxrtif.rs:7:5
  |
7 |     pub type png_info_def;
  |     ^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pngxtern/pngxset.rs:3:5
  |
3 |     pub type png_struct_def;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pngxtern/pngxset.rs:4:5
  |
4 |     pub type png_info_def;
  |     ^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pnmio/pnmin.rs:3:5
  |
3 |     pub type _IO_wide_data;
  |     ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pnmio/pnmin.rs:4:5
  |
4 |     pub type _IO_codecvt;
  |     ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pnmio/pnmin.rs:5:5
  |
5 |     pub type _IO_marker;
  |     ^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pnmio/pnmout.rs:3:5
  |
3 |     pub type _IO_wide_data;
  |     ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pnmio/pnmout.rs:4:5
  |
4 |     pub type _IO_codecvt;
  |     ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/pnmio/pnmout.rs:5:5
  |
5 |     pub type _IO_marker;
  |     ^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error: type `size_t` should have an upper camel case name
  --> src/gifread/gifread.rs:26:10
   |
26 | pub type size_t = libc::c_ulong;
   |          ^^^^^^ help: convert the identifier to upper camel case: `SizeT`
   |
   = note: `-D non-camel-case-types` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(non_camel_case_types)]`

error: type `__off_t` should have an upper camel case name
  --> src/gifread/gifread.rs:27:10
   |
27 | pub type __off_t = libc::c_long;
   |          ^^^^^^^ help: convert the identifier to upper camel case: `OffT`

error: type `__off64_t` should have an upper camel case name
  --> src/gifread/gifread.rs:28:10
   |
28 | pub type __off64_t = libc::c_long;
   |          ^^^^^^^^^ help: convert the identifier to upper camel case: `Off64T`

error: type `_IO_lock_t` should have an upper camel case name
  --> src/gifread/gifread.rs:62:10
   |
62 | pub type _IO_lock_t = ();
   |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `IoLockT`

error: this `if` statement can be collapsed
   --> src/gifread/gifread.rs:207:5
    |
207 | /     if (*screen).Background > 0 as libc::c_int as libc::c_uint {
208 | |         if (*screen).GlobalColorFlag != 0
209 | |             && (*screen).Background >= (*screen).GlobalNumColors
210 | |             || (*screen).GlobalColorFlag == 0
...   |
214 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
    = note: `-D clippy::collapsible-if` implied by `-D warnings`
    = help: to override `-D warnings` add `#[allow(clippy::collapsible_if)]`
help: collapse nested if block
    |
207 ~     if (*screen).Background > 0 as libc::c_int as libc::c_uint && ((*screen).GlobalColorFlag != 0
208 +             && (*screen).Background >= (*screen).GlobalNumColors || (*screen).GlobalColorFlag == 0) {
209 +         (*screen).Background = 0 as libc::c_int as libc::c_uint;
210 +     }
    |

error: operator precedence can trip the unwary
   --> src/gifread/gifread.rs:547:18
    |
547 |               |= ((buffer[(i / 8 as libc::c_int) as usize] as libc::c_int
    |  __________________^
548 | |                 & (1 as libc::c_int) << i % 8 as libc::c_int != 0 as libc::c_int)
    | |____________________________________________________________^ help: consider parenthesizing your expression: `buffer[(i / 8 as libc::c_int) as usize] as libc::c_int & ((1 as libc::c_int) << i % 8 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence
    = note: `-D clippy::precedence` implied by `-D warnings`
    = help: to override `-D warnings` add `#[allow(clippy::precedence)]`

error: operator precedence can trip the unwary
   --> src/gifread/gifread.rs:548:19
    |
548 |                 & (1 as libc::c_int) << i % 8 as libc::c_int != 0 as libc::c_int)
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider parenthesizing your expression: `(1 as libc::c_int) << (i % 8 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence

error: operator precedence can trip the unwary
   --> src/gifread/gifread.rs:853:28
    |
853 |           .DisposalMethod = (*buffer.offset(0 as libc::c_int as isize) as libc::c_int
    |  ____________________________^
854 | |         >> 2 as libc::c_int & 0x7 as libc::c_int) as libc::c_uint;
    | |________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence
help: consider parenthesizing your expression
    |
853 ~         .DisposalMethod = ((*buffer.offset(0 as libc::c_int as isize) as libc::c_int
854 ~         >> 2 as libc::c_int) & 0x7 as libc::c_int) as libc::c_uint;
    |

error: operator precedence can trip the unwary
   --> src/gifread/gifread.rs:856:23
    |
856 |           .InputFlag = (*buffer.offset(0 as libc::c_int as isize) as libc::c_int
    |  _______________________^
857 | |         >> 1 as libc::c_int & 0x1 as libc::c_int) as libc::c_uint;
    | |________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence
help: consider parenthesizing your expression
    |
856 ~         .InputFlag = ((*buffer.offset(0 as libc::c_int as isize) as libc::c_int
857 ~         >> 1 as libc::c_int) & 0x1 as libc::c_int) as libc::c_uint;
    |

error: type `size_t` should have an upper camel case name
  --> src/minitiff/tiffread.rs:31:10
   |
31 | pub type size_t = libc::c_ulong;
   |          ^^^^^^ help: convert the identifier to upper camel case: `SizeT`

error: type `__off_t` should have an upper camel case name
  --> src/minitiff/tiffread.rs:32:10
   |
32 | pub type __off_t = libc::c_long;
   |          ^^^^^^^ help: convert the identifier to upper camel case: `OffT`

error: type `__off64_t` should have an upper camel case name
  --> src/minitiff/tiffread.rs:33:10
   |
33 | pub type __off64_t = libc::c_long;
   |          ^^^^^^^^^ help: convert the identifier to upper camel case: `Off64T`

error: type `_IO_lock_t` should have an upper camel case name
  --> src/minitiff/tiffread.rs:67:10
   |
67 | pub type _IO_lock_t = ();
   |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `IoLockT`

error: type `C2RustUnnamed_0` should have an upper camel case name
   --> src/minitiff/tiffread.rs:130:10
    |
130 | pub type C2RustUnnamed_0 = libc::c_uint;
    |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `C2rustUnnamed0`

error: type `size_t` should have an upper camel case name
  --> src/minitiff/tiffutil.rs:17:10
   |
17 | pub type size_t = libc::c_ulong;
   |          ^^^^^^ help: convert the identifier to upper camel case: `SizeT`

error: type `__off_t` should have an upper camel case name
  --> src/minitiff/tiffutil.rs:18:10
   |
18 | pub type __off_t = libc::c_long;
   |          ^^^^^^^ help: convert the identifier to upper camel case: `OffT`

error: type `__off64_t` should have an upper camel case name
  --> src/minitiff/tiffutil.rs:19:10
   |
19 | pub type __off64_t = libc::c_long;
   |          ^^^^^^^^^ help: convert the identifier to upper camel case: `Off64T`

error: type `_IO_lock_t` should have an upper camel case name
  --> src/minitiff/tiffutil.rs:53:10
   |
53 | pub type _IO_lock_t = ();
   |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `IoLockT`

error: type `C2RustUnnamed_0` should have an upper camel case name
   --> src/minitiff/tiffutil.rs:103:10
    |
103 | pub type C2RustUnnamed_0 = libc::c_uint;
    |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `C2rustUnnamed0`

error: unused import: `::libc`
 --> src/minitiff/tiffwrite.rs:1:5
  |
1 | use ::libc;
  |     ^^^^^^
  |
  = note: `-D unused-imports` implied by `-D warnings`
  = help: to override `-D warnings` add `#[allow(unused_imports)]`

error: type `size_t` should have an upper camel case name
   --> src/opngreduc/opngreduc.rs:128:10
    |
128 | pub type size_t = libc::c_ulong;
    |          ^^^^^^ help: convert the identifier to upper camel case: `SizeT`

error: type `png_byte` should have an upper camel case name
   --> src/opngreduc/opngreduc.rs:129:10
    |
129 | pub type png_byte = libc::c_uchar;
    |          ^^^^^^^^ help: convert the identifier to upper camel case: `PngByte`

error: type `png_uint_16` should have an upper camel case name
   --> src/opngreduc/opngreduc.rs:130:10
    |
130 | pub type png_uint_16 = libc::c_ushort;
    |          ^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngUint16`

error: type `png_uint_32` should have an upper camel case name
   --> src/opngreduc/opngreduc.rs:131:10
    |
131 | pub type png_uint_32 = libc::c_uint;
    |          ^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngUint32`

error: type `png_alloc_size_t` should have an upper camel case name
   --> src/opngreduc/opngreduc.rs:132:10
    |
132 | pub type png_alloc_size_t = size_t;
    |          ^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngAllocSizeT`

error: type `png_voidp` should have an upper camel case name
   --> src/opngreduc/opngreduc.rs:133:10
    |
133 | pub type png_voidp = *mut libc::c_void;
    |          ^^^^^^^^^ help: convert the identifier to upper camel case: `PngVoidp`

error: type `png_bytep` should have an upper camel case name
   --> src/opngreduc/opngreduc.rs:134:10
    |
134 | pub type png_bytep = *mut png_byte;
    |          ^^^^^^^^^ help: convert the identifier to upper camel case: `PngBytep`

error: type `png_const_bytep` should have an upper camel case name
   --> src/opngreduc/opngreduc.rs:135:10
    |
135 | pub type png_const_bytep = *const png_byte;
    |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngConstBytep`

error: type `png_uint_16p` should have an upper camel case name
   --> src/opngreduc/opngreduc.rs:136:10
    |
136 | pub type png_uint_16p = *mut png_uint_16;
    |          ^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngUint16p`

error: type `png_const_charp` should have an upper camel case name
   --> src/opngreduc/opngreduc.rs:137:10
    |
137 | pub type png_const_charp = *const libc::c_char;
    |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngConstCharp`

error: type `png_bytepp` should have an upper camel case name
   --> src/opngreduc/opngreduc.rs:138:10
    |
138 | pub type png_bytepp = *mut *mut png_byte;
    |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `PngBytepp`

error: type `png_struct` should have an upper camel case name
   --> src/opngreduc/opngreduc.rs:139:10
    |
139 | pub type png_struct = png_struct_def;
    |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `PngStruct`

error: type `png_structp` should have an upper camel case name
   --> src/opngreduc/opngreduc.rs:140:10
    |
140 | pub type png_structp = *mut png_struct;
    |          ^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngStructp`

error: type `png_info` should have an upper camel case name
   --> src/opngreduc/opngreduc.rs:141:10
    |
141 | pub type png_info = png_info_def;
    |          ^^^^^^^^ help: convert the identifier to upper camel case: `PngInfo`

error: type `png_infop` should have an upper camel case name
   --> src/opngreduc/opngreduc.rs:142:10
    |
142 | pub type png_infop = *mut png_info;
    |          ^^^^^^^^^ help: convert the identifier to upper camel case: `PngInfop`

error: type `png_structrp` should have an upper camel case name
   --> src/opngreduc/opngreduc.rs:143:10
    |
143 | pub type png_structrp = *mut png_struct;
    |          ^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngStructrp`

error: type `png_const_structrp` should have an upper camel case name
   --> src/opngreduc/opngreduc.rs:144:10
    |
144 | pub type png_const_structrp = *const png_struct;
    |          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngConstStructrp`

error: type `png_inforp` should have an upper camel case name
   --> src/opngreduc/opngreduc.rs:145:10
    |
145 | pub type png_inforp = *mut png_info;
    |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `PngInforp`

error: type `png_const_inforp` should have an upper camel case name
   --> src/opngreduc/opngreduc.rs:146:10
    |
146 | pub type png_const_inforp = *const png_info;
    |          ^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngConstInforp`

error: type `png_color` should have an upper camel case name
   --> src/opngreduc/opngreduc.rs:154:10
    |
154 | pub type png_color = png_color_struct;
    |          ^^^^^^^^^ help: convert the identifier to upper camel case: `PngColor`

error: type `png_colorp` should have an upper camel case name
   --> src/opngreduc/opngreduc.rs:155:10
    |
155 | pub type png_colorp = *mut png_color;
    |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `PngColorp`

error: type `png_const_colorp` should have an upper camel case name
   --> src/opngreduc/opngreduc.rs:156:10
    |
156 | pub type png_const_colorp = *const png_color;
    |          ^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngConstColorp`

error: type `png_color_16` should have an upper camel case name
   --> src/opngreduc/opngreduc.rs:166:10
    |
166 | pub type png_color_16 = png_color_16_struct;
    |          ^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngColor16`

error: type `png_color_16p` should have an upper camel case name
   --> src/opngreduc/opngreduc.rs:167:10
    |
167 | pub type png_color_16p = *mut png_color_16;
    |          ^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngColor16p`

error: type `png_const_color_16p` should have an upper camel case name
   --> src/opngreduc/opngreduc.rs:168:10
    |
168 | pub type png_const_color_16p = *const png_color_16;
    |          ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngConstColor16p`

error: type `png_color_8` should have an upper camel case name
   --> src/opngreduc/opngreduc.rs:178:10
    |
178 | pub type png_color_8 = png_color_8_struct;
    |          ^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngColor8`

error: type `png_color_8p` should have an upper camel case name
   --> src/opngreduc/opngreduc.rs:179:10
    |
179 | pub type png_color_8p = *mut png_color_8;
    |          ^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngColor8p`

error: type `png_row_info` should have an upper camel case name
   --> src/opngreduc/opngreduc.rs:190:10
    |
190 | pub type png_row_info = png_row_info_struct;
    |          ^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngRowInfo`

error: type `png_row_infop` should have an upper camel case name
   --> src/opngreduc/opngreduc.rs:191:10
    |
191 | pub type png_row_infop = *mut png_row_info;
    |          ^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngRowInfop`

error: this `if` statement can be collapsed
   --> src/opngreduc/opngreduc.rs:202:5
    |
202 | /     if png_get_color_type(png_ptr as *const png_struct, info_ptr as *const png_info)
203 | |         as libc::c_int & 1 as libc::c_int != 0
204 | |     {
205 | |         if png_get_valid(
...   |
213 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
    |
202 ~     if png_get_color_type(png_ptr as *const png_struct, info_ptr as *const png_info)
203 +         as libc::c_int & 1 as libc::c_int != 0 && png_get_valid(
204 +             png_ptr as *const png_struct,
205 +             info_ptr as *const png_info,
206 +             0x8 as libc::c_uint,
207 +         ) == 0 {
208 +         return 0 as libc::c_int;
209 +     }
    |

error: unused label
   --> src/opngreduc/opngreduc.rs:256:5
    |
256 |     'c_4762: {
    |     ^^^^^^^
    |
    = note: `-D unused-labels` implied by `-D warnings`
    = help: to override `-D warnings` add `#[allow(unused_labels)]`

error: unused label
   --> src/opngreduc/opngreduc.rs:288:5
    |
288 |     'c_4701: {
    |     ^^^^^^^

error: unused label
   --> src/opngreduc/opngreduc.rs:404:5
    |
404 |     'c_4166: {
    |     ^^^^^^^

error: unused label
   --> src/opngreduc/opngreduc.rs:446:9
    |
446 |         'c_4054: {
    |         ^^^^^^^

error: unused label
   --> src/opngreduc/opngreduc.rs:506:5
    |
506 |     'c_3638: {
    |     ^^^^^^^

error: unused label
   --> src/opngreduc/opngreduc.rs:613:5
    |
613 |     'c_7077: {
    |     ^^^^^^^

error: unused label
   --> src/opngreduc/opngreduc.rs:692:5
    |
692 |     'c_5512: {
    |     ^^^^^^^

error: unused label
   --> src/opngreduc/opngreduc.rs:722:5
    |
722 |     'c_5474: {
    |     ^^^^^^^

error: unused label
   --> src/opngreduc/opngreduc.rs:758:13
    |
758 |             'c_5407: {
    |             ^^^^^^^

error: unused label
   --> src/opngreduc/opngreduc.rs:813:13
    |
813 |             'c_5275: {
    |             ^^^^^^^

error: unused label
   --> src/opngreduc/opngreduc.rs:843:13
    |
843 |             'c_5238: {
    |             ^^^^^^^

error: unused label
   --> src/opngreduc/opngreduc.rs:892:5
    |
892 |     'c_5144: {
    |     ^^^^^^^

error: this `if` statement can be collapsed
   --> src/opngreduc/opngreduc.rs:973:9
    |
973 | /         if reductions & 0x1 as libc::c_int as png_uint_32 != 0 {
974 | |             if (*background).red as libc::c_int % 257 as libc::c_int != 0 as libc::c_int
975 | |                 || (*background).green as libc::c_int % 257 as libc::c_int
976 | |                     != 0 as libc::c_int
...   |
984 | |         }
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
    |
973 ~         if reductions & 0x1 as libc::c_int as png_uint_32 != 0 && ((*background).red as libc::c_int % 257 as libc::c_int != 0 as libc::c_int
974 +                 || (*background).green as libc::c_int % 257 as libc::c_int
975 +                     != 0 as libc::c_int
976 +                 || (*background).blue as libc::c_int % 257 as libc::c_int
977 +                     != 0 as libc::c_int || (*background).gray as libc::c_int % 257 as libc::c_int
978 +                     != 0 as libc::c_int) {
979 +             reductions &= !(0x1 as libc::c_int) as png_uint_32;
980 +         }
    |

error: this `if` statement can be collapsed
   --> src/opngreduc/opngreduc.rs:985:9
    |
985 | /         if reductions & 0x4 as libc::c_int as png_uint_32 != 0 {
986 | |             if (*background).red as libc::c_int != (*background).green as libc::c_int
987 | |                 || (*background).red as libc::c_int != (*background).blue as libc::c_int
...   |
991 | |         }
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
    |
985 ~         if reductions & 0x4 as libc::c_int as png_uint_32 != 0 && ((*background).red as libc::c_int != (*background).green as libc::c_int || (*background).red as libc::c_int != (*background).blue as libc::c_int) {
986 +             reductions &= !(0x4 as libc::c_int) as png_uint_32;
987 +         }
    |

error: unused label
    --> src/opngreduc/opngreduc.rs:1166:5
     |
1166 |     'c_9088: {
     |     ^^^^^^^

error: unused label
    --> src/opngreduc/opngreduc.rs:1197:9
     |
1197 |         'c_9047: {
     |         ^^^^^^^

error: unused label
    --> src/opngreduc/opngreduc.rs:1235:9
     |
1235 |         'c_8979: {
     |         ^^^^^^^

error: unused label
    --> src/opngreduc/opngreduc.rs:1268:9
     |
1268 |         'c_8928: {
     |         ^^^^^^^

error: unused label
    --> src/opngreduc/opngreduc.rs:1331:5
     |
1331 |     'c_8749: {
     |     ^^^^^^^

error: unused label
    --> src/opngreduc/opngreduc.rs:1579:9
     |
1579 |         'c_3322: {
     |         ^^^^^^^

error: unused label
    --> src/opngreduc/opngreduc.rs:1619:9
     |
1619 |         'c_3254: {
     |         ^^^^^^^

error: unused label
    --> src/opngreduc/opngreduc.rs:1652:9
     |
1652 |         'c_3187: {
     |         ^^^^^^^

error: operator precedence can trip the unwary
    --> src/opngreduc/opngreduc.rs:1707:27
     |
1707 |         src_mask_init = (((1 as libc::c_int) << 8 as libc::c_int + src_bit_depth)
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider parenthesizing your expression: `(1 as libc::c_int) << (8 as libc::c_int + src_bit_depth)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence

error: unused label
    --> src/opngreduc/opngreduc.rs:1841:5
     |
1841 |     'c_6417: {
     |     ^^^^^^^

error: unused label
    --> src/opngreduc/opngreduc.rs:1931:25
     |
1931 |                         'c_6126: {
     |                         ^^^^^^^

error: unused label
    --> src/opngreduc/opngreduc.rs:1992:25
     |
1992 |                         'c_5992: {
     |                         ^^^^^^^

error: unused label
    --> src/opngreduc/opngreduc.rs:2082:9
     |
2082 |         'c_5771: {
     |         ^^^^^^^

error: unused label
    --> src/opngreduc/opngreduc.rs:2115:9
     |
2115 |         'c_5722: {
     |         ^^^^^^^

error: unused label
    --> src/opngreduc/opngreduc.rs:2207:17
     |
2207 |                 'c_4896: {
     |                 ^^^^^^^

error: unused label
    --> src/opngreduc/opngreduc.rs:2267:17
     |
2267 |                 'c_3892: {
     |                 ^^^^^^^

error: unused label
    --> src/opngreduc/opngreduc.rs:2395:9
     |
2395 |         'c_7859: {
     |         ^^^^^^^

error: unused label
    --> src/opngreduc/opngreduc.rs:2533:9
     |
2533 |         'c_8011: {
     |         ^^^^^^^

error: this `if` statement can be collapsed
    --> src/opngreduc/opngreduc.rs:2565:13
     |
2565 | /             if is_gray != 0 {
2566 | |                 if (*palette.offset(k as isize)).red as libc::c_int
2567 | |                     != (*palette.offset(k as isize)).green as libc::c_int
2568 | |                     || (*palette.offset(k as isize)).red as libc::c_int
...    |
2573 | |             }
     | |_____________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
     |
2565 ~             if is_gray != 0 && ((*palette.offset(k as isize)).red as libc::c_int
2566 +                     != (*palette.offset(k as isize)).green as libc::c_int || (*palette.offset(k as isize)).red as libc::c_int
2567 +                         != (*palette.offset(k as isize)).blue as libc::c_int) {
2568 +                 is_gray = 0 as libc::c_int;
2569 +             }
     |

error: unused label
    --> src/opngreduc/opngreduc.rs:2590:5
     |
2590 |     'c_7535: {
     |     ^^^^^^^

error: unused label
    --> src/opngreduc/opngreduc.rs:2619:5
     |
2619 |     'c_7496: {
     |     ^^^^^^^

error: unused label
    --> src/opngreduc/opngreduc.rs:2663:9
     |
2663 |         'c_7419: {
     |         ^^^^^^^

error: unused label
    --> src/opngreduc/opngreduc.rs:2759:13
     |
2759 |             'c_7137: {
     |             ^^^^^^^

error: unused label
    --> src/opngreduc/opngreduc.rs:2804:13
     |
2804 |             'c_6910: {
     |             ^^^^^^^

error: this `if` statement can be collapsed
    --> src/opngreduc/opngreduc.rs:2938:5
     |
2938 | /     if color_type & !(4 as libc::c_int) == 0 as libc::c_int
2939 | |         && reductions & 0x40 as libc::c_int as png_uint_32 != 0
2940 | |         || color_type & !(4 as libc::c_int) == 2 as libc::c_int
2941 | |             && reductions & 0x10 as libc::c_int as png_uint_32 != 0
...    |
2946 | |     }
     | |_____^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
     |
2938 ~     if (color_type & !(4 as libc::c_int) == 0 as libc::c_int
2939 +         && reductions & 0x40 as libc::c_int as png_uint_32 != 0 || color_type & !(4 as libc::c_int) == 2 as libc::c_int
2940 +             && reductions & 0x10 as libc::c_int as png_uint_32 != 0) && result & 0x80 as libc::c_int as png_uint_32 == 0 {
2941 +         result |= opng_reduce_to_palette(png_ptr, info_ptr, reductions);
2942 +     }
     |

error: type `opng_bitset_t` should have an upper camel case name
 --> src/optipng/bitset.rs:6:10
  |
6 | pub type opng_bitset_t = libc::c_uint;
  |          ^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `OpngBitsetT`

error: operator precedence can trip the unwary
  --> src/optipng/bitset.rs:26:12
   |
26 |         if set & (1 as libc::c_uint) << i != 0 as libc::c_int as libc::c_uint {
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider parenthesizing your expression: `set & ((1 as libc::c_uint) << i)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence

error: operator precedence can trip the unwary
  --> src/optipng/bitset.rs:43:12
   |
43 |         if set & (1 as libc::c_uint) << i != 0 as libc::c_int as libc::c_uint {
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider parenthesizing your expression: `set & ((1 as libc::c_uint) << i)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence

error: operator precedence can trip the unwary
  --> src/optipng/bitset.rs:56:12
   |
56 |         if set & (1 as libc::c_uint) << i != 0 as libc::c_int as libc::c_uint {
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider parenthesizing your expression: `set & ((1 as libc::c_uint) << i)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence

error: operator precedence can trip the unwary
  --> src/optipng/bitset.rs:76:12
   |
76 |         if set & (1 as libc::c_uint) << i != 0 as libc::c_int as libc::c_uint {
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider parenthesizing your expression: `set & ((1 as libc::c_uint) << i)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence

error: operator precedence can trip the unwary
   --> src/optipng/bitset.rs:154:26
    |
154 |                     if !(mask_set & (1 as libc::c_uint) << num
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider parenthesizing your expression: `mask_set & ((1 as libc::c_uint) << num)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence

error: operator precedence can trip the unwary
   --> src/optipng/bitset.rs:174:26
    |
174 |                         ((1 as libc::c_uint) << num2 - num1 << 1 as libc::c_int)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider parenthesizing your expression: `(1 as libc::c_uint) << (num2 - num1)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence

error: type `size_t` should have an upper camel case name
  --> src/optipng/ioutil.rs:52:10
   |
52 | pub type size_t = libc::c_ulong;
   |          ^^^^^^ help: convert the identifier to upper camel case: `SizeT`

error: type `__dev_t` should have an upper camel case name
  --> src/optipng/ioutil.rs:53:10
   |
53 | pub type __dev_t = libc::c_ulong;
   |          ^^^^^^^ help: convert the identifier to upper camel case: `DevT`

error: type `__uid_t` should have an upper camel case name
  --> src/optipng/ioutil.rs:54:10
   |
54 | pub type __uid_t = libc::c_uint;
   |          ^^^^^^^ help: convert the identifier to upper camel case: `UidT`

error: type `__gid_t` should have an upper camel case name
  --> src/optipng/ioutil.rs:55:10
   |
55 | pub type __gid_t = libc::c_uint;
   |          ^^^^^^^ help: convert the identifier to upper camel case: `GidT`

error: type `__ino_t` should have an upper camel case name
  --> src/optipng/ioutil.rs:56:10
   |
56 | pub type __ino_t = libc::c_ulong;
   |          ^^^^^^^ help: convert the identifier to upper camel case: `InoT`

error: type `__mode_t` should have an upper camel case name
  --> src/optipng/ioutil.rs:57:10
   |
57 | pub type __mode_t = libc::c_uint;
   |          ^^^^^^^^ help: convert the identifier to upper camel case: `ModeT`

error: type `__nlink_t` should have an upper camel case name
  --> src/optipng/ioutil.rs:58:10
   |
58 | pub type __nlink_t = libc::c_ulong;
   |          ^^^^^^^^^ help: convert the identifier to upper camel case: `NlinkT`

error: type `__off_t` should have an upper camel case name
  --> src/optipng/ioutil.rs:59:10
   |
59 | pub type __off_t = libc::c_long;
   |          ^^^^^^^ help: convert the identifier to upper camel case: `OffT`

error: type `__off64_t` should have an upper camel case name
  --> src/optipng/ioutil.rs:60:10
   |
60 | pub type __off64_t = libc::c_long;
   |          ^^^^^^^^^ help: convert the identifier to upper camel case: `Off64T`

error: type `__time_t` should have an upper camel case name
  --> src/optipng/ioutil.rs:61:10
   |
61 | pub type __time_t = libc::c_long;
   |          ^^^^^^^^ help: convert the identifier to upper camel case: `TimeT`

error: type `__blksize_t` should have an upper camel case name
  --> src/optipng/ioutil.rs:62:10
   |
62 | pub type __blksize_t = libc::c_long;
   |          ^^^^^^^^^^^ help: convert the identifier to upper camel case: `BlksizeT`

error: type `__blkcnt_t` should have an upper camel case name
  --> src/optipng/ioutil.rs:63:10
   |
63 | pub type __blkcnt_t = libc::c_long;
   |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `BlkcntT`

error: type `__syscall_slong_t` should have an upper camel case name
  --> src/optipng/ioutil.rs:64:10
   |
64 | pub type __syscall_slong_t = libc::c_long;
   |          ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `SyscallSlongT`

error: type `__fpos_t` should have an upper camel case name
  --> src/optipng/ioutil.rs:83:10
   |
83 | pub type __fpos_t = _G_fpos_t;
   |          ^^^^^^^^ help: convert the identifier to upper camel case: `FposT`

error: type `_IO_lock_t` should have an upper camel case name
   --> src/optipng/ioutil.rs:117:10
    |
117 | pub type _IO_lock_t = ();
    |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `IoLockT`

error: type `fpos_t` should have an upper camel case name
   --> src/optipng/ioutil.rs:119:10
    |
119 | pub type fpos_t = __fpos_t;
    |          ^^^^^^ help: convert the identifier to upper camel case: `FposT`

error: type `opng_foffset_t` should have an upper camel case name
   --> src/optipng/ioutil.rs:120:10
    |
120 | pub type opng_foffset_t = libc::c_long;
    |          ^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `OpngFoffsetT`

error: type `opng_fsize_t` should have an upper camel case name
   --> src/optipng/ioutil.rs:121:10
    |
121 | pub type opng_fsize_t = libc::c_ulong;
    |          ^^^^^^^^^^^^ help: convert the identifier to upper camel case: `OpngFsizeT`

error: this `if` statement can be collapsed
   --> src/optipng/ioutil.rs:363:5
    |
363 | /     if clobber == 0 {
364 | |         if access(dest_path, 0 as libc::c_int) >= 0 as libc::c_int {
365 | |             return -(1 as libc::c_int);
366 | |         }
367 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
    |
363 ~     if clobber == 0 && access(dest_path, 0 as libc::c_int) >= 0 as libc::c_int {
364 +         return -(1 as libc::c_int);
365 +     }
    |

error: this `if` statement can be collapsed
   --> src/optipng/ioutil.rs:469:5
    |
469 | /     if faccess == 0 as libc::c_int && freg == 0 {
470 | |         if (strchr(mode, 'e' as i32)).is_null() {
471 | |             return 0 as libc::c_int;
472 | |         }
473 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
    |
469 ~     if faccess == 0 as libc::c_int && freg == 0 && (strchr(mode, 'e' as i32)).is_null() {
470 +         return 0 as libc::c_int;
471 +     }
    |

error: type `size_t` should have an upper camel case name
 --> src/optipng/optim.rs:9:10
  |
9 | pub type size_t = libc::c_ulong;
  |          ^^^^^^ help: convert the identifier to upper camel case: `SizeT`

error: type `opng_bitset_t` should have an upper camel case name
  --> src/optipng/optim.rs:10:10
   |
10 | pub type opng_bitset_t = libc::c_uint;
   |          ^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `OpngBitsetT`

error: type `png_unknown_chunkp` should have an upper camel case name
  --> src/optipng/optim.rs:87:10
   |
87 | pub type png_unknown_chunkp = *mut png_unknown_chunk;
   |          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngUnknownChunkp`

error: type `png_unknown_chunk` should have an upper camel case name
  --> src/optipng/optim.rs:88:10
   |
88 | pub type png_unknown_chunk = png_unknown_chunk_t;
   |          ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngUnknownChunk`

error: type `png_byte` should have an upper camel case name
  --> src/optipng/optim.rs:97:10
   |
97 | pub type png_byte = libc::c_uchar;
   |          ^^^^^^^^ help: convert the identifier to upper camel case: `PngByte`

error: type `png_color_16` should have an upper camel case name
  --> src/optipng/optim.rs:98:10
   |
98 | pub type png_color_16 = png_color_16_struct;
   |          ^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngColor16`

error: type `png_uint_16` should have an upper camel case name
   --> src/optipng/optim.rs:108:10
    |
108 | pub type png_uint_16 = libc::c_ushort;
    |          ^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngUint16`

error: type `png_color_16p` should have an upper camel case name
   --> src/optipng/optim.rs:109:10
    |
109 | pub type png_color_16p = *mut png_color_16;
    |          ^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngColor16p`

error: type `png_bytep` should have an upper camel case name
   --> src/optipng/optim.rs:110:10
    |
110 | pub type png_bytep = *mut png_byte;
    |          ^^^^^^^^^ help: convert the identifier to upper camel case: `PngBytep`

error: type `png_color_8` should have an upper camel case name
   --> src/optipng/optim.rs:111:10
    |
111 | pub type png_color_8 = png_color_8_struct;
    |          ^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngColor8`

error: type `png_color_8p` should have an upper camel case name
   --> src/optipng/optim.rs:121:10
    |
121 | pub type png_color_8p = *mut png_color_8;
    |          ^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngColor8p`

error: type `png_uint_16p` should have an upper camel case name
   --> src/optipng/optim.rs:122:10
    |
122 | pub type png_uint_16p = *mut png_uint_16;
    |          ^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngUint16p`

error: type `png_colorp` should have an upper camel case name
   --> src/optipng/optim.rs:123:10
    |
123 | pub type png_colorp = *mut png_color;
    |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `PngColorp`

error: type `png_color` should have an upper camel case name
   --> src/optipng/optim.rs:124:10
    |
124 | pub type png_color = png_color_struct;
    |          ^^^^^^^^^ help: convert the identifier to upper camel case: `PngColor`

error: type `png_bytepp` should have an upper camel case name
   --> src/optipng/optim.rs:132:10
    |
132 | pub type png_bytepp = *mut *mut png_byte;
    |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `PngBytepp`

error: type `png_uint_32` should have an upper camel case name
   --> src/optipng/optim.rs:133:10
    |
133 | pub type png_uint_32 = libc::c_uint;
    |          ^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngUint32`

error: type `opng_status_t` should have an upper camel case name
   --> src/optipng/optim.rs:134:10
    |
134 | pub type opng_status_t = libc::c_int;
    |          ^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `OpngStatusT`

error: type `__builtin_va_list` should have an upper camel case name
  --> src/optipng/optipng.rs:63:10
   |
63 | pub type __builtin_va_list = [__va_list_tag; 1];
   |          ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `BuiltinVaList`

error: type `size_t` should have an upper camel case name
  --> src/optipng/optipng.rs:72:10
   |
72 | pub type size_t = libc::c_ulong;
   |          ^^^^^^ help: convert the identifier to upper camel case: `SizeT`

error: type `opng_bitset_t` should have an upper camel case name
  --> src/optipng/optipng.rs:73:10
   |
73 | pub type opng_bitset_t = libc::c_uint;
   |          ^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `OpngBitsetT`

error: type `__off_t` should have an upper camel case name
   --> src/optipng/optipng.rs:112:10
    |
112 | pub type __off_t = libc::c_long;
    |          ^^^^^^^ help: convert the identifier to upper camel case: `OffT`

error: type `__off64_t` should have an upper camel case name
   --> src/optipng/optipng.rs:113:10
    |
113 | pub type __off64_t = libc::c_long;
    |          ^^^^^^^^^ help: convert the identifier to upper camel case: `Off64T`

error: type `va_list` should have an upper camel case name
   --> src/optipng/optipng.rs:127:10
    |
127 | pub type va_list = __builtin_va_list;
    |          ^^^^^^^ help: convert the identifier to upper camel case: `VaList`

error: type `_IO_lock_t` should have an upper camel case name
   --> src/optipng/optipng.rs:161:10
    |
161 | pub type _IO_lock_t = ();
    |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `IoLockT`

error: type `png_const_charp` should have an upper camel case name
   --> src/optipng/optipng.rs:163:10
    |
163 | pub type png_const_charp = *const libc::c_char;
    |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngConstCharp`

error: type `png_struct` should have an upper camel case name
   --> src/optipng/optipng.rs:164:10
    |
164 | pub type png_struct = png_struct_def;
    |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `PngStruct`

error: type `png_const_structrp` should have an upper camel case name
   --> src/optipng/optipng.rs:165:10
    |
165 | pub type png_const_structrp = *const png_struct;
    |          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngConstStructrp`

error: type `C2RustUnnamed_0` should have an upper camel case name
   --> src/optipng/optipng.rs:166:10
    |
166 | pub type C2RustUnnamed_0 = libc::c_uint;
    |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `C2rustUnnamed0`

error: operator precedence can trip the unwary
   --> src/optipng/optipng.rs:839:23
    |
839 |                     (((1 as libc::c_int) << 5 as libc::c_int + 1 as libc::c_int)
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider parenthesizing your expression: `(1 as libc::c_int) << (5 as libc::c_int + 1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence

error: operator precedence can trip the unwary
   --> src/optipng/optipng.rs:851:23
    |
851 |                     (((1 as libc::c_int) << 9 as libc::c_int + 1 as libc::c_int)
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider parenthesizing your expression: `(1 as libc::c_int) << (9 as libc::c_int + 1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence

error: operator precedence can trip the unwary
   --> src/optipng/optipng.rs:863:23
    |
863 |                     (((1 as libc::c_int) << 9 as libc::c_int + 1 as libc::c_int)
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider parenthesizing your expression: `(1 as libc::c_int) << (9 as libc::c_int + 1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence

error: operator precedence can trip the unwary
   --> src/optipng/optipng.rs:875:23
    |
875 |                     (((1 as libc::c_int) << 3 as libc::c_int + 1 as libc::c_int)
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider parenthesizing your expression: `(1 as libc::c_int) << (3 as libc::c_int + 1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence

error: this `if` statement can be collapsed
    --> src/optipng/optipng.rs:990:5
     |
990  | /     if !(options.log_name).is_null() {
991  | |         if opng_strcasecmp(
992  | |             b".log\0" as *const u8 as *const libc::c_char,
993  | |             opng_strtail(options.log_name, 4 as libc::c_int as size_t),
...    |
1001 | |     }
     | |_____^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
     |
990  ~     if !(options.log_name).is_null() && opng_strcasecmp(
991  +             b".log\0" as *const u8 as *const libc::c_char,
992  +             opng_strtail(options.log_name, 4 as libc::c_int as size_t),
993  +         ) != 0 as libc::c_int {
994  +         error(
995  +             b"To prevent accidental data corruption, the log file name must end with \".log\"\0"
996  +                 as *const u8 as *const libc::c_char,
997  +         );
998  +     }
     |

error: this `if` statement can be collapsed
    --> src/optipng/optipng.rs:1153:9
     |
1153 | /         if !((*argv.offset(i as isize)).is_null()
1154 | |             || *(*argv.offset(i as isize)).offset(0 as libc::c_int as isize)
1155 | |                 as libc::c_int == '\0' as i32)
...    |
1160 | |         }
     | |_________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
     |
1153 ~         if !((*argv.offset(i as isize)).is_null()
1154 +             || *(*argv.offset(i as isize)).offset(0 as libc::c_int as isize)
1155 +                 as libc::c_int == '\0' as i32) && opng_optimize(*argv.offset(i as isize)) != 0 as libc::c_int {
1156 +             result = 1 as libc::c_int;
1157 +         }
     |

error: type `__builtin_va_list` should have an upper camel case name
  --> src/optipng/ratio.rs:10:10
   |
10 | pub type __builtin_va_list = [__va_list_tag; 1];
   |          ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `BuiltinVaList`

error: type `size_t` should have an upper camel case name
  --> src/optipng/ratio.rs:19:10
   |
19 | pub type size_t = libc::c_ulong;
   |          ^^^^^^ help: convert the identifier to upper camel case: `SizeT`

error: type `opng_ullong_t` should have an upper camel case name
  --> src/optipng/ratio.rs:20:10
   |
20 | pub type opng_ullong_t = libc::c_ulonglong;
   |          ^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `OpngUllongT`

error: type `opng_uxlong_impl_t` should have an upper camel case name
  --> src/optipng/ratio.rs:33:10
   |
33 | pub type opng_uxlong_impl_t = opng_ullong_t;
   |          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `OpngUxlongImplT`

error: type `va_list` should have an upper camel case name
  --> src/optipng/ratio.rs:34:10
   |
34 | pub type va_list = __builtin_va_list;
   |          ^^^^^^^ help: convert the identifier to upper camel case: `VaList`

error: unused import: `::libc`
 --> src/optipng/wildargs.rs:1:5
  |
1 | use ::libc;
  |     ^^^^^^

error: unused import: `::libc`
 --> src/pngxtern/pngxio.rs:1:5
  |
1 | use ::libc;
  |     ^^^^^^

error: type `size_t` should have an upper camel case name
  --> src/pngxtern/pngxmem.rs:33:10
   |
33 | pub type size_t = libc::c_ulong;
   |          ^^^^^^ help: convert the identifier to upper camel case: `SizeT`

error: type `png_byte` should have an upper camel case name
  --> src/pngxtern/pngxmem.rs:34:10
   |
34 | pub type png_byte = libc::c_uchar;
   |          ^^^^^^^^ help: convert the identifier to upper camel case: `PngByte`

error: type `png_uint_32` should have an upper camel case name
  --> src/pngxtern/pngxmem.rs:35:10
   |
35 | pub type png_uint_32 = libc::c_uint;
   |          ^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngUint32`

error: type `png_alloc_size_t` should have an upper camel case name
  --> src/pngxtern/pngxmem.rs:36:10
   |
36 | pub type png_alloc_size_t = size_t;
   |          ^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngAllocSizeT`

error: type `png_voidp` should have an upper camel case name
  --> src/pngxtern/pngxmem.rs:37:10
   |
37 | pub type png_voidp = *mut libc::c_void;
   |          ^^^^^^^^^ help: convert the identifier to upper camel case: `PngVoidp`

error: type `png_bytep` should have an upper camel case name
  --> src/pngxtern/pngxmem.rs:38:10
   |
38 | pub type png_bytep = *mut png_byte;
   |          ^^^^^^^^^ help: convert the identifier to upper camel case: `PngBytep`

error: type `png_const_charp` should have an upper camel case name
  --> src/pngxtern/pngxmem.rs:39:10
   |
39 | pub type png_const_charp = *const libc::c_char;
   |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngConstCharp`

error: type `png_bytepp` should have an upper camel case name
  --> src/pngxtern/pngxmem.rs:40:10
   |
40 | pub type png_bytepp = *mut *mut png_byte;
   |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `PngBytepp`

error: type `png_struct` should have an upper camel case name
  --> src/pngxtern/pngxmem.rs:41:10
   |
41 | pub type png_struct = png_struct_def;
   |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `PngStruct`

error: type `png_structp` should have an upper camel case name
  --> src/pngxtern/pngxmem.rs:42:10
   |
42 | pub type png_structp = *mut png_struct;
   |          ^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngStructp`

error: type `png_info` should have an upper camel case name
  --> src/pngxtern/pngxmem.rs:43:10
   |
43 | pub type png_info = png_info_def;
   |          ^^^^^^^^ help: convert the identifier to upper camel case: `PngInfo`

error: type `png_infop` should have an upper camel case name
  --> src/pngxtern/pngxmem.rs:44:10
   |
44 | pub type png_infop = *mut png_info;
   |          ^^^^^^^^^ help: convert the identifier to upper camel case: `PngInfop`

error: type `png_const_structrp` should have an upper camel case name
  --> src/pngxtern/pngxmem.rs:45:10
   |
45 | pub type png_const_structrp = *const png_struct;
   |          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngConstStructrp`

error: type `png_inforp` should have an upper camel case name
  --> src/pngxtern/pngxmem.rs:46:10
   |
46 | pub type png_inforp = *mut png_info;
   |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `PngInforp`

error: type `png_const_inforp` should have an upper camel case name
  --> src/pngxtern/pngxmem.rs:47:10
   |
47 | pub type png_const_inforp = *const png_info;
   |          ^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngConstInforp`

error: type `pngx_alloc_size_t` should have an upper camel case name
  --> src/pngxtern/pngxmem.rs:48:10
   |
48 | pub type pngx_alloc_size_t = png_alloc_size_t;
   |          ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngxAllocSizeT`

error: type `size_t` should have an upper camel case name
  --> src/pngxtern/pngxrbmp.rs:68:10
   |
68 | pub type size_t = libc::c_ulong;
   |          ^^^^^^ help: convert the identifier to upper camel case: `SizeT`

error: type `__off_t` should have an upper camel case name
  --> src/pngxtern/pngxrbmp.rs:69:10
   |
69 | pub type __off_t = libc::c_long;
   |          ^^^^^^^ help: convert the identifier to upper camel case: `OffT`

error: type `__off64_t` should have an upper camel case name
  --> src/pngxtern/pngxrbmp.rs:70:10
   |
70 | pub type __off64_t = libc::c_long;
   |          ^^^^^^^^^ help: convert the identifier to upper camel case: `Off64T`

error: type `_IO_lock_t` should have an upper camel case name
   --> src/pngxtern/pngxrbmp.rs:104:10
    |
104 | pub type _IO_lock_t = ();
    |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `IoLockT`

error: type `png_byte` should have an upper camel case name
   --> src/pngxtern/pngxrbmp.rs:106:10
    |
106 | pub type png_byte = libc::c_uchar;
    |          ^^^^^^^^ help: convert the identifier to upper camel case: `PngByte`

error: type `png_uint_32` should have an upper camel case name
   --> src/pngxtern/pngxrbmp.rs:107:10
    |
107 | pub type png_uint_32 = libc::c_uint;
    |          ^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngUint32`

error: type `png_alloc_size_t` should have an upper camel case name
   --> src/pngxtern/pngxrbmp.rs:108:10
    |
108 | pub type png_alloc_size_t = size_t;
    |          ^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngAllocSizeT`

error: type `png_voidp` should have an upper camel case name
   --> src/pngxtern/pngxrbmp.rs:109:10
    |
109 | pub type png_voidp = *mut libc::c_void;
    |          ^^^^^^^^^ help: convert the identifier to upper camel case: `PngVoidp`

error: type `png_bytep` should have an upper camel case name
   --> src/pngxtern/pngxrbmp.rs:110:10
    |
110 | pub type png_bytep = *mut png_byte;
    |          ^^^^^^^^^ help: convert the identifier to upper camel case: `PngBytep`

error: type `png_const_charp` should have an upper camel case name
   --> src/pngxtern/pngxrbmp.rs:111:10
    |
111 | pub type png_const_charp = *const libc::c_char;
    |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngConstCharp`

error: type `png_bytepp` should have an upper camel case name
   --> src/pngxtern/pngxrbmp.rs:112:10
    |
112 | pub type png_bytepp = *mut *mut png_byte;
    |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `PngBytepp`

error: type `png_const_charpp` should have an upper camel case name
   --> src/pngxtern/pngxrbmp.rs:113:10
    |
113 | pub type png_const_charpp = *mut *const libc::c_char;
    |          ^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngConstCharpp`

error: type `png_struct` should have an upper camel case name
   --> src/pngxtern/pngxrbmp.rs:114:10
    |
114 | pub type png_struct = png_struct_def;
    |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `PngStruct`

error: type `png_structp` should have an upper camel case name
   --> src/pngxtern/pngxrbmp.rs:115:10
    |
115 | pub type png_structp = *mut png_struct;
    |          ^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngStructp`

error: type `png_info` should have an upper camel case name
   --> src/pngxtern/pngxrbmp.rs:116:10
    |
116 | pub type png_info = png_info_def;
    |          ^^^^^^^^ help: convert the identifier to upper camel case: `PngInfo`

error: type `png_infop` should have an upper camel case name
   --> src/pngxtern/pngxrbmp.rs:117:10
    |
117 | pub type png_infop = *mut png_info;
    |          ^^^^^^^^^ help: convert the identifier to upper camel case: `PngInfop`

error: type `png_structrp` should have an upper camel case name
   --> src/pngxtern/pngxrbmp.rs:118:10
    |
118 | pub type png_structrp = *mut png_struct;
    |          ^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngStructrp`

error: type `png_const_structrp` should have an upper camel case name
   --> src/pngxtern/pngxrbmp.rs:119:10
    |
119 | pub type png_const_structrp = *const png_struct;
    |          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngConstStructrp`

error: type `png_inforp` should have an upper camel case name
   --> src/pngxtern/pngxrbmp.rs:120:10
    |
120 | pub type png_inforp = *mut png_info;
    |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `PngInforp`

error: type `png_color` should have an upper camel case name
   --> src/pngxtern/pngxrbmp.rs:128:10
    |
128 | pub type png_color = png_color_struct;
    |          ^^^^^^^^^ help: convert the identifier to upper camel case: `PngColor`

error: type `png_const_colorp` should have an upper camel case name
   --> src/pngxtern/pngxrbmp.rs:129:10
    |
129 | pub type png_const_colorp = *const png_color;
    |          ^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngConstColorp`

error: type `png_color_8` should have an upper camel case name
   --> src/pngxtern/pngxrbmp.rs:139:10
    |
139 | pub type png_color_8 = png_color_8_struct;
    |          ^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngColor8`

error: type `png_const_color_8p` should have an upper camel case name
   --> src/pngxtern/pngxrbmp.rs:140:10
    |
140 | pub type png_const_color_8p = *const png_color_8;
    |          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngConstColor8p`

error: type `png_rw_ptr` should have an upper camel case name
   --> src/pngxtern/pngxrbmp.rs:141:10
    |
141 | pub type png_rw_ptr = Option::<
    |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `PngRwPtr`

error: type `pngx_alloc_size_t` should have an upper camel case name
   --> src/pngxtern/pngxrbmp.rs:144:10
    |
144 | pub type pngx_alloc_size_t = png_alloc_size_t;
    |          ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngxAllocSizeT`

error: operator precedence can trip the unwary
   --> src/pngxtern/pngxrbmp.rs:184:14
    |
184 |           ch = (ch & 0xf0 as libc::c_int) >> 4 as libc::c_int
    |  ______________^
185 | |             | (ch & 0xf as libc::c_int) << 4 as libc::c_int;
    | |___________________________________________________________^ help: consider parenthesizing your expression: `((ch & 0xf0 as libc::c_int) >> 4 as libc::c_int) | ((ch & 0xf as libc::c_int) << 4 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence

error: operator precedence can trip the unwary
   --> src/pngxtern/pngxrbmp.rs:236:21
    |
236 |               *ptr = (*ptr as libc::c_int & 0xf0 as libc::c_int
    |  _____________________^
237 | |                 | (ch & 0xf0 as libc::c_int) >> 4 as libc::c_int) as png_byte;
    | |________________________________________________________________^ help: consider parenthesizing your expression: `*ptr as libc::c_int & 0xf0 as libc::c_int | ((ch & 0xf0 as libc::c_int) >> 4 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence

error: operator precedence can trip the unwary
   --> src/pngxtern/pngxrbmp.rs:567:30
    |
567 |                       sample = wpix >> *rgba_shift.offset(i as isize) as libc::c_int
    |  ______________________________^
568 | |                         & mask;
    | |______________________________^ help: consider parenthesizing your expression: `(wpix >> *rgba_shift.offset(i as isize) as libc::c_int) & mask`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence

error: operator precedence can trip the unwary
   --> src/pngxtern/pngxrbmp.rs:612:30
    |
612 |                       sample = dwpix >> *rgba_shift.offset(i as isize) as libc::c_int
    |  ______________________________^
613 | |                         & mask;
    | |______________________________^ help: consider parenthesizing your expression: `(dwpix >> *rgba_shift.offset(i as isize) as libc::c_int) & mask`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence

error: this `if` statement can be collapsed
   --> src/pngxtern/pngxrbmp.rs:777:5
    |
777 | /     if skip > 0 as libc::c_int as png_uint_32 {
778 | |         if fseek(stream, skip as libc::c_long, 1 as libc::c_int) != 0 as libc::c_int {
779 | |             return 0 as libc::c_int;
780 | |         }
781 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
    |
777 ~     if skip > 0 as libc::c_int as png_uint_32 && fseek(stream, skip as libc::c_long, 1 as libc::c_int) != 0 as libc::c_int {
778 +         return 0 as libc::c_int;
779 +     }
    |

error: type `size_t` should have an upper camel case name
  --> src/pngxtern/pngxread.rs:92:10
   |
92 | pub type size_t = libc::c_ulong;
   |          ^^^^^^ help: convert the identifier to upper camel case: `SizeT`

error: type `__off_t` should have an upper camel case name
  --> src/pngxtern/pngxread.rs:93:10
   |
93 | pub type __off_t = libc::c_long;
   |          ^^^^^^^ help: convert the identifier to upper camel case: `OffT`

error: type `__off64_t` should have an upper camel case name
  --> src/pngxtern/pngxread.rs:94:10
   |
94 | pub type __off64_t = libc::c_long;
   |          ^^^^^^^^^ help: convert the identifier to upper camel case: `Off64T`

error: type `__fpos_t` should have an upper camel case name
   --> src/pngxtern/pngxread.rs:113:10
    |
113 | pub type __fpos_t = _G_fpos_t;
    |          ^^^^^^^^ help: convert the identifier to upper camel case: `FposT`

error: type `_IO_lock_t` should have an upper camel case name
   --> src/pngxtern/pngxread.rs:147:10
    |
147 | pub type _IO_lock_t = ();
    |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `IoLockT`

error: type `fpos_t` should have an upper camel case name
   --> src/pngxtern/pngxread.rs:149:10
    |
149 | pub type fpos_t = __fpos_t;
    |          ^^^^^^ help: convert the identifier to upper camel case: `FposT`

error: type `png_byte` should have an upper camel case name
   --> src/pngxtern/pngxread.rs:150:10
    |
150 | pub type png_byte = libc::c_uchar;
    |          ^^^^^^^^ help: convert the identifier to upper camel case: `PngByte`

error: type `png_voidp` should have an upper camel case name
   --> src/pngxtern/pngxread.rs:151:10
    |
151 | pub type png_voidp = *mut libc::c_void;
    |          ^^^^^^^^^ help: convert the identifier to upper camel case: `PngVoidp`

error: type `png_bytep` should have an upper camel case name
   --> src/pngxtern/pngxread.rs:152:10
    |
152 | pub type png_bytep = *mut png_byte;
    |          ^^^^^^^^^ help: convert the identifier to upper camel case: `PngBytep`

error: type `png_const_charp` should have an upper camel case name
   --> src/pngxtern/pngxread.rs:153:10
    |
153 | pub type png_const_charp = *const libc::c_char;
    |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngConstCharp`

error: type `png_const_charpp` should have an upper camel case name
   --> src/pngxtern/pngxread.rs:154:10
    |
154 | pub type png_const_charpp = *mut *const libc::c_char;
    |          ^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngConstCharpp`

error: type `png_struct` should have an upper camel case name
   --> src/pngxtern/pngxread.rs:155:10
    |
155 | pub type png_struct = png_struct_def;
    |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `PngStruct`

error: type `png_structp` should have an upper camel case name
   --> src/pngxtern/pngxread.rs:156:10
    |
156 | pub type png_structp = *mut png_struct;
    |          ^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngStructp`

error: type `png_info` should have an upper camel case name
   --> src/pngxtern/pngxread.rs:157:10
    |
157 | pub type png_info = png_info_def;
    |          ^^^^^^^^ help: convert the identifier to upper camel case: `PngInfo`

error: type `png_infop` should have an upper camel case name
   --> src/pngxtern/pngxread.rs:158:10
    |
158 | pub type png_infop = *mut png_info;
    |          ^^^^^^^^^ help: convert the identifier to upper camel case: `PngInfop`

error: type `png_structrp` should have an upper camel case name
   --> src/pngxtern/pngxread.rs:159:10
    |
159 | pub type png_structrp = *mut png_struct;
    |          ^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngStructrp`

error: type `png_const_structrp` should have an upper camel case name
   --> src/pngxtern/pngxread.rs:160:10
    |
160 | pub type png_const_structrp = *const png_struct;
    |          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngConstStructrp`

error: type `png_inforp` should have an upper camel case name
   --> src/pngxtern/pngxread.rs:161:10
    |
161 | pub type png_inforp = *mut png_info;
    |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `PngInforp`

error: this `if` statement can be collapsed
   --> src/pngxtern/pngxread.rs:372:5
    |
372 | /     if result <= 0 as libc::c_int {
373 | |         if fsetpos(stream, &mut fpos) != 0 as libc::c_int {
374 | |             png_error(
375 | |                 png_ptr as *const png_struct,
...   |
379 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
    |
372 ~     if result <= 0 as libc::c_int && fsetpos(stream, &mut fpos) != 0 as libc::c_int {
373 +         png_error(
374 +             png_ptr as *const png_struct,
375 +             b"Can't fseek in input file stream\0" as *const u8 as *const libc::c_char,
376 +         );
377 +     }
    |

error: type `size_t` should have an upper camel case name
  --> src/pngxtern/pngxrgif.rs:76:10
   |
76 | pub type size_t = libc::c_ulong;
   |          ^^^^^^ help: convert the identifier to upper camel case: `SizeT`

error: type `__off_t` should have an upper camel case name
  --> src/pngxtern/pngxrgif.rs:77:10
   |
77 | pub type __off_t = libc::c_long;
   |          ^^^^^^^ help: convert the identifier to upper camel case: `OffT`

error: type `__off64_t` should have an upper camel case name
  --> src/pngxtern/pngxrgif.rs:78:10
   |
78 | pub type __off64_t = libc::c_long;
   |          ^^^^^^^^^ help: convert the identifier to upper camel case: `Off64T`

error: type `_IO_lock_t` should have an upper camel case name
   --> src/pngxtern/pngxrgif.rs:112:10
    |
112 | pub type _IO_lock_t = ();
    |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `IoLockT`

error: type `png_byte` should have an upper camel case name
   --> src/pngxtern/pngxrgif.rs:114:10
    |
114 | pub type png_byte = libc::c_uchar;
    |          ^^^^^^^^ help: convert the identifier to upper camel case: `PngByte`

error: type `png_uint_16` should have an upper camel case name
   --> src/pngxtern/pngxrgif.rs:115:10
    |
115 | pub type png_uint_16 = libc::c_ushort;
    |          ^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngUint16`

error: type `png_uint_32` should have an upper camel case name
   --> src/pngxtern/pngxrgif.rs:116:10
    |
116 | pub type png_uint_32 = libc::c_uint;
    |          ^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngUint32`

error: type `png_bytep` should have an upper camel case name
   --> src/pngxtern/pngxrgif.rs:117:10
    |
117 | pub type png_bytep = *mut png_byte;
    |          ^^^^^^^^^ help: convert the identifier to upper camel case: `PngBytep`

error: type `png_const_bytep` should have an upper camel case name
   --> src/pngxtern/pngxrgif.rs:118:10
    |
118 | pub type png_const_bytep = *const png_byte;
    |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngConstBytep`

error: type `png_const_charp` should have an upper camel case name
   --> src/pngxtern/pngxrgif.rs:119:10
    |
119 | pub type png_const_charp = *const libc::c_char;
    |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngConstCharp`

error: type `png_bytepp` should have an upper camel case name
   --> src/pngxtern/pngxrgif.rs:120:10
    |
120 | pub type png_bytepp = *mut *mut png_byte;
    |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `PngBytepp`

error: type `png_const_charpp` should have an upper camel case name
   --> src/pngxtern/pngxrgif.rs:121:10
    |
121 | pub type png_const_charpp = *mut *const libc::c_char;
    |          ^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngConstCharpp`

error: type `png_struct` should have an upper camel case name
   --> src/pngxtern/pngxrgif.rs:122:10
    |
122 | pub type png_struct = png_struct_def;
    |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `PngStruct`

error: type `png_structp` should have an upper camel case name
   --> src/pngxtern/pngxrgif.rs:123:10
    |
123 | pub type png_structp = *mut png_struct;
    |          ^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngStructp`

error: type `png_info` should have an upper camel case name
   --> src/pngxtern/pngxrgif.rs:124:10
    |
124 | pub type png_info = png_info_def;
    |          ^^^^^^^^ help: convert the identifier to upper camel case: `PngInfo`

error: type `png_infop` should have an upper camel case name
   --> src/pngxtern/pngxrgif.rs:125:10
    |
125 | pub type png_infop = *mut png_info;
    |          ^^^^^^^^^ help: convert the identifier to upper camel case: `PngInfop`

error: type `png_structrp` should have an upper camel case name
   --> src/pngxtern/pngxrgif.rs:126:10
    |
126 | pub type png_structrp = *mut png_struct;
    |          ^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngStructrp`

error: type `png_const_structrp` should have an upper camel case name
   --> src/pngxtern/pngxrgif.rs:127:10
    |
127 | pub type png_const_structrp = *const png_struct;
    |          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngConstStructrp`

error: type `png_inforp` should have an upper camel case name
   --> src/pngxtern/pngxrgif.rs:128:10
    |
128 | pub type png_inforp = *mut png_info;
    |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `PngInforp`

error: type `png_color` should have an upper camel case name
   --> src/pngxtern/pngxrgif.rs:136:10
    |
136 | pub type png_color = png_color_struct;
    |          ^^^^^^^^^ help: convert the identifier to upper camel case: `PngColor`

error: type `png_const_colorp` should have an upper camel case name
   --> src/pngxtern/pngxrgif.rs:137:10
    |
137 | pub type png_const_colorp = *const png_color;
    |          ^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngConstColorp`

error: type `png_color_16` should have an upper camel case name
   --> src/pngxtern/pngxrgif.rs:147:10
    |
147 | pub type png_color_16 = png_color_16_struct;
    |          ^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngColor16`

error: type `png_const_color_16p` should have an upper camel case name
   --> src/pngxtern/pngxrgif.rs:148:10
    |
148 | pub type png_const_color_16p = *const png_color_16;
    |          ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngConstColor16p`

error: this `if` statement can be collapsed
   --> src/pngxtern/pngxrgif.rs:427:17
    |
427 | /                 if !(image.Rows).is_null() && graphicExt.TransparentFlag != 0 {
428 | |                     if transparent >= 256 as libc::c_int as libc::c_uint {
429 | |                         transparent = graphicExt.Transparent;
430 | |                     }
431 | |                 }
    | |_________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
    |
427 ~                 if !(image.Rows).is_null() && graphicExt.TransparentFlag != 0 && transparent >= 256 as libc::c_int as libc::c_uint {
428 +                     transparent = graphicExt.Transparent;
429 +                 }
    |

error: type `size_t` should have an upper camel case name
  --> src/pngxtern/pngxrjpg.rs:21:10
   |
21 | pub type size_t = libc::c_ulong;
   |          ^^^^^^ help: convert the identifier to upper camel case: `SizeT`

error: type `__off_t` should have an upper camel case name
  --> src/pngxtern/pngxrjpg.rs:22:10
   |
22 | pub type __off_t = libc::c_long;
   |          ^^^^^^^ help: convert the identifier to upper camel case: `OffT`

error: type `__off64_t` should have an upper camel case name
  --> src/pngxtern/pngxrjpg.rs:23:10
   |
23 | pub type __off64_t = libc::c_long;
   |          ^^^^^^^^^ help: convert the identifier to upper camel case: `Off64T`

error: type `_IO_lock_t` should have an upper camel case name
  --> src/pngxtern/pngxrjpg.rs:57:10
   |
57 | pub type _IO_lock_t = ();
   |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `IoLockT`

error: type `png_byte` should have an upper camel case name
  --> src/pngxtern/pngxrjpg.rs:59:10
   |
59 | pub type png_byte = libc::c_uchar;
   |          ^^^^^^^^ help: convert the identifier to upper camel case: `PngByte`

error: type `png_bytep` should have an upper camel case name
  --> src/pngxtern/pngxrjpg.rs:60:10
   |
60 | pub type png_bytep = *mut png_byte;
   |          ^^^^^^^^^ help: convert the identifier to upper camel case: `PngBytep`

error: type `png_const_charp` should have an upper camel case name
  --> src/pngxtern/pngxrjpg.rs:61:10
   |
61 | pub type png_const_charp = *const libc::c_char;
   |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngConstCharp`

error: type `png_const_charpp` should have an upper camel case name
  --> src/pngxtern/pngxrjpg.rs:62:10
   |
62 | pub type png_const_charpp = *mut *const libc::c_char;
   |          ^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngConstCharpp`

error: type `png_struct` should have an upper camel case name
  --> src/pngxtern/pngxrjpg.rs:63:10
   |
63 | pub type png_struct = png_struct_def;
   |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `PngStruct`

error: type `png_structp` should have an upper camel case name
  --> src/pngxtern/pngxrjpg.rs:64:10
   |
64 | pub type png_structp = *mut png_struct;
   |          ^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngStructp`

error: type `png_info` should have an upper camel case name
  --> src/pngxtern/pngxrjpg.rs:65:10
   |
65 | pub type png_info = png_info_def;
   |          ^^^^^^^^ help: convert the identifier to upper camel case: `PngInfo`

error: type `png_infop` should have an upper camel case name
  --> src/pngxtern/pngxrjpg.rs:66:10
   |
66 | pub type png_infop = *mut png_info;
   |          ^^^^^^^^^ help: convert the identifier to upper camel case: `PngInfop`

error: type `png_const_structrp` should have an upper camel case name
  --> src/pngxtern/pngxrjpg.rs:67:10
   |
67 | pub type png_const_structrp = *const png_struct;
   |          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngConstStructrp`

error: type `size_t` should have an upper camel case name
  --> src/pngxtern/pngxrpnm.rs:55:10
   |
55 | pub type size_t = libc::c_ulong;
   |          ^^^^^^ help: convert the identifier to upper camel case: `SizeT`

error: type `__off_t` should have an upper camel case name
  --> src/pngxtern/pngxrpnm.rs:56:10
   |
56 | pub type __off_t = libc::c_long;
   |          ^^^^^^^ help: convert the identifier to upper camel case: `OffT`

error: type `__off64_t` should have an upper camel case name
  --> src/pngxtern/pngxrpnm.rs:57:10
   |
57 | pub type __off64_t = libc::c_long;
   |          ^^^^^^^^^ help: convert the identifier to upper camel case: `Off64T`

error: type `_IO_lock_t` should have an upper camel case name
  --> src/pngxtern/pngxrpnm.rs:91:10
   |
91 | pub type _IO_lock_t = ();
   |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `IoLockT`

error: type `png_byte` should have an upper camel case name
  --> src/pngxtern/pngxrpnm.rs:93:10
   |
93 | pub type png_byte = libc::c_uchar;
   |          ^^^^^^^^ help: convert the identifier to upper camel case: `PngByte`

error: type `png_uint_32` should have an upper camel case name
  --> src/pngxtern/pngxrpnm.rs:94:10
   |
94 | pub type png_uint_32 = libc::c_uint;
   |          ^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngUint32`

error: type `png_alloc_size_t` should have an upper camel case name
  --> src/pngxtern/pngxrpnm.rs:95:10
   |
95 | pub type png_alloc_size_t = size_t;
   |          ^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngAllocSizeT`

error: type `png_voidp` should have an upper camel case name
  --> src/pngxtern/pngxrpnm.rs:96:10
   |
96 | pub type png_voidp = *mut libc::c_void;
   |          ^^^^^^^^^ help: convert the identifier to upper camel case: `PngVoidp`

error: type `png_bytep` should have an upper camel case name
  --> src/pngxtern/pngxrpnm.rs:97:10
   |
97 | pub type png_bytep = *mut png_byte;
   |          ^^^^^^^^^ help: convert the identifier to upper camel case: `PngBytep`

error: type `png_const_charp` should have an upper camel case name
  --> src/pngxtern/pngxrpnm.rs:98:10
   |
98 | pub type png_const_charp = *const libc::c_char;
   |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngConstCharp`

error: type `png_bytepp` should have an upper camel case name
  --> src/pngxtern/pngxrpnm.rs:99:10
   |
99 | pub type png_bytepp = *mut *mut png_byte;
   |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `PngBytepp`

error: type `png_const_charpp` should have an upper camel case name
   --> src/pngxtern/pngxrpnm.rs:100:10
    |
100 | pub type png_const_charpp = *mut *const libc::c_char;
    |          ^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngConstCharpp`

error: type `png_struct` should have an upper camel case name
   --> src/pngxtern/pngxrpnm.rs:101:10
    |
101 | pub type png_struct = png_struct_def;
    |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `PngStruct`

error: type `png_structp` should have an upper camel case name
   --> src/pngxtern/pngxrpnm.rs:102:10
    |
102 | pub type png_structp = *mut png_struct;
    |          ^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngStructp`

error: type `png_info` should have an upper camel case name
   --> src/pngxtern/pngxrpnm.rs:103:10
    |
103 | pub type png_info = png_info_def;
    |          ^^^^^^^^ help: convert the identifier to upper camel case: `PngInfo`

error: type `png_infop` should have an upper camel case name
   --> src/pngxtern/pngxrpnm.rs:104:10
    |
104 | pub type png_infop = *mut png_info;
    |          ^^^^^^^^^ help: convert the identifier to upper camel case: `PngInfop`

error: type `png_const_structrp` should have an upper camel case name
   --> src/pngxtern/pngxrpnm.rs:105:10
    |
105 | pub type png_const_structrp = *const png_struct;
    |          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngConstStructrp`

error: type `png_inforp` should have an upper camel case name
   --> src/pngxtern/pngxrpnm.rs:106:10
    |
106 | pub type png_inforp = *mut png_info;
    |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `PngInforp`

error: type `png_color_8` should have an upper camel case name
   --> src/pngxtern/pngxrpnm.rs:116:10
    |
116 | pub type png_color_8 = png_color_8_struct;
    |          ^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngColor8`

error: type `png_const_color_8p` should have an upper camel case name
   --> src/pngxtern/pngxrpnm.rs:117:10
    |
117 | pub type png_const_color_8p = *const png_color_8;
    |          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngConstColor8p`

error: type `size_t` should have an upper camel case name
  --> src/pngxtern/pngxrtif.rs:45:10
   |
45 | pub type size_t = libc::c_ulong;
   |          ^^^^^^ help: convert the identifier to upper camel case: `SizeT`

error: type `__off_t` should have an upper camel case name
  --> src/pngxtern/pngxrtif.rs:46:10
   |
46 | pub type __off_t = libc::c_long;
   |          ^^^^^^^ help: convert the identifier to upper camel case: `OffT`

error: type `__off64_t` should have an upper camel case name
  --> src/pngxtern/pngxrtif.rs:47:10
   |
47 | pub type __off64_t = libc::c_long;
   |          ^^^^^^^^^ help: convert the identifier to upper camel case: `Off64T`

error: type `_IO_lock_t` should have an upper camel case name
  --> src/pngxtern/pngxrtif.rs:81:10
   |
81 | pub type _IO_lock_t = ();
   |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `IoLockT`

error: type `png_byte` should have an upper camel case name
  --> src/pngxtern/pngxrtif.rs:83:10
   |
83 | pub type png_byte = libc::c_uchar;
   |          ^^^^^^^^ help: convert the identifier to upper camel case: `PngByte`

error: type `png_uint_32` should have an upper camel case name
  --> src/pngxtern/pngxrtif.rs:84:10
   |
84 | pub type png_uint_32 = libc::c_uint;
   |          ^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngUint32`

error: type `png_bytep` should have an upper camel case name
  --> src/pngxtern/pngxrtif.rs:85:10
   |
85 | pub type png_bytep = *mut png_byte;
   |          ^^^^^^^^^ help: convert the identifier to upper camel case: `PngBytep`

error: type `png_const_charp` should have an upper camel case name
  --> src/pngxtern/pngxrtif.rs:86:10
   |
86 | pub type png_const_charp = *const libc::c_char;
   |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngConstCharp`

error: type `png_bytepp` should have an upper camel case name
  --> src/pngxtern/pngxrtif.rs:87:10
   |
87 | pub type png_bytepp = *mut *mut png_byte;
   |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `PngBytepp`

error: type `png_const_charpp` should have an upper camel case name
  --> src/pngxtern/pngxrtif.rs:88:10
   |
88 | pub type png_const_charpp = *mut *const libc::c_char;
   |          ^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngConstCharpp`

error: type `png_struct` should have an upper camel case name
  --> src/pngxtern/pngxrtif.rs:89:10
   |
89 | pub type png_struct = png_struct_def;
   |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `PngStruct`

error: type `png_structp` should have an upper camel case name
  --> src/pngxtern/pngxrtif.rs:90:10
   |
90 | pub type png_structp = *mut png_struct;
   |          ^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngStructp`

error: type `png_info` should have an upper camel case name
  --> src/pngxtern/pngxrtif.rs:91:10
   |
91 | pub type png_info = png_info_def;
   |          ^^^^^^^^ help: convert the identifier to upper camel case: `PngInfo`

error: type `png_infop` should have an upper camel case name
  --> src/pngxtern/pngxrtif.rs:92:10
   |
92 | pub type png_infop = *mut png_info;
   |          ^^^^^^^^^ help: convert the identifier to upper camel case: `PngInfop`

error: type `png_const_structrp` should have an upper camel case name
  --> src/pngxtern/pngxrtif.rs:93:10
   |
93 | pub type png_const_structrp = *const png_struct;
   |          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngConstStructrp`

error: type `png_inforp` should have an upper camel case name
  --> src/pngxtern/pngxrtif.rs:94:10
   |
94 | pub type png_inforp = *mut png_info;
   |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `PngInforp`

error: type `png_uint_32` should have an upper camel case name
  --> src/pngxtern/pngxset.rs:28:10
   |
28 | pub type png_uint_32 = libc::c_uint;
   |          ^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngUint32`

error: type `png_struct` should have an upper camel case name
  --> src/pngxtern/pngxset.rs:29:10
   |
29 | pub type png_struct = png_struct_def;
   |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `PngStruct`

error: type `png_structp` should have an upper camel case name
  --> src/pngxtern/pngxset.rs:30:10
   |
30 | pub type png_structp = *mut png_struct;
   |          ^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngStructp`

error: type `png_info` should have an upper camel case name
  --> src/pngxtern/pngxset.rs:31:10
   |
31 | pub type png_info = png_info_def;
   |          ^^^^^^^^ help: convert the identifier to upper camel case: `PngInfo`

error: type `png_infop` should have an upper camel case name
  --> src/pngxtern/pngxset.rs:32:10
   |
32 | pub type png_infop = *mut png_info;
   |          ^^^^^^^^^ help: convert the identifier to upper camel case: `PngInfop`

error: type `png_const_structrp` should have an upper camel case name
  --> src/pngxtern/pngxset.rs:33:10
   |
33 | pub type png_const_structrp = *const png_struct;
   |          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngConstStructrp`

error: type `png_inforp` should have an upper camel case name
  --> src/pngxtern/pngxset.rs:34:10
   |
34 | pub type png_inforp = *mut png_info;
   |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `PngInforp`

error: type `png_const_inforp` should have an upper camel case name
  --> src/pngxtern/pngxset.rs:35:10
   |
35 | pub type png_const_inforp = *const png_info;
   |          ^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `PngConstInforp`

error: type `size_t` should have an upper camel case name
  --> src/pnmio/pnmin.rs:22:10
   |
22 | pub type size_t = libc::c_ulong;
   |          ^^^^^^ help: convert the identifier to upper camel case: `SizeT`

error: type `__off_t` should have an upper camel case name
  --> src/pnmio/pnmin.rs:23:10
   |
23 | pub type __off_t = libc::c_long;
   |          ^^^^^^^ help: convert the identifier to upper camel case: `OffT`

error: type `__off64_t` should have an upper camel case name
  --> src/pnmio/pnmin.rs:24:10
   |
24 | pub type __off64_t = libc::c_long;
   |          ^^^^^^^^^ help: convert the identifier to upper camel case: `Off64T`

error: type `_IO_lock_t` should have an upper camel case name
  --> src/pnmio/pnmin.rs:58:10
   |
58 | pub type _IO_lock_t = ();
   |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `IoLockT`

error: type `size_t` should have an upper camel case name
  --> src/pnmio/pnmout.rs:17:10
   |
17 | pub type size_t = libc::c_ulong;
   |          ^^^^^^ help: convert the identifier to upper camel case: `SizeT`

error: type `__off_t` should have an upper camel case name
  --> src/pnmio/pnmout.rs:18:10
   |
18 | pub type __off_t = libc::c_long;
   |          ^^^^^^^ help: convert the identifier to upper camel case: `OffT`

error: type `__off64_t` should have an upper camel case name
  --> src/pnmio/pnmout.rs:19:10
   |
19 | pub type __off64_t = libc::c_long;
   |          ^^^^^^^^^ help: convert the identifier to upper camel case: `Off64T`

error: type `_IO_lock_t` should have an upper camel case name
  --> src/pnmio/pnmout.rs:53:10
   |
53 | pub type _IO_lock_t = ();
   |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `IoLockT`

error: unnecessary parentheses around function argument
   --> src/pnmio/pnmout.rs:151:21
    |
151 |                     (if *sample_values.offset(i as isize)
    |                     ^
...
157 |                     }),
    |                      ^
    |
    = note: `-D unused-parens` implied by `-D warnings`
    = help: to override `-D warnings` add `#[allow(unused_parens)]`
help: remove these parentheses
    |
151 ~                     if *sample_values.offset(i as isize)
152 |                         != 0 as libc::c_int as libc::c_uint
...
156 |                         '1' as i32
157 ~                     },
    |

error: unnecessary parentheses around function argument
   --> src/pnmio/pnmout.rs:184:21
    |
184 |                     (if j == 0 as libc::c_int as size_t {
    |                     ^
...
188 |                     }),
    |                      ^
    |
help: remove these parentheses
    |
184 ~                     if j == 0 as libc::c_int as size_t {
185 |                         b"%u\n\0" as *const u8 as *const libc::c_char
186 |                     } else {
187 |                         b"%u \0" as *const u8 as *const libc::c_char
188 ~                     },
    |

error: operator precedence can trip the unwary
   --> src/pnmio/pnmout.rs:244:26
    |
244 |                           (*sample_values.offset(i as isize) >> 8 as libc::c_int
    |  __________________________^
245 | |                             & 0xff as libc::c_int as libc::c_uint) as libc::c_int,
    | |_________________________________________________________________^ help: consider parenthesizing your expression: `(*sample_values.offset(i as isize) >> 8 as libc::c_int) & 0xff as libc::c_int as libc::c_uint`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence

error: this `if` statement can be collapsed
   --> src/pnmio/pnmout.rs:262:21
    |
262 | /                     if maxval > 0xffffff as libc::c_uint {
263 | |                         if putc(
264 | |                             (*sample_values.offset(i as isize) >> 24 as libc::c_int
265 | |                                 & 0xff as libc::c_int as libc::c_uint) as libc::c_int,
...   |
271 | |                     }
    | |_____________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
    |
262 ~                     if maxval > 0xffffff as libc::c_uint && putc(
263 +                             (*sample_values.offset(i as isize) >> 24 as libc::c_int
264 +                                 & 0xff as libc::c_int as libc::c_uint) as libc::c_int,
265 +                             stream,
266 +                         ) == -(1 as libc::c_int) {
267 +                         break;
268 +                     }
    |

error: operator precedence can trip the unwary
   --> src/pnmio/pnmout.rs:264:30
    |
264 |   ...                   (*sample_values.offset(i as isize) >> 24 as libc::c_int
    |  ________________________^
265 | | ...                       & 0xff as libc::c_int as libc::c_uint) as libc::c_int,
    | |_______________________________________________________________^ help: consider parenthesizing your expression: `(*sample_values.offset(i as isize) >> 24 as libc::c_int) & 0xff as libc::c_int as libc::c_uint`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence

error: operator precedence can trip the unwary
   --> src/pnmio/pnmout.rs:273:26
    |
273 |                           (*sample_values.offset(i as isize) >> 16 as libc::c_int
    |  __________________________^
274 | |                             & 0xff as libc::c_int as libc::c_uint) as libc::c_int,
    | |_________________________________________________________________^ help: consider parenthesizing your expression: `(*sample_values.offset(i as isize) >> 16 as libc::c_int) & 0xff as libc::c_int as libc::c_uint`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence

error: operator precedence can trip the unwary
   --> src/pnmio/pnmout.rs:278:30
    |
278 |   ...                   (*sample_values.offset(i as isize) >> 8 as libc::c_int
    |  ________________________^
279 | | ...                       & 0xff as libc::c_int as libc::c_uint) as libc::c_int,
    | |_______________________________________________________________^ help: consider parenthesizing your expression: `(*sample_values.offset(i as isize) >> 8 as libc::c_int) & 0xff as libc::c_int as libc::c_uint`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence

error: type `size_t` should have an upper camel case name
 --> src/pnmio/pnmutil.rs:5:10
  |
5 | pub type size_t = libc::c_ulong;
  |          ^^^^^^ help: convert the identifier to upper camel case: `SizeT`

error[E0658]: use of unstable library feature `c_variadic`: the `c_variadic` feature has not been properly tested on all supported platforms
   --> src/optipng/optipng.rs:227:22
    |
227 |     let mut arg_ptr: ::core::ffi::VaListImpl;
    |                      ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: see issue #44930 <https://github.com/rust-lang/rust/issues/44930> for more information

error[E0658]: use of unstable library feature `c_variadic`: the `c_variadic` feature has not been properly tested on all supported platforms
    --> src/optipng/optipng.rs:1013:22
     |
1013 |     let mut arg_ptr: ::core::ffi::VaListImpl;
     |                      ^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: see issue #44930 <https://github.com/rust-lang/rust/issues/44930> for more information

error[E0658]: use of unstable library feature `c_variadic`: the `c_variadic` feature has not been properly tested on all supported platforms
  --> src/optipng/optipng.rs:36:12
   |
36 |         _: ::core::ffi::VaList,
   |            ^^^^^^^^^^^^^^^^^^^
   |
   = note: see issue #44930 <https://github.com/rust-lang/rust/issues/44930> for more information

error[E0658]: use of unstable library feature `c_variadic`: the `c_variadic` feature has not been properly tested on all supported platforms
  --> src/optipng/ratio.rs:41:22
   |
41 |     let mut arg_ptr: ::core::ffi::VaListImpl;
   |                      ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: see issue #44930 <https://github.com/rust-lang/rust/issues/44930> for more information

error[E0658]: use of unstable library feature `c_variadic`: the `c_variadic` feature has not been properly tested on all supported platforms
 --> src/optipng/ratio.rs:7:12
  |
7 |         _: ::core::ffi::VaList,
  |            ^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #44930 <https://github.com/rust-lang/rust/issues/44930> for more information

error[E0658]: use of unstable library feature `c_variadic`: the `c_variadic` feature has not been properly tested on all supported platforms
   --> src/optipng/optipng.rs:230:35
    |
230 |     vfprintf(stderr, fmt, arg_ptr.as_va_list());
    |                                   ^^^^^^^^^^
    |
    = note: see issue #44930 <https://github.com/rust-lang/rust/issues/44930> for more information

error[E0658]: use of unstable library feature `c_variadic`: the `c_variadic` feature has not been properly tested on all supported platforms
    --> src/optipng/optipng.rs:1027:41
     |
1027 |         vfprintf(con_file, fmt, arg_ptr.as_va_list());
     |                                         ^^^^^^^^^^
     |
     = note: see issue #44930 <https://github.com/rust-lang/rust/issues/44930> for more information

error[E0658]: use of unstable library feature `c_variadic`: the `c_variadic` feature has not been properly tested on all supported platforms
    --> src/optipng/optipng.rs:1031:41
     |
1031 |         vfprintf(log_file, fmt, arg_ptr.as_va_list());
     |                                         ^^^^^^^^^^
     |
     = note: see issue #44930 <https://github.com/rust-lang/rust/issues/44930> for more information

error[E0658]: use of unstable library feature `c_variadic`: the `c_variadic` feature has not been properly tested on all supported platforms
  --> src/optipng/ratio.rs:44:61
   |
44 |     result = vsnprintf(buffer, buffer_size, format, arg_ptr.as_va_list());
   |                                                             ^^^^^^^^^^
   |
   = note: see issue #44930 <https://github.com/rust-lang/rust/issues/44930> for more information

error: unreachable statement
   --> src/pngxtern/pngxrtif.rs:231:13
    |
227 | /             png_error(
228 | |                 png_ptr as *const png_struct,
229 | |                 b"Unsupported TIFF color space\0" as *const u8 as *const libc::c_char,
230 | |             );
    | |_____________- any code following this expression is unreachable
231 |               return 0 as libc::c_int;
    |               ^^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement
    |
    = note: `-D unreachable-code` implied by `-D warnings`
    = help: to override `-D warnings` add `#[allow(unreachable_code)]`

error[E0133]: call to unsafe function `gifread::gifread::ReadBytes` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:115:5
    |
115 |     ReadBytes(buffer.as_mut_ptr(), 6 as libc::c_int as libc::c_uint, stream);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/gifread/gifread.rs:110:1
    |
110 | / pub unsafe extern "C" fn GIFReadScreen(
111 | |     mut screen: *mut GIFScreen,
112 | |     mut stream: *mut FILE,
113 | | ) {
    | |_^
    = note: `-D unsafe-op-in-unsafe-fn` implied by `-D warnings`
    = help: to override `-D warnings` add `#[allow(unsafe_op_in_unsafe_fn)]`

error[E0133]: call to unsafe function `gifread::gifread::memcmp` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:116:8
    |
116 |       if memcmp(
    |  ________^
117 | |         buffer.as_mut_ptr() as *const libc::c_void,
118 | |         b"GIF\0" as *const u8 as *const libc::c_char as *const libc::c_void,
119 | |         3 as libc::c_int as libc::c_ulong,
120 | |     ) != 0 as libc::c_int
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:122:9
    |
122 | /         GIFError
123 | |             .expect(
124 | |                 "non-null function pointer",
125 | |             )(b"Not a GIF file\0" as *const u8 as *const libc::c_char);
    | |______________________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:122:9
    |
122 |         GIFError
    |         ^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `gifread::gifread::memcmp` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:127:8
    |
127 |       if memcmp(
    |  ________^
128 | |         buffer.as_mut_ptr().offset(3 as libc::c_int as isize) as *const libc::c_void,
129 | |         b"87a\0" as *const u8 as *const libc::c_char as *const libc::c_void,
130 | |         3 as libc::c_int as libc::c_ulong,
131 | |     ) != 0 as libc::c_int
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:128:9
    |
128 |         buffer.as_mut_ptr().offset(3 as libc::c_int as isize) as *const libc::c_void,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `gifread::gifread::memcmp` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:132:12
    |
132 |           && memcmp(
    |  ____________^
133 | |             buffer.as_mut_ptr().offset(3 as libc::c_int as isize) as *const libc::c_void,
134 | |             b"89a\0" as *const u8 as *const libc::c_char as *const libc::c_void,
135 | |             3 as libc::c_int as libc::c_ulong,
136 | |         ) != 0 as libc::c_int
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:133:13
    |
133 |             buffer.as_mut_ptr().offset(3 as libc::c_int as isize) as *const libc::c_void,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:138:9
    |
138 | /         GIFWarning
139 | |             .expect(
140 | |                 "non-null function pointer",
141 | |             )(
142 | |             b"Invalid GIF version number, not \"87a\" or \"89a\"\0" as *const u8
143 | |                 as *const libc::c_char,
144 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:138:9
    |
138 |         GIFWarning
    |         ^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `gifread::gifread::ReadBytes` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:146:5
    |
146 |     ReadBytes(buffer.as_mut_ptr(), 7 as libc::c_int as libc::c_uint, stream);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:147:5
    |
147 |     (*screen)
    |     ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:148:19
    |
148 |           .Width = (*buffer
    |  ___________________^
149 | |         .as_mut_ptr()
150 | |         .offset(0 as libc::c_int as isize)
151 | |         .offset(0 as libc::c_int as isize) as libc::c_int
    | |__________________________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:148:20
    |
148 |           .Width = (*buffer
    |  ____________________^
149 | |         .as_mut_ptr()
150 | |         .offset(0 as libc::c_int as isize)
151 | |         .offset(0 as libc::c_int as isize) as libc::c_int
    | |__________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:148:20
    |
148 |           .Width = (*buffer
    |  ____________________^
149 | |         .as_mut_ptr()
150 | |         .offset(0 as libc::c_int as isize)
    | |__________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:152:13
    |
152 |           + ((*buffer
    |  _____________^
153 | |             .as_mut_ptr()
154 | |             .offset(0 as libc::c_int as isize)
155 | |             .offset(1 as libc::c_int as isize) as libc::c_int) << 8 as libc::c_int))
    | |______________________________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:152:14
    |
152 |           + ((*buffer
    |  ______________^
153 | |             .as_mut_ptr()
154 | |             .offset(0 as libc::c_int as isize)
155 | |             .offset(1 as libc::c_int as isize) as libc::c_int) << 8 as libc::c_int))
    | |______________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:152:14
    |
152 |           + ((*buffer
    |  ______________^
153 | |             .as_mut_ptr()
154 | |             .offset(0 as libc::c_int as isize)
    | |______________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:157:5
    |
157 |     (*screen)
    |     ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:158:20
    |
158 |           .Height = (*buffer
    |  ____________________^
159 | |         .as_mut_ptr()
160 | |         .offset(2 as libc::c_int as isize)
161 | |         .offset(0 as libc::c_int as isize) as libc::c_int
    | |__________________________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:158:21
    |
158 |           .Height = (*buffer
    |  _____________________^
159 | |         .as_mut_ptr()
160 | |         .offset(2 as libc::c_int as isize)
161 | |         .offset(0 as libc::c_int as isize) as libc::c_int
    | |__________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:158:21
    |
158 |           .Height = (*buffer
    |  _____________________^
159 | |         .as_mut_ptr()
160 | |         .offset(2 as libc::c_int as isize)
    | |__________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:162:13
    |
162 |           + ((*buffer
    |  _____________^
163 | |             .as_mut_ptr()
164 | |             .offset(2 as libc::c_int as isize)
165 | |             .offset(1 as libc::c_int as isize) as libc::c_int) << 8 as libc::c_int))
    | |______________________________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:162:14
    |
162 |           + ((*buffer
    |  ______________^
163 | |             .as_mut_ptr()
164 | |             .offset(2 as libc::c_int as isize)
165 | |             .offset(1 as libc::c_int as isize) as libc::c_int) << 8 as libc::c_int))
    | |______________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:162:14
    |
162 |           + ((*buffer
    |  ______________^
163 | |             .as_mut_ptr()
164 | |             .offset(2 as libc::c_int as isize)
    | |______________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:167:5
    |
167 |     (*screen)
    |     ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:175:5
    |
175 |     (*screen)
    |     ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:178:5
    |
178 |     (*screen)
    |     ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:186:5
    |
186 |     (*screen)
    |     ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:190:5
    |
190 |     (*screen).Background = buffer[5 as libc::c_int as usize] as libc::c_uint;
    |     ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:191:5
    |
191 |     (*screen).PixelAspectRatio = buffer[6 as libc::c_int as usize] as libc::c_uint;
    |     ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:192:8
    |
192 |     if (*screen).GlobalColorFlag != 0 {
    |        ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `gifread::gifread::ReadBytes` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:193:9
    |
193 | /         ReadBytes(
194 | |             ((*screen).GlobalColorTable).as_mut_ptr(),
195 | |             (3 as libc::c_int as libc::c_uint).wrapping_mul((*screen).GlobalNumColors),
196 | |             stream,
197 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:194:14
    |
194 |             ((*screen).GlobalColorTable).as_mut_ptr(),
    |              ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:195:61
    |
195 |             (3 as libc::c_int as libc::c_uint).wrapping_mul((*screen).GlobalNumColors),
    |                                                             ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:199:8
    |
199 |     if (*screen).Width == 0 as libc::c_int as libc::c_uint
    |        ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:200:12
    |
200 |         || (*screen).Height == 0 as libc::c_int as libc::c_uint
    |            ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:202:9
    |
202 | /         GIFError
203 | |             .expect(
204 | |                 "non-null function pointer",
205 | |             )(b"Invalid dimensions in GIF image\0" as *const u8 as *const libc::c_char);
    | |_______________________________________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:202:9
    |
202 |         GIFError
    |         ^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:207:8
    |
207 |     if (*screen).Background > 0 as libc::c_int as libc::c_uint {
    |        ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:208:12
    |
208 |         if (*screen).GlobalColorFlag != 0
    |            ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:209:16
    |
209 |             && (*screen).Background >= (*screen).GlobalNumColors
    |                ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:209:40
    |
209 |             && (*screen).Background >= (*screen).GlobalNumColors
    |                                        ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:210:16
    |
210 |             || (*screen).GlobalColorFlag == 0
    |                ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:212:13
    |
212 |             (*screen).Background = 0 as libc::c_int as libc::c_uint;
    |             ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:111:5
    |
111 |     mut screen: *mut GIFScreen,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`
    |
    = note: `-D unused-mut` implied by `-D warnings`
    = help: to override `-D warnings` add `#[allow(unused_mut)]`

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:112:5
    |
112 |     mut stream: *mut FILE,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:222:5
    |
222 |     (*image).Screen = screen;
    |     ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/gifread/gifread.rs:217:1
    |
217 | / pub unsafe extern "C" fn GIFInitImage(
218 | |     mut image: *mut GIFImage,
219 | |     mut screen: *mut GIFScreen,
220 | |     mut rows: *mut *mut libc::c_uchar,
221 | | ) {
    | |_^

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:223:5
    |
223 |     (*image).Rows = rows;
    |     ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:218:5
    |
218 |     mut image: *mut GIFImage,
    |     ----^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:219:5
    |
219 |     mut screen: *mut GIFScreen,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:220:5
    |
220 |     mut rows: *mut *mut libc::c_uchar,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

error: unused variable: `image`
   --> src/gifread/gifread.rs:226:46
    |
226 | pub unsafe extern "C" fn GIFDestroyImage(mut image: *mut GIFImage) {}
    |                                              ^^^^^ help: if this is intentional, prefix it with an underscore: `_image`
    |
    = note: `-D unused-variables` implied by `-D warnings`
    = help: to override `-D warnings` add `#[allow(unused_variables)]`

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:226:42
    |
226 | pub unsafe extern "C" fn GIFDestroyImage(mut image: *mut GIFImage) {}
    |                                          ----^^^^^
    |                                          |
    |                                          help: remove this `mut`

error: value assigned to `ch` is never read
   --> src/gifread/gifread.rs:233:13
    |
233 |     let mut ch: libc::c_int = 0;
    |             ^^
    |
    = help: maybe it is overwritten before being read?
    = note: `-D unused-assignments` implied by `-D warnings`
    = help: to override `-D warnings` add `#[allow(unused_assignments)]`

error: value assigned to `foundBogus` is never read
   --> src/gifread/gifread.rs:234:13
    |
234 |     let mut foundBogus: libc::c_int = 0;
    |             ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `gifread::gifread::GetByte` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:237:14
    |
237 |         ch = GetByte(stream);
    |              ^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/gifread/gifread.rs:228:1
    |
228 | / pub unsafe extern "C" fn GIFReadNextBlock(
229 | |     mut image: *mut GIFImage,
230 | |     mut ext: *mut GIFExtension,
231 | |     mut stream: *mut FILE,
232 | | ) -> libc::c_int {
    | |________________^

error[E0133]: call to unsafe function `gifread::gifread::GIFReadNextImage` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:240:17
    |
240 |                 GIFReadNextImage(image, stream);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `gifread::gifread::GIFReadNextExtension` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:244:17
    |
244 |                 GIFReadNextExtension(ext, stream);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:250:21
    |
250 | /                     GIFWarning
251 | |                         .expect(
252 | |                             "non-null function pointer",
253 | |                         )(
254 | |                         b"Bogus data in GIF file\0" as *const u8 as *const libc::c_char,
255 | |                     );
    | |_____________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:250:21
    |
250 |                     GIFWarning
    |                     ^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:229:5
    |
229 |     mut image: *mut GIFImage,
    |     ----^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:230:5
    |
230 |     mut ext: *mut GIFExtension,
    |     ----^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:231:5
    |
231 |     mut stream: *mut FILE,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `screen` is never read
   --> src/gifread/gifread.rs:263:13
    |
263 |     let mut screen: *mut GIFScreen = 0 as *mut GIFScreen;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `gifread::gifread::ReadBytes` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:265:5
    |
265 |     ReadBytes(buffer.as_mut_ptr(), 9 as libc::c_int as libc::c_uint, stream);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/gifread/gifread.rs:262:1
    |
262 | unsafe extern "C" fn GIFReadNextImage(mut image: *mut GIFImage, mut stream: *mut FILE) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `gifread::gifread::GIFSkipDataBlocks` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:267:9
    |
267 |         GIFSkipDataBlocks(stream);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:270:5
    |
270 |     (*image)
    |     ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:271:21
    |
271 |           .LeftPos = (*buffer
    |  _____________________^
272 | |         .as_mut_ptr()
273 | |         .offset(0 as libc::c_int as isize)
274 | |         .offset(0 as libc::c_int as isize) as libc::c_int
    | |__________________________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:271:22
    |
271 |           .LeftPos = (*buffer
    |  ______________________^
272 | |         .as_mut_ptr()
273 | |         .offset(0 as libc::c_int as isize)
274 | |         .offset(0 as libc::c_int as isize) as libc::c_int
    | |__________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:271:22
    |
271 |           .LeftPos = (*buffer
    |  ______________________^
272 | |         .as_mut_ptr()
273 | |         .offset(0 as libc::c_int as isize)
    | |__________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:275:13
    |
275 |           + ((*buffer
    |  _____________^
276 | |             .as_mut_ptr()
277 | |             .offset(0 as libc::c_int as isize)
278 | |             .offset(1 as libc::c_int as isize) as libc::c_int) << 8 as libc::c_int))
    | |______________________________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:275:14
    |
275 |           + ((*buffer
    |  ______________^
276 | |             .as_mut_ptr()
277 | |             .offset(0 as libc::c_int as isize)
278 | |             .offset(1 as libc::c_int as isize) as libc::c_int) << 8 as libc::c_int))
    | |______________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:275:14
    |
275 |           + ((*buffer
    |  ______________^
276 | |             .as_mut_ptr()
277 | |             .offset(0 as libc::c_int as isize)
    | |______________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:280:5
    |
280 |     (*image)
    |     ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:281:20
    |
281 |           .TopPos = (*buffer
    |  ____________________^
282 | |         .as_mut_ptr()
283 | |         .offset(2 as libc::c_int as isize)
284 | |         .offset(0 as libc::c_int as isize) as libc::c_int
    | |__________________________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:281:21
    |
281 |           .TopPos = (*buffer
    |  _____________________^
282 | |         .as_mut_ptr()
283 | |         .offset(2 as libc::c_int as isize)
284 | |         .offset(0 as libc::c_int as isize) as libc::c_int
    | |__________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:281:21
    |
281 |           .TopPos = (*buffer
    |  _____________________^
282 | |         .as_mut_ptr()
283 | |         .offset(2 as libc::c_int as isize)
    | |__________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:285:13
    |
285 |           + ((*buffer
    |  _____________^
286 | |             .as_mut_ptr()
287 | |             .offset(2 as libc::c_int as isize)
288 | |             .offset(1 as libc::c_int as isize) as libc::c_int) << 8 as libc::c_int))
    | |______________________________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:285:14
    |
285 |           + ((*buffer
    |  ______________^
286 | |             .as_mut_ptr()
287 | |             .offset(2 as libc::c_int as isize)
288 | |             .offset(1 as libc::c_int as isize) as libc::c_int) << 8 as libc::c_int))
    | |______________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:285:14
    |
285 |           + ((*buffer
    |  ______________^
286 | |             .as_mut_ptr()
287 | |             .offset(2 as libc::c_int as isize)
    | |______________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:290:5
    |
290 |     (*image)
    |     ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:291:19
    |
291 |           .Width = (*buffer
    |  ___________________^
292 | |         .as_mut_ptr()
293 | |         .offset(4 as libc::c_int as isize)
294 | |         .offset(0 as libc::c_int as isize) as libc::c_int
    | |__________________________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:291:20
    |
291 |           .Width = (*buffer
    |  ____________________^
292 | |         .as_mut_ptr()
293 | |         .offset(4 as libc::c_int as isize)
294 | |         .offset(0 as libc::c_int as isize) as libc::c_int
    | |__________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:291:20
    |
291 |           .Width = (*buffer
    |  ____________________^
292 | |         .as_mut_ptr()
293 | |         .offset(4 as libc::c_int as isize)
    | |__________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:295:13
    |
295 |           + ((*buffer
    |  _____________^
296 | |             .as_mut_ptr()
297 | |             .offset(4 as libc::c_int as isize)
298 | |             .offset(1 as libc::c_int as isize) as libc::c_int) << 8 as libc::c_int))
    | |______________________________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:295:14
    |
295 |           + ((*buffer
    |  ______________^
296 | |             .as_mut_ptr()
297 | |             .offset(4 as libc::c_int as isize)
298 | |             .offset(1 as libc::c_int as isize) as libc::c_int) << 8 as libc::c_int))
    | |______________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:295:14
    |
295 |           + ((*buffer
    |  ______________^
296 | |             .as_mut_ptr()
297 | |             .offset(4 as libc::c_int as isize)
    | |______________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:300:5
    |
300 |     (*image)
    |     ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:301:20
    |
301 |           .Height = (*buffer
    |  ____________________^
302 | |         .as_mut_ptr()
303 | |         .offset(6 as libc::c_int as isize)
304 | |         .offset(0 as libc::c_int as isize) as libc::c_int
    | |__________________________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:301:21
    |
301 |           .Height = (*buffer
    |  _____________________^
302 | |         .as_mut_ptr()
303 | |         .offset(6 as libc::c_int as isize)
304 | |         .offset(0 as libc::c_int as isize) as libc::c_int
    | |__________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:301:21
    |
301 |           .Height = (*buffer
    |  _____________________^
302 | |         .as_mut_ptr()
303 | |         .offset(6 as libc::c_int as isize)
    | |__________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:305:13
    |
305 |           + ((*buffer
    |  _____________^
306 | |             .as_mut_ptr()
307 | |             .offset(6 as libc::c_int as isize)
308 | |             .offset(1 as libc::c_int as isize) as libc::c_int) << 8 as libc::c_int))
    | |______________________________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:305:14
    |
305 |           + ((*buffer
    |  ______________^
306 | |             .as_mut_ptr()
307 | |             .offset(6 as libc::c_int as isize)
308 | |             .offset(1 as libc::c_int as isize) as libc::c_int) << 8 as libc::c_int))
    | |______________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:305:14
    |
305 |           + ((*buffer
    |  ______________^
306 | |             .as_mut_ptr()
307 | |             .offset(6 as libc::c_int as isize)
    | |______________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:310:5
    |
310 |     (*image)
    |     ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:318:5
    |
318 |     (*image)
    |     ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:326:5
    |
326 |     (*image)
    |     ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:334:5
    |
334 |     (*image)
    |     ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:335:31
    |
335 |         .LocalNumColors = (if (*image).LocalColorFlag != 0 {
    |                               ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:341:8
    |
341 |     if (*image).LocalColorFlag != 0 {
    |        ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `gifread::gifread::ReadBytes` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:342:9
    |
342 | /         ReadBytes(
343 | |             ((*image).LocalColorTable).as_mut_ptr(),
344 | |             (3 as libc::c_int as libc::c_uint).wrapping_mul((*image).LocalNumColors),
345 | |             stream,
346 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:343:14
    |
343 |             ((*image).LocalColorTable).as_mut_ptr(),
    |              ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:344:61
    |
344 |             (3 as libc::c_int as libc::c_uint).wrapping_mul((*image).LocalNumColors),
    |                                                             ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:348:14
    |
348 |     screen = (*image).Screen;
    |              ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:349:8
    |
349 |     if (*image).Width == 0 as libc::c_int as libc::c_uint
    |        ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:350:12
    |
350 |         || (*image).Height == 0 as libc::c_int as libc::c_uint
    |            ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:351:13
    |
351 |         || ((*image).LeftPos).wrapping_add((*image).Width) > (*screen).Width
    |             ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:351:44
    |
351 |         || ((*image).LeftPos).wrapping_add((*image).Width) > (*screen).Width
    |                                            ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:351:62
    |
351 |         || ((*image).LeftPos).wrapping_add((*image).Width) > (*screen).Width
    |                                                              ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:352:13
    |
352 |         || ((*image).TopPos).wrapping_add((*image).Height) > (*screen).Height
    |             ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:352:43
    |
352 |         || ((*image).TopPos).wrapping_add((*image).Height) > (*screen).Height
    |                                           ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:352:62
    |
352 |         || ((*image).TopPos).wrapping_add((*image).Height) > (*screen).Height
    |                                                              ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:354:9
    |
354 | /         GIFError
355 | |             .expect(
356 | |                 "non-null function pointer",
357 | |             )(b"Invalid dimensions in GIF image\0" as *const u8 as *const libc::c_char);
    | |_______________________________________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:354:9
    |
354 |         GIFError
    |         ^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `gifread::gifread::GIFReadImageData` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:359:5
    |
359 |     GIFReadImageData(image, stream);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:262:39
    |
262 | unsafe extern "C" fn GIFReadNextImage(mut image: *mut GIFImage, mut stream: *mut FILE) {
    |                                       ----^^^^^
    |                                       |
    |                                       help: remove this `mut`

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:262:65
    |
262 | unsafe extern "C" fn GIFReadNextImage(mut image: *mut GIFImage, mut stream: *mut FILE) {
    |                                                                 ----^^^^^^
    |                                                                 |
    |                                                                 help: remove this `mut`

error: value assigned to `minCodeSize` is never read
   --> src/gifread/gifread.rs:362:13
    |
362 |     let mut minCodeSize: libc::c_int = 0;
    |             ^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `rows` is never read
   --> src/gifread/gifread.rs:363:13
    |
363 |     let mut rows: *mut *mut libc::c_uchar = 0 as *mut *mut libc::c_uchar;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `width` is never read
   --> src/gifread/gifread.rs:364:13
    |
364 |     let mut width: libc::c_uint = 0;
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `height` is never read
   --> src/gifread/gifread.rs:365:13
    |
365 |     let mut height: libc::c_uint = 0;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `interlaced` is never read
   --> src/gifread/gifread.rs:366:13
    |
366 |     let mut interlaced: libc::c_uint = 0;
    |             ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `xpos` is never read
   --> src/gifread/gifread.rs:369:13
    |
369 |     let mut xpos: libc::c_uint = 0;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `ypos` is never read
   --> src/gifread/gifread.rs:370:13
    |
370 |     let mut ypos: libc::c_uint = 0;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `pass` is never read
   --> src/gifread/gifread.rs:371:13
    |
371 |     let mut pass: libc::c_int = 0;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `val` is never read
   --> src/gifread/gifread.rs:372:13
    |
372 |     let mut val: libc::c_int = 0;
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `gifread::gifread::GetByte` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:373:19
    |
373 |     minCodeSize = GetByte(stream);
    |                   ^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/gifread/gifread.rs:361:1
    |
361 | unsafe extern "C" fn GIFReadImageData(mut image: *mut GIFImage, mut stream: *mut FILE) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:375:9
    |
375 | /         GIFError
376 | |             .expect(
377 | |                 "non-null function pointer",
378 | |             )(b"Invalid LZW code size\0" as *const u8 as *const libc::c_char);
    | |_____________________________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:375:9
    |
375 |         GIFError
    |         ^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `gifread::gifread::LZWDecodeByte` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:380:8
    |
380 |     if LZWDecodeByte(1 as libc::c_int, minCodeSize, stream) < 0 as libc::c_int {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:381:9
    |
381 | /         GIFError
382 | |             .expect(
383 | |                 "non-null function pointer",
384 | |             )(b"Error decoding GIF image\0" as *const u8 as *const libc::c_char);
    | |________________________________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:381:9
    |
381 |         GIFError
    |         ^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:386:12
    |
386 |     rows = (*image).Rows;
    |            ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `gifread::gifread::GIFSkipDataBlocks` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:388:9
    |
388 |         GIFSkipDataBlocks(stream);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:391:13
    |
391 |     width = (*image).Width;
    |             ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:392:14
    |
392 |     height = (*image).Height;
    |              ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:393:18
    |
393 |     interlaced = (*image).InterlaceFlag;
    |                  ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `gifread::gifread::GIFGetColorTable` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:394:5
    |
394 |     GIFGetColorTable(&mut colors, &mut numColors, image);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `gifread::gifread::LZWDecodeByte` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:399:15
    |
399 |         val = LZWDecodeByte(0 as libc::c_int, minCodeSize, stream);
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:404:13
    |
404 | /             GIFWarning
405 | |                 .expect(
406 | |                     "non-null function pointer",
407 | |                 )(
408 | |                 b"Pixel value out of range in GIF image\0" as *const u8
409 | |                     as *const libc::c_char,
410 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:404:13
    |
404 |             GIFWarning
    |             ^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:414:9
    |
414 |         *(*rows.offset(ypos as isize)).offset(xpos as isize) = val as libc::c_uchar;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:414:10
    |
414 |         *(*rows.offset(ypos as isize)).offset(xpos as isize) = val as libc::c_uchar;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:414:10
    |
414 |         *(*rows.offset(ypos as isize)).offset(xpos as isize) = val as libc::c_uchar;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:414:12
    |
414 |         *(*rows.offset(ypos as isize)).offset(xpos as isize) = val as libc::c_uchar;
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `gifread::gifread::LZWDecodeByte` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:457:11
    |
457 |     while LZWDecodeByte(0 as libc::c_int, minCodeSize, stream) >= 0 as libc::c_int {}
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:361:39
    |
361 | unsafe extern "C" fn GIFReadImageData(mut image: *mut GIFImage, mut stream: *mut FILE) {
    |                                       ----^^^^^
    |                                       |
    |                                       help: remove this `mut`

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:361:65
    |
361 | unsafe extern "C" fn GIFReadImageData(mut image: *mut GIFImage, mut stream: *mut FILE) {
    |                                                                 ----^^^^^^
    |                                                                 |
    |                                                                 help: remove this `mut`

error: value assigned to `count` is never read
   --> src/gifread/gifread.rs:464:13
    |
464 |     let mut count: libc::c_int = 0;
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `gifread::gifread::GetByte` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:465:13
    |
465 |     count = GetByte(stream);
    |             ^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/gifread/gifread.rs:460:1
    |
460 | / unsafe extern "C" fn GIFReadDataBlock(
461 | |     mut buffer: *mut libc::c_uchar,
462 | |     mut stream: *mut FILE,
463 | | ) -> libc::c_int {
    | |________________^

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:466:5
    |
466 |     DataBlockSize = count;
    |     ^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `gifread::gifread::ReadBytes` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:468:9
    |
468 |         ReadBytes(buffer, count as libc::c_uint, stream);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:461:5
    |
461 |     mut buffer: *mut libc::c_uchar,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:462:5
    |
462 |     mut stream: *mut FILE,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `count` is never read
   --> src/gifread/gifread.rs:473:13
    |
473 |     let mut count: libc::c_int = 0;
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `gifread::gifread::GetByte` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:476:17
    |
476 |         count = GetByte(stream);
    |                 ^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/gifread/gifread.rs:472:1
    |
472 | unsafe extern "C" fn GIFSkipDataBlocks(mut stream: *mut FILE) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `gifread::gifread::ReadBytes` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:478:13
    |
478 |             ReadBytes(buffer.as_mut_ptr(), count as libc::c_uint, stream);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:472:40
    |
472 | unsafe extern "C" fn GIFSkipDataBlocks(mut stream: *mut FILE) {
    |                                        ----^^^^^^
    |                                        |
    |                                        help: remove this `mut`

error: value assigned to `count` is never read
   --> src/gifread/gifread.rs:494:13
    |
494 |     let mut count: libc::c_int = 0;
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `i` is never read
   --> src/gifread/gifread.rs:495:13
    |
495 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `j` is never read
   --> src/gifread/gifread.rs:496:13
    |
496 |     let mut j: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `ret` is never read
   --> src/gifread/gifread.rs:497:13
    |
497 |     let mut ret: libc::c_int = 0;
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:499:9
    |
499 |         curbit = 0 as libc::c_int;
    |         ^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/gifread/gifread.rs:484:1
    |
484 | / unsafe extern "C" fn LZWGetCode(
485 | |     mut code_size: libc::c_int,
486 | |     mut init_flag: libc::c_int,
487 | |     mut stream: *mut FILE,
488 | | ) -> libc::c_int {
    | |________________^

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:500:9
    |
500 |         lastbit = 0 as libc::c_int;
    |         ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:501:9
    |
501 |         last_byte = 2 as libc::c_int;
    |         ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:502:9
    |
502 |         done = 0 as libc::c_int;
    |         ^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:505:8
    |
505 |     if curbit + code_size >= lastbit {
    |        ^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:505:30
    |
505 |     if curbit + code_size >= lastbit {
    |                              ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:506:12
    |
506 |         if done != 0 {
    |            ^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:507:16
    |
507 |             if curbit >= lastbit {
    |                ^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:507:26
    |
507 |             if curbit >= lastbit {
    |                          ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:508:17
    |
508 | /                 GIFError
509 | |                     .expect(
510 | |                         "non-null function pointer",
511 | |                     )(
512 | |                     b"Ran off the end of input bits in LZW decoding\0" as *const u8
513 | |                         as *const libc::c_char,
514 | |                 );
    | |_________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:508:17
    |
508 |                 GIFError
    |                 ^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:518:9
    |
518 |         buffer[0 as libc::c_int
    |         ^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:519:25
    |
519 |             as usize] = buffer[(last_byte - 2 as libc::c_int) as usize];
    |                         ^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:519:33
    |
519 |             as usize] = buffer[(last_byte - 2 as libc::c_int) as usize];
    |                                 ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:520:9
    |
520 |         buffer[1 as libc::c_int
    |         ^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:521:25
    |
521 |             as usize] = buffer[(last_byte - 1 as libc::c_int) as usize];
    |                         ^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:521:33
    |
521 |             as usize] = buffer[(last_byte - 1 as libc::c_int) as usize];
    |                                 ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `gifread::gifread::GIFReadDataBlock` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:522:17
    |
522 |           count = GIFReadDataBlock(
    |  _________________^
523 | |             &mut *buffer.as_mut_ptr().offset(2 as libc::c_int as isize),
524 | |             stream,
525 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:523:18
    |
523 |             &mut *buffer.as_mut_ptr().offset(2 as libc::c_int as isize),
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:523:19
    |
523 |             &mut *buffer.as_mut_ptr().offset(2 as libc::c_int as isize),
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:523:19
    |
523 |             &mut *buffer.as_mut_ptr().offset(2 as libc::c_int as isize),
    |                   ^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:527:13
    |
527 |             done = 1 as libc::c_int;
    |             ^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:529:9
    |
529 |         last_byte = 2 as libc::c_int + count;
    |         ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:530:9
    |
530 |         curbit = curbit - lastbit + 16 as libc::c_int;
    |         ^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:530:18
    |
530 |         curbit = curbit - lastbit + 16 as libc::c_int;
    |                  ^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:530:27
    |
530 |         curbit = curbit - lastbit + 16 as libc::c_int;
    |                           ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:531:9
    |
531 |         lastbit = (2 as libc::c_int + count) * 8 as libc::c_int;
    |         ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:534:13
    |
534 |         && (curbit + code_size - 1 as libc::c_int) as size_t / 8 as libc::c_int as size_t
    |             ^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:537:9
    |
537 | /         GIFError
538 | |             .expect(
539 | |                 "non-null function pointer",
540 | |             )(b"Malformed GIF (CVE-2023-43907)\0" as *const u8 as *const libc::c_char);
    | |______________________________________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:537:9
    |
537 |         GIFError
    |         ^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:543:9
    |
543 |     i = curbit;
    |         ^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:547:18
    |
547 |             |= ((buffer[(i / 8 as libc::c_int) as usize] as libc::c_int
    |                  ^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:555:5
    |
555 |     curbit += code_size;
    |     ^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:485:5
    |
485 |     mut code_size: libc::c_int,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:486:5
    |
486 |     mut init_flag: libc::c_int,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:487:5
    |
487 |     mut stream: *mut FILE,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `code` is never read
   --> src/gifread/gifread.rs:575:13
    |
575 |     let mut code: libc::c_int = 0;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `incode` is never read
   --> src/gifread/gifread.rs:576:13
    |
576 |     let mut incode: libc::c_int = 0;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `i` is never read
   --> src/gifread/gifread.rs:577:13
    |
577 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `count` is never read
   --> src/gifread/gifread.rs:644:21
    |
644 |             let mut count: libc::c_int = 0;
    |                     ^^^^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:579:9
    |
579 |         fresh = 1 as libc::c_int;
    |         ^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/gifread/gifread.rs:558:1
    |
558 | / unsafe extern "C" fn LZWDecodeByte(
559 | |     mut init_flag: libc::c_int,
560 | |     mut input_code_size: libc::c_int,
561 | |     mut stream: *mut FILE,
562 | | ) -> libc::c_int {
    | |________________^

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:580:9
    |
580 |         set_code_size = input_code_size;
    |         ^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:581:9
    |
581 |         code_size = set_code_size + 1 as libc::c_int;
    |         ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:581:21
    |
581 |         code_size = set_code_size + 1 as libc::c_int;
    |                     ^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:582:9
    |
582 |         clear_code = (1 as libc::c_int) << set_code_size;
    |         ^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:582:44
    |
582 |         clear_code = (1 as libc::c_int) << set_code_size;
    |                                            ^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:583:9
    |
583 |         end_code = clear_code + 1 as libc::c_int;
    |         ^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:583:20
    |
583 |         end_code = clear_code + 1 as libc::c_int;
    |                    ^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:584:9
    |
584 |         max_code_size = 2 as libc::c_int * clear_code;
    |         ^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:584:44
    |
584 |         max_code_size = 2 as libc::c_int * clear_code;
    |                                            ^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:585:9
    |
585 |         max_code = clear_code + 2 as libc::c_int;
    |         ^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:585:20
    |
585 |         max_code = clear_code + 2 as libc::c_int;
    |                    ^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `gifread::gifread::LZWGetCode` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:586:9
    |
586 |         LZWGetCode(0 as libc::c_int, 1 as libc::c_int, stream);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:588:19
    |
588 |         while i < clear_code {
    |                   ^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:589:13
    |
589 |             table[0 as libc::c_int as usize][i as usize] = 0 as libc::c_int;
    |             ^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:590:13
    |
590 |             table[1 as libc::c_int as usize][i as usize] = i;
    |             ^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:595:13
    |
595 |             table[0 as libc::c_int as usize][i as usize] = 0 as libc::c_int;
    |             ^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:596:13
    |
596 |             table[1 as libc::c_int as usize][i as usize] = 0 as libc::c_int;
    |             ^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:600:9
    |
600 |         sp = stack.as_mut_ptr();
    |         ^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:600:14
    |
600 |         sp = stack.as_mut_ptr();
    |              ^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:602:15
    |
602 |     } else if fresh != 0 {
    |               ^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:603:9
    |
603 |         fresh = 0 as libc::c_int;
    |         ^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:605:13
    |
605 |             oldcode = LZWGetCode(code_size, 0 as libc::c_int, stream);
    |             ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `gifread::gifread::LZWGetCode` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:605:23
    |
605 |             oldcode = LZWGetCode(code_size, 0 as libc::c_int, stream);
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:605:34
    |
605 |             oldcode = LZWGetCode(code_size, 0 as libc::c_int, stream);
    |                                  ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:606:13
    |
606 |             firstcode = oldcode;
    |             ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:606:25
    |
606 |             firstcode = oldcode;
    |                         ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:607:18
    |
607 |             if !(firstcode == clear_code) {
    |                  ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:607:31
    |
607 |             if !(firstcode == clear_code) {
    |                               ^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:611:16
    |
611 |         return firstcode;
    |                ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:613:8
    |
613 |     if sp > stack.as_mut_ptr() {
    |        ^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:613:13
    |
613 |     if sp > stack.as_mut_ptr() {
    |             ^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:614:9
    |
614 |         sp = sp.offset(-1);
    |         ^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:614:14
    |
614 |         sp = sp.offset(-1);
    |              ^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:614:14
    |
614 |         sp = sp.offset(-1);
    |              ^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:615:16
    |
615 |         return *sp;
    |                ^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:615:17
    |
615 |         return *sp;
    |                 ^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `gifread::gifread::LZWGetCode` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:618:16
    |
618 |         code = LZWGetCode(code_size, 0 as libc::c_int, stream);
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:618:27
    |
618 |         code = LZWGetCode(code_size, 0 as libc::c_int, stream);
    |                           ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:622:20
    |
622 |         if code == clear_code {
    |                    ^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:624:23
    |
624 |             while i < clear_code {
    |                       ^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:625:17
    |
625 |                 table[0 as libc::c_int as usize][i as usize] = 0 as libc::c_int;
    |                 ^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:626:17
    |
626 |                 table[1 as libc::c_int as usize][i as usize] = i;
    |                 ^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:631:17
    |
631 |                 table[0 as libc::c_int as usize][i as usize] = 0 as libc::c_int;
    |                 ^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:632:17
    |
632 |                 table[1 as libc::c_int as usize][i as usize] = 0 as libc::c_int;
    |                 ^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:636:13
    |
636 |             code_size = set_code_size + 1 as libc::c_int;
    |             ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:636:25
    |
636 |             code_size = set_code_size + 1 as libc::c_int;
    |                         ^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:637:13
    |
637 |             max_code_size = 2 as libc::c_int * clear_code;
    |             ^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:637:48
    |
637 |             max_code_size = 2 as libc::c_int * clear_code;
    |                                                ^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:638:13
    |
638 |             max_code = clear_code + 2 as libc::c_int;
    |             ^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:638:24
    |
638 |             max_code = clear_code + 2 as libc::c_int;
    |                        ^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:639:13
    |
639 |             sp = stack.as_mut_ptr();
    |             ^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:639:18
    |
639 |             sp = stack.as_mut_ptr();
    |                  ^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:640:13
    |
640 |             oldcode = LZWGetCode(code_size, 0 as libc::c_int, stream);
    |             ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `gifread::gifread::LZWGetCode` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:640:23
    |
640 |             oldcode = LZWGetCode(code_size, 0 as libc::c_int, stream);
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:640:34
    |
640 |             oldcode = LZWGetCode(code_size, 0 as libc::c_int, stream);
    |                                  ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:641:13
    |
641 |             firstcode = oldcode;
    |             ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:641:25
    |
641 |             firstcode = oldcode;
    |                         ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:642:20
    |
642 |             return firstcode;
    |                    ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:643:27
    |
643 |         } else if code == end_code {
    |                           ^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:646:16
    |
646 |             if DataBlockSize == 0 as libc::c_int {
    |                ^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `gifread::gifread::GIFReadDataBlock` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:650:25
    |
650 |                 count = GIFReadDataBlock(buffer.as_mut_ptr(), stream);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:658:20
    |
658 |         if code >= max_code {
    |                    ^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:659:26
    |
659 |             let fresh0 = sp;
    |                          ^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:660:13
    |
660 |             sp = sp.offset(1);
    |             ^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:660:18
    |
660 |             sp = sp.offset(1);
    |                  ^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:660:18
    |
660 |             sp = sp.offset(1);
    |                  ^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:661:13
    |
661 |             *fresh0 = firstcode;
    |             ^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:661:23
    |
661 |             *fresh0 = firstcode;
    |                       ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:662:20
    |
662 |             code = oldcode;
    |                    ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:664:23
    |
664 |         while code >= clear_code {
    |                       ^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:665:26
    |
665 |             let fresh1 = sp;
    |                          ^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:666:13
    |
666 |             sp = sp.offset(1);
    |             ^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:666:18
    |
666 |             sp = sp.offset(1);
    |                  ^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:666:18
    |
666 |             sp = sp.offset(1);
    |                  ^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:667:13
    |
667 |             *fresh1 = table[1 as libc::c_int as usize][code as usize];
    |             ^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:667:23
    |
667 |             *fresh1 = table[1 as libc::c_int as usize][code as usize];
    |                       ^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:668:24
    |
668 |             if code == table[0 as libc::c_int as usize][code as usize]
    |                        ^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset_from` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:669:20
    |
669 |                 || sp.offset_from(stack.as_mut_ptr()) as libc::c_long as size_t
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:669:20
    |
669 |                 || sp.offset_from(stack.as_mut_ptr()) as libc::c_long as size_t
    |                    ^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:669:35
    |
669 |                 || sp.offset_from(stack.as_mut_ptr()) as libc::c_long as size_t
    |                                   ^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:675:17
    |
675 | /                 GIFError
676 | |                     .expect(
677 | |                         "non-null function pointer",
678 | |                     )(
679 | |                     b"Circular dependency found in LZW table\0" as *const u8
680 | |                         as *const libc::c_char,
681 | |                 );
    | |_________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:675:17
    |
675 |                 GIFError
    |                 ^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:683:20
    |
683 |             code = table[0 as libc::c_int as usize][code as usize];
    |                    ^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:685:9
    |
685 |         firstcode = table[1 as libc::c_int as usize][code as usize];
    |         ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:685:21
    |
685 |         firstcode = table[1 as libc::c_int as usize][code as usize];
    |                     ^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:686:22
    |
686 |         let fresh2 = sp;
    |                      ^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:687:9
    |
687 |         sp = sp.offset(1);
    |         ^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:687:14
    |
687 |         sp = sp.offset(1);
    |              ^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:687:14
    |
687 |         sp = sp.offset(1);
    |              ^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:688:9
    |
688 |         *fresh2 = firstcode;
    |         ^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:688:19
    |
688 |         *fresh2 = firstcode;
    |                   ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:689:16
    |
689 |         code = max_code;
    |                ^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:691:13
    |
691 |             table[0 as libc::c_int as usize][code as usize] = oldcode;
    |             ^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:691:63
    |
691 |             table[0 as libc::c_int as usize][code as usize] = oldcode;
    |                                                               ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:692:13
    |
692 |             table[1 as libc::c_int as usize][code as usize] = firstcode;
    |             ^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:692:63
    |
692 |             table[1 as libc::c_int as usize][code as usize] = firstcode;
    |                                                               ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:693:13
    |
693 |             max_code += 1;
    |             ^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:694:13
    |
694 |             max_code;
    |             ^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:695:16
    |
695 |             if max_code >= max_code_size
    |                ^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:695:28
    |
695 |             if max_code >= max_code_size
    |                            ^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:696:20
    |
696 |                 && max_code_size
    |                    ^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:699:17
    |
699 |                 max_code_size *= 2 as libc::c_int;
    |                 ^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:700:17
    |
700 |                 code_size += 1;
    |                 ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:701:17
    |
701 |                 code_size;
    |                 ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:704:9
    |
704 |         oldcode = incode;
    |         ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:705:12
    |
705 |         if sp > stack.as_mut_ptr() {
    |            ^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:705:17
    |
705 |         if sp > stack.as_mut_ptr() {
    |                 ^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:706:13
    |
706 |             sp = sp.offset(-1);
    |             ^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:706:18
    |
706 |             sp = sp.offset(-1);
    |                  ^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:706:18
    |
706 |             sp = sp.offset(-1);
    |                  ^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:707:20
    |
707 |             return *sp;
    |                    ^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:707:21
    |
707 |             return *sp;
    |                     ^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:559:5
    |
559 |     mut init_flag: libc::c_int,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:560:5
    |
560 |     mut input_code_size: libc::c_int,
    |     ----^^^^^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:561:5
    |
561 |     mut stream: *mut FILE,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `screen` is never read
   --> src/gifread/gifread.rs:744:13
    |
744 |     let mut screen: *mut GIFScreen = 0 as *mut GIFScreen;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:745:8
    |
745 |     if (*image).LocalColorFlag != 0 {
    |        ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/gifread/gifread.rs:739:1
    |
739 | / pub unsafe extern "C" fn GIFGetColorTable(
740 | |     mut colors: *mut *mut libc::c_uchar,
741 | |     mut numColors: *mut libc::c_uint,
742 | |     mut image: *mut GIFImage,
743 | | ) {
    | |_^

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:746:9
    |
746 |         *colors = ((*image).LocalColorTable).as_mut_ptr();
    |         ^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:746:20
    |
746 |         *colors = ((*image).LocalColorTable).as_mut_ptr();
    |                    ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:747:9
    |
747 |         *numColors = (*image).LocalNumColors;
    |         ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:747:22
    |
747 |         *numColors = (*image).LocalNumColors;
    |                      ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:750:14
    |
750 |     screen = (*image).Screen;
    |              ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:751:8
    |
751 |     if (*screen).GlobalColorFlag != 0 {
    |        ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:752:9
    |
752 |         *colors = ((*screen).GlobalColorTable).as_mut_ptr();
    |         ^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:752:20
    |
752 |         *colors = ((*screen).GlobalColorTable).as_mut_ptr();
    |                    ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:753:9
    |
753 |         *numColors = (*screen).GlobalNumColors;
    |         ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:753:22
    |
753 |         *numColors = (*screen).GlobalNumColors;
    |                      ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:756:5
    |
756 |     *colors = DefaultColorTable.as_mut_ptr();
    |     ^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:756:15
    |
756 |     *colors = DefaultColorTable.as_mut_ptr();
    |               ^^^^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:757:5
    |
757 |     *numColors = (::core::mem::size_of::<[libc::c_uchar; 24]>() as libc::c_ulong)
    |     ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:740:5
    |
740 |     mut colors: *mut *mut libc::c_uchar,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:741:5
    |
741 |     mut numColors: *mut libc::c_uint,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:742:5
    |
742 |     mut image: *mut GIFImage,
    |     ----^^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `newBuffer` is never read
   --> src/gifread/gifread.rs:766:13
    |
766 |     let mut newBuffer: *mut libc::c_uchar = 0 as *mut libc::c_uchar;
    |             ^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:767:5
    |
767 |     (*ext).Screen = screen;
    |     ^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/gifread/gifread.rs:761:1
    |
761 | / pub unsafe extern "C" fn GIFInitExtension(
762 | |     mut ext: *mut GIFExtension,
763 | |     mut screen: *mut GIFScreen,
764 | |     mut initBufferSize: libc::c_uint,
765 | | ) {
    | |_^

error[E0133]: call to unsafe function `gifread::gifread::malloc` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:769:21
    |
769 |         newBuffer = malloc(initBufferSize as libc::c_ulong) as *mut libc::c_uchar;
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `gifread::gifread::ErrorAlloc` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:771:13
    |
771 |             ErrorAlloc();
    |             ^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:773:9
    |
773 |         (*ext).Buffer = newBuffer;
    |         ^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:774:9
    |
774 |         (*ext).BufferSize = initBufferSize;
    |         ^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:776:9
    |
776 |         (*ext).Buffer = 0 as *mut libc::c_uchar;
    |         ^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:777:9
    |
777 |         (*ext).BufferSize = 0 as libc::c_int as libc::c_uint;
    |         ^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:762:5
    |
762 |     mut ext: *mut GIFExtension,
    |     ----^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:763:5
    |
763 |     mut screen: *mut GIFScreen,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:764:5
    |
764 |     mut initBufferSize: libc::c_uint,
    |     ----^^^^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error[E0133]: call to unsafe function `gifread::gifread::free` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:782:5
    |
782 |     free((*ext).Buffer as *mut libc::c_void);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/gifread/gifread.rs:781:1
    |
781 | pub unsafe extern "C" fn GIFDestroyExtension(mut ext: *mut GIFExtension) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:782:10
    |
782 |     free((*ext).Buffer as *mut libc::c_void);
    |          ^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:781:46
    |
781 | pub unsafe extern "C" fn GIFDestroyExtension(mut ext: *mut GIFExtension) {
    |                                              ----^^^
    |                                              |
    |                                              help: remove this `mut`

error: value assigned to `newBuffer` is never read
   --> src/gifread/gifread.rs:788:13
    |
788 |     let mut newBuffer: *mut libc::c_uchar = 0 as *mut libc::c_uchar;
    |             ^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `newBufferSize` is never read
   --> src/gifread/gifread.rs:789:13
    |
789 |     let mut newBufferSize: libc::c_uint = 0;
    |             ^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `offset` is never read
   --> src/gifread/gifread.rs:790:13
    |
790 |     let mut offset: libc::c_uint = 0;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `len` is never read
   --> src/gifread/gifread.rs:791:13
    |
791 |     let mut len: libc::c_uint = 0;
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `count` is never read
   --> src/gifread/gifread.rs:792:13
    |
792 |     let mut count: libc::c_int = 0;
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `label` is never read
   --> src/gifread/gifread.rs:793:13
    |
793 |     let mut label: libc::c_int = 0;
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `gifread::gifread::GetByte` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:794:13
    |
794 |     label = GetByte(stream);
    |             ^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/gifread/gifread.rs:784:1
    |
784 | / unsafe extern "C" fn GIFReadNextExtension(
785 | |     mut ext: *mut GIFExtension,
786 | |     mut stream: *mut FILE,
787 | | ) {
    | |_^

error[E0133]: call to unsafe function `gifread::gifread::GIFSkipDataBlocks` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:796:9
    |
796 |         GIFSkipDataBlocks(stream);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:799:5
    |
799 |     (*ext).Label = label as libc::c_uchar;
    |     ^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:801:11
    |
801 |     len = (*ext).BufferSize;
    |           ^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:804:30
    |
804 |             newBufferSize = ((*ext).BufferSize)
    |                              ^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `gifread::gifread::realloc` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:806:25
    |
806 |               newBuffer = realloc(
    |  _________________________^
807 | |                 (*ext).Buffer as *mut libc::c_void,
808 | |                 newBufferSize as libc::c_ulong,
809 | |             ) as *mut libc::c_uchar;
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:807:17
    |
807 |                 (*ext).Buffer as *mut libc::c_void,
    |                 ^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `gifread::gifread::ErrorAlloc` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:811:17
    |
811 |                 ErrorAlloc();
    |                 ^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:813:13
    |
813 |             (*ext).BufferSize = newBufferSize;
    |             ^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:814:13
    |
814 |             (*ext).Buffer = newBuffer;
    |             ^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `gifread::gifread::GIFReadDataBlock` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:817:17
    |
817 |         count = GIFReadDataBlock(((*ext).Buffer).offset(offset as isize), stream);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:817:34
    |
817 |         count = GIFReadDataBlock(((*ext).Buffer).offset(offset as isize), stream);
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:817:35
    |
817 |         count = GIFReadDataBlock(((*ext).Buffer).offset(offset as isize), stream);
    |                                   ^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:785:5
    |
785 |     mut ext: *mut GIFExtension,
    |     ----^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:786:5
    |
786 |     mut stream: *mut FILE,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `buffer` is never read
   --> src/gifread/gifread.rs:830:13
    |
830 |     let mut buffer: *mut libc::c_uchar = 0 as *mut libc::c_uchar;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:831:8
    |
831 |     if (*ext).Label as libc::c_int != 0xf9 as libc::c_int {
    |        ^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/gifread/gifread.rs:826:1
    |
826 | / pub unsafe extern "C" fn GIFGetGraphicCtl(
827 | |     mut graphicExt: *mut GIFGraphicCtlExt,
828 | |     mut ext: *mut GIFExtension,
829 | | ) {
    | |_^

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:832:9
    |
832 | /         GIFWarning
833 | |             .expect(
834 | |                 "non-null function pointer",
835 | |             )(
836 | |             b"Not a graphic control extension in GIF file\0" as *const u8
837 | |                 as *const libc::c_char,
838 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:832:9
    |
832 |         GIFWarning
    |         ^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:841:8
    |
841 |     if (*ext).BufferSize < 4 as libc::c_int as libc::c_uint {
    |        ^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:842:9
    |
842 | /         GIFWarning
843 | |             .expect(
844 | |                 "non-null function pointer",
845 | |             )(
846 | |             b"Broken graphic control extension in GIF file\0" as *const u8
847 | |                 as *const libc::c_char,
848 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:842:9
    |
842 |         GIFWarning
    |         ^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:851:14
    |
851 |     buffer = (*ext).Buffer;
    |              ^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:852:5
    |
852 |     (*graphicExt)
    |     ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:853:28
    |
853 |         .DisposalMethod = (*buffer.offset(0 as libc::c_int as isize) as libc::c_int
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:853:29
    |
853 |         .DisposalMethod = (*buffer.offset(0 as libc::c_int as isize) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:855:5
    |
855 |     (*graphicExt)
    |     ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:856:23
    |
856 |         .InputFlag = (*buffer.offset(0 as libc::c_int as isize) as libc::c_int
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:856:24
    |
856 |         .InputFlag = (*buffer.offset(0 as libc::c_int as isize) as libc::c_int
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:858:5
    |
858 |     (*graphicExt)
    |     ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:859:29
    |
859 |         .TransparentFlag = (*buffer.offset(0 as libc::c_int as isize) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:859:30
    |
859 |         .TransparentFlag = (*buffer.offset(0 as libc::c_int as isize) as libc::c_int
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:861:5
    |
861 |     (*graphicExt)
    |     ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:862:23
    |
862 |           .DelayTime = (*buffer
    |  _______________________^
863 | |         .offset(1 as libc::c_int as isize)
864 | |         .offset(0 as libc::c_int as isize) as libc::c_int
    | |__________________________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:862:24
    |
862 |           .DelayTime = (*buffer
    |  ________________________^
863 | |         .offset(1 as libc::c_int as isize)
864 | |         .offset(0 as libc::c_int as isize) as libc::c_int
    | |__________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:862:24
    |
862 |           .DelayTime = (*buffer
    |  ________________________^
863 | |         .offset(1 as libc::c_int as isize)
    | |__________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:865:13
    |
865 |         + ((*buffer.offset(1 as libc::c_int as isize).offset(1 as libc::c_int as isize)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:865:14
    |
865 |         + ((*buffer.offset(1 as libc::c_int as isize).offset(1 as libc::c_int as isize)
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:865:14
    |
865 |         + ((*buffer.offset(1 as libc::c_int as isize).offset(1 as libc::c_int as isize)
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:867:5
    |
867 |     (*graphicExt)
    |     ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:868:24
    |
868 |         .Transparent = *buffer.offset(3 as libc::c_int as isize) as libc::c_uint;
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:868:25
    |
868 |         .Transparent = *buffer.offset(3 as libc::c_int as isize) as libc::c_uint;
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:827:5
    |
827 |     mut graphicExt: *mut GIFGraphicCtlExt,
    |     ----^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:828:5
    |
828 |     mut ext: *mut GIFExtension,
    |     ----^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `ch` is never read
   --> src/gifread/gifread.rs:871:13
    |
871 |     let mut ch: libc::c_int = 0;
    |             ^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `gifread::gifread::getc` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:872:10
    |
872 |     ch = getc(stream);
    |          ^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/gifread/gifread.rs:870:1
    |
870 | unsafe extern "C" fn GetByte(mut stream: *mut FILE) -> libc::c_int {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `gifread::gifread::ErrorRead` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:874:9
    |
874 |         ErrorRead(stream);
    |         ^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:870:30
    |
870 | unsafe extern "C" fn GetByte(mut stream: *mut FILE) -> libc::c_int {
    |                              ----^^^^^^
    |                              |
    |                              help: remove this `mut`

error[E0133]: call to unsafe function `gifread::gifread::fread` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:883:8
    |
883 |       if fread(
    |  ________^
884 | |         buffer as *mut libc::c_void,
885 | |         count as libc::c_ulong,
886 | |         1 as libc::c_int as libc::c_ulong,
887 | |         stream,
888 | |     ) != 1 as libc::c_int as libc::c_ulong
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/gifread/gifread.rs:878:1
    |
878 | / unsafe extern "C" fn ReadBytes(
879 | |     mut buffer: *mut libc::c_uchar,
880 | |     mut count: libc::c_uint,
881 | |     mut stream: *mut FILE,
882 | | ) {
    | |_^

error[E0133]: call to unsafe function `gifread::gifread::ErrorRead` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:890:9
    |
890 |         ErrorRead(stream);
    |         ^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:879:5
    |
879 |     mut buffer: *mut libc::c_uchar,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:880:5
    |
880 |     mut count: libc::c_uint,
    |     ----^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:881:5
    |
881 |     mut stream: *mut FILE,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:894:5
    |
894 | /     GIFError
895 | |         .expect(
896 | |             "non-null function pointer",
897 | |         )(b"Out of memory in GIF decoder\0" as *const u8 as *const libc::c_char);
    | |________________________________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/gifread/gifread.rs:893:1
    |
893 | unsafe extern "C" fn ErrorAlloc() {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:894:5
    |
894 |     GIFError
    |     ^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `gifread::gifread::ferror` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:900:8
    |
900 |     if ferror(stream) != 0 {
    |        ^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/gifread/gifread.rs:899:1
    |
899 | unsafe extern "C" fn ErrorRead(mut stream: *mut FILE) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:901:9
    |
901 | /         GIFError
902 | |             .expect(
903 | |                 "non-null function pointer",
904 | |             )(b"Error reading GIF file\0" as *const u8 as *const libc::c_char);
    | |______________________________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:901:9
    |
901 |         GIFError
    |         ^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:906:9
    |
906 | /         GIFError
907 | |             .expect(
908 | |                 "non-null function pointer",
909 | |             )(b"Unexpected end of GIF file\0" as *const u8 as *const libc::c_char);
    | |__________________________________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:906:9
    |
906 |         GIFError
    |         ^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:899:32
    |
899 | unsafe extern "C" fn ErrorRead(mut stream: *mut FILE) {
    |                                ----^^^^^^
    |                                |
    |                                help: remove this `mut`

error[E0133]: call to unsafe function `gifread::gifread::fprintf` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:913:5
    |
913 |     fprintf(stderr, b"%s\n\0" as *const u8 as *const libc::c_char, message);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/gifread/gifread.rs:912:1
    |
912 | unsafe extern "C" fn DefaultError(mut message: *const libc::c_char) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:913:13
    |
913 |     fprintf(stderr, b"%s\n\0" as *const u8 as *const libc::c_char, message);
    |             ^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `gifread::gifread::exit` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:914:5
    |
914 |     exit(1 as libc::c_int);
    |     ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:912:35
    |
912 | unsafe extern "C" fn DefaultError(mut message: *const libc::c_char) {
    |                                   ----^^^^^^^
    |                                   |
    |                                   help: remove this `mut`

error[E0133]: call to unsafe function `gifread::gifread::fprintf` is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:917:5
    |
917 |     fprintf(stderr, b"%s\n\0" as *const u8 as *const libc::c_char, message);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/gifread/gifread.rs:916:1
    |
916 | unsafe extern "C" fn DefaultWarning(mut message: *const libc::c_char) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/gifread/gifread.rs:917:13
    |
917 |     fprintf(stderr, b"%s\n\0" as *const u8 as *const libc::c_char, message);
    |             ^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error: variable does not need to be mutable
   --> src/gifread/gifread.rs:916:37
    |
916 | unsafe extern "C" fn DefaultWarning(mut message: *const libc::c_char) {
    |                                     ----^^^^^^^
    |                                     |
    |                                     help: remove this `mut`

error: unnecessary `unsafe` block
   --> src/gifread/gifread.rs:920:86
    |
920 | pub static mut GIFError: Option::<unsafe extern "C" fn(*const libc::c_char) -> ()> = unsafe {
    |                                                                                      ^^^^^^ unnecessary `unsafe` block
    |
    = note: `-D unused-unsafe` implied by `-D warnings`
    = help: to override `-D warnings` add `#[allow(unused_unsafe)]`

error: unnecessary `unsafe` block
   --> src/gifread/gifread.rs:924:88
    |
924 | pub static mut GIFWarning: Option::<unsafe extern "C" fn(*const libc::c_char) -> ()> = unsafe {
    |                                                                                        ^^^^^^ unnecessary `unsafe` block

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:184:14
    |
184 |     return ((*buf_ptr.offset(0 as libc::c_int as isize) as libc::c_uint)
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/minitiff/tiffread.rs:183:1
    |
183 | unsafe extern "C" fn get_ushort_m(mut buf_ptr: *const libc::c_uchar) -> libc::c_uint {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:184:15
    |
184 |     return ((*buf_ptr.offset(0 as libc::c_int as isize) as libc::c_uint)
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:186:23
    |
186 |         .wrapping_add(*buf_ptr.offset(1 as libc::c_int as isize) as libc::c_uint);
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:186:24
    |
186 |         .wrapping_add(*buf_ptr.offset(1 as libc::c_int as isize) as libc::c_uint);
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/minitiff/tiffread.rs:183:35
    |
183 | unsafe extern "C" fn get_ushort_m(mut buf_ptr: *const libc::c_uchar) -> libc::c_uint {
    |                                   ----^^^^^^^
    |                                   |
    |                                   help: remove this `mut`

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:189:13
    |
189 |     return (*buf_ptr.offset(0 as libc::c_int as isize) as libc::c_uint)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/minitiff/tiffread.rs:188:1
    |
188 | unsafe extern "C" fn get_ushort_i(mut buf_ptr: *const libc::c_uchar) -> libc::c_uint {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:189:14
    |
189 |     return (*buf_ptr.offset(0 as libc::c_int as isize) as libc::c_uint)
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:191:14
    |
191 |             (*buf_ptr.offset(1 as libc::c_int as isize) as libc::c_uint)
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:191:15
    |
191 |             (*buf_ptr.offset(1 as libc::c_int as isize) as libc::c_uint)
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/minitiff/tiffread.rs:188:35
    |
188 | unsafe extern "C" fn get_ushort_i(mut buf_ptr: *const libc::c_uchar) -> libc::c_uint {
    |                                   ----^^^^^^^
    |                                   |
    |                                   help: remove this `mut`

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:196:14
    |
196 |     return ((*buf_ptr.offset(0 as libc::c_int as isize) as libc::c_ulong)
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/minitiff/tiffread.rs:195:1
    |
195 | unsafe extern "C" fn get_ulong_m(mut buf_ptr: *const libc::c_uchar) -> libc::c_ulong {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:196:15
    |
196 |     return ((*buf_ptr.offset(0 as libc::c_int as isize) as libc::c_ulong)
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:199:14
    |
199 |             (*buf_ptr.offset(1 as libc::c_int as isize) as libc::c_ulong)
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:199:15
    |
199 |             (*buf_ptr.offset(1 as libc::c_int as isize) as libc::c_ulong)
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:203:14
    |
203 |             (*buf_ptr.offset(2 as libc::c_int as isize) as libc::c_ulong)
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:203:15
    |
203 |             (*buf_ptr.offset(2 as libc::c_int as isize) as libc::c_ulong)
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:206:23
    |
206 |         .wrapping_add(*buf_ptr.offset(3 as libc::c_int as isize) as libc::c_ulong);
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:206:24
    |
206 |         .wrapping_add(*buf_ptr.offset(3 as libc::c_int as isize) as libc::c_ulong);
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/minitiff/tiffread.rs:195:34
    |
195 | unsafe extern "C" fn get_ulong_m(mut buf_ptr: *const libc::c_uchar) -> libc::c_ulong {
    |                                  ----^^^^^^^
    |                                  |
    |                                  help: remove this `mut`

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:209:13
    |
209 |     return (*buf_ptr.offset(0 as libc::c_int as isize) as libc::c_ulong)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/minitiff/tiffread.rs:208:1
    |
208 | unsafe extern "C" fn get_ulong_i(mut buf_ptr: *const libc::c_uchar) -> libc::c_ulong {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:209:14
    |
209 |     return (*buf_ptr.offset(0 as libc::c_int as isize) as libc::c_ulong)
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:211:14
    |
211 |             (*buf_ptr.offset(1 as libc::c_int as isize) as libc::c_ulong)
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:211:15
    |
211 |             (*buf_ptr.offset(1 as libc::c_int as isize) as libc::c_ulong)
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:215:14
    |
215 |             (*buf_ptr.offset(2 as libc::c_int as isize) as libc::c_ulong)
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:215:15
    |
215 |             (*buf_ptr.offset(2 as libc::c_int as isize) as libc::c_ulong)
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:219:14
    |
219 |             (*buf_ptr.offset(3 as libc::c_int as isize) as libc::c_ulong)
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:219:15
    |
219 |             (*buf_ptr.offset(3 as libc::c_int as isize) as libc::c_ulong)
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/minitiff/tiffread.rs:208:34
    |
208 | unsafe extern "C" fn get_ulong_i(mut buf_ptr: *const libc::c_uchar) -> libc::c_ulong {
    |                                  ----^^^^^^^
    |                                  |
    |                                  help: remove this `mut`

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:229:21
    |
229 |         1 => return *buf_ptr.offset(0 as libc::c_int as isize) as libc::c_ulong,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/minitiff/tiffread.rs:223:1
    |
223 | / unsafe extern "C" fn get_ulong_value(
224 | |     mut getter_ptr: *const minitiff_getter,
225 | |     mut tag_type: libc::c_int,
226 | |     mut buf_ptr: *const libc::c_uchar,
227 | | ) -> libc::c_ulong {
    | |__________________^

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:229:22
    |
229 |         1 => return *buf_ptr.offset(0 as libc::c_int as isize) as libc::c_ulong,
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:231:20
    |
231 |               return ((*getter_ptr).get_ushort)
    |  ____________________^
232 | |                 .expect("non-null function pointer")(buf_ptr) as libc::c_ulong;
    | |_____________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:231:21
    |
231 |             return ((*getter_ptr).get_ushort)
    |                     ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:235:20
    |
235 |             return ((*getter_ptr).get_ulong).expect("non-null function pointer")(buf_ptr);
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:235:21
    |
235 |             return ((*getter_ptr).get_ulong).expect("non-null function pointer")(buf_ptr);
    |                     ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error: variable does not need to be mutable
   --> src/minitiff/tiffread.rs:224:5
    |
224 |     mut getter_ptr: *const minitiff_getter,
    |     ----^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/minitiff/tiffread.rs:225:5
    |
225 |     mut tag_type: libc::c_int,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/minitiff/tiffread.rs:226:5
    |
226 |     mut buf_ptr: *const libc::c_uchar,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `result` is never read
   --> src/minitiff/tiffread.rs:244:13
    |
244 |     let mut result: *mut libc::c_ulong = 0 as *mut libc::c_ulong;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `minitiff::tiffread::minitiff_error` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:249:9
    |
249 |         minitiff_error(info_ptr, msg_err_range);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/minitiff/tiffread.rs:240:1
    |
240 | / unsafe extern "C" fn alloc_ulong_array(
241 | |     mut info_ptr: *mut minitiff_info,
242 | |     mut count: size_t,
243 | | ) -> *mut libc::c_ulong {
    | |_______________________^

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:249:34
    |
249 |         minitiff_error(info_ptr, msg_err_range);
    |                                  ^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::malloc` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:251:14
    |
251 |       result = malloc(
    |  ______________^
252 | |         count.wrapping_mul(::core::mem::size_of::<libc::c_ulong>() as libc::c_ulong),
253 | |     ) as *mut libc::c_ulong;
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::minitiff_error` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:255:9
    |
255 |         minitiff_error(info_ptr, msg_err_alloc);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:255:34
    |
255 |         minitiff_error(info_ptr, msg_err_alloc);
    |                                  ^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error: variable does not need to be mutable
   --> src/minitiff/tiffread.rs:241:5
    |
241 |     mut info_ptr: *mut minitiff_info,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/minitiff/tiffread.rs:242:5
    |
242 |     mut count: size_t,
    |     ----^^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `value_size` is never read
   --> src/minitiff/tiffread.rs:267:13
    |
267 |     let mut value_size: size_t = 0;
    |             ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `i` is never read
   --> src/minitiff/tiffread.rs:268:13
    |
268 |     let mut i: size_t = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `minitiff::tiffread::fread` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:283:12
    |
283 |           if fread(
    |  ____________^
284 | |             buf.as_mut_ptr() as *mut libc::c_void,
285 | |             value_size,
286 | |             1 as libc::c_int as libc::c_ulong,
287 | |             stream,
288 | |         ) != 1 as libc::c_int as libc::c_ulong
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/minitiff/tiffread.rs:259:1
    |
259 | / unsafe extern "C" fn read_ulong_values(
260 | |     mut getter_ptr: *const minitiff_getter,
261 | |     mut tag_type: libc::c_int,
262 | |     mut values: *mut libc::c_ulong,
263 | |     mut count: size_t,
264 | |     mut stream: *mut FILE,
265 | | ) -> size_t {
    | |___________^

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:292:9
    |
292 | /         *values
293 | |             .offset(
294 | |                 i as isize,
295 | |             ) = get_ulong_value(getter_ptr, tag_type, buf.as_mut_ptr());
    | |_____________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:292:10
    |
292 |           *values
    |  __________^
293 | |             .offset(
294 | |                 i as isize,
295 | |             ) = get_ulong_value(getter_ptr, tag_type, buf.as_mut_ptr());
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::get_ulong_value` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:295:17
    |
295 |             ) = get_ulong_value(getter_ptr, tag_type, buf.as_mut_ptr());
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/minitiff/tiffread.rs:260:5
    |
260 |     mut getter_ptr: *const minitiff_getter,
    |     ----^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/minitiff/tiffread.rs:261:5
    |
261 |     mut tag_type: libc::c_int,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/minitiff/tiffread.rs:262:5
    |
262 |     mut values: *mut libc::c_ulong,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/minitiff/tiffread.rs:263:5
    |
263 |     mut count: size_t,
    |     ----^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/minitiff/tiffread.rs:264:5
    |
264 |     mut stream: *mut FILE,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error[E0133]: call to unsafe function `minitiff::tiffread::minitiff_error` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:307:9
    |
307 |         minitiff_error(info_ptr, msg_err_range);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/minitiff/tiffread.rs:301:1
    |
301 | / unsafe extern "C" fn seek_to_offset(
302 | |     mut info_ptr: *mut minitiff_info,
303 | |     mut offset: libc::c_long,
304 | |     mut stream: *mut FILE,
305 | | ) {
    | |_^

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:307:34
    |
307 |         minitiff_error(info_ptr, msg_err_range);
    |                                  ^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::ftell` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:309:8
    |
309 |     if ftell(stream) == offset {
    |        ^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::fseek` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:312:8
    |
312 |     if fseek(stream, offset, 0 as libc::c_int) != 0 as libc::c_int {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::minitiff_error` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:313:9
    |
313 |         minitiff_error(info_ptr, msg_err_seek);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:313:34
    |
313 |         minitiff_error(info_ptr, msg_err_seek);
    |                                  ^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error: variable does not need to be mutable
   --> src/minitiff/tiffread.rs:302:5
    |
302 |     mut info_ptr: *mut minitiff_info,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/minitiff/tiffread.rs:303:5
    |
303 |     mut offset: libc::c_long,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/minitiff/tiffread.rs:304:5
    |
304 |     mut stream: *mut FILE,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `ulval` is never read
   --> src/minitiff/tiffread.rs:331:13
    |
331 |     let mut ulval: libc::c_ulong = 0;
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `dir_offset` is never read
   --> src/minitiff/tiffread.rs:332:13
    |
332 |     let mut dir_offset: libc::c_long = 0;
    |             ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `dir_size` is never read
   --> src/minitiff/tiffread.rs:333:13
    |
333 |     let mut dir_size: libc::c_uint = 0;
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `i` is never read
   --> src/minitiff/tiffread.rs:334:13
    |
334 |     let mut i: libc::c_uint = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `tag_id` is never read
   --> src/minitiff/tiffread.rs:335:13
    |
335 |     let mut tag_id: libc::c_uint = 0;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `tag_type` is never read
   --> src/minitiff/tiffread.rs:336:13
    |
336 |     let mut tag_type: libc::c_uint = 0;
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `count` is never read
   --> src/minitiff/tiffread.rs:337:13
    |
337 |     let mut count: size_t = 0;
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `bits_per_sample_count` is never read
   --> src/minitiff/tiffread.rs:338:13
    |
338 |     let mut bits_per_sample_count: size_t = 0;
    |             ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `bits_per_sample_tag_type` is never read
   --> src/minitiff/tiffread.rs:339:13
    |
339 |     let mut bits_per_sample_tag_type: libc::c_uint = 0;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `strip_offsets_tag_type` is never read
   --> src/minitiff/tiffread.rs:340:13
    |
340 |     let mut strip_offsets_tag_type: libc::c_uint = 0;
    |             ^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `bits_per_sample_offset` is never read
   --> src/minitiff/tiffread.rs:341:13
    |
341 |     let mut bits_per_sample_offset: libc::c_long = 0;
    |             ^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `strip_offsets_offset` is never read
   --> src/minitiff/tiffread.rs:342:13
    |
342 |     let mut strip_offsets_offset: libc::c_long = 0;
    |             ^^^^^^^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `unknown_metadata_found` is never read
   --> src/minitiff/tiffread.rs:343:13
    |
343 |     let mut unknown_metadata_found: libc::c_int = 0;
    |             ^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:327:40
    |
327 |       let mut vbuf: *mut libc::c_uchar = buf
    |  ________________________________________^
328 | |         .as_mut_ptr()
329 | |         .offset(8 as libc::c_int as isize);
    | |__________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/minitiff/tiffread.rs:317:1
    |
317 | / pub unsafe extern "C" fn minitiff_read_info(
318 | |     mut info_ptr: *mut minitiff_info,
319 | |     mut stream: *mut FILE,
320 | | ) {
    | |_^

error[E0133]: call to unsafe function `minitiff::tiffread::fread` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:344:8
    |
344 |       if fread(
    |  ________^
345 | |         buf.as_mut_ptr() as *mut libc::c_void,
346 | |         8 as libc::c_int as libc::c_ulong,
347 | |         1 as libc::c_int as libc::c_ulong,
348 | |         stream,
349 | |     ) != 1 as libc::c_int as libc::c_ulong
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::memcmp` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:353:12
    |
353 |           if memcmp(
    |  ____________^
354 | |             buf.as_mut_ptr() as *const libc::c_void,
355 | |             minitiff_sig_m.as_ptr() as *const libc::c_void,
356 | |             4 as libc::c_int as libc::c_ulong,
357 | |         ) == 0 as libc::c_int
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of extern static is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:355:13
    |
355 |             minitiff_sig_m.as_ptr() as *const libc::c_void,
    |             ^^^^^^^^^^^^^^ use of extern static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:359:13
    |
359 |             (*info_ptr).byte_order = 'M' as i32;
    |             ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::memcmp` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:370:19
    |
370 |           } else if memcmp(
    |  ___________________^
371 | |             buf.as_mut_ptr() as *const libc::c_void,
372 | |             minitiff_sig_i.as_ptr() as *const libc::c_void,
373 | |             4 as libc::c_int as libc::c_ulong,
374 | |         ) == 0 as libc::c_int
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of extern static is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:372:13
    |
372 |             minitiff_sig_i.as_ptr() as *const libc::c_void,
    |             ^^^^^^^^^^^^^^ use of extern static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:376:13
    |
376 |             (*info_ptr).byte_order = 'I' as i32;
    |             ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::memcmp` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:387:19
    |
387 |           } else if memcmp(
    |  ___________________^
388 | |             buf.as_mut_ptr() as *const libc::c_void,
389 | |             minitiff_sig_bigm.as_ptr() as *const libc::c_void,
390 | |             4 as libc::c_int as libc::c_ulong,
391 | |         ) == 0 as libc::c_int
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of extern static is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:389:13
    |
389 |             minitiff_sig_bigm.as_ptr() as *const libc::c_void,
    |             ^^^^^^^^^^^^^^^^^ use of extern static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::memcmp` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:392:16
    |
392 |               || memcmp(
    |  ________________^
393 | |                 buf.as_mut_ptr() as *const libc::c_void,
394 | |                 minitiff_sig_bigi.as_ptr() as *const libc::c_void,
395 | |                 4 as libc::c_int as libc::c_ulong,
396 | |             ) == 0 as libc::c_int
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of extern static is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:394:17
    |
394 |                 minitiff_sig_bigi.as_ptr() as *const libc::c_void,
    |                 ^^^^^^^^^^^^^^^^^ use of extern static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::minitiff_error` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:398:13
    |
398 |             minitiff_error(info_ptr, msg_err_bigtiff);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:398:38
    |
398 |             minitiff_error(info_ptr, msg_err_bigtiff);
    |                                      ^^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::minitiff_error` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:401:13
    |
401 |             minitiff_error(info_ptr, msg_err_notiff);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:401:38
    |
401 |             minitiff_error(info_ptr, msg_err_notiff);
    |                                      ^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:409:22
    |
409 |           dir_offset = (getter.get_ulong)
    |  ______________________^
410 | |             .expect(
411 | |                 "non-null function pointer",
412 | |             )(buf.as_mut_ptr().offset(4 as libc::c_int as isize)) as libc::c_long;
    | |_________________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:412:15
    |
412 |             )(buf.as_mut_ptr().offset(4 as libc::c_int as isize)) as libc::c_long;
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::seek_to_offset` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:418:13
    |
418 |             seek_to_offset(info_ptr, dir_offset, stream);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::fread` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:419:16
    |
419 |               if fread(
    |  ________________^
420 | |                 buf.as_mut_ptr() as *mut libc::c_void,
421 | |                 2 as libc::c_int as libc::c_ulong,
422 | |                 1 as libc::c_int as libc::c_ulong,
423 | |                 stream,
424 | |             ) != 1 as libc::c_int as libc::c_ulong
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:428:28
    |
428 |                   dir_size = (getter.get_ushort)
    |  ____________________________^
429 | |                     .expect("non-null function pointer")(buf.as_mut_ptr());
    | |__________________________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::fread` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:437:24
    |
437 |                       if fread(
    |  ________________________^
438 | |                         buf.as_mut_ptr() as *mut libc::c_void,
439 | |                         12 as libc::c_int as libc::c_ulong,
440 | |                         1 as libc::c_int as libc::c_ulong,
441 | |                         stream,
442 | |                     ) != 1 as libc::c_int as libc::c_ulong
    | |_____________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:447:30
    |
447 |                       tag_id = (getter.get_ushort)
    |  ______________________________^
448 | |                         .expect("non-null function pointer")(buf.as_mut_ptr());
    | |______________________________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:449:32
    |
449 |                       tag_type = (getter.get_ushort)
    |  ________________________________^
450 | |                         .expect(
451 | |                             "non-null function pointer",
452 | |                         )(buf.as_mut_ptr().offset(2 as libc::c_int as isize));
    | |_____________________________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:452:27
    |
452 |                         )(buf.as_mut_ptr().offset(2 as libc::c_int as isize));
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:453:29
    |
453 |                       count = (getter.get_ulong)
    |  _____________________________^
454 | |                         .expect(
455 | |                             "non-null function pointer",
456 | |                         )(buf.as_mut_ptr().offset(4 as libc::c_int as isize));
    | |_____________________________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:456:27
    |
456 |                         )(buf.as_mut_ptr().offset(4 as libc::c_int as isize));
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::get_ulong_value` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:467:37
    |
467 |   ...                   ulval = get_ulong_value(
    |  _______________________________^
468 | | ...                       &mut getter,
469 | | ...                       tag_type as libc::c_int,
470 | | ...                       vbuf,
471 | | ...                   );
    | |_______________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::get_ulong_value` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:484:37
    |
484 |   ...                   ulval = get_ulong_value(
    |  _______________________________^
485 | | ...                       &mut getter,
486 | | ...                       tag_type as libc::c_int,
487 | | ...                       vbuf,
488 | | ...                   );
    | |_______________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:489:29
    |
489 | ...                   (*info_ptr).width = ulval;
    |                       ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::get_ulong_value` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:496:37
    |
496 |   ...                   ulval = get_ulong_value(
    |  _______________________________^
497 | | ...                       &mut getter,
498 | | ...                       tag_type as libc::c_int,
499 | | ...                       vbuf,
500 | | ...                   );
    | |_______________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:501:29
    |
501 | ...                   (*info_ptr).height = ulval;
    |                       ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::get_ulong_value` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:505:41
    |
505 |   ...                   ulval = get_ulong_value(
    |  _______________________________^
506 | | ...                       &mut getter,
507 | | ...                       tag_type as libc::c_int,
508 | | ...                       vbuf,
509 | | ...                   );
    | |_______________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:510:33
    |
510 | ...                   (*info_ptr).bits_per_sample = ulval as libc::c_uint;
    |                       ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:514:58
    |
514 |   ...                   bits_per_sample_offset = (getter.get_ulong)
    |  ________________________________________________^
515 | | ...                       .expect("non-null function pointer")(vbuf) as libc::c_long;
    | |____________________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::get_ulong_value` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:523:37
    |
523 |   ...                   ulval = get_ulong_value(
    |  _______________________________^
524 | | ...                       &mut getter,
525 | | ...                       tag_type as libc::c_int,
526 | | ...                       vbuf,
527 | | ...                   );
    | |_______________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:528:29
    |
528 | ...                   (*info_ptr).compression = ulval as libc::c_uint;
    |                       ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::get_ulong_value` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:535:37
    |
535 |   ...                   ulval = get_ulong_value(
    |  _______________________________^
536 | | ...                       &mut getter,
537 | | ...                       tag_type as libc::c_int,
538 | | ...                       vbuf,
539 | | ...                   );
    | |_______________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:540:29
    |
540 | ...                   (*info_ptr).photometric = ulval as libc::c_uint;
    |                       ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:543:29
    |
543 | ...                   (*info_ptr).strip_offsets_count = count;
    |                       ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:545:38
    |
545 | ...                   if !((*info_ptr).strip_offsets).is_null() {
    |                            ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:549:33
    |
549 | ...                   (*info_ptr)
    |                       ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::alloc_ulong_array` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:550:54
    |
550 |   ...                       .strip_offsets = alloc_ulong_array(
    |  ____________________________________________^
551 | | ...                       info_ptr,
552 | | ...                       1 as libc::c_int as size_t,
553 | | ...                   );
    | |_______________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:554:33
    |
554 | / ...                   *((*info_ptr).strip_offsets)
555 | | ...                       .offset(
556 | | ...                           0 as libc::c_int as isize,
557 | | ...                       ) = get_ulong_value(
    | |___________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:554:34
    |
554 |   ...                   *((*info_ptr).strip_offsets)
    |  ________________________^
555 | | ...                       .offset(
556 | | ...                           0 as libc::c_int as isize,
557 | | ...                       ) = get_ulong_value(
    | |___________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:554:35
    |
554 | ...                   *((*info_ptr).strip_offsets)
    |                         ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::get_ulong_value` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:557:41
    |
557 |   ...                       ) = get_ulong_value(
    |  _______________________________^
558 | | ...                       &mut getter,
559 | | ...                       tag_type as libc::c_int,
560 | | ...                       vbuf,
561 | | ...                   );
    | |_______________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:564:56
    |
564 |   ...                   strip_offsets_offset = (getter.get_ulong)
    |  ______________________________________________^
565 | | ...                       .expect("non-null function pointer")(vbuf) as libc::c_long;
    | |____________________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::get_ulong_value` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:573:37
    |
573 |   ...                   ulval = get_ulong_value(
    |  _______________________________^
574 | | ...                       &mut getter,
575 | | ...                       tag_type as libc::c_int,
576 | | ...                       vbuf,
577 | | ...                   );
    | |_______________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:578:29
    |
578 | ...                   (*info_ptr).orientation = ulval as libc::c_uint;
    |                       ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::get_ulong_value` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:585:37
    |
585 |   ...                   ulval = get_ulong_value(
    |  _______________________________^
586 | | ...                       &mut getter,
587 | | ...                       tag_type as libc::c_int,
588 | | ...                       vbuf,
589 | | ...                   );
    | |_______________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:590:29
    |
590 | ...                   (*info_ptr).samples_per_pixel = ulval as libc::c_uint;
    |                       ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::get_ulong_value` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:597:37
    |
597 |   ...                   ulval = get_ulong_value(
    |  _______________________________^
598 | | ...                       &mut getter,
599 | | ...                       tag_type as libc::c_int,
600 | | ...                       vbuf,
601 | | ...                   );
    | |_______________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:602:29
    |
602 | ...                   (*info_ptr).rows_per_strip = ulval;
    |                       ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::get_ulong_value` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:606:36
    |
606 |   ...                   || get_ulong_value(
    |  __________________________^
607 | | ...                       &mut getter,
608 | | ...                       tag_type as libc::c_int,
609 | | ...                       vbuf,
610 | | ...                   ) != 1 as libc::c_int as libc::c_ulong
    | |_______________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::minitiff_warning` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:619:33
    |
619 | ...                   minitiff_warning(info_ptr, msg_warn_metadata);
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:619:60
    |
619 | ...                   minitiff_warning(info_ptr, msg_warn_metadata);
    |                                                  ^^^^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::fread` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:632:28
    |
632 |                           if fread(
    |  ____________________________^
633 | |                             buf.as_mut_ptr() as *mut libc::c_void,
634 | |                             4 as libc::c_int as libc::c_ulong,
635 | |                             1 as libc::c_int as libc::c_ulong,
636 | |                             stream,
637 | |                         ) != 1 as libc::c_int as libc::c_ulong
    | |_________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:641:32
    |
641 |   ...                   if (getter.get_ulong)
    |  __________________________^
642 | | ...                       .expect("non-null function pointer")(buf.as_mut_ptr())
    | |________________________________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::minitiff_warning` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:645:33
    |
645 | ...                   minitiff_warning(info_ptr, msg_warn_multiple);
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:645:60
    |
645 | ...                   minitiff_warning(info_ptr, msg_warn_multiple);
    |                                                  ^^^^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:650:45
    |
650 | ...                   if count != (*info_ptr).samples_per_pixel as size_t {
    |                                   ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::seek_to_offset` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:655:37
    |
655 | ...                   seek_to_offset(info_ptr, bits_per_sample_offset, stream);
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::read_ulong_values` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:656:40
    |
656 |   ...                   if read_ulong_values(
    |  __________________________^
657 | | ...                       &mut getter,
658 | | ...                       bits_per_sample_tag_type as libc::c_int,
659 | | ...                       ulvals.as_mut_ptr(),
660 | | ...                       count,
661 | | ...                       stream,
662 | | ...                   ) != count
    | |_______________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:682:49
    |
682 | ...                   (*info_ptr)
    |                       ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:700:49
    |
700 | ...                   count = (*info_ptr).strip_offsets_count;
    |                               ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:702:56
    |
702 | ...                   || count > (*info_ptr).height
    |                                  ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:705:53
    |
705 | ...                   } else if !((*info_ptr).strip_offsets).is_null() {
    |                                   ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:708:45
    |
708 | ...                   (*info_ptr)
    |                       ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::alloc_ulong_array` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:709:66
    |
709 | ...                   .strip_offsets = alloc_ulong_array(info_ptr, count);
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::seek_to_offset` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:710:45
    |
710 | ...                   seek_to_offset(info_ptr, strip_offsets_offset, stream);
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::read_ulong_values` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:711:48
    |
711 |   ...                   if read_ulong_values(
    |  __________________________^
712 | | ...                       &mut getter,
713 | | ...                       strip_offsets_tag_type as libc::c_int,
714 | | ...                       (*info_ptr).strip_offsets,
715 | | ...                       count,
716 | | ...                       stream,
717 | | ...                   ) != count
    | |_______________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:714:49
    |
714 | ...                   (*info_ptr).strip_offsets,
    |                       ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::minitiff_error` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:742:13
    |
742 |             minitiff_error(info_ptr, msg_err_read);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:742:38
    |
742 |             minitiff_error(info_ptr, msg_err_read);
    |                                      ^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::minitiff_error` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:749:13
    |
749 |             minitiff_error(info_ptr, msg_err_invalid);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:749:38
    |
749 |             minitiff_error(info_ptr, msg_err_invalid);
    |                                      ^^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::minitiff_error` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:753:5
    |
753 |     minitiff_error(info_ptr, msg_err_unsupported);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:753:30
    |
753 |     minitiff_error(info_ptr, msg_err_unsupported);
    |                              ^^^^^^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error: variable does not need to be mutable
   --> src/minitiff/tiffread.rs:318:5
    |
318 |     mut info_ptr: *mut minitiff_info,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/minitiff/tiffread.rs:319:5
    |
319 |     mut stream: *mut FILE,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/minitiff/tiffread.rs:327:9
    |
327 |     let mut vbuf: *mut libc::c_uchar = buf
    |         ----^^^^
    |         |
    |         help: remove this `mut`

error: value assigned to `row_size` is never read
   --> src/minitiff/tiffread.rs:763:13
    |
763 |     let mut row_size: size_t = 0;
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `strip_index` is never read
   --> src/minitiff/tiffread.rs:764:13
    |
764 |     let mut strip_index: size_t = 0;
    |             ^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `bytes_per_sample` is never read
   --> src/minitiff/tiffread.rs:765:13
    |
765 |     let mut bytes_per_sample: libc::c_uint = 0;
    |             ^^^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `sample_max` is never read
   --> src/minitiff/tiffread.rs:766:13
    |
766 |     let mut sample_max: libc::c_uint = 0;
    |             ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `offset` is never read
   --> src/minitiff/tiffread.rs:767:13
    |
767 |     let mut offset: libc::c_long = 0;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `i` is never read
   --> src/minitiff/tiffread.rs:768:13
    |
768 |     let mut i: size_t = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:769:25
    |
769 |     bytes_per_sample = ((*info_ptr).bits_per_sample)
    |                         ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/minitiff/tiffread.rs:756:1
    |
756 | / pub unsafe extern "C" fn minitiff_read_row(
757 | |     mut info_ptr: *mut minitiff_info,
758 | |     mut row_ptr: *mut libc::c_uchar,
759 | |     mut row_index: size_t,
760 | |     mut stream: *mut FILE,
761 | | ) {
    | |_^

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:772:16
    |
772 |     row_size = (*info_ptr).width * (*info_ptr).samples_per_pixel as size_t
    |                ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:772:36
    |
772 |     row_size = (*info_ptr).width * (*info_ptr).samples_per_pixel as size_t
    |                                    ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:774:31
    |
774 |     strip_index = row_index / (*info_ptr).rows_per_strip;
    |                               ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:775:23
    |
775 |     if strip_index >= (*info_ptr).strip_offsets_count {
    |                       ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:777:16
    |
777 |     } else if (*((*info_ptr).strip_offsets).offset(strip_index as isize) as libc::c_long)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:777:17
    |
777 |     } else if (*((*info_ptr).strip_offsets).offset(strip_index as isize) as libc::c_long)
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:777:18
    |
777 |     } else if (*((*info_ptr).strip_offsets).offset(strip_index as isize) as libc::c_long)
    |                  ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:782:18
    |
782 |         offset = (*((*info_ptr).strip_offsets).offset(strip_index as isize))
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:782:20
    |
782 |         offset = (*((*info_ptr).strip_offsets).offset(strip_index as isize))
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:782:21
    |
782 |         offset = (*((*info_ptr).strip_offsets).offset(strip_index as isize))
    |                     ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:783:51
    |
783 |             .wrapping_add(row_size * (row_index % (*info_ptr).rows_per_strip))
    |                                                   ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::seek_to_offset` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:785:9
    |
785 |         seek_to_offset(info_ptr, offset, stream);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::fread` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:786:12
    |
786 |           if fread(
    |  ____________^
787 | |             row_ptr as *mut libc::c_void,
788 | |             row_size,
789 | |             1 as libc::c_int as libc::c_ulong,
790 | |             stream,
791 | |         ) != 1 as libc::c_int as libc::c_ulong
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::minitiff_error` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:793:13
    |
793 |             minitiff_error(info_ptr, msg_err_read);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:793:38
    |
793 |             minitiff_error(info_ptr, msg_err_read);
    |                                      ^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:796:16
    |
796 |             if (*info_ptr).photometric == 0 as libc::c_int as libc::c_uint {
    |                ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:800:58
    |
800 |                     sample_max = (((1 as libc::c_int) << (*info_ptr).bits_per_sample)
    |                                                          ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:804:25
    |
804 | /                         *row_ptr
805 | |                             .offset(
806 | |                                 i as isize,
807 | |                             ) = sample_max
    | |_____________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:804:26
    |
804 |                           *row_ptr
    |  __________________________^
805 | |                             .offset(
806 | |                                 i as isize,
807 | |                             ) = sample_max
    | |_____________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:808:43
    |
808 | ...                   .wrapping_sub(*row_ptr.offset(i as isize) as libc::c_uint)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:808:44
    |
808 | ...                   .wrapping_sub(*row_ptr.offset(i as isize) as libc::c_uint)
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::minitiff_error` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:826:13
    |
826 |             minitiff_error(info_ptr, msg_err_invalid);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:826:38
    |
826 |             minitiff_error(info_ptr, msg_err_invalid);
    |                                      ^^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::minitiff_error` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:833:13
    |
833 |             minitiff_error(info_ptr, msg_err_range);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:833:38
    |
833 |             minitiff_error(info_ptr, msg_err_range);
    |                                      ^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffread::minitiff_error` is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:837:5
    |
837 |     minitiff_error(info_ptr, msg_err_unsupported);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/minitiff/tiffread.rs:837:30
    |
837 |     minitiff_error(info_ptr, msg_err_unsupported);
    |                              ^^^^^^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error: variable does not need to be mutable
   --> src/minitiff/tiffread.rs:757:5
    |
757 |     mut info_ptr: *mut minitiff_info,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/minitiff/tiffread.rs:758:5
    |
758 |     mut row_ptr: *mut libc::c_uchar,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/minitiff/tiffread.rs:759:5
    |
759 |     mut row_index: size_t,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/minitiff/tiffread.rs:760:5
    |
760 |     mut stream: *mut FILE,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error[E0133]: call to unsafe function `minitiff::tiffutil::memset` is unsafe and requires unsafe block
   --> src/minitiff/tiffutil.rs:118:5
    |
118 | /     memset(
119 | |         info_ptr as *mut libc::c_void,
120 | |         0 as libc::c_int,
121 | |         ::core::mem::size_of::<minitiff_info>() as libc::c_ulong,
122 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/minitiff/tiffutil.rs:117:1
    |
117 | pub unsafe extern "C" fn minitiff_init_info(mut info_ptr: *mut minitiff_info) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffutil.rs:123:5
    |
123 |     (*info_ptr).photometric = -(1 as libc::c_int) as libc::c_uint;
    |     ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error: variable does not need to be mutable
   --> src/minitiff/tiffutil.rs:117:45
    |
117 | pub unsafe extern "C" fn minitiff_init_info(mut info_ptr: *mut minitiff_info) {
    |                                             ----^^^^^^^^
    |                                             |
    |                                             help: remove this `mut`

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffutil.rs:127:8
    |
127 |     if (*info_ptr).width == 0 as libc::c_int as size_t
    |        ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/minitiff/tiffutil.rs:126:1
    |
126 | pub unsafe extern "C" fn minitiff_validate_info(mut info_ptr: *const minitiff_info) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffutil.rs:128:12
    |
128 |         || (*info_ptr).height == 0 as libc::c_int as size_t
    |            ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffutil::minitiff_error` is unsafe and requires unsafe block
   --> src/minitiff/tiffutil.rs:130:9
    |
130 | /         minitiff_error(
131 | |             info_ptr,
132 | |             b"Invalid image dimensions in TIFF file\0" as *const u8
133 | |                 as *const libc::c_char,
134 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffutil.rs:136:8
    |
136 |     if (*info_ptr).bits_per_sample == 0 as libc::c_int as libc::c_uint
    |        ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffutil.rs:137:12
    |
137 |         || (*info_ptr).samples_per_pixel == 0 as libc::c_int as libc::c_uint
    |            ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffutil::minitiff_error` is unsafe and requires unsafe block
   --> src/minitiff/tiffutil.rs:139:9
    |
139 | /         minitiff_error(
140 | |             info_ptr,
141 | |             b"Invalid pixel info in TIFF file\0" as *const u8 as *const libc::c_char,
142 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffutil.rs:144:9
    |
144 |     if ((*info_ptr).strip_offsets).is_null()
    |         ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffutil.rs:145:12
    |
145 |         || (*info_ptr).rows_per_strip == 0 as libc::c_int as size_t
    |            ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffutil::minitiff_error` is unsafe and requires unsafe block
   --> src/minitiff/tiffutil.rs:147:9
    |
147 | /         minitiff_error(
148 | |             info_ptr,
149 | |             b"Invalid strip info in TIFF file\0" as *const u8 as *const libc::c_char,
150 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffutil.rs:152:8
    |
152 |     if (*info_ptr).compression
    |        ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffutil::minitiff_error` is unsafe and requires unsafe block
   --> src/minitiff/tiffutil.rs:155:9
    |
155 | /         minitiff_error(
156 | |             info_ptr,
157 | |             b"Unsupported compression method in TIFF file\0" as *const u8
158 | |                 as *const libc::c_char,
159 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffutil.rs:161:8
    |
161 |     if (*info_ptr).photometric
    |        ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffutil::minitiff_error` is unsafe and requires unsafe block
   --> src/minitiff/tiffutil.rs:164:9
    |
164 | /         minitiff_error(
165 | |             info_ptr,
166 | |             b"Unsupported photometric interpretation in TIFF file\0" as *const u8
167 | |                 as *const libc::c_char,
168 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/minitiff/tiffutil.rs:126:49
    |
126 | pub unsafe extern "C" fn minitiff_validate_info(mut info_ptr: *const minitiff_info) {
    |                                                 ----^^^^^^^^
    |                                                 |
    |                                                 help: remove this `mut`

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffutil.rs:173:10
    |
173 |     if !((*info_ptr).strip_offsets).is_null() {
    |          ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/minitiff/tiffutil.rs:172:1
    |
172 | pub unsafe extern "C" fn minitiff_destroy_info(mut info_ptr: *mut minitiff_info) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `minitiff::tiffutil::free` is unsafe and requires unsafe block
   --> src/minitiff/tiffutil.rs:174:9
    |
174 |         free((*info_ptr).strip_offsets as *mut libc::c_void);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffutil.rs:174:14
    |
174 |         free((*info_ptr).strip_offsets as *mut libc::c_void);
    |              ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error: variable does not need to be mutable
   --> src/minitiff/tiffutil.rs:172:48
    |
172 | pub unsafe extern "C" fn minitiff_destroy_info(mut info_ptr: *mut minitiff_info) {
    |                                                ----^^^^^^^^
    |                                                |
    |                                                help: remove this `mut`

error[E0133]: call to unsafe function `minitiff::tiffutil::fprintf` is unsafe and requires unsafe block
   --> src/minitiff/tiffutil.rs:178:5
    |
178 |     fprintf(stderr, b"minitiff: error: %s\n\0" as *const u8 as *const libc::c_char, msg);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/minitiff/tiffutil.rs:177:1
    |
177 | unsafe extern "C" fn default_error_handler(mut msg: *const libc::c_char) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/minitiff/tiffutil.rs:178:13
    |
178 |     fprintf(stderr, b"minitiff: error: %s\n\0" as *const u8 as *const libc::c_char, msg);
    |             ^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffutil::exit` is unsafe and requires unsafe block
   --> src/minitiff/tiffutil.rs:179:5
    |
179 |     exit(1 as libc::c_int);
    |     ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/minitiff/tiffutil.rs:177:44
    |
177 | unsafe extern "C" fn default_error_handler(mut msg: *const libc::c_char) {
    |                                            ----^^^
    |                                            |
    |                                            help: remove this `mut`

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffutil.rs:186:9
    |
186 |     if ((*info_ptr).error_handler).is_some() {
    |         ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/minitiff/tiffutil.rs:182:1
    |
182 | / pub unsafe extern "C" fn minitiff_error(
183 | |     mut info_ptr: *const minitiff_info,
184 | |     mut msg: *const libc::c_char,
185 | | ) {
    | |_^

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/minitiff/tiffutil.rs:187:9
    |
187 |         ((*info_ptr).error_handler).expect("non-null function pointer")(msg);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffutil.rs:187:10
    |
187 |         ((*info_ptr).error_handler).expect("non-null function pointer")(msg);
    |          ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffutil::default_error_handler` is unsafe and requires unsafe block
   --> src/minitiff/tiffutil.rs:189:9
    |
189 |         default_error_handler(msg);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffutil::abort` is unsafe and requires unsafe block
   --> src/minitiff/tiffutil.rs:191:5
    |
191 |     abort();
    |     ^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/minitiff/tiffutil.rs:183:5
    |
183 |     mut info_ptr: *const minitiff_info,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/minitiff/tiffutil.rs:184:5
    |
184 |     mut msg: *const libc::c_char,
    |     ----^^^
    |     |
    |     help: remove this `mut`

error[E0133]: call to unsafe function `minitiff::tiffutil::fprintf` is unsafe and requires unsafe block
   --> src/minitiff/tiffutil.rs:194:5
    |
194 | /     fprintf(
195 | |         stderr,
196 | |         b"minitiff: warning: %s\n\0" as *const u8 as *const libc::c_char,
197 | |         msg,
198 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/minitiff/tiffutil.rs:193:1
    |
193 | unsafe extern "C" fn default_warning_handler(mut msg: *const libc::c_char) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/minitiff/tiffutil.rs:195:9
    |
195 |         stderr,
    |         ^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error: variable does not need to be mutable
   --> src/minitiff/tiffutil.rs:193:46
    |
193 | unsafe extern "C" fn default_warning_handler(mut msg: *const libc::c_char) {
    |                                              ----^^^
    |                                              |
    |                                              help: remove this `mut`

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffutil.rs:205:9
    |
205 |     if ((*info_ptr).warning_handler).is_some() {
    |         ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/minitiff/tiffutil.rs:201:1
    |
201 | / pub unsafe extern "C" fn minitiff_warning(
202 | |     mut info_ptr: *const minitiff_info,
203 | |     mut msg: *const libc::c_char,
204 | | ) {
    | |_^

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/minitiff/tiffutil.rs:206:9
    |
206 |         ((*info_ptr).warning_handler).expect("non-null function pointer")(msg);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/minitiff/tiffutil.rs:206:10
    |
206 |         ((*info_ptr).warning_handler).expect("non-null function pointer")(msg);
    |          ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `minitiff::tiffutil::default_warning_handler` is unsafe and requires unsafe block
   --> src/minitiff/tiffutil.rs:208:9
    |
208 |         default_warning_handler(msg);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/minitiff/tiffutil.rs:202:5
    |
202 |     mut info_ptr: *const minitiff_info,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/minitiff/tiffutil.rs:203:5
    |
203 |     mut msg: *const libc::c_char,
    |     ----^^^
    |     |
    |     help: remove this `mut`

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_bit_depth` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:197:8
    |
197 |     if png_get_bit_depth(png_ptr as *const png_struct, info_ptr as *const png_info)
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/opngreduc/opngreduc.rs:193:1
    |
193 | / pub unsafe extern "C" fn opng_validate_image(
194 | |     mut png_ptr: png_structp,
195 | |     mut info_ptr: png_infop,
196 | | ) -> libc::c_int {
    | |________________^

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_color_type` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:202:8
    |
202 |     if png_get_color_type(png_ptr as *const png_struct, info_ptr as *const png_info)
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_valid` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:205:12
    |
205 |           if png_get_valid(
    |  ____________^
206 | |             png_ptr as *const png_struct,
207 | |             info_ptr as *const png_info,
208 | |             0x8 as libc::c_uint,
209 | |         ) == 0
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_valid` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:214:8
    |
214 |       if png_get_valid(
    |  ________^
215 | |         png_ptr as *const png_struct,
216 | |         info_ptr as *const png_info,
217 | |         0x8000 as libc::c_uint,
218 | |     ) == 0
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/opngreduc/opngreduc.rs:194:5
    |
194 |     mut png_ptr: png_structp,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/opngreduc/opngreduc.rs:195:5
    |
195 |     mut info_ptr: png_infop,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `low` is never read
   --> src/opngreduc/opngreduc.rs:236:13
    |
236 |     let mut low: libc::c_int = 0;
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `high` is never read
   --> src/opngreduc/opngreduc.rs:237:13
    |
237 |     let mut high: libc::c_int = 0;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `mid` is never read
   --> src/opngreduc/opngreduc.rs:238:13
    |
238 |     let mut mid: libc::c_int = 0;
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `cmp` is never read
   --> src/opngreduc/opngreduc.rs:239:13
    |
239 |     let mut cmp: libc::c_int = 0;
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `i` is never read
   --> src/opngreduc/opngreduc.rs:240:13
    |
240 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:241:8
    |
241 |     if *num_palette >= 0 as libc::c_int && *num_palette <= max_tuples {} else {
    |        ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/opngreduc/opngreduc.rs:224:1
    |
224 | / unsafe extern "C" fn opng_insert_palette_entry(
225 | |     mut palette: png_colorp,
226 | |     mut num_palette: *mut libc::c_int,
227 | |     mut trans_alpha: png_bytep,
...   |
234 | |     mut index: *mut libc::c_int,
235 | | ) -> libc::c_int {
    | |________________^

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:241:44
    |
241 |     if *num_palette >= 0 as libc::c_int && *num_palette <= max_tuples {} else {
    |                                            ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:242:9
    |
242 | /         __assert_fail(
243 | |             b"*num_palette >= 0 && *num_palette <= max_tuples\0" as *const u8
244 | |                 as *const libc::c_char,
245 | |             b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
...   |
253 | |                 .as_ptr(),
254 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:247:15
    |
247 |               (*::core::mem::transmute::<
    |  _______________^
248 | |                 &[u8; 135],
249 | |                 &[libc::c_char; 135],
250 | |             >(
251 | |                 b"int opng_insert_pa...
252 | |             ))
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:257:12
    |
257 |         if *num_palette >= 0 as libc::c_int && *num_palette <= max_tuples {} else {
    |            ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:257:48
    |
257 |         if *num_palette >= 0 as libc::c_int && *num_palette <= max_tuples {} else {
    |                                                ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:258:13
    |
258 | /             __assert_fail(
259 | |                 b"*num_palette >= 0 && *num_palette <= max_tuples\0" as *const u8
260 | |                     as *const libc::c_char,
261 | |                 b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
...   |
269 | |                     .as_ptr(),
270 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:263:19
    |
263 |                   (*::core::mem::transmute::<
    |  ___________________^
264 | |                     &[u8; 135],
265 | |                     &[libc::c_char; 135],
266 | |                 >(
267 | |                     b"int opng_insert_pa...
268 | |                 ))
    | |_________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:273:8
    |
273 |     if *num_trans >= 0 as libc::c_int && *num_trans <= *num_palette {} else {
    |        ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:273:42
    |
273 |     if *num_trans >= 0 as libc::c_int && *num_trans <= *num_palette {} else {
    |                                          ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:273:56
    |
273 |     if *num_trans >= 0 as libc::c_int && *num_trans <= *num_palette {} else {
    |                                                        ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:274:9
    |
274 | /         __assert_fail(
275 | |             b"*num_trans >= 0 && *num_trans <= *num_palette\0" as *const u8
276 | |                 as *const libc::c_char,
277 | |             b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
...   |
285 | |                 .as_ptr(),
286 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:279:15
    |
279 |               (*::core::mem::transmute::<
    |  _______________^
280 | |                 &[u8; 135],
281 | |                 &[libc::c_char; 135],
282 | |             >(
283 | |                 b"int opng_insert_pa...
284 | |             ))
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:289:12
    |
289 |         if *num_trans >= 0 as libc::c_int && *num_trans <= *num_palette {} else {
    |            ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:289:46
    |
289 |         if *num_trans >= 0 as libc::c_int && *num_trans <= *num_palette {} else {
    |                                              ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:289:60
    |
289 |         if *num_trans >= 0 as libc::c_int && *num_trans <= *num_palette {} else {
    |                                                            ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:290:13
    |
290 | /             __assert_fail(
291 | |                 b"*num_trans >= 0 && *num_trans <= *num_palette\0" as *const u8
292 | |                     as *const libc::c_char,
293 | |                 b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
...   |
301 | |                     .as_ptr(),
302 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:295:19
    |
295 |                   (*::core::mem::transmute::<
    |  ___________________^
296 | |                     &[u8; 135],
297 | |                     &[libc::c_char; 135],
298 | |                 >(
299 | |                     b"int opng_insert_pa...
300 | |                 ))
    | |_________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:307:16
    |
307 |         high = *num_trans - 1 as libc::c_int;
    |                ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:311:20
    |
311 |                 != *trans_alpha.offset(mid as isize) as libc::c_int
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:311:21
    |
311 |                 != *trans_alpha.offset(mid as isize) as libc::c_int
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:313:40
    |
313 |                 alpha as libc::c_int - *trans_alpha.offset(mid as isize) as libc::c_int
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:313:41
    |
313 |                 alpha as libc::c_int - *trans_alpha.offset(mid as isize) as libc::c_int
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:315:20
    |
315 |                 != (*palette.offset(mid as isize)).red as libc::c_int
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:315:22
    |
315 |                 != (*palette.offset(mid as isize)).red as libc::c_int
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:317:38
    |
317 |                 red as libc::c_int - (*palette.offset(mid as isize)).red as libc::c_int
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:317:40
    |
317 |                 red as libc::c_int - (*palette.offset(mid as isize)).red as libc::c_int
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:319:20
    |
319 |                 != (*palette.offset(mid as isize)).green as libc::c_int
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:319:22
    |
319 |                 != (*palette.offset(mid as isize)).green as libc::c_int
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:322:23
    |
322 |                     - (*palette.offset(mid as isize)).green as libc::c_int
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:322:25
    |
322 |                     - (*palette.offset(mid as isize)).green as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:324:39
    |
324 |                 blue as libc::c_int - (*palette.offset(mid as isize)).blue as libc::c_int
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:324:41
    |
324 |                 blue as libc::c_int - (*palette.offset(mid as isize)).blue as libc::c_int
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:331:17
    |
331 |                 *index = mid;
    |                 ^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:336:15
    |
336 |         low = *num_trans;
    |               ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:337:16
    |
337 |         high = *num_palette - 1 as libc::c_int;
    |                ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:341:20
    |
341 |                 != (*palette.offset(mid as isize)).red as libc::c_int
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:341:22
    |
341 |                 != (*palette.offset(mid as isize)).red as libc::c_int
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:343:38
    |
343 |                 red as libc::c_int - (*palette.offset(mid as isize)).red as libc::c_int
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:343:40
    |
343 |                 red as libc::c_int - (*palette.offset(mid as isize)).red as libc::c_int
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:345:20
    |
345 |                 != (*palette.offset(mid as isize)).green as libc::c_int
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:345:22
    |
345 |                 != (*palette.offset(mid as isize)).green as libc::c_int
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:348:23
    |
348 |                     - (*palette.offset(mid as isize)).green as libc::c_int
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:348:25
    |
348 |                     - (*palette.offset(mid as isize)).green as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:350:39
    |
350 |                 blue as libc::c_int - (*palette.offset(mid as isize)).blue as libc::c_int
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:350:41
    |
350 |                 blue as libc::c_int - (*palette.offset(mid as isize)).blue as libc::c_int
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:357:17
    |
357 |                 *index = mid;
    |                 ^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:364:19
    |
364 |         while i < *num_trans {
    |                   ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:366:20
    |
366 |                 != (*palette.offset(i as isize)).red as libc::c_int
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:366:22
    |
366 |                 != (*palette.offset(i as isize)).red as libc::c_int
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:368:38
    |
368 |                 red as libc::c_int - (*palette.offset(i as isize)).red as libc::c_int
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:368:40
    |
368 |                 red as libc::c_int - (*palette.offset(i as isize)).red as libc::c_int
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:370:20
    |
370 |                 != (*palette.offset(i as isize)).green as libc::c_int
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:370:22
    |
370 |                 != (*palette.offset(i as isize)).green as libc::c_int
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:372:40
    |
372 |                 green as libc::c_int - (*palette.offset(i as isize)).green as libc::c_int
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:372:42
    |
372 |                 green as libc::c_int - (*palette.offset(i as isize)).green as libc::c_int
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:374:39
    |
374 |                 blue as libc::c_int - (*palette.offset(i as isize)).blue as libc::c_int
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:374:41
    |
374 |                 blue as libc::c_int - (*palette.offset(i as isize)).blue as libc::c_int
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:377:17
    |
377 |                 *index = i;
    |                 ^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:384:8
    |
384 |     if *num_palette >= max_tuples {
    |        ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:385:9
    |
385 |         *index = -(1 as libc::c_int);
    |         ^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:386:9
    |
386 |         *num_trans = *index;
    |         ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:386:22
    |
386 |         *num_trans = *index;
    |                      ^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:387:9
    |
387 |         *num_palette = *num_trans;
    |         ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:387:24
    |
387 |         *num_palette = *num_trans;
    |                        ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:390:42
    |
390 |     if low >= 0 as libc::c_int && low <= *num_palette {} else {
    |                                          ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:391:9
    |
391 | /         __assert_fail(
392 | |             b"low >= 0 && low <= *num_palette\0" as *const u8 as *const libc::c_char,
393 | |             b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
394 | |             179 as libc::c_int as libc::c_uint,
...   |
401 | |                 .as_ptr(),
402 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:395:15
    |
395 |               (*::core::mem::transmute::<
    |  _______________^
396 | |                 &[u8; 135],
397 | |                 &[libc::c_char; 135],
398 | |             >(
399 | |                 b"int opng_insert_pa...
400 | |             ))
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:405:46
    |
405 |         if low >= 0 as libc::c_int && low <= *num_palette {} else {
    |                                              ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:406:13
    |
406 | /             __assert_fail(
407 | |                 b"low >= 0 && low <= *num_palette\0" as *const u8 as *const libc::c_char,
408 | |                 b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
409 | |                 179 as libc::c_int as libc::c_uint,
...   |
416 | |                     .as_ptr(),
417 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:410:19
    |
410 |                   (*::core::mem::transmute::<
    |  ___________________^
411 | |                     &[u8; 135],
412 | |                     &[libc::c_char; 135],
413 | |                 >(
414 | |                     b"int opng_insert_pa...
415 | |                 ))
    | |_________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:420:9
    |
420 |     i = *num_palette;
    |         ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:422:9
    |
422 |         *palette.offset(i as isize) = *palette.offset((i - 1 as libc::c_int) as isize);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:422:10
    |
422 |         *palette.offset(i as isize) = *palette.offset((i - 1 as libc::c_int) as isize);
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:422:39
    |
422 |         *palette.offset(i as isize) = *palette.offset((i - 1 as libc::c_int) as isize);
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:422:40
    |
422 |         *palette.offset(i as isize) = *palette.offset((i - 1 as libc::c_int) as isize);
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:426:5
    |
426 |     (*palette.offset(low as isize)).red = red as png_byte;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:426:7
    |
426 |     (*palette.offset(low as isize)).red = red as png_byte;
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:427:5
    |
427 |     (*palette.offset(low as isize)).green = green as png_byte;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:427:7
    |
427 |     (*palette.offset(low as isize)).green = green as png_byte;
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:428:5
    |
428 |     (*palette.offset(low as isize)).blue = blue as png_byte;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:428:7
    |
428 |     (*palette.offset(low as isize)).blue = blue as png_byte;
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:429:5
    |
429 |     *num_palette += 1;
    |     ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:430:5
    |
430 |     *num_palette;
    |     ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:432:19
    |
432 |         if low <= *num_trans {} else {
    |                   ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:433:13
    |
433 | /             __assert_fail(
434 | |                 b"low <= *num_trans\0" as *const u8 as *const libc::c_char,
435 | |                 b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
436 | |                 188 as libc::c_int as libc::c_uint,
...   |
443 | |                     .as_ptr(),
444 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:437:19
    |
437 |                   (*::core::mem::transmute::<
    |  ___________________^
438 | |                     &[u8; 135],
439 | |                     &[libc::c_char; 135],
440 | |                 >(
441 | |                     b"int opng_insert_pa...
442 | |                 ))
    | |_________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:447:23
    |
447 |             if low <= *num_trans {} else {
    |                       ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:448:17
    |
448 | /                 __assert_fail(
449 | |                     b"low <= *num_trans\0" as *const u8 as *const libc::c_char,
450 | |                     b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
451 | |                     188 as libc::c_int as libc::c_uint,
...   |
458 | |                         .as_ptr(),
459 | |                 );
    | |_________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:452:23
    |
452 |                       (*::core::mem::transmute::<
    |  _______________________^
453 | |                         &[u8; 135],
454 | |                         &[libc::c_char; 135],
455 | |                     >(
456 | |                         b"int opng_insert_pa...
457 | |                     ))
    | |_____________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:462:13
    |
462 |         i = *num_trans;
    |             ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:464:13
    |
464 | /             *trans_alpha
465 | |                 .offset(
466 | |                     i as isize,
467 | |                 ) = *trans_alpha.offset((i - 1 as libc::c_int) as isize);
    | |_________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:464:14
    |
464 |               *trans_alpha
    |  ______________^
465 | |                 .offset(
466 | |                     i as isize,
467 | |                 ) = *trans_alpha.offset((i - 1 as libc::c_int) as isize);
    | |_________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:467:21
    |
467 |                 ) = *trans_alpha.offset((i - 1 as libc::c_int) as isize);
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:467:22
    |
467 |                 ) = *trans_alpha.offset((i - 1 as libc::c_int) as isize);
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:471:9
    |
471 |         *trans_alpha.offset(low as isize) = alpha as png_byte;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:471:10
    |
471 |         *trans_alpha.offset(low as isize) = alpha as png_byte;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:472:9
    |
472 |         *num_trans += 1;
    |         ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:473:9
    |
473 |         *num_trans;
    |         ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:475:5
    |
475 |     *index = low;
    |     ^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error: variable does not need to be mutable
   --> src/opngreduc/opngreduc.rs:225:5
    |
225 |     mut palette: png_colorp,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/opngreduc/opngreduc.rs:226:5
    |
226 |     mut num_palette: *mut libc::c_int,
    |     ----^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/opngreduc/opngreduc.rs:227:5
    |
227 |     mut trans_alpha: png_bytep,
    |     ----^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/opngreduc/opngreduc.rs:228:5
    |
228 |     mut num_trans: *mut libc::c_int,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/opngreduc/opngreduc.rs:229:5
    |
229 |     mut max_tuples: libc::c_int,
    |     ----^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/opngreduc/opngreduc.rs:230:5
    |
230 |     mut red: libc::c_uint,
    |     ----^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/opngreduc/opngreduc.rs:231:5
    |
231 |     mut green: libc::c_uint,
    |     ----^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/opngreduc/opngreduc.rs:232:5
    |
232 |     mut blue: libc::c_uint,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/opngreduc/opngreduc.rs:233:5
    |
233 |     mut alpha: libc::c_uint,
    |     ----^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/opngreduc/opngreduc.rs:234:5
    |
234 |     mut index: *mut libc::c_int,
    |     ----^^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `src_num_palette` is never read
   --> src/opngreduc/opngreduc.rs:489:13
    |
489 |     let mut src_num_palette: libc::c_int = 0;
    |             ^^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `buffer_ptr` is never read
   --> src/opngreduc/opngreduc.rs:490:13
    |
490 |     let mut buffer_ptr: png_bytep = 0 as *mut png_byte;
    |             ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:495:9
    |
495 | /         __assert_fail(
496 | |             b"num_palette > 0\0" as *const u8 as *const libc::c_char,
497 | |             b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
498 | |             218 as libc::c_int as libc::c_uint,
...   |
503 | |                 .as_ptr(),
504 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/opngreduc/opngreduc.rs:478:1
    |
478 | / unsafe extern "C" fn opng_realloc_PLTE(
479 | |     mut png_ptr: png_structp,
480 | |     mut info_ptr: png_infop,
481 | |     mut num_palette: libc::c_int,
482 | | ) {
    | |_^

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:499:15
    |
499 |               (*::core::mem::transmute::<
    |  _______________^
500 | |                 &[u8; 52],
501 | |                 &[libc::c_char; 52],
502 | |             >(b"void opng_realloc_PLTE(png_structp, png_infop, int)\0"))
    | |_______________________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:508:13
    |
508 | /             __assert_fail(
509 | |                 b"num_palette > 0\0" as *const u8 as *const libc::c_char,
510 | |                 b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
511 | |                 218 as libc::c_int as libc::c_uint,
...   |
516 | |                     .as_ptr(),
517 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:512:19
    |
512 |                   (*::core::mem::transmute::<
    |  ___________________^
513 | |                     &[u8; 52],
514 | |                     &[libc::c_char; 52],
515 | |                 >(b"void opng_realloc_PLTE(png_structp, png_infop, int)\0"))
    | |___________________________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_PLTE` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:521:5
    |
521 | /     png_get_PLTE(
522 | |         png_ptr as *const png_struct,
523 | |         info_ptr,
524 | |         &mut palette,
525 | |         &mut src_num_palette,
526 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::memcpy` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:530:5
    |
530 | /     memcpy(
531 | |         buffer.as_mut_ptr() as *mut libc::c_void,
532 | |         palette as *const libc::c_void,
533 | |         (num_palette as libc::c_ulong)
534 | |             .wrapping_mul(::core::mem::size_of::<png_color>() as libc::c_ulong),
535 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::memset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:537:9
    |
537 | /         memset(
538 | |             buffer.as_mut_ptr().offset(src_num_palette as isize) as *mut libc::c_void,
539 | |             0 as libc::c_int,
540 | |             ((num_palette - src_num_palette) as libc::c_ulong)
541 | |                 .wrapping_mul(::core::mem::size_of::<png_color>() as libc::c_ulong),
542 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:538:13
    |
538 |             buffer.as_mut_ptr().offset(src_num_palette as isize) as *mut libc::c_void,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_set_PLTE` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:544:5
    |
544 | /     png_set_PLTE(
545 | |         png_ptr,
546 | |         info_ptr,
547 | |         buffer.as_mut_ptr() as png_const_colorp,
548 | |         num_palette,
549 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_tRNS` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:551:12
    |
551 |           if png_get_tRNS(
    |  ____________^
552 | |             png_ptr as *const png_struct,
553 | |             info_ptr,
554 | |             &mut trans_alpha,
555 | |             &mut num_trans,
556 | |             0 as *mut png_color_16p,
557 | |         ) != 0 && num_trans > num_palette
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_warning` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:560:13
    |
560 | /             png_warning(
561 | |                 png_ptr as *const png_struct,
562 | |                 b"Too many alpha values in tRNS\0" as *const u8 as *const libc::c_char,
563 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::memcpy` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:565:13
    |
565 | /             memcpy(
566 | |                 buffer_ptr as *mut libc::c_void,
567 | |                 trans_alpha as *const libc::c_void,
568 | |                 num_trans as size_t,
569 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_set_tRNS` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:570:13
    |
570 | /             png_set_tRNS(
571 | |                 png_ptr,
572 | |                 info_ptr,
573 | |                 buffer_ptr as png_const_bytep,
574 | |                 num_trans,
575 | |                 0 as png_const_color_16p,
576 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_bKGD` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:578:12
    |
578 |         if png_get_bKGD(png_ptr as *const png_struct, info_ptr, &mut background) != 0
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:579:16
    |
579 |             && (*background).index as libc::c_int >= num_palette
    |                ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_warning` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:581:13
    |
581 | /             png_warning(
582 | |                 png_ptr as *const png_struct,
583 | |                 b"Invalid color index in bKGD\0" as *const u8 as *const libc::c_char,
584 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_set_invalid` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:585:13
    |
585 | /             png_set_invalid(
586 | |                 png_ptr as *const png_struct,
587 | |                 info_ptr,
588 | |                 0x20 as libc::c_uint as libc::c_int,
589 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/opngreduc/opngreduc.rs:479:5
    |
479 |     mut png_ptr: png_structp,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/opngreduc/opngreduc.rs:480:5
    |
480 |     mut info_ptr: png_infop,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/opngreduc/opngreduc.rs:481:5
    |
481 |     mut num_palette: libc::c_int,
    |     ----^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `src_num_trans` is never read
   --> src/opngreduc/opngreduc.rs:600:13
    |
600 |     let mut src_num_trans: libc::c_int = 0;
    |             ^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:602:9
    |
602 | /         __assert_fail(
603 | |             b"num_trans > 0\0" as *const u8 as *const libc::c_char,
604 | |             b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
605 | |             270 as libc::c_int as libc::c_uint,
...   |
610 | |                 .as_ptr(),
611 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/opngreduc/opngreduc.rs:593:1
    |
593 | / unsafe extern "C" fn opng_realloc_tRNS(
594 | |     mut png_ptr: png_structp,
595 | |     mut info_ptr: png_infop,
596 | |     mut num_trans: libc::c_int,
597 | | ) {
    | |_^

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:606:15
    |
606 |               (*::core::mem::transmute::<
    |  _______________^
607 | |                 &[u8; 52],
608 | |                 &[libc::c_char; 52],
609 | |             >(b"void opng_realloc_tRNS(png_structp, png_infop, int)\0"))
    | |_______________________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:615:13
    |
615 | /             __assert_fail(
616 | |                 b"num_trans > 0\0" as *const u8 as *const libc::c_char,
617 | |                 b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
618 | |                 270 as libc::c_int as libc::c_uint,
...   |
623 | |                     .as_ptr(),
624 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:619:19
    |
619 |                   (*::core::mem::transmute::<
    |  ___________________^
620 | |                     &[u8; 52],
621 | |                     &[libc::c_char; 52],
622 | |                 >(b"void opng_realloc_tRNS(png_structp, png_infop, int)\0"))
    | |___________________________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_tRNS` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:628:5
    |
628 | /     png_get_tRNS(
629 | |         png_ptr as *const png_struct,
630 | |         info_ptr,
631 | |         &mut trans_alpha,
632 | |         &mut src_num_trans,
633 | |         0 as *mut png_color_16p,
634 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::memcpy` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:638:5
    |
638 | /     memcpy(
639 | |         buffer.as_mut_ptr() as *mut libc::c_void,
640 | |         trans_alpha as *const libc::c_void,
641 | |         num_trans as size_t,
642 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::memset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:644:9
    |
644 | /         memset(
645 | |             buffer.as_mut_ptr().offset(src_num_trans as isize) as *mut libc::c_void,
646 | |             0 as libc::c_int,
647 | |             (num_trans - src_num_trans) as libc::c_ulong,
648 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:645:13
    |
645 |             buffer.as_mut_ptr().offset(src_num_trans as isize) as *mut libc::c_void,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_set_tRNS` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:650:5
    |
650 | /     png_set_tRNS(
651 | |         png_ptr,
652 | |         info_ptr,
653 | |         buffer.as_mut_ptr() as png_const_bytep,
654 | |         num_trans,
655 | |         0 as png_const_color_16p,
656 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/opngreduc/opngreduc.rs:594:5
    |
594 |     mut png_ptr: png_structp,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/opngreduc/opngreduc.rs:595:5
    |
595 |     mut info_ptr: png_infop,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/opngreduc/opngreduc.rs:596:5
    |
596 |     mut num_trans: libc::c_int,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `sample_ptr` is never read
   --> src/opngreduc/opngreduc.rs:664:13
    |
664 |     let mut sample_ptr: png_bytep = 0 as *mut png_byte;
    |             ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `width` is never read
   --> src/opngreduc/opngreduc.rs:665:13
    |
665 |     let mut width: png_uint_32 = 0;
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `color_type` is never read
   --> src/opngreduc/opngreduc.rs:666:13
    |
666 |     let mut color_type: libc::c_int = 0;
    |             ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `bit_depth` is never read
   --> src/opngreduc/opngreduc.rs:667:13
    |
667 |     let mut bit_depth: libc::c_int = 0;
    |             ^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `channels` is never read
   --> src/opngreduc/opngreduc.rs:668:13
    |
668 |     let mut channels: libc::c_int = 0;
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `trans_red` is never read
   --> src/opngreduc/opngreduc.rs:669:13
    |
669 |     let mut trans_red: png_byte = 0;
    |             ^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `trans_green` is never read
   --> src/opngreduc/opngreduc.rs:670:13
    |
670 |     let mut trans_green: png_byte = 0;
    |             ^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `trans_blue` is never read
   --> src/opngreduc/opngreduc.rs:671:13
    |
671 |     let mut trans_blue: png_byte = 0;
    |             ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `trans_gray` is never read
   --> src/opngreduc/opngreduc.rs:672:13
    |
672 |     let mut trans_gray: png_byte = 0;
    |             ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `i` is never read
   --> src/opngreduc/opngreduc.rs:673:13
    |
673 |     let mut i: png_uint_32 = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:674:13
    |
674 |     width = (*row_info_ptr).width;
    |             ^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/opngreduc/opngreduc.rs:658:1
    |
658 | / unsafe extern "C" fn opng_get_alpha_row(
659 | |     mut row_info_ptr: png_row_infop,
660 | |     mut trans_color: png_color_16p,
661 | |     mut row: png_bytep,
662 | |     mut alpha_row: png_bytep,
663 | | ) {
    | |_^

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:675:18
    |
675 |     color_type = (*row_info_ptr).color_type as libc::c_int;
    |                  ^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:676:17
    |
676 |     bit_depth = (*row_info_ptr).bit_depth as libc::c_int;
    |                 ^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:677:16
    |
677 |     channels = (*row_info_ptr).channels as libc::c_int;
    |                ^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:679:9
    |
679 | /         __assert_fail(
680 | |             b"!(color_type & 1)\0" as *const u8 as *const libc::c_char,
681 | |             b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
682 | |             299 as libc::c_int as libc::c_uint,
...   |
689 | |                 .as_ptr(),
690 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:683:15
    |
683 |               (*::core::mem::transmute::<
    |  _______________^
684 | |                 &[u8; 76],
685 | |                 &[libc::c_char; 76],
686 | |             >(
687 | |                 b"void opng_get_alpha_row(png_row_infop, png_color_16p, png_bytep, png_bytep)\0",
688 | |             ))
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:694:13
    |
694 | /             __assert_fail(
695 | |                 b"!(color_type & 1)\0" as *const u8 as *const libc::c_char,
696 | |                 b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
697 | |                 299 as libc::c_int as libc::c_uint,
...   |
704 | |                     .as_ptr(),
705 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:698:19
    |
698 |                   (*::core::mem::transmute::<
    |  ___________________^
699 | |                     &[u8; 76],
700 | |                     &[libc::c_char; 76],
701 | |                 >(
702 | |                     b"void opng_get_alpha_row(png_row_infop, png_color_16p, png_bytep, png_bytep)\0",
703 | |                 ))
    | |_________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:709:9
    |
709 | /         __assert_fail(
710 | |             b"bit_depth == 8\0" as *const u8 as *const libc::c_char,
711 | |             b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
712 | |             300 as libc::c_int as libc::c_uint,
...   |
719 | |                 .as_ptr(),
720 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:713:15
    |
713 |               (*::core::mem::transmute::<
    |  _______________^
714 | |                 &[u8; 76],
715 | |                 &[libc::c_char; 76],
716 | |             >(
717 | |                 b"void opng_get_alpha_row(png_row_infop, png_color_16p, png_bytep, png_bytep)\0",
718 | |             ))
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:724:13
    |
724 | /             __assert_fail(
725 | |                 b"bit_depth == 8\0" as *const u8 as *const libc::c_char,
726 | |                 b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
727 | |                 300 as libc::c_int as libc::c_uint,
...   |
734 | |                     .as_ptr(),
735 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:728:19
    |
728 |                   (*::core::mem::transmute::<
    |  ___________________^
729 | |                     &[u8; 76],
730 | |                     &[libc::c_char; 76],
731 | |                 >(
732 | |                     b"void opng_get_alpha_row(png_row_infop, png_color_16p, png_bytep, png_bytep)\0",
733 | |                 ))
    | |_________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::memset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:740:13
    |
740 |             memset(alpha_row as *mut libc::c_void, 255 as libc::c_int, width as size_t);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:745:17
    |
745 | /                 __assert_fail(
746 | |                     b"channels == 3\0" as *const u8 as *const libc::c_char,
747 | |                     b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
748 | |                     312 as libc::c_int as libc::c_uint,
...   |
755 | |                         .as_ptr(),
756 | |                 );
    | |_________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:749:23
    |
749 |                       (*::core::mem::transmute::<
    |  _______________________^
750 | |                         &[u8; 76],
751 | |                         &[libc::c_char; 76],
752 | |                     >(
753 | |                         b"void opng_get_alpha_row(png_row_infop, png_color_16p, png_bytep, png_bytep)\0",
754 | |                     ))
    | |_____________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:760:21
    |
760 | /                     __assert_fail(
761 | |                         b"channels == 3\0" as *const u8 as *const libc::c_char,
762 | |                         b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
763 | |                         312 as libc::c_int as libc::c_uint,
...   |
770 | |                             .as_ptr(),
771 | |                     );
    | |_____________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:764:27
    |
764 |                           (*::core::mem::transmute::<
    |  ___________________________^
765 | |                             &[u8; 76],
766 | |                             &[libc::c_char; 76],
767 | |                         >(
768 | |                             b"void opng_get_alpha_row(png_row_infop, png_color_16p, png_bytep, png_bytep)\0",
769 | |                         ))
    | |_________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:774:25
    |
774 |             trans_red = (*trans_color).red as png_byte;
    |                         ^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:775:27
    |
775 |             trans_green = (*trans_color).green as png_byte;
    |                           ^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:776:26
    |
776 |             trans_blue = (*trans_color).blue as png_byte;
    |                          ^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:780:17
    |
780 | /                 *alpha_row
781 | |                     .offset(
782 | |                         i as isize,
783 | |                     ) = (if *sample_ptr.offset(0 as libc::c_int as isize) as libc::c_int
    | |_____________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:780:18
    |
780 |                   *alpha_row
    |  __________________^
781 | |                     .offset(
782 | |                         i as isize,
783 | |                     ) = (if *sample_ptr.offset(0 as libc::c_int as isize) as libc::c_int
    | |_____________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:783:29
    |
783 |                     ) = (if *sample_ptr.offset(0 as libc::c_int as isize) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:783:30
    |
783 |                     ) = (if *sample_ptr.offset(0 as libc::c_int as isize) as libc::c_int
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:785:24
    |
785 |                     && *sample_ptr.offset(1 as libc::c_int as isize) as libc::c_int
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:785:25
    |
785 |                     && *sample_ptr.offset(1 as libc::c_int as isize) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:787:24
    |
787 |                     && *sample_ptr.offset(2 as libc::c_int as isize) as libc::c_int
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:787:25
    |
787 |                     && *sample_ptr.offset(2 as libc::c_int as isize) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:796:30
    |
796 |                 sample_ptr = sample_ptr.offset(3 as libc::c_int as isize);
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:800:17
    |
800 | /                 __assert_fail(
801 | |                     b"color_type == 0\0" as *const u8 as *const libc::c_char,
802 | |                     b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
803 | |                     325 as libc::c_int as libc::c_uint,
...   |
810 | |                         .as_ptr(),
811 | |                 );
    | |_________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:804:23
    |
804 |                       (*::core::mem::transmute::<
    |  _______________________^
805 | |                         &[u8; 76],
806 | |                         &[libc::c_char; 76],
807 | |                     >(
808 | |                         b"void opng_get_alpha_row(png_row_infop, png_color_16p, png_bytep, png_bytep)\0",
809 | |                     ))
    | |_____________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:815:21
    |
815 | /                     __assert_fail(
816 | |                         b"color_type == 0\0" as *const u8 as *const libc::c_char,
817 | |                         b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
818 | |                         325 as libc::c_int as libc::c_uint,
...   |
825 | |                             .as_ptr(),
826 | |                     );
    | |_____________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:819:27
    |
819 |                           (*::core::mem::transmute::<
    |  ___________________________^
820 | |                             &[u8; 76],
821 | |                             &[libc::c_char; 76],
822 | |                         >(
823 | |                             b"void opng_get_alpha_row(png_row_infop, png_color_16p, png_bytep, png_bytep)\0",
824 | |                         ))
    | |_________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:830:17
    |
830 | /                 __assert_fail(
831 | |                     b"channels == 1\0" as *const u8 as *const libc::c_char,
832 | |                     b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
833 | |                     326 as libc::c_int as libc::c_uint,
...   |
840 | |                         .as_ptr(),
841 | |                 );
    | |_________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:834:23
    |
834 |                       (*::core::mem::transmute::<
    |  _______________________^
835 | |                         &[u8; 76],
836 | |                         &[libc::c_char; 76],
837 | |                     >(
838 | |                         b"void opng_get_alpha_row(png_row_infop, png_color_16p, png_bytep, png_bytep)\0",
839 | |                     ))
    | |_____________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:845:21
    |
845 | /                     __assert_fail(
846 | |                         b"channels == 1\0" as *const u8 as *const libc::c_char,
847 | |                         b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
848 | |                         326 as libc::c_int as libc::c_uint,
...   |
855 | |                             .as_ptr(),
856 | |                     );
    | |_____________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:849:27
    |
849 |                           (*::core::mem::transmute::<
    |  ___________________________^
850 | |                             &[u8; 76],
851 | |                             &[libc::c_char; 76],
852 | |                         >(
853 | |                             b"void opng_get_alpha_row(png_row_infop, png_color_16p, png_bytep, png_bytep)\0",
854 | |                         ))
    | |_________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:859:26
    |
859 |             trans_gray = (*trans_color).gray as png_byte;
    |                          ^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:862:17
    |
862 | /                 *alpha_row
863 | |                     .offset(
864 | |                         i as isize,
865 | |                     ) = (if *row.offset(i as isize) as libc::c_int
    | |_____________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:862:18
    |
862 |                   *alpha_row
    |  __________________^
863 | |                     .offset(
864 | |                         i as isize,
865 | |                     ) = (if *row.offset(i as isize) as libc::c_int
    | |_____________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:865:29
    |
865 |                     ) = (if *row.offset(i as isize) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:865:30
    |
865 |                     ) = (if *row.offset(i as isize) as libc::c_int
    |                              ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:879:9
    |
879 | /         __assert_fail(
880 | |             b"channels > 1\0" as *const u8 as *const libc::c_char,
881 | |             b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
882 | |             335 as libc::c_int as libc::c_uint,
...   |
889 | |                 .as_ptr(),
890 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:883:15
    |
883 |               (*::core::mem::transmute::<
    |  _______________^
884 | |                 &[u8; 76],
885 | |                 &[libc::c_char; 76],
886 | |             >(
887 | |                 b"void opng_get_alpha_row(png_row_infop, png_color_16p, png_bytep, png_bytep)\0",
888 | |             ))
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:894:13
    |
894 | /             __assert_fail(
895 | |                 b"channels > 1\0" as *const u8 as *const libc::c_char,
896 | |                 b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
897 | |                 335 as libc::c_int as libc::c_uint,
...   |
904 | |                     .as_ptr(),
905 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:898:19
    |
898 |                   (*::core::mem::transmute::<
    |  ___________________^
899 | |                     &[u8; 76],
900 | |                     &[libc::c_char; 76],
901 | |                 >(
902 | |                     b"void opng_get_alpha_row(png_row_infop, png_color_16p, png_bytep, png_bytep)\0",
903 | |                 ))
    | |_________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:908:18
    |
908 |     sample_ptr = row.offset((channels - 1 as libc::c_int) as isize);
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:911:9
    |
911 |         *alpha_row = *sample_ptr;
    |         ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:911:22
    |
911 |         *alpha_row = *sample_ptr;
    |                      ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:914:22
    |
914 |         sample_ptr = sample_ptr.offset(channels as isize);
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:915:21
    |
915 |         alpha_row = alpha_row.offset(1);
    |                     ^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/opngreduc/opngreduc.rs:659:5
    |
659 |     mut row_info_ptr: png_row_infop,
    |     ----^^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/opngreduc/opngreduc.rs:660:5
    |
660 |     mut trans_color: png_color_16p,
    |     ----^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/opngreduc/opngreduc.rs:661:5
    |
661 |     mut row: png_bytep,
    |     ----^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `row_ptr` is never read
   --> src/opngreduc/opngreduc.rs:924:13
    |
924 |     let mut row_ptr: png_bytepp = 0 as *mut *mut png_byte;
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `component_ptr` is never read
   --> src/opngreduc/opngreduc.rs:925:13
    |
925 |     let mut component_ptr: png_bytep = 0 as *mut png_byte;
    |             ^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `byte_depth` is never read
   --> src/opngreduc/opngreduc.rs:930:13
    |
930 |     let mut byte_depth: libc::c_int = 0;
    |             ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `channels` is never read
   --> src/opngreduc/opngreduc.rs:931:13
    |
931 |     let mut channels: libc::c_int = 0;
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `sample_size` is never read
   --> src/opngreduc/opngreduc.rs:932:13
    |
932 |     let mut sample_size: libc::c_int = 0;
    |             ^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `offset_alpha` is never read
   --> src/opngreduc/opngreduc.rs:933:13
    |
933 |     let mut offset_alpha: libc::c_int = 0;
    |             ^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `i` is never read
   --> src/opngreduc/opngreduc.rs:935:13
    |
935 |     let mut i: png_uint_32 = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `j` is never read
   --> src/opngreduc/opngreduc.rs:936:13
    |
936 |     let mut j: png_uint_32 = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_IHDR` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:937:5
    |
937 | /     png_get_IHDR(
938 | |         png_ptr as *const png_struct,
939 | |         info_ptr as *const png_info,
940 | |         &mut width,
...   |
946 | |         0 as *mut libc::c_int,
947 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/opngreduc/opngreduc.rs:919:1
    |
919 | / unsafe extern "C" fn opng_analyze_bits(
920 | |     mut png_ptr: png_structp,
921 | |     mut info_ptr: png_infop,
922 | |     mut reductions: png_uint_32,
923 | | ) -> png_uint_32 {
    | |________________^

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_channels` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:955:16
    |
955 |       channels = png_get_channels(
    |  ________________^
956 | |         png_ptr as *const png_struct,
957 | |         info_ptr as *const png_info,
958 | |     ) as libc::c_int;
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_bKGD` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:972:8
    |
972 |     if png_get_bKGD(png_ptr as *const png_struct, info_ptr, &mut background) != 0 {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:974:16
    |
974 |             if (*background).red as libc::c_int % 257 as libc::c_int != 0 as libc::c_int
    |                ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:975:20
    |
975 |                 || (*background).green as libc::c_int % 257 as libc::c_int
    |                    ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:977:20
    |
977 |                 || (*background).blue as libc::c_int % 257 as libc::c_int
    |                    ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:979:20
    |
979 |                 || (*background).gray as libc::c_int % 257 as libc::c_int
    |                    ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:986:16
    |
986 |             if (*background).red as libc::c_int != (*background).green as libc::c_int
    |                ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:986:52
    |
986 |             if (*background).red as libc::c_int != (*background).green as libc::c_int
    |                                                    ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:987:20
    |
987 |                 || (*background).red as libc::c_int != (*background).blue as libc::c_int
    |                    ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:987:56
    |
987 |                 || (*background).red as libc::c_int != (*background).blue as libc::c_int
    |                                                        ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_rows` is unsafe and requires unsafe block
   --> src/opngreduc/opngreduc.rs:993:15
    |
993 |     row_ptr = png_get_rows(png_ptr as *const png_struct, info_ptr as *const png_info);
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1000:29
     |
1000 |             component_ptr = *row_ptr;
     |                             ^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1003:20
     |
1003 |                 if *component_ptr.offset(0 as libc::c_int as isize) as libc::c_int
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1003:21
     |
1003 |                 if *component_ptr.offset(0 as libc::c_int as isize) as libc::c_int
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1004:24
     |
1004 |                     != *component_ptr.offset(1 as libc::c_int as isize) as libc::c_int
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1004:25
     |
1004 |                     != *component_ptr.offset(1 as libc::c_int as isize) as libc::c_int
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1011:37
     |
1011 |                     component_ptr = component_ptr.offset(2 as libc::c_int as isize);
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1017:33
     |
1017 |                 component_ptr = *row_ptr;
     |                                 ^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1020:24
     |
1020 |                     if *component_ptr.offset(0 as libc::c_int as isize) as libc::c_int
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1020:25
     |
1020 |                     if *component_ptr.offset(0 as libc::c_int as isize) as libc::c_int
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1021:28
     |
1021 |                         != *component_ptr.offset(1 as libc::c_int as isize)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1021:29
     |
1021 |                         != *component_ptr.offset(1 as libc::c_int as isize)
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1023:28
     |
1023 |                         || *component_ptr.offset(0 as libc::c_int as isize)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1023:29
     |
1023 |                         || *component_ptr.offset(0 as libc::c_int as isize)
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1025:32
     |
1025 | ...                   != *component_ptr.offset(2 as libc::c_int as isize)
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1025:33
     |
1025 | ...                   != *component_ptr.offset(2 as libc::c_int as isize)
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1033:41
     |
1033 |                         component_ptr = component_ptr.offset(sample_size as isize);
     |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1038:33
     |
1038 |                 component_ptr = (*row_ptr).offset(offset_alpha as isize);
     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1038:33
     |
1038 |                 component_ptr = (*row_ptr).offset(offset_alpha as isize);
     |                                 ^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1041:24
     |
1041 |                     if *component_ptr.offset(0 as libc::c_int as isize) as libc::c_int
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1041:25
     |
1041 |                     if *component_ptr.offset(0 as libc::c_int as isize) as libc::c_int
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1049:41
     |
1049 |                         component_ptr = component_ptr.offset(sample_size as isize);
     |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1055:33
     |
1055 |                 component_ptr = *row_ptr;
     |                                 ^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1058:24
     |
1058 |                     if *component_ptr.offset(0 as libc::c_int as isize) as libc::c_int
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1058:25
     |
1058 |                     if *component_ptr.offset(0 as libc::c_int as isize) as libc::c_int
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1059:28
     |
1059 |                         != *component_ptr.offset(2 as libc::c_int as isize)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1059:29
     |
1059 |                         != *component_ptr.offset(2 as libc::c_int as isize)
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1061:28
     |
1061 |                         || *component_ptr.offset(0 as libc::c_int as isize)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1061:29
     |
1061 |                         || *component_ptr.offset(0 as libc::c_int as isize)
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1063:32
     |
1063 | ...                   != *component_ptr.offset(4 as libc::c_int as isize)
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1063:33
     |
1063 | ...                   != *component_ptr.offset(4 as libc::c_int as isize)
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1065:28
     |
1065 |                         || *component_ptr.offset(1 as libc::c_int as isize)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1065:29
     |
1065 |                         || *component_ptr.offset(1 as libc::c_int as isize)
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1067:32
     |
1067 | ...                   != *component_ptr.offset(3 as libc::c_int as isize)
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1067:33
     |
1067 | ...                   != *component_ptr.offset(3 as libc::c_int as isize)
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1069:28
     |
1069 |                         || *component_ptr.offset(1 as libc::c_int as isize)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1069:29
     |
1069 |                         || *component_ptr.offset(1 as libc::c_int as isize)
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1071:32
     |
1071 | ...                   != *component_ptr.offset(5 as libc::c_int as isize)
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1071:33
     |
1071 | ...                   != *component_ptr.offset(5 as libc::c_int as isize)
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1079:41
     |
1079 |                         component_ptr = component_ptr.offset(sample_size as isize);
     |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1084:33
     |
1084 |                 component_ptr = (*row_ptr).offset(offset_alpha as isize);
     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1084:33
     |
1084 |                 component_ptr = (*row_ptr).offset(offset_alpha as isize);
     |                                 ^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1087:24
     |
1087 |                     if *component_ptr.offset(0 as libc::c_int as isize) as libc::c_int
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1087:25
     |
1087 |                     if *component_ptr.offset(0 as libc::c_int as isize) as libc::c_int
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1089:28
     |
1089 |                         || *component_ptr.offset(1 as libc::c_int as isize)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1089:29
     |
1089 |                         || *component_ptr.offset(1 as libc::c_int as isize)
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1097:41
     |
1097 |                         component_ptr = component_ptr.offset(sample_size as isize);
     |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1104:19
     |
1104 |         row_ptr = row_ptr.offset(1);
     |                   ^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/opngreduc/opngreduc.rs:920:5
    |
920 |     mut png_ptr: png_structp,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/opngreduc/opngreduc.rs:921:5
    |
921 |     mut info_ptr: png_infop,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `row_ptr` is never read
    --> src/opngreduc/opngreduc.rs:1114:13
     |
1114 |     let mut row_ptr: png_bytepp = 0 as *mut *mut png_byte;
     |             ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `src_ptr` is never read
    --> src/opngreduc/opngreduc.rs:1115:13
     |
1115 |     let mut src_ptr: png_bytep = 0 as *mut png_byte;
     |             ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `dest_ptr` is never read
    --> src/opngreduc/opngreduc.rs:1116:13
     |
1116 |     let mut dest_ptr: png_bytep = 0 as *mut png_byte;
     |             ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `dest_bit_depth` is never read
    --> src/opngreduc/opngreduc.rs:1123:13
     |
1123 |     let mut dest_bit_depth: libc::c_int = 0;
     |             ^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `src_byte_depth` is never read
    --> src/opngreduc/opngreduc.rs:1124:13
     |
1124 |     let mut src_byte_depth: libc::c_int = 0;
     |             ^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `dest_byte_depth` is never read
    --> src/opngreduc/opngreduc.rs:1125:13
     |
1125 |     let mut dest_byte_depth: libc::c_int = 0;
     |             ^^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `dest_color_type` is never read
    --> src/opngreduc/opngreduc.rs:1127:13
     |
1127 |     let mut dest_color_type: libc::c_int = 0;
     |             ^^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `src_channels` is never read
    --> src/opngreduc/opngreduc.rs:1128:13
     |
1128 |     let mut src_channels: libc::c_int = 0;
     |             ^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `dest_channels` is never read
    --> src/opngreduc/opngreduc.rs:1129:13
     |
1129 |     let mut dest_channels: libc::c_int = 0;
     |             ^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `src_sample_size` is never read
    --> src/opngreduc/opngreduc.rs:1130:13
     |
1130 |     let mut src_sample_size: libc::c_int = 0;
     |             ^^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `dest_sample_size` is never read
    --> src/opngreduc/opngreduc.rs:1131:13
     |
1131 |     let mut dest_sample_size: libc::c_int = 0;
     |             ^^^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `i` is never read
    --> src/opngreduc/opngreduc.rs:1136:13
     |
1136 |     let mut i: png_uint_32 = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `j` is never read
    --> src/opngreduc/opngreduc.rs:1137:13
     |
1137 |     let mut j: png_uint_32 = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `k` is never read
    --> src/opngreduc/opngreduc.rs:1138:13
     |
1138 |     let mut k: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `opngreduc::opngreduc::opng_analyze_bits` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1139:18
     |
1139 |     reductions = opng_analyze_bits(png_ptr, info_ptr, reductions);
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/opngreduc/opngreduc.rs:1109:1
     |
1109 | / unsafe extern "C" fn opng_reduce_bits(
1110 | |     mut png_ptr: png_structp,
1111 | |     mut info_ptr: png_infop,
1112 | |     mut reductions: png_uint_32,
1113 | | ) -> png_uint_32 {
     | |________________^

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_IHDR` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1143:5
     |
1143 | /     png_get_IHDR(
1144 | |         png_ptr as *const png_struct,
1145 | |         info_ptr as *const png_info,
1146 | |         &mut width,
...    |
1152 | |         &mut filter_type,
1153 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1155:9
     |
1155 | /         __assert_fail(
1156 | |             b"src_bit_depth >= 8\0" as *const u8 as *const libc::c_char,
1157 | |             b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
1158 | |             538 as libc::c_int as libc::c_uint,
...    |
1163 | |                 .as_ptr(),
1164 | |         );
     | |_________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1159:15
     |
1159 |               (*::core::mem::transmute::<
     |  _______________^
1160 | |                 &[u8; 66],
1161 | |                 &[libc::c_char; 66],
1162 | |             >(b"png_uint_32 opng_reduce_bits(png_structp, png_infop, png_uint_32)\0"))
     | |_____________________________________________________________________________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1168:13
     |
1168 | /             __assert_fail(
1169 | |                 b"src_bit_depth >= 8\0" as *const u8 as *const libc::c_char,
1170 | |                 b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
1171 | |                 538 as libc::c_int as libc::c_uint,
...    |
1178 | |                     .as_ptr(),
1179 | |             );
     | |_____________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1172:19
     |
1172 |                   (*::core::mem::transmute::<
     |  ___________________^
1173 | |                     &[u8; 66],
1174 | |                     &[libc::c_char; 66],
1175 | |                 >(
1176 | |                     b"png_uint_32 opng_reduce_bits(png_structp, png_infop, png_uint_32)\0",
1177 | |                 ))
     | |_________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1184:13
     |
1184 | /             __assert_fail(
1185 | |                 b"src_bit_depth == 16\0" as *const u8 as *const libc::c_char,
1186 | |                 b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
1187 | |                 541 as libc::c_int as libc::c_uint,
...    |
1194 | |                     .as_ptr(),
1195 | |             );
     | |_____________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1188:19
     |
1188 |                   (*::core::mem::transmute::<
     |  ___________________^
1189 | |                     &[u8; 66],
1190 | |                     &[libc::c_char; 66],
1191 | |                 >(
1192 | |                     b"png_uint_32 opng_reduce_bits(png_structp, png_infop, png_uint_32)\0",
1193 | |                 ))
     | |_________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1199:17
     |
1199 | /                 __assert_fail(
1200 | |                     b"src_bit_depth == 16\0" as *const u8 as *const libc::c_char,
1201 | |                     b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
1202 | |                     541 as libc::c_int as libc::c_uint,
...    |
1209 | |                         .as_ptr(),
1210 | |                 );
     | |_________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1203:23
     |
1203 |                       (*::core::mem::transmute::<
     |  _______________________^
1204 | |                         &[u8; 66],
1205 | |                         &[libc::c_char; 66],
1206 | |                     >(
1207 | |                         b"png_uint_32 opng_reduce_bits(png_structp, png_infop, png_uint_32)\0",
1208 | |                     ))
     | |_____________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1222:13
     |
1222 | /             __assert_fail(
1223 | |                 b"src_color_type & 2\0" as *const u8 as *const libc::c_char,
1224 | |                 b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
1225 | |                 553 as libc::c_int as libc::c_uint,
...    |
1232 | |                     .as_ptr(),
1233 | |             );
     | |_____________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1226:19
     |
1226 |                   (*::core::mem::transmute::<
     |  ___________________^
1227 | |                     &[u8; 66],
1228 | |                     &[libc::c_char; 66],
1229 | |                 >(
1230 | |                     b"png_uint_32 opng_reduce_bits(png_structp, png_infop, png_uint_32)\0",
1231 | |                 ))
     | |_________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1237:17
     |
1237 | /                 __assert_fail(
1238 | |                     b"src_color_type & 2\0" as *const u8 as *const libc::c_char,
1239 | |                     b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
1240 | |                     553 as libc::c_int as libc::c_uint,
...    |
1247 | |                         .as_ptr(),
1248 | |                 );
     | |_________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1241:23
     |
1241 |                       (*::core::mem::transmute::<
     |  _______________________^
1242 | |                         &[u8; 66],
1243 | |                         &[libc::c_char; 66],
1244 | |                     >(
1245 | |                         b"png_uint_32 opng_reduce_bits(png_structp, png_infop, png_uint_32)\0",
1246 | |                     ))
     | |_____________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1255:13
     |
1255 | /             __assert_fail(
1256 | |                 b"src_color_type & 4\0" as *const u8 as *const libc::c_char,
1257 | |                 b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
1258 | |                 558 as libc::c_int as libc::c_uint,
...    |
1265 | |                     .as_ptr(),
1266 | |             );
     | |_____________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1259:19
     |
1259 |                   (*::core::mem::transmute::<
     |  ___________________^
1260 | |                     &[u8; 66],
1261 | |                     &[libc::c_char; 66],
1262 | |                 >(
1263 | |                     b"png_uint_32 opng_reduce_bits(png_structp, png_infop, png_uint_32)\0",
1264 | |                 ))
     | |_________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1270:17
     |
1270 | /                 __assert_fail(
1271 | |                     b"src_color_type & 4\0" as *const u8 as *const libc::c_char,
1272 | |                     b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
1273 | |                     558 as libc::c_int as libc::c_uint,
...    |
1280 | |                         .as_ptr(),
1281 | |                 );
     | |_________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1274:23
     |
1274 |                       (*::core::mem::transmute::<
     |  _______________________^
1275 | |                         &[u8; 66],
1276 | |                         &[libc::c_char; 66],
1277 | |                     >(
1278 | |                         b"png_uint_32 opng_reduce_bits(png_structp, png_infop, png_uint_32)\0",
1279 | |                     ))
     | |_____________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_channels` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1286:20
     |
1286 |       src_channels = png_get_channels(
     |  ____________________^
1287 | |         png_ptr as *const png_struct,
1288 | |         info_ptr as *const png_info,
1289 | |     ) as libc::c_int;
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1320:9
     |
1320 | /         __assert_fail(
1321 | |             b"src_sample_size > dest_sample_size\0" as *const u8 as *const libc::c_char,
1322 | |             b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
1323 | |             583 as libc::c_int as libc::c_uint,
...    |
1328 | |                 .as_ptr(),
1329 | |         );
     | |_________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1324:15
     |
1324 |               (*::core::mem::transmute::<
     |  _______________^
1325 | |                 &[u8; 66],
1326 | |                 &[libc::c_char; 66],
1327 | |             >(b"png_uint_32 opng_reduce_bits(png_structp, png_infop, png_uint_32)\0"))
     | |_____________________________________________________________________________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1333:13
     |
1333 | /             __assert_fail(
1334 | |                 b"src_sample_size > dest_sample_size\0" as *const u8
1335 | |                     as *const libc::c_char,
1336 | |                 b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
...    |
1344 | |                     .as_ptr(),
1345 | |             );
     | |_____________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1338:19
     |
1338 |                   (*::core::mem::transmute::<
     |  ___________________^
1339 | |                     &[u8; 66],
1340 | |                     &[libc::c_char; 66],
1341 | |                 >(
1342 | |                     b"png_uint_32 opng_reduce_bits(png_structp, png_infop, png_uint_32)\0",
1343 | |                 ))
     | |_________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_rows` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1348:15
     |
1348 |     row_ptr = png_get_rows(png_ptr as *const png_struct, info_ptr as *const png_info);
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1351:20
     |
1351 |         dest_ptr = *row_ptr;
     |                    ^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1357:17
     |
1357 | /                 *dest_ptr
1358 | |                     .offset(k as isize) = *src_ptr.offset(tran_tbl[k as usize] as isize);
     | |_______________________________________^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1357:18
     |
1357 |                   *dest_ptr
     |  __________________^
1358 | |                     .offset(k as isize) = *src_ptr.offset(tran_tbl[k as usize] as isize);
     | |_______________________________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1358:43
     |
1358 |                     .offset(k as isize) = *src_ptr.offset(tran_tbl[k as usize] as isize);
     |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1358:44
     |
1358 |                     .offset(k as isize) = *src_ptr.offset(tran_tbl[k as usize] as isize);
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1362:23
     |
1362 |             src_ptr = src_ptr.offset(src_sample_size as isize);
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1363:24
     |
1363 |             dest_ptr = dest_ptr.offset(dest_sample_size as isize);
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1369:19
     |
1369 |         row_ptr = row_ptr.offset(1);
     |                   ^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_tRNS` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1372:8
     |
1372 |       if png_get_tRNS(
     |  ________^
1373 | |         png_ptr as *const png_struct,
1374 | |         info_ptr,
1375 | |         0 as *mut png_bytep,
1376 | |         0 as *mut libc::c_int,
1377 | |         &mut trans_color,
1378 | |     ) != 0
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1381:16
     |
1381 |             if (*trans_color).red as libc::c_int % 257 as libc::c_int == 0 as libc::c_int
     |                ^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1382:20
     |
1382 |                 && (*trans_color).green as libc::c_int % 257 as libc::c_int
     |                    ^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1384:20
     |
1384 |                 && (*trans_color).blue as libc::c_int % 257 as libc::c_int
     |                    ^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1386:20
     |
1386 |                 && (*trans_color).gray as libc::c_int % 257 as libc::c_int
     |                    ^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1389:17
     |
1389 |                 (*trans_color)
     |                 ^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1390:29
     |
1390 |                     .red = ((*trans_color).red as libc::c_int & 255 as libc::c_int)
     |                             ^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1392:17
     |
1392 |                 (*trans_color)
     |                 ^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1393:31
     |
1393 |                     .green = ((*trans_color).green as libc::c_int & 255 as libc::c_int)
     |                               ^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1395:17
     |
1395 |                 (*trans_color)
     |                 ^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1396:30
     |
1396 |                     .blue = ((*trans_color).blue as libc::c_int & 255 as libc::c_int)
     |                              ^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1398:17
     |
1398 |                 (*trans_color)
     |                 ^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1399:30
     |
1399 |                     .gray = ((*trans_color).gray as libc::c_int & 255 as libc::c_int)
     |                              ^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_free_data` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1402:17
     |
1402 | /                 png_free_data(
1403 | |                     png_ptr as *const png_struct,
1404 | |                     info_ptr,
1405 | |                     0x2000 as libc::c_uint,
1406 | |                     -(1 as libc::c_int),
1407 | |                 );
     | |_________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_set_invalid` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1408:17
     |
1408 | /                 png_set_invalid(
1409 | |                     png_ptr as *const png_struct,
1410 | |                     info_ptr,
1411 | |                     0x10 as libc::c_uint as libc::c_int,
1412 | |                 );
     | |_________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1416:16
     |
1416 |             if (*trans_color).red as libc::c_int == (*trans_color).green as libc::c_int
     |                ^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1416:53
     |
1416 |             if (*trans_color).red as libc::c_int == (*trans_color).green as libc::c_int
     |                                                     ^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1417:20
     |
1417 |                 || (*trans_color).red as libc::c_int
     |                    ^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1418:24
     |
1418 |                     == (*trans_color).blue as libc::c_int
     |                        ^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1420:17
     |
1420 |                 (*trans_color).gray = (*trans_color).red;
     |                 ^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1420:39
     |
1420 |                 (*trans_color).gray = (*trans_color).red;
     |                                       ^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_free_data` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1422:17
     |
1422 | /                 png_free_data(
1423 | |                     png_ptr as *const png_struct,
1424 | |                     info_ptr,
1425 | |                     0x2000 as libc::c_uint,
1426 | |                     -(1 as libc::c_int),
1427 | |                 );
     | |_________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_set_invalid` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1428:17
     |
1428 | /                 png_set_invalid(
1429 | |                     png_ptr as *const png_struct,
1430 | |                     info_ptr,
1431 | |                     0x10 as libc::c_uint as libc::c_int,
1432 | |                 );
     | |_________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_bKGD` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1436:8
     |
1436 |     if png_get_bKGD(png_ptr as *const png_struct, info_ptr, &mut background) != 0 {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1438:13
     |
1438 |             (*background)
     |             ^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1439:25
     |
1439 |                 .red = ((*background).red as libc::c_int & 255 as libc::c_int)
     |                         ^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1441:13
     |
1441 |             (*background)
     |             ^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1442:27
     |
1442 |                 .green = ((*background).green as libc::c_int & 255 as libc::c_int)
     |                           ^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1444:13
     |
1444 |             (*background)
     |             ^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1445:26
     |
1445 |                 .blue = ((*background).blue as libc::c_int & 255 as libc::c_int)
     |                          ^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1447:13
     |
1447 |             (*background)
     |             ^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1448:26
     |
1448 |                 .gray = ((*background).gray as libc::c_int & 255 as libc::c_int)
     |                          ^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1452:13
     |
1452 |             (*background).gray = (*background).red;
     |             ^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1452:34
     |
1452 |             (*background).gray = (*background).red;
     |                                  ^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_sBIT` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1455:8
     |
1455 |     if png_get_sBIT(png_ptr as *const png_struct, info_ptr, &mut sig_bits) != 0 {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1457:16
     |
1457 |             if (*sig_bits).red as libc::c_int > 8 as libc::c_int {
     |                ^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1458:17
     |
1458 |                 (*sig_bits).red = 8 as libc::c_int as png_byte;
     |                 ^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1460:16
     |
1460 |             if (*sig_bits).green as libc::c_int > 8 as libc::c_int {
     |                ^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1461:17
     |
1461 |                 (*sig_bits).green = 8 as libc::c_int as png_byte;
     |                 ^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1463:16
     |
1463 |             if (*sig_bits).blue as libc::c_int > 8 as libc::c_int {
     |                ^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1464:17
     |
1464 |                 (*sig_bits).blue = 8 as libc::c_int as png_byte;
     |                 ^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1466:16
     |
1466 |             if (*sig_bits).gray as libc::c_int > 8 as libc::c_int {
     |                ^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1467:17
     |
1467 |                 (*sig_bits).gray = 8 as libc::c_int as png_byte;
     |                 ^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1469:16
     |
1469 |             if (*sig_bits).alpha as libc::c_int > 8 as libc::c_int {
     |                ^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1470:17
     |
1470 |                 (*sig_bits).alpha = 8 as libc::c_int as png_byte;
     |                 ^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1474:46
     |
1474 |             let mut max_sig_bits: png_byte = (*sig_bits).red;
     |                                              ^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1475:48
     |
1475 |             if (max_sig_bits as libc::c_int) < (*sig_bits).green as libc::c_int {
     |                                                ^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1476:32
     |
1476 |                 max_sig_bits = (*sig_bits).green;
     |                                ^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1478:48
     |
1478 |             if (max_sig_bits as libc::c_int) < (*sig_bits).blue as libc::c_int {
     |                                                ^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1479:32
     |
1479 |                 max_sig_bits = (*sig_bits).blue;
     |                                ^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1481:13
     |
1481 |             (*sig_bits).gray = max_sig_bits;
     |             ^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_set_IHDR` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1484:5
     |
1484 | /     png_set_IHDR(
1485 | |         png_ptr as *const png_struct,
1486 | |         info_ptr,
1487 | |         width,
...    |
1493 | |         filter_type,
1494 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
    --> src/opngreduc/opngreduc.rs:1110:5
     |
1110 |     mut png_ptr: png_structp,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

error: variable does not need to be mutable
    --> src/opngreduc/opngreduc.rs:1111:5
     |
1111 |     mut info_ptr: png_infop,
     |     ----^^^^^^^^
     |     |
     |     help: remove this `mut`

error: value assigned to `result` is never read
    --> src/opngreduc/opngreduc.rs:1502:13
     |
1502 |     let mut result: png_uint_32 = 0;
     |             ^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `row_ptr` is never read
    --> src/opngreduc/opngreduc.rs:1503:13
     |
1503 |     let mut row_ptr: png_bytepp = 0 as *mut *mut png_byte;
     |             ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `src_sample_ptr` is never read
    --> src/opngreduc/opngreduc.rs:1504:13
     |
1504 |     let mut src_sample_ptr: png_bytep = 0 as *mut png_byte;
     |             ^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `dest_sample_ptr` is never read
    --> src/opngreduc/opngreduc.rs:1505:13
     |
1505 |     let mut dest_sample_ptr: png_bytep = 0 as *mut png_byte;
     |             ^^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `dest_bit_depth` is never read
    --> src/opngreduc/opngreduc.rs:1513:13
     |
1513 |     let mut dest_bit_depth: libc::c_int = 0;
     |             ^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `src_mask_init` is never read
    --> src/opngreduc/opngreduc.rs:1514:13
     |
1514 |     let mut src_mask_init: libc::c_uint = 0;
     |             ^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `src_mask` is never read
    --> src/opngreduc/opngreduc.rs:1515:13
     |
1515 |     let mut src_mask: libc::c_uint = 0;
     |             ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `src_shift` is never read
    --> src/opngreduc/opngreduc.rs:1516:13
     |
1516 |     let mut src_shift: libc::c_uint = 0;
     |             ^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `dest_shift` is never read
    --> src/opngreduc/opngreduc.rs:1517:13
     |
1517 |     let mut dest_shift: libc::c_uint = 0;
     |             ^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `sample` is never read
    --> src/opngreduc/opngreduc.rs:1518:13
     |
1518 |     let mut sample: libc::c_uint = 0;
     |             ^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `dest_buf` is never read
    --> src/opngreduc/opngreduc.rs:1519:13
     |
1519 |     let mut dest_buf: libc::c_uint = 0;
     |             ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `i` is never read
    --> src/opngreduc/opngreduc.rs:1522:13
     |
1522 |     let mut i: png_uint_32 = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `j` is never read
    --> src/opngreduc/opngreduc.rs:1523:13
     |
1523 |     let mut j: png_uint_32 = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_IHDR` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1527:5
     |
1527 | /     png_get_IHDR(
1528 | |         png_ptr as *const png_struct,
1529 | |         info_ptr as *const png_info,
1530 | |         &mut width,
...    |
1536 | |         &mut filter_type,
1537 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/opngreduc/opngreduc.rs:1497:1
     |
1497 | / unsafe extern "C" fn opng_reduce_palette_bits(
1498 | |     mut png_ptr: png_structp,
1499 | |     mut info_ptr: png_infop,
1500 | |     mut reductions: png_uint_32,
1501 | | ) -> png_uint_32 {
     | |________________^

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_PLTE` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1541:8
     |
1541 |       if png_get_PLTE(
     |  ________^
1542 | |         png_ptr as *const png_struct,
1543 | |         info_ptr,
1544 | |         &mut palette,
1545 | |         &mut num_palette,
1546 | |     ) == 0
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_warning` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1552:9
     |
1552 | /         png_warning(
1553 | |             png_ptr as *const png_struct,
1554 | |             b"Too many colors in PLTE\0" as *const u8 as *const libc::c_char,
1555 | |         );
     | |_________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::opng_realloc_PLTE` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1557:9
     |
1557 |         opng_realloc_PLTE(png_ptr, info_ptr, num_palette);
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_PLTE` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1558:9
     |
1558 | /         png_get_PLTE(
1559 | |             png_ptr as *const png_struct,
1560 | |             info_ptr,
1561 | |             &mut palette,
1562 | |             &mut num_palette,
1563 | |         );
     | |_________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1565:13
     |
1565 | /             __assert_fail(
1566 | |                 b"num_palette == (1 << src_bit_depth)\0" as *const u8
1567 | |                     as *const libc::c_char,
1568 | |                 b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
...    |
1576 | |                     .as_ptr(),
1577 | |             );
     | |_____________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1570:19
     |
1570 |                   (*::core::mem::transmute::<
     |  ___________________^
1571 | |                     &[u8; 74],
1572 | |                     &[libc::c_char; 74],
1573 | |                 >(
1574 | |                     b"png_uint_32 opng_reduce_palette_bits(png_structp, png_infop, png_uint_32)\0",
1575 | |                 ))
     | |_________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1581:17
     |
1581 | /                 __assert_fail(
1582 | |                     b"num_palette == (1 << src_bit_depth)\0" as *const u8
1583 | |                         as *const libc::c_char,
1584 | |                     b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
...    |
1592 | |                         .as_ptr(),
1593 | |                 );
     | |_________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1586:23
     |
1586 |                       (*::core::mem::transmute::<
     |  _______________________^
1587 | |                         &[u8; 74],
1588 | |                         &[libc::c_char; 74],
1589 | |                     >(
1590 | |                         b"png_uint_32 opng_reduce_palette_bits(png_structp, png_infop, png_uint_32)\0",
1591 | |                     ))
     | |_____________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1606:13
     |
1606 | /             __assert_fail(
1607 | |                 b"num_palette > 0\0" as *const u8 as *const libc::c_char,
1608 | |                 b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
1609 | |                 738 as libc::c_int as libc::c_uint,
...    |
1616 | |                     .as_ptr(),
1617 | |             );
     | |_____________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1610:19
     |
1610 |                   (*::core::mem::transmute::<
     |  ___________________^
1611 | |                     &[u8; 74],
1612 | |                     &[libc::c_char; 74],
1613 | |                 >(
1614 | |                     b"png_uint_32 opng_reduce_palette_bits(png_structp, png_infop, png_uint_32)\0",
1615 | |                 ))
     | |_________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1621:17
     |
1621 | /                 __assert_fail(
1622 | |                     b"num_palette > 0\0" as *const u8 as *const libc::c_char,
1623 | |                     b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
1624 | |                     738 as libc::c_int as libc::c_uint,
...    |
1631 | |                         .as_ptr(),
1632 | |                 );
     | |_________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1625:23
     |
1625 |                       (*::core::mem::transmute::<
     |  _______________________^
1626 | |                         &[u8; 74],
1627 | |                         &[libc::c_char; 74],
1628 | |                     >(
1629 | |                         b"png_uint_32 opng_reduce_palette_bits(png_structp, png_infop, png_uint_32)\0",
1630 | |                     ))
     | |_____________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1639:13
     |
1639 | /             __assert_fail(
1640 | |                 b"src_bit_depth == dest_bit_depth\0" as *const u8 as *const libc::c_char,
1641 | |                 b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
1642 | |                 744 as libc::c_int as libc::c_uint,
...    |
1649 | |                     .as_ptr(),
1650 | |             );
     | |_____________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1643:19
     |
1643 |                   (*::core::mem::transmute::<
     |  ___________________^
1644 | |                     &[u8; 74],
1645 | |                     &[libc::c_char; 74],
1646 | |                 >(
1647 | |                     b"png_uint_32 opng_reduce_palette_bits(png_structp, png_infop, png_uint_32)\0",
1648 | |                 ))
     | |_________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1654:17
     |
1654 | /                 __assert_fail(
1655 | |                     b"src_bit_depth == dest_bit_depth\0" as *const u8
1656 | |                         as *const libc::c_char,
1657 | |                     b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
...    |
1665 | |                         .as_ptr(),
1666 | |                 );
     | |_________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1659:23
     |
1659 |                       (*::core::mem::transmute::<
     |  _______________________^
1660 | |                         &[u8; 74],
1661 | |                         &[libc::c_char; 74],
1662 | |                     >(
1663 | |                         b"png_uint_32 opng_reduce_palette_bits(png_structp, png_infop, png_uint_32)\0",
1664 | |                     ))
     | |_____________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_rows` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1671:15
     |
1671 |     row_ptr = png_get_rows(png_ptr as *const png_struct, info_ptr as *const png_info);
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1675:31
     |
1675 |             dest_sample_ptr = *row_ptr;
     |                               ^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1684:30
     |
1684 |                         |= ((*src_sample_ptr as libc::c_int) << dest_shift)
     |                              ^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1688:39
     |
1688 |                     dest_sample_ptr = dest_sample_ptr.offset(1);
     |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1689:21
     |
1689 |                     *fresh0 = (dest_buf | *src_sample_ptr as libc::c_uint) as png_byte;
     |                     ^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1689:43
     |
1689 |                     *fresh0 = (dest_buf | *src_sample_ptr as libc::c_uint) as png_byte;
     |                                           ^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1693:34
     |
1693 |                 src_sample_ptr = src_sample_ptr.offset(1);
     |                                  ^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1699:17
     |
1699 |                 *dest_sample_ptr = dest_buf as png_byte;
     |                 ^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1703:23
     |
1703 |             row_ptr = row_ptr.offset(1);
     |                       ^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1711:31
     |
1711 |             dest_sample_ptr = *row_ptr;
     |                               ^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1721:27
     |
1721 |                 sample = (*src_sample_ptr as libc::c_uint & src_mask) >> src_shift;
     |                           ^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1727:39
     |
1727 |                     dest_sample_ptr = dest_sample_ptr.offset(1);
     |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1728:21
     |
1728 |                     *fresh1 = (dest_buf | sample) as png_byte;
     |                     ^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1735:38
     |
1735 |                     src_sample_ptr = src_sample_ptr.offset(1);
     |                                      ^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1742:17
     |
1742 |                 *dest_sample_ptr = dest_buf as png_byte;
     |                 ^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1746:23
     |
1746 |             row_ptr = row_ptr.offset(1);
     |                       ^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_set_IHDR` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1750:5
     |
1750 | /     png_set_IHDR(
1751 | |         png_ptr as *const png_struct,
1752 | |         info_ptr,
1753 | |         width,
...    |
1759 | |         filter_type,
1760 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
    --> src/opngreduc/opngreduc.rs:1498:5
     |
1498 |     mut png_ptr: png_structp,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

error: variable does not need to be mutable
    --> src/opngreduc/opngreduc.rs:1499:5
     |
1499 |     mut info_ptr: png_infop,
     |     ----^^^^^^^^
     |     |
     |     help: remove this `mut`

error: variable does not need to be mutable
    --> src/opngreduc/opngreduc.rs:1500:5
     |
1500 |     mut reductions: png_uint_32,
     |     ----^^^^^^^^^^
     |     |
     |     help: remove this `mut`

error: value assigned to `result` is never read
    --> src/opngreduc/opngreduc.rs:1769:13
     |
1769 |     let mut result: png_uint_32 = 0;
     |             ^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `row_ptr` is never read
    --> src/opngreduc/opngreduc.rs:1778:13
     |
1778 |     let mut row_ptr: png_bytepp = 0 as *mut *mut png_byte;
     |             ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `sample_ptr` is never read
    --> src/opngreduc/opngreduc.rs:1779:13
     |
1779 |     let mut sample_ptr: png_bytep = 0 as *mut png_byte;
     |             ^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `alpha_row` is never read
    --> src/opngreduc/opngreduc.rs:1780:13
     |
1780 |     let mut alpha_row: png_bytep = 0 as *mut png_byte;
     |             ^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `dest_bit_depth` is never read
    --> src/opngreduc/opngreduc.rs:1788:13
     |
1788 |     let mut dest_bit_depth: libc::c_int = 0;
     |             ^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `channels` is never read
    --> src/opngreduc/opngreduc.rs:1789:13
     |
1789 |     let mut channels: libc::c_int = 0;
     |             ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `trans_color` is never read
    --> src/opngreduc/opngreduc.rs:1796:13
     |
1796 |     let mut trans_color: png_color_16p = 0 as *mut png_color_16;
     |             ^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `num_palette` is never read
    --> src/opngreduc/opngreduc.rs:1797:13
     |
1797 |     let mut num_palette: libc::c_int = 0;
     |             ^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `num_trans` is never read
    --> src/opngreduc/opngreduc.rs:1798:13
     |
1798 |     let mut num_trans: libc::c_int = 0;
     |             ^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `gray` is never read
    --> src/opngreduc/opngreduc.rs:1800:13
     |
1800 |     let mut gray: libc::c_uint = 0;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `red` is never read
    --> src/opngreduc/opngreduc.rs:1801:13
     |
1801 |     let mut red: libc::c_uint = 0;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `green` is never read
    --> src/opngreduc/opngreduc.rs:1802:13
     |
1802 |     let mut green: libc::c_uint = 0;
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `blue` is never read
    --> src/opngreduc/opngreduc.rs:1803:13
     |
1803 |     let mut blue: libc::c_uint = 0;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `alpha` is never read
    --> src/opngreduc/opngreduc.rs:1804:13
     |
1804 |     let mut alpha: libc::c_uint = 0;
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `prev_gray` is never read
    --> src/opngreduc/opngreduc.rs:1805:13
     |
1805 |     let mut prev_gray: libc::c_uint = 0;
     |             ^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `prev_red` is never read
    --> src/opngreduc/opngreduc.rs:1806:13
     |
1806 |     let mut prev_red: libc::c_uint = 0;
     |             ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `prev_green` is never read
    --> src/opngreduc/opngreduc.rs:1807:13
     |
1807 |     let mut prev_green: libc::c_uint = 0;
     |             ^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `prev_blue` is never read
    --> src/opngreduc/opngreduc.rs:1808:13
     |
1808 |     let mut prev_blue: libc::c_uint = 0;
     |             ^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `prev_alpha` is never read
    --> src/opngreduc/opngreduc.rs:1809:13
     |
1809 |     let mut prev_alpha: libc::c_uint = 0;
     |             ^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `i` is never read
    --> src/opngreduc/opngreduc.rs:1811:13
     |
1811 |     let mut i: png_uint_32 = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `j` is never read
    --> src/opngreduc/opngreduc.rs:1812:13
     |
1812 |     let mut j: png_uint_32 = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_IHDR` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1813:5
     |
1813 | /     png_get_IHDR(
1814 | |         png_ptr as *const png_struct,
1815 | |         info_ptr as *const png_info,
1816 | |         &mut width,
...    |
1822 | |         &mut filter_type,
1823 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/opngreduc/opngreduc.rs:1764:1
     |
1764 | / unsafe extern "C" fn opng_reduce_to_palette(
1765 | |     mut png_ptr: png_structp,
1766 | |     mut info_ptr: png_infop,
1767 | |     mut reductions: png_uint_32,
1768 | | ) -> png_uint_32 {
     | |________________^

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1828:9
     |
1828 | /         __assert_fail(
1829 | |             b"!(color_type & 1)\0" as *const u8 as *const libc::c_char,
1830 | |             b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
1831 | |             850 as libc::c_int as libc::c_uint,
...    |
1838 | |                 .as_ptr(),
1839 | |         );
     | |_________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1832:15
     |
1832 |               (*::core::mem::transmute::<
     |  _______________^
1833 | |                 &[u8; 72],
1834 | |                 &[libc::c_char; 72],
1835 | |             >(
1836 | |                 b"png_uint_32 opng_reduce_to_palette(png_structp, png_infop, png_uint_32)\0",
1837 | |             ))
     | |_____________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1843:13
     |
1843 | /             __assert_fail(
1844 | |                 b"!(color_type & 1)\0" as *const u8 as *const libc::c_char,
1845 | |                 b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
1846 | |                 850 as libc::c_int as libc::c_uint,
...    |
1853 | |                     .as_ptr(),
1854 | |             );
     | |_____________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1847:19
     |
1847 |                   (*::core::mem::transmute::<
     |  ___________________^
1848 | |                     &[u8; 72],
1849 | |                     &[libc::c_char; 72],
1850 | |                 >(
1851 | |                     b"png_uint_32 opng_reduce_to_palette(png_structp, png_infop, png_uint_32)\0",
1852 | |                 ))
     | |_________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_rows` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1857:15
     |
1857 |     row_ptr = png_get_rows(png_ptr as *const png_struct, info_ptr as *const png_info);
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_channels` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1858:16
     |
1858 |       channels = png_get_channels(
     |  ________________^
1859 | |         png_ptr as *const png_struct,
1860 | |         info_ptr as *const png_info,
1861 | |     ) as libc::c_int;
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_malloc` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1862:17
     |
1862 |     alpha_row = png_malloc(png_ptr as *const png_struct, width as png_alloc_size_t)
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_tRNS` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1873:5
     |
1873 | /     png_get_tRNS(
1874 | |         png_ptr as *const png_struct,
1875 | |         info_ptr,
1876 | |         0 as *mut png_bytep,
1877 | |         0 as *mut libc::c_int,
1878 | |         &mut trans_color,
1879 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1887:22
     |
1887 |         sample_ptr = *row_ptr;
     |                      ^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::opng_get_alpha_row` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1888:9
     |
1888 |         opng_get_alpha_row(&mut row_info, trans_color, *row_ptr, alpha_row);
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1888:56
     |
1888 |         opng_get_alpha_row(&mut row_info, trans_color, *row_ptr, alpha_row);
     |                                                        ^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1892:23
     |
1892 |                 red = *sample_ptr.offset(0 as libc::c_int as isize) as libc::c_uint;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1892:24
     |
1892 |                 red = *sample_ptr.offset(0 as libc::c_int as isize) as libc::c_uint;
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1893:25
     |
1893 |                 green = *sample_ptr.offset(1 as libc::c_int as isize) as libc::c_uint;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1893:26
     |
1893 |                 green = *sample_ptr.offset(1 as libc::c_int as isize) as libc::c_uint;
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1894:24
     |
1894 |                 blue = *sample_ptr.offset(2 as libc::c_int as isize) as libc::c_uint;
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1894:25
     |
1894 |                 blue = *sample_ptr.offset(2 as libc::c_int as isize) as libc::c_uint;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1895:25
     |
1895 |                 alpha = *alpha_row.offset(j as isize) as libc::c_uint;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1895:26
     |
1895 |                 alpha = *alpha_row.offset(j as isize) as libc::c_uint;
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::opng_insert_palette_entry` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1903:24
     |
1903 |                       if opng_insert_palette_entry(
     |  ________________________^
1904 | |                         palette.as_mut_ptr(),
1905 | |                         &mut num_palette,
1906 | |                         trans_alpha.as_mut_ptr(),
...    |
1913 | |                         &mut index,
1914 | |                     ) < 0 as libc::c_int
     | |_____________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1917:29
     |
1917 | / ...                   __assert_fail(
1918 | | ...                       b"num_palette < 0\0" as *const u8 as *const libc::c_char,
1919 | | ...                       b"opngreduc/opngreduc.c\0" as *const u8
1920 | | ...                           as *const libc::c_char,
...    |
1928 | | ...                           .as_ptr(),
1929 | | ...                   );
     | |_______________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1922:35
     |
1922 |   ...                   (*::core::mem::transmute::<
     |  _________________________^
1923 | | ...                       &[u8; 72],
1924 | | ...                       &[libc::c_char; 72],
1925 | | ...                   >(
1926 | | ...                       b"png_uint_32 opng_reduce_to_palette(png_structp, png_infop, png_uint_32)\0",
1927 | | ...                   ))
     | |_______________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1933:33
     |
1933 | / ...                   __assert_fail(
1934 | | ...                       b"num_palette < 0\0" as *const u8 as *const libc::c_char,
1935 | | ...                       b"opngreduc/opngreduc.c\0" as *const u8
1936 | | ...                           as *const libc::c_char,
...    |
1944 | | ...                           .as_ptr(),
1945 | | ...                   );
     | |_______________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1938:39
     |
1938 |   ...                   (*::core::mem::transmute::<
     |  _________________________^
1939 | | ...                       &[u8; 72],
1940 | | ...                       &[libc::c_char; 72],
1941 | | ...                   >(
1942 | | ...                       b"png_uint_32 opng_reduce_to_palette(png_structp, png_infop, png_uint_32)\0",
1943 | | ...                   ))
     | |_______________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1954:30
     |
1954 |                 sample_ptr = sample_ptr.offset(channels as isize);
     |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1959:24
     |
1959 |                 gray = *sample_ptr.offset(0 as libc::c_int as isize) as libc::c_uint;
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1959:25
     |
1959 |                 gray = *sample_ptr.offset(0 as libc::c_int as isize) as libc::c_uint;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1960:25
     |
1960 |                 alpha = *alpha_row.offset(j as isize) as libc::c_uint;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1960:26
     |
1960 |                 alpha = *alpha_row.offset(j as isize) as libc::c_uint;
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::opng_insert_palette_entry` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1964:24
     |
1964 |                       if opng_insert_palette_entry(
     |  ________________________^
1965 | |                         palette.as_mut_ptr(),
1966 | |                         &mut num_palette,
1967 | |                         trans_alpha.as_mut_ptr(),
...    |
1974 | |                         &mut index,
1975 | |                     ) < 0 as libc::c_int
     | |_____________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1978:29
     |
1978 | / ...                   __assert_fail(
1979 | | ...                       b"num_palette < 0\0" as *const u8 as *const libc::c_char,
1980 | | ...                       b"opngreduc/opngreduc.c\0" as *const u8
1981 | | ...                           as *const libc::c_char,
...    |
1989 | | ...                           .as_ptr(),
1990 | | ...                   );
     | |_______________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1983:35
     |
1983 |   ...                   (*::core::mem::transmute::<
     |  _________________________^
1984 | | ...                       &[u8; 72],
1985 | | ...                       &[libc::c_char; 72],
1986 | | ...                   >(
1987 | | ...                       b"png_uint_32 opng_reduce_to_palette(png_structp, png_infop, png_uint_32)\0",
1988 | | ...                   ))
     | |_______________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1994:33
     |
1994 | / ...                   __assert_fail(
1995 | | ...                       b"num_palette < 0\0" as *const u8 as *const libc::c_char,
1996 | | ...                       b"opngreduc/opngreduc.c\0" as *const u8
1997 | | ...                           as *const libc::c_char,
...    |
2005 | | ...                           .as_ptr(),
2006 | | ...                   );
     | |_______________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:1999:39
     |
1999 |   ...                   (*::core::mem::transmute::<
     |  _________________________^
2000 | | ...                       &[u8; 72],
2001 | | ...                       &[libc::c_char; 72],
2002 | | ...                   >(
2003 | | ...                       b"png_uint_32 opng_reduce_to_palette(png_structp, png_infop, png_uint_32)\0",
2004 | | ...                   ))
     | |_______________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2015:30
     |
2015 |                 sample_ptr = sample_ptr.offset(channels as isize);
     |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2020:19
     |
2020 |         row_ptr = row_ptr.offset(1);
     |                   ^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_bKGD` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2024:12
     |
2024 |         && png_get_bKGD(png_ptr as *const png_struct, info_ptr, &mut background) != 0
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2027:19
     |
2027 |             red = (*background).red as libc::c_uint;
     |                   ^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2028:21
     |
2028 |             green = (*background).green as libc::c_uint;
     |                     ^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2029:20
     |
2029 |             blue = (*background).blue as libc::c_uint;
     |                    ^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2031:20
     |
2031 |             blue = (*background).gray as libc::c_uint;
     |                    ^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_warning` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2039:13
     |
2039 | /             png_warning(
2040 | |                 png_ptr as *const png_struct,
2041 | |                 b"Invalid colors in bKGD\0" as *const u8 as *const libc::c_char,
2042 | |             );
     | |_____________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_set_invalid` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2043:13
     |
2043 | /             png_set_invalid(
2044 | |                 png_ptr as *const png_struct,
2045 | |                 info_ptr,
2046 | |                 0x20 as libc::c_uint as libc::c_int,
2047 | |             );
     | |_____________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::opng_insert_palette_entry` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2049:13
     |
2049 | /             opng_insert_palette_entry(
2050 | |                 palette.as_mut_ptr(),
2051 | |                 &mut num_palette,
2052 | |                 trans_alpha.as_mut_ptr(),
...    |
2059 | |                 &mut index,
2060 | |             );
     | |_____________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2062:17
     |
2062 |                 (*background).index = index as png_byte;
     |                 ^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2068:13
     |
2068 | /             __assert_fail(
2069 | |                 b"num_palette > 0 && num_palette <= 256\0" as *const u8
2070 | |                     as *const libc::c_char,
2071 | |                 b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
...    |
2079 | |                     .as_ptr(),
2080 | |             );
     | |_____________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2073:19
     |
2073 |                   (*::core::mem::transmute::<
     |  ___________________^
2074 | |                     &[u8; 72],
2075 | |                     &[libc::c_char; 72],
2076 | |                 >(
2077 | |                     b"png_uint_32 opng_reduce_to_palette(png_structp, png_infop, png_uint_32)\0",
2078 | |                 ))
     | |_________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2085:17
     |
2085 | /                 __assert_fail(
2086 | |                     b"num_palette > 0 && num_palette <= 256\0" as *const u8
2087 | |                         as *const libc::c_char,
2088 | |                     b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
...    |
2096 | |                         .as_ptr(),
2097 | |                 );
     | |_________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2090:23
     |
2090 |                       (*::core::mem::transmute::<
     |  _______________________^
2091 | |                         &[u8; 72],
2092 | |                         &[libc::c_char; 72],
2093 | |                     >(
2094 | |                         b"png_uint_32 opng_reduce_to_palette(png_structp, png_infop, png_uint_32)\0",
2095 | |                     ))
     | |_____________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2101:13
     |
2101 | /             __assert_fail(
2102 | |                 b"num_trans >= 0 && num_trans <= num_palette\0" as *const u8
2103 | |                     as *const libc::c_char,
2104 | |                 b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
...    |
2112 | |                     .as_ptr(),
2113 | |             );
     | |_____________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2106:19
     |
2106 |                   (*::core::mem::transmute::<
     |  ___________________^
2107 | |                     &[u8; 72],
2108 | |                     &[libc::c_char; 72],
2109 | |                 >(
2110 | |                     b"png_uint_32 opng_reduce_to_palette(png_structp, png_infop, png_uint_32)\0",
2111 | |                 ))
     | |_________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2117:17
     |
2117 | /                 __assert_fail(
2118 | |                     b"num_trans >= 0 && num_trans <= num_palette\0" as *const u8
2119 | |                         as *const libc::c_char,
2120 | |                     b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
...    |
2128 | |                         .as_ptr(),
2129 | |                 );
     | |_________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2122:23
     |
2122 |                       (*::core::mem::transmute::<
     |  _______________________^
2123 | |                         &[u8; 72],
2124 | |                         &[libc::c_char; 72],
2125 | |                     >(
2126 | |                         b"png_uint_32 opng_reduce_to_palette(png_structp, png_infop, png_uint_32)\0",
2127 | |                     ))
     | |_____________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_free` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2150:9
     |
2150 |         png_free(png_ptr as *const png_struct, alpha_row as png_voidp);
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_rows` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2153:15
     |
2153 |     row_ptr = png_get_rows(png_ptr as *const png_struct, info_ptr as *const png_info);
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2161:22
     |
2161 |         sample_ptr = *row_ptr;
     |                      ^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::opng_get_alpha_row` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2162:9
     |
2162 |         opng_get_alpha_row(&mut row_info, trans_color, *row_ptr, alpha_row);
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2162:56
     |
2162 |         opng_get_alpha_row(&mut row_info, trans_color, *row_ptr, alpha_row);
     |                                                        ^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2166:23
     |
2166 |                 red = *sample_ptr.offset(0 as libc::c_int as isize) as libc::c_uint;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2166:24
     |
2166 |                 red = *sample_ptr.offset(0 as libc::c_int as isize) as libc::c_uint;
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2167:25
     |
2167 |                 green = *sample_ptr.offset(1 as libc::c_int as isize) as libc::c_uint;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2167:26
     |
2167 |                 green = *sample_ptr.offset(1 as libc::c_int as isize) as libc::c_uint;
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2168:24
     |
2168 |                 blue = *sample_ptr.offset(2 as libc::c_int as isize) as libc::c_uint;
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2168:25
     |
2168 |                 blue = *sample_ptr.offset(2 as libc::c_int as isize) as libc::c_uint;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2169:25
     |
2169 |                 alpha = *alpha_row.offset(j as isize) as libc::c_uint;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2169:26
     |
2169 |                 alpha = *alpha_row.offset(j as isize) as libc::c_uint;
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::opng_insert_palette_entry` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2177:24
     |
2177 |                       if opng_insert_palette_entry(
     |  ________________________^
2178 | |                         palette.as_mut_ptr(),
2179 | |                         &mut num_palette,
2180 | |                         trans_alpha.as_mut_ptr(),
...    |
2187 | |                         &mut index,
2188 | |                     ) != 0 as libc::c_int
     | |_____________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2194:21
     |
2194 | /                     __assert_fail(
2195 | |                         b"index >= 0\0" as *const u8 as *const libc::c_char,
2196 | |                         b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
2197 | |                         1014 as libc::c_int as libc::c_uint,
...    |
2204 | |                             .as_ptr(),
2205 | |                     );
     | |_____________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2198:27
     |
2198 |                           (*::core::mem::transmute::<
     |  ___________________________^
2199 | |                             &[u8; 72],
2200 | |                             &[libc::c_char; 72],
2201 | |                         >(
2202 | |                             b"png_uint_32 opng_reduce_to_palette(png_structp, png_infop, png_uint_32)\0",
2203 | |                         ))
     | |_________________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2209:25
     |
2209 | /                         __assert_fail(
2210 | |                             b"index >= 0\0" as *const u8 as *const libc::c_char,
2211 | |                             b"opngreduc/opngreduc.c\0" as *const u8
2212 | |                                 as *const libc::c_char,
...    |
2220 | |                                 .as_ptr(),
2221 | |                         );
     | |_________________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2214:31
     |
2214 |   ...                   (*::core::mem::transmute::<
     |  _________________________^
2215 | | ...                       &[u8; 72],
2216 | | ...                       &[libc::c_char; 72],
2217 | | ...                   >(
2218 | | ...                       b"png_uint_32 opng_reduce_to_palette(png_structp, png_infop, png_uint_32)\0",
2219 | | ...                   ))
     | |_______________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2224:17
     |
2224 |                 *(*row_ptr).offset(j as isize) = index as png_byte;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2224:18
     |
2224 |                 *(*row_ptr).offset(j as isize) = index as png_byte;
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2224:18
     |
2224 |                 *(*row_ptr).offset(j as isize) = index as png_byte;
     |                  ^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2227:30
     |
2227 |                 sample_ptr = sample_ptr.offset(channels as isize);
     |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2232:24
     |
2232 |                 gray = *sample_ptr.offset(0 as libc::c_int as isize) as libc::c_uint;
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2232:25
     |
2232 |                 gray = *sample_ptr.offset(0 as libc::c_int as isize) as libc::c_uint;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2233:25
     |
2233 |                 alpha = *alpha_row.offset(j as isize) as libc::c_uint;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2233:26
     |
2233 |                 alpha = *alpha_row.offset(j as isize) as libc::c_uint;
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::opng_insert_palette_entry` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2237:24
     |
2237 |                       if opng_insert_palette_entry(
     |  ________________________^
2238 | |                         palette.as_mut_ptr(),
2239 | |                         &mut num_palette,
2240 | |                         trans_alpha.as_mut_ptr(),
...    |
2247 | |                         &mut index,
2248 | |                     ) != 0 as libc::c_int
     | |_____________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2254:21
     |
2254 | /                     __assert_fail(
2255 | |                         b"index >= 0\0" as *const u8 as *const libc::c_char,
2256 | |                         b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
2257 | |                         1034 as libc::c_int as libc::c_uint,
...    |
2264 | |                             .as_ptr(),
2265 | |                     );
     | |_____________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2258:27
     |
2258 |                           (*::core::mem::transmute::<
     |  ___________________________^
2259 | |                             &[u8; 72],
2260 | |                             &[libc::c_char; 72],
2261 | |                         >(
2262 | |                             b"png_uint_32 opng_reduce_to_palette(png_structp, png_infop, png_uint_32)\0",
2263 | |                         ))
     | |_________________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2269:25
     |
2269 | /                         __assert_fail(
2270 | |                             b"index >= 0\0" as *const u8 as *const libc::c_char,
2271 | |                             b"opngreduc/opngreduc.c\0" as *const u8
2272 | |                                 as *const libc::c_char,
...    |
2280 | |                                 .as_ptr(),
2281 | |                         );
     | |_________________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2274:31
     |
2274 |   ...                   (*::core::mem::transmute::<
     |  _________________________^
2275 | | ...                       &[u8; 72],
2276 | | ...                       &[libc::c_char; 72],
2277 | | ...                   >(
2278 | | ...                       b"png_uint_32 opng_reduce_to_palette(png_structp, png_infop, png_uint_32)\0",
2279 | | ...                   ))
     | |_______________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2284:17
     |
2284 |                 *(*row_ptr).offset(j as isize) = index as png_byte;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2284:18
     |
2284 |                 *(*row_ptr).offset(j as isize) = index as png_byte;
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2284:18
     |
2284 |                 *(*row_ptr).offset(j as isize) = index as png_byte;
     |                  ^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2287:30
     |
2287 |                 sample_ptr = sample_ptr.offset(channels as isize);
     |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2292:19
     |
2292 |         row_ptr = row_ptr.offset(1);
     |                   ^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_set_IHDR` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2295:5
     |
2295 | /     png_set_IHDR(
2296 | |         png_ptr as *const png_struct,
2297 | |         info_ptr,
2298 | |         width,
...    |
2304 | |         filter_type,
2305 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_set_PLTE` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2306:5
     |
2306 | /     png_set_PLTE(
2307 | |         png_ptr,
2308 | |         info_ptr,
2309 | |         palette.as_mut_ptr() as png_const_colorp,
2310 | |         num_palette,
2311 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_set_tRNS` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2313:9
     |
2313 | /         png_set_tRNS(
2314 | |             png_ptr,
2315 | |             info_ptr,
2316 | |             trans_alpha.as_mut_ptr() as png_const_bytep,
2317 | |             num_trans,
2318 | |             0 as png_const_color_16p,
2319 | |         );
     | |_________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_free` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2321:5
     |
2321 |     png_free(png_ptr as *const png_struct, alpha_row as png_voidp);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::opng_reduce_palette_bits` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2324:19
     |
2324 |         result |= opng_reduce_palette_bits(png_ptr, info_ptr, reductions);
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
    --> src/opngreduc/opngreduc.rs:1765:5
     |
1765 |     mut png_ptr: png_structp,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

error: variable does not need to be mutable
    --> src/opngreduc/opngreduc.rs:1766:5
     |
1766 |     mut info_ptr: png_infop,
     |     ----^^^^^^^^
     |     |
     |     help: remove this `mut`

error: variable does not need to be mutable
    --> src/opngreduc/opngreduc.rs:1767:5
     |
1767 |     mut reductions: png_uint_32,
     |     ----^^^^^^^^^^
     |     |
     |     help: remove this `mut`

error: value assigned to `row_ptr` is never read
    --> src/opngreduc/opngreduc.rs:2333:13
     |
2333 |     let mut row_ptr: png_bytepp = 0 as *mut *mut png_byte;
     |             ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `sample_ptr` is never read
    --> src/opngreduc/opngreduc.rs:2334:13
     |
2334 |     let mut sample_ptr: png_bytep = 0 as *mut png_byte;
     |             ^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `width` is never read
    --> src/opngreduc/opngreduc.rs:2335:13
     |
2335 |     let mut width: png_uint_32 = 0;
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `height` is never read
    --> src/opngreduc/opngreduc.rs:2336:13
     |
2336 |     let mut height: png_uint_32 = 0;
     |             ^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `bit_depth` is never read
    --> src/opngreduc/opngreduc.rs:2337:13
     |
2337 |     let mut bit_depth: libc::c_int = 0;
     |             ^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `init_shift` is never read
    --> src/opngreduc/opngreduc.rs:2338:13
     |
2338 |     let mut init_shift: libc::c_int = 0;
     |             ^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `init_mask` is never read
    --> src/opngreduc/opngreduc.rs:2339:13
     |
2339 |     let mut init_mask: libc::c_int = 0;
     |             ^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `shift` is never read
    --> src/opngreduc/opngreduc.rs:2340:13
     |
2340 |     let mut shift: libc::c_int = 0;
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `mask` is never read
    --> src/opngreduc/opngreduc.rs:2341:13
     |
2341 |     let mut mask: libc::c_int = 0;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `i` is never read
    --> src/opngreduc/opngreduc.rs:2343:13
     |
2343 |     let mut i: png_uint_32 = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `j` is never read
    --> src/opngreduc/opngreduc.rs:2344:13
     |
2344 |     let mut j: png_uint_32 = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_image_height` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2345:14
     |
2345 |       height = png_get_image_height(
     |  ______________^
2346 | |         png_ptr as *const png_struct,
2347 | |         info_ptr as *const png_info,
2348 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/opngreduc/opngreduc.rs:2328:1
     |
2328 | / unsafe extern "C" fn opng_analyze_sample_usage(
2329 | |     mut png_ptr: png_structp,
2330 | |     mut info_ptr: png_infop,
2331 | |     mut usage_map: png_bytep,
2332 | | ) {
     | |_^

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_image_width` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2349:13
     |
2349 |       width = png_get_image_width(
     |  _____________^
2350 | |         png_ptr as *const png_struct,
2351 | |         info_ptr as *const png_info,
2352 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_bit_depth` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2353:17
     |
2353 |       bit_depth = png_get_bit_depth(
     |  _________________^
2354 | |         png_ptr as *const png_struct,
2355 | |         info_ptr as *const png_info,
2356 | |     ) as libc::c_int;
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_rows` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2357:15
     |
2357 |     row_ptr = png_get_rows(png_ptr as *const png_struct, info_ptr as *const png_info);
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::memset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2358:5
     |
2358 | /     memset(
2359 | |         usage_map as *mut libc::c_void,
2360 | |         0 as libc::c_int,
2361 | |         256 as libc::c_int as libc::c_ulong,
2362 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2367:26
     |
2367 |             sample_ptr = *row_ptr;
     |                          ^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2369:17
     |
2369 |                 *usage_map.offset(*sample_ptr as isize) = 1 as libc::c_int as png_byte;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2369:18
     |
2369 |                 *usage_map.offset(*sample_ptr as isize) = 1 as libc::c_int as png_byte;
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2369:35
     |
2369 |                 *usage_map.offset(*sample_ptr as isize) = 1 as libc::c_int as png_byte;
     |                                   ^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2372:30
     |
2372 |                 sample_ptr = sample_ptr.offset(1);
     |                              ^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2377:23
     |
2377 |             row_ptr = row_ptr.offset(1);
     |                       ^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2382:13
     |
2382 | /             __assert_fail(
2383 | |                 b"bit_depth < 8\0" as *const u8 as *const libc::c_char,
2384 | |                 b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
2385 | |                 1096 as libc::c_int as libc::c_uint,
...    |
2392 | |                     .as_ptr(),
2393 | |             );
     | |_____________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2386:19
     |
2386 |                   (*::core::mem::transmute::<
     |  ___________________^
2387 | |                     &[u8; 66],
2388 | |                     &[libc::c_char; 66],
2389 | |                 >(
2390 | |                     b"void opng_analyze_sample_usage(png_structp, png_infop, png_bytep)\0",
2391 | |                 ))
     | |_________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2397:17
     |
2397 | /                 __assert_fail(
2398 | |                     b"bit_depth < 8\0" as *const u8 as *const libc::c_char,
2399 | |                     b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
2400 | |                     1096 as libc::c_int as libc::c_uint,
...    |
2407 | |                         .as_ptr(),
2408 | |                 );
     | |_________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2401:23
     |
2401 |                       (*::core::mem::transmute::<
     |  _______________________^
2402 | |                         &[u8; 66],
2403 | |                         &[libc::c_char; 66],
2404 | |                     >(
2405 | |                         b"void opng_analyze_sample_usage(png_structp, png_infop, png_bytep)\0",
2406 | |                     ))
     | |_____________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2417:26
     |
2417 |             sample_ptr = *row_ptr;
     |                          ^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2422:21
     |
2422 | /                     *usage_map
2423 | |                         .offset(
2424 | |                             ((*sample_ptr as libc::c_int & mask) >> shift) as isize,
2425 | |                         ) = 1 as libc::c_int as png_byte;
     | |_________________________^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2422:22
     |
2422 |                       *usage_map
     |  ______________________^
2423 | |                         .offset(
2424 | |                             ((*sample_ptr as libc::c_int & mask) >> shift) as isize,
2425 | |                         ) = 1 as libc::c_int as png_byte;
     | |_________________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2424:31
     |
2424 | ...                   ((*sample_ptr as libc::c_int & mask) >> shift) as isize,
     |                         ^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2434:30
     |
2434 |                 sample_ptr = sample_ptr.offset(1);
     |                              ^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2439:23
     |
2439 |             row_ptr = row_ptr.offset(1);
     |                       ^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_bKGD` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2443:8
     |
2443 |     if png_get_bKGD(png_ptr as *const png_struct, info_ptr, &mut background) != 0 {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2444:9
     |
2444 |         *usage_map.offset((*background).index as isize) = 1 as libc::c_int as png_byte;
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2444:10
     |
2444 |         *usage_map.offset((*background).index as isize) = 1 as libc::c_int as png_byte;
     |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2444:27
     |
2444 |         *usage_map.offset((*background).index as isize) = 1 as libc::c_int as png_byte;
     |                           ^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error: variable does not need to be mutable
    --> src/opngreduc/opngreduc.rs:2329:5
     |
2329 |     mut png_ptr: png_structp,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

error: variable does not need to be mutable
    --> src/opngreduc/opngreduc.rs:2330:5
     |
2330 |     mut info_ptr: png_infop,
     |     ----^^^^^^^^
     |     |
     |     help: remove this `mut`

error: variable does not need to be mutable
    --> src/opngreduc/opngreduc.rs:2331:5
     |
2331 |     mut usage_map: png_bytep,
     |     ----^^^^^^^^^
     |     |
     |     help: remove this `mut`

error: value assigned to `result` is never read
    --> src/opngreduc/opngreduc.rs:2452:13
     |
2452 |     let mut result: png_uint_32 = 0;
     |             ^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `row_ptr` is never read
    --> src/opngreduc/opngreduc.rs:2455:13
     |
2455 |     let mut row_ptr: png_bytepp = 0 as *mut *mut png_byte;
     |             ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `last_color_index` is never read
    --> src/opngreduc/opngreduc.rs:2465:13
     |
2465 |     let mut last_color_index: libc::c_int = 0;
     |             ^^^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `last_trans_index` is never read
    --> src/opngreduc/opngreduc.rs:2466:13
     |
2466 |     let mut last_trans_index: libc::c_int = 0;
     |             ^^^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `crt_trans_value` is never read
    --> src/opngreduc/opngreduc.rs:2467:13
     |
2467 |     let mut crt_trans_value: png_byte = 0;
     |             ^^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `last_trans_value` is never read
    --> src/opngreduc/opngreduc.rs:2468:13
     |
2468 |     let mut last_trans_value: png_byte = 0;
     |             ^^^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `is_gray` is never read
    --> src/opngreduc/opngreduc.rs:2477:13
     |
2477 |     let mut is_gray: libc::c_int = 0;
     |             ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `i` is never read
    --> src/opngreduc/opngreduc.rs:2481:13
     |
2481 |     let mut i: png_uint_32 = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `j` is never read
    --> src/opngreduc/opngreduc.rs:2482:13
     |
2482 |     let mut j: png_uint_32 = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `k` is never read
    --> src/opngreduc/opngreduc.rs:2483:13
     |
2483 |     let mut k: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_IHDR` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2485:5
     |
2485 | /     png_get_IHDR(
2486 | |         png_ptr as *const png_struct,
2487 | |         info_ptr as *const png_info,
2488 | |         &mut width,
...    |
2494 | |         &mut filter_type,
2495 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/opngreduc/opngreduc.rs:2447:1
     |
2447 | / unsafe extern "C" fn opng_reduce_palette(
2448 | |     mut png_ptr: png_structp,
2449 | |     mut info_ptr: png_infop,
2450 | |     mut reductions: png_uint_32,
2451 | | ) -> png_uint_32 {
     | |________________^

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_rows` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2496:15
     |
2496 |     row_ptr = png_get_rows(png_ptr as *const png_struct, info_ptr as *const png_info);
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_PLTE` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2497:8
     |
2497 |       if png_get_PLTE(
     |  ________^
2498 | |         png_ptr as *const png_struct,
2499 | |         info_ptr,
2500 | |         &mut palette,
2501 | |         &mut num_palette,
2502 | |     ) == 0
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_tRNS` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2507:8
     |
2507 |       if png_get_tRNS(
     |  ________^
2508 | |         png_ptr as *const png_struct,
2509 | |         info_ptr,
2510 | |         &mut trans_alpha,
2511 | |         &mut num_trans,
2512 | |         0 as *mut png_color_16p,
2513 | |     ) == 0
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2519:13
     |
2519 | /             __assert_fail(
2520 | |                 b"trans_alpha != ((void*)0) && num_trans > 0\0" as *const u8
2521 | |                     as *const libc::c_char,
2522 | |                 b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
...    |
2530 | |                     .as_ptr(),
2531 | |             );
     | |_____________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2524:19
     |
2524 |                   (*::core::mem::transmute::<
     |  ___________________^
2525 | |                     &[u8; 69],
2526 | |                     &[libc::c_char; 69],
2527 | |                 >(
2528 | |                     b"png_uint_32 opng_reduce_palette(png_structp, png_infop, png_uint_32)\0",
2529 | |                 ))
     | |_________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2535:17
     |
2535 | /                 __assert_fail(
2536 | |                     b"trans_alpha != ((void*)0) && num_trans > 0\0" as *const u8
2537 | |                         as *const libc::c_char,
2538 | |                     b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
...    |
2546 | |                         .as_ptr(),
2547 | |                 );
     | |_________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2540:23
     |
2540 |                       (*::core::mem::transmute::<
     |  _______________________^
2541 | |                         &[u8; 69],
2542 | |                         &[libc::c_char; 69],
2543 | |                     >(
2544 | |                         b"png_uint_32 opng_reduce_palette(png_structp, png_infop, png_uint_32)\0",
2545 | |                     ))
     | |_____________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::opng_analyze_sample_usage` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2551:5
     |
2551 |     opng_analyze_sample_usage(png_ptr, info_ptr, is_used.as_mut_ptr());
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2561:21
     |
2561 |                 && (*trans_alpha.offset(k as isize) as libc::c_int) < 255 as libc::c_int
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2561:22
     |
2561 |                 && (*trans_alpha.offset(k as isize) as libc::c_int) < 255 as libc::c_int
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2566:20
     |
2566 |                 if (*palette.offset(k as isize)).red as libc::c_int
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2566:22
     |
2566 |                 if (*palette.offset(k as isize)).red as libc::c_int
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2567:24
     |
2567 |                     != (*palette.offset(k as isize)).green as libc::c_int
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2567:26
     |
2567 |                     != (*palette.offset(k as isize)).green as libc::c_int
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2568:24
     |
2568 |                     || (*palette.offset(k as isize)).red as libc::c_int
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2568:26
     |
2568 |                     || (*palette.offset(k as isize)).red as libc::c_int
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2569:28
     |
2569 |                         != (*palette.offset(k as isize)).blue as libc::c_int
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2569:30
     |
2569 |                         != (*palette.offset(k as isize)).blue as libc::c_int
     |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2579:9
     |
2579 | /         __assert_fail(
2580 | |             b"last_color_index >= 0\0" as *const u8 as *const libc::c_char,
2581 | |             b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
2582 | |             1192 as libc::c_int as libc::c_uint,
...    |
2587 | |                 .as_ptr(),
2588 | |         );
     | |_________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2583:15
     |
2583 |               (*::core::mem::transmute::<
     |  _______________^
2584 | |                 &[u8; 69],
2585 | |                 &[libc::c_char; 69],
2586 | |             >(b"png_uint_32 opng_reduce_palette(png_structp, png_infop, png_uint_32)\0"))
     | |________________________________________________________________________________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2592:13
     |
2592 | /             __assert_fail(
2593 | |                 b"last_color_index >= 0\0" as *const u8 as *const libc::c_char,
2594 | |                 b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
2595 | |                 1192 as libc::c_int as libc::c_uint,
...    |
2602 | |                     .as_ptr(),
2603 | |             );
     | |_____________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2596:19
     |
2596 |                   (*::core::mem::transmute::<
     |  ___________________^
2597 | |                     &[u8; 69],
2598 | |                     &[libc::c_char; 69],
2599 | |                 >(
2600 | |                     b"png_uint_32 opng_reduce_palette(png_structp, png_infop, png_uint_32)\0",
2601 | |                 ))
     | |_________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2607:9
     |
2607 | /         __assert_fail(
2608 | |             b"last_color_index >= last_trans_index\0" as *const u8
2609 | |                 as *const libc::c_char,
2610 | |             b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
...    |
2616 | |                 .as_ptr(),
2617 | |         );
     | |_________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2612:15
     |
2612 |               (*::core::mem::transmute::<
     |  _______________^
2613 | |                 &[u8; 69],
2614 | |                 &[libc::c_char; 69],
2615 | |             >(b"png_uint_32 opng_reduce_palette(png_structp, png_infop, png_uint_32)\0"))
     | |________________________________________________________________________________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2621:13
     |
2621 | /             __assert_fail(
2622 | |                 b"last_color_index >= last_trans_index\0" as *const u8
2623 | |                     as *const libc::c_char,
2624 | |                 b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
...    |
2632 | |                     .as_ptr(),
2633 | |             );
     | |_____________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2626:19
     |
2626 |                   (*::core::mem::transmute::<
     |  ___________________^
2627 | |                     &[u8; 69],
2628 | |                     &[libc::c_char; 69],
2629 | |                 >(
2630 | |                     b"png_uint_32 opng_reduce_palette(png_structp, png_infop, png_uint_32)\0",
2631 | |                 ))
     | |_________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_warning` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2637:9
     |
2637 | /         png_warning(
2638 | |             png_ptr as *const png_struct,
2639 | |             b"Too few colors in PLTE\0" as *const u8 as *const libc::c_char,
2640 | |         );
     | |_________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::opng_realloc_PLTE` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2641:9
     |
2641 |         opng_realloc_PLTE(png_ptr, info_ptr, last_color_index + 1 as libc::c_int);
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_PLTE` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2642:9
     |
2642 | /         png_get_PLTE(
2643 | |             png_ptr as *const png_struct,
2644 | |             info_ptr,
2645 | |             &mut palette,
2646 | |             &mut num_palette,
2647 | |         );
     | |_________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2649:13
     |
2649 | /             __assert_fail(
2650 | |                 b"num_palette == last_color_index + 1\0" as *const u8
2651 | |                     as *const libc::c_char,
2652 | |                 b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
...    |
2660 | |                     .as_ptr(),
2661 | |             );
     | |_____________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2654:19
     |
2654 |                   (*::core::mem::transmute::<
     |  ___________________^
2655 | |                     &[u8; 69],
2656 | |                     &[libc::c_char; 69],
2657 | |                 >(
2658 | |                     b"png_uint_32 opng_reduce_palette(png_structp, png_infop, png_uint_32)\0",
2659 | |                 ))
     | |_________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2665:17
     |
2665 | /                 __assert_fail(
2666 | |                     b"num_palette == last_color_index + 1\0" as *const u8
2667 | |                         as *const libc::c_char,
2668 | |                     b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
...    |
2676 | |                         .as_ptr(),
2677 | |                 );
     | |_________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2670:23
     |
2670 |                       (*::core::mem::transmute::<
     |  _______________________^
2671 | |                         &[u8; 69],
2672 | |                         &[libc::c_char; 69],
2673 | |                     >(
2674 | |                         b"png_uint_32 opng_reduce_palette(png_structp, png_infop, png_uint_32)\0",
2675 | |                     ))
     | |_____________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_warning` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2683:9
     |
2683 | /         png_warning(
2684 | |             png_ptr as *const png_struct,
2685 | |             b"Too many alpha values in tRNS\0" as *const u8 as *const libc::c_char,
2686 | |         );
     | |_________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2691:21
     |
2691 |             .gray = (*palette.offset(last_trans_index as isize)).red as png_uint_16;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2691:23
     |
2691 |             .gray = (*palette.offset(last_trans_index as isize)).red as png_uint_16;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2692:28
     |
2692 |         last_trans_value = *trans_alpha.offset(last_trans_index as isize);
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2692:29
     |
2692 |         last_trans_value = *trans_alpha.offset(last_trans_index as isize);
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2697:39
     |
2697 |                     crt_trans_value = *trans_alpha.offset(k as isize);
     |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2697:40
     |
2697 |                     crt_trans_value = *trans_alpha.offset(k as isize);
     |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2699:28
     |
2699 |                         && (*palette.offset(k as isize)).red as libc::c_int
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2699:30
     |
2699 |                         && (*palette.offset(k as isize)).red as libc::c_int
     |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2708:20
     |
2708 |                 if (*palette.offset(k as isize)).red as libc::c_int
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2708:22
     |
2708 |                 if (*palette.offset(k as isize)).red as libc::c_int
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_free_data` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2722:9
     |
2722 | /         png_free_data(
2723 | |             png_ptr as *const png_struct,
2724 | |             info_ptr,
2725 | |             0x2000 as libc::c_uint,
2726 | |             -(1 as libc::c_int),
2727 | |         );
     | |_________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_set_invalid` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2728:9
     |
2728 | /         png_set_invalid(
2729 | |             png_ptr as *const png_struct,
2730 | |             info_ptr,
2731 | |             0x10 as libc::c_uint as libc::c_int,
2732 | |         );
     | |_________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::opng_realloc_PLTE` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2737:13
     |
2737 |             opng_realloc_PLTE(png_ptr, info_ptr, last_color_index + 1 as libc::c_int);
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_PLTE` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2738:13
     |
2738 | /             png_get_PLTE(
2739 | |                 png_ptr as *const png_struct,
2740 | |                 info_ptr,
2741 | |                 &mut palette,
2742 | |                 &mut num_palette,
2743 | |             );
     | |_____________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2745:17
     |
2745 | /                 __assert_fail(
2746 | |                     b"num_palette == last_color_index + 1\0" as *const u8
2747 | |                         as *const libc::c_char,
2748 | |                     b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
...    |
2756 | |                         .as_ptr(),
2757 | |                 );
     | |_________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2750:23
     |
2750 |                       (*::core::mem::transmute::<
     |  _______________________^
2751 | |                         &[u8; 69],
2752 | |                         &[libc::c_char; 69],
2753 | |                     >(
2754 | |                         b"png_uint_32 opng_reduce_palette(png_structp, png_infop, png_uint_32)\0",
2755 | |                     ))
     | |_____________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2761:21
     |
2761 | /                     __assert_fail(
2762 | |                         b"num_palette == last_color_index + 1\0" as *const u8
2763 | |                             as *const libc::c_char,
2764 | |                         b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
...    |
2772 | |                             .as_ptr(),
2773 | |                     );
     | |_____________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2766:27
     |
2766 |                           (*::core::mem::transmute::<
     |  ___________________________^
2767 | |                             &[u8; 69],
2768 | |                             &[libc::c_char; 69],
2769 | |                         >(
2770 | |                             b"png_uint_32 opng_reduce_palette(png_structp, png_infop, png_uint_32)\0",
2771 | |                         ))
     | |_________________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::opng_realloc_tRNS` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2781:13
     |
2781 |             opng_realloc_tRNS(png_ptr, info_ptr, last_trans_index + 1 as libc::c_int);
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_tRNS` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2782:13
     |
2782 | /             png_get_tRNS(
2783 | |                 png_ptr as *const png_struct,
2784 | |                 info_ptr,
2785 | |                 &mut trans_alpha,
2786 | |                 &mut num_trans,
2787 | |                 0 as *mut png_color_16p,
2788 | |             );
     | |_____________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2790:17
     |
2790 | /                 __assert_fail(
2791 | |                     b"num_trans == last_trans_index + 1\0" as *const u8
2792 | |                         as *const libc::c_char,
2793 | |                     b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
...    |
2801 | |                         .as_ptr(),
2802 | |                 );
     | |_________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2795:23
     |
2795 |                       (*::core::mem::transmute::<
     |  _______________________^
2796 | |                         &[u8; 69],
2797 | |                         &[libc::c_char; 69],
2798 | |                     >(
2799 | |                         b"png_uint_32 opng_reduce_palette(png_structp, png_infop, png_uint_32)\0",
2800 | |                     ))
     | |_____________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::__assert_fail` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2806:21
     |
2806 | /                     __assert_fail(
2807 | |                         b"num_trans == last_trans_index + 1\0" as *const u8
2808 | |                             as *const libc::c_char,
2809 | |                         b"opngreduc/opngreduc.c\0" as *const u8 as *const libc::c_char,
...    |
2817 | |                             .as_ptr(),
2818 | |                     );
     | |_____________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2811:27
     |
2811 |                           (*::core::mem::transmute::<
     |  ___________________________^
2812 | |                             &[u8; 69],
2813 | |                             &[libc::c_char; 69],
2814 | |                         >(
2815 | |                             b"png_uint_32 opng_reduce_palette(png_structp, png_infop, png_uint_32)\0",
2816 | |                         ))
     | |_________________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::opng_reduce_palette_bits` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2825:19
     |
2825 |         result |= opng_reduce_palette_bits(png_ptr, info_ptr, reductions);
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_bit_depth` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2826:21
     |
2826 |           bit_depth = png_get_bit_depth(
     |  _____________________^
2827 | |             png_ptr as *const png_struct,
2828 | |             info_ptr as *const png_info,
2829 | |         ) as libc::c_int;
     | |_________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2838:13
     |
2838 | /             *(*row_ptr.offset(i as isize))
2839 | |                 .offset(
2840 | |                     j as isize,
2841 | |                 ) = (*palette
     | |_________________^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2838:14
     |
2838 |               *(*row_ptr.offset(i as isize))
     |  ______________^
2839 | |                 .offset(
2840 | |                     j as isize,
2841 | |                 ) = (*palette
     | |_________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2838:14
     |
2838 |             *(*row_ptr.offset(i as isize))
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2838:16
     |
2838 |             *(*row_ptr.offset(i as isize))
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2841:21
     |
2841 |                   ) = (*palette
     |  _____________________^
2842 | |                 .offset(*(*row_ptr.offset(i as isize)).offset(j as isize) as isize))
     | |____________________________________________________________________________________^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2841:23
     |
2841 |                   ) = (*palette
     |  _______________________^
2842 | |                 .offset(*(*row_ptr.offset(i as isize)).offset(j as isize) as isize))
     | |___________________________________________________________________________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2842:25
     |
2842 |                 .offset(*(*row_ptr.offset(i as isize)).offset(j as isize) as isize))
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2842:26
     |
2842 |                 .offset(*(*row_ptr.offset(i as isize)).offset(j as isize) as isize))
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2842:26
     |
2842 |                 .offset(*(*row_ptr.offset(i as isize)).offset(j as isize) as isize))
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2842:28
     |
2842 |                 .offset(*(*row_ptr.offset(i as isize)).offset(j as isize) as isize))
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_set_tRNS` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2851:9
     |
2851 | /         png_set_tRNS(
2852 | |             png_ptr,
2853 | |             info_ptr,
2854 | |             0 as png_const_bytep,
2855 | |             0 as libc::c_int,
2856 | |             &mut gray_trans as *mut png_color_16 as png_const_color_16p,
2857 | |         );
     | |_________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_bKGD` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2859:8
     |
2859 |     if png_get_bKGD(png_ptr as *const png_struct, info_ptr, &mut background) != 0 {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2860:9
     |
2860 |         (*background)
     |         ^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2861:21
     |
2861 |             .gray = (*palette.offset((*background).index as isize)).red as png_uint_16;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2861:23
     |
2861 |             .gray = (*palette.offset((*background).index as isize)).red as png_uint_16;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2861:38
     |
2861 |             .gray = (*palette.offset((*background).index as isize)).red as png_uint_16;
     |                                      ^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_hIST` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2863:8
     |
2863 |     if png_get_hIST(png_ptr as *const png_struct, info_ptr, &mut hist) != 0 {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_free_data` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2864:9
     |
2864 | /         png_free_data(
2865 | |             png_ptr as *const png_struct,
2866 | |             info_ptr,
2867 | |             0x8 as libc::c_uint,
2868 | |             -(1 as libc::c_int),
2869 | |         );
     | |_________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_set_invalid` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2870:9
     |
2870 | /         png_set_invalid(
2871 | |             png_ptr as *const png_struct,
2872 | |             info_ptr,
2873 | |             0x40 as libc::c_uint as libc::c_int,
2874 | |         );
     | |_________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_sBIT` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2876:8
     |
2876 |     if png_get_sBIT(png_ptr as *const png_struct, info_ptr, &mut sig_bits) != 0 {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2877:42
     |
2877 |         let mut max_sig_bits: png_byte = (*sig_bits).red;
     |                                          ^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2878:44
     |
2878 |         if (max_sig_bits as libc::c_int) < (*sig_bits).green as libc::c_int {
     |                                            ^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2879:28
     |
2879 |             max_sig_bits = (*sig_bits).green;
     |                            ^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2881:44
     |
2881 |         if (max_sig_bits as libc::c_int) < (*sig_bits).blue as libc::c_int {
     |                                            ^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2882:28
     |
2882 |             max_sig_bits = (*sig_bits).blue;
     |                            ^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2884:9
     |
2884 |         (*sig_bits).gray = max_sig_bits;
     |         ^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_set_IHDR` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2886:5
     |
2886 | /     png_set_IHDR(
2887 | |         png_ptr as *const png_struct,
2888 | |         info_ptr,
2889 | |         width,
...    |
2895 | |         filter_type,
2896 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_free_data` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2897:5
     |
2897 | /     png_free_data(
2898 | |         png_ptr as *const png_struct,
2899 | |         info_ptr,
2900 | |         0x1000 as libc::c_uint,
2901 | |         -(1 as libc::c_int),
2902 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_set_invalid` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2903:5
     |
2903 | /     png_set_invalid(
2904 | |         png_ptr as *const png_struct,
2905 | |         info_ptr,
2906 | |         0x8 as libc::c_uint as libc::c_int,
2907 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
    --> src/opngreduc/opngreduc.rs:2448:5
     |
2448 |     mut png_ptr: png_structp,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

error: variable does not need to be mutable
    --> src/opngreduc/opngreduc.rs:2449:5
     |
2449 |     mut info_ptr: png_infop,
     |     ----^^^^^^^^
     |     |
     |     help: remove this `mut`

error: variable does not need to be mutable
    --> src/opngreduc/opngreduc.rs:2450:5
     |
2450 |     mut reductions: png_uint_32,
     |     ----^^^^^^^^^^
     |     |
     |     help: remove this `mut`

error: value assigned to `result` is never read
    --> src/opngreduc/opngreduc.rs:2916:13
     |
2916 |     let mut result: png_uint_32 = 0;
     |             ^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `color_type` is never read
    --> src/opngreduc/opngreduc.rs:2917:13
     |
2917 |     let mut color_type: libc::c_int = 0;
     |             ^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `opngreduc::opngreduc::opng_validate_image` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2918:8
     |
2918 |     if opng_validate_image(png_ptr, info_ptr) == 0 {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/opngreduc/opngreduc.rs:2911:1
     |
2911 | / pub unsafe extern "C" fn opng_reduce_image(
2912 | |     mut png_ptr: png_structp,
2913 | |     mut info_ptr: png_infop,
2914 | |     mut reductions: png_uint_32,
2915 | | ) -> png_uint_32 {
     | |________________^

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_warning` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2919:9
     |
2919 | /         png_warning(
2920 | |             png_ptr as *const png_struct,
2921 | |             b"Image reduction requires the presence of all critical information\0"
2922 | |                 as *const u8 as *const libc::c_char,
2923 | |         );
     | |_________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::png_get_color_type` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2926:18
     |
2926 |       color_type = png_get_color_type(
     |  __________________^
2927 | |         png_ptr as *const png_struct,
2928 | |         info_ptr as *const png_info,
2929 | |     ) as libc::c_int;
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::opng_reduce_bits` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2930:14
     |
2930 |     result = opng_reduce_bits(png_ptr, info_ptr, reductions);
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::opng_reduce_palette` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2936:19
     |
2936 |         result |= opng_reduce_palette(png_ptr, info_ptr, reductions);
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `opngreduc::opngreduc::opng_reduce_to_palette` is unsafe and requires unsafe block
    --> src/opngreduc/opngreduc.rs:2944:23
     |
2944 |             result |= opng_reduce_to_palette(png_ptr, info_ptr, reductions);
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
    --> src/opngreduc/opngreduc.rs:2912:5
     |
2912 |     mut png_ptr: png_structp,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

error: variable does not need to be mutable
    --> src/opngreduc/opngreduc.rs:2913:5
     |
2913 |     mut info_ptr: png_infop,
     |     ----^^^^^^^^
     |     |
     |     help: remove this `mut`

error: variable does not need to be mutable
    --> src/opngreduc/opngreduc.rs:2914:5
     |
2914 |     mut reductions: png_uint_32,
     |     ----^^^^^^^^^^
     |     |
     |     help: remove this `mut`

error: value assigned to `result` is never read
  --> src/optipng/bitset.rs:12:13
   |
12 |     let mut result: libc::c_uint = 0;
   |             ^^^^^^
   |
   = help: maybe it is overwritten before being read?

error: value assigned to `i` is never read
  --> src/optipng/bitset.rs:23:13
   |
23 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

error: variable does not need to be mutable
  --> src/optipng/bitset.rs:22:49
   |
22 | pub unsafe extern "C" fn opng_bitset_find_first(mut set: opng_bitset_t) -> libc::c_int {
   |                                                 ----^^^
   |                                                 |
   |                                                 help: remove this `mut`

error: value assigned to `i` is never read
  --> src/optipng/bitset.rs:39:13
   |
39 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

error: variable does not need to be mutable
  --> src/optipng/bitset.rs:36:5
   |
36 |     mut set: opng_bitset_t,
   |     ----^^^
   |     |
   |     help: remove this `mut`

error: variable does not need to be mutable
  --> src/optipng/bitset.rs:37:5
   |
37 |     mut elt: libc::c_int,
   |     ----^^^
   |     |
   |     help: remove this `mut`

error: value assigned to `i` is never read
  --> src/optipng/bitset.rs:53:13
   |
53 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

error: variable does not need to be mutable
  --> src/optipng/bitset.rs:52:48
   |
52 | pub unsafe extern "C" fn opng_bitset_find_last(mut set: opng_bitset_t) -> libc::c_int {
   |                                                ----^^^
   |                                                |
   |                                                help: remove this `mut`

error: value assigned to `i` is never read
  --> src/optipng/bitset.rs:69:13
   |
69 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

error: variable does not need to be mutable
  --> src/optipng/bitset.rs:66:5
   |
66 |     mut set: opng_bitset_t,
   |     ----^^^
   |     |
   |     help: remove this `mut`

error: variable does not need to be mutable
  --> src/optipng/bitset.rs:67:5
   |
67 |     mut elt: libc::c_int,
   |     ----^^^
   |     |
   |     help: remove this `mut`

error: value assigned to `result` is never read
  --> src/optipng/bitset.rs:90:13
   |
90 |     let mut result: opng_bitset_t = 0;
   |             ^^^^^^
   |
   = help: maybe it is overwritten before being read?

error: value assigned to `ptr` is never read
  --> src/optipng/bitset.rs:91:13
   |
91 |     let mut ptr: *const libc::c_char = 0 as *const libc::c_char;
   |             ^^^
   |
   = help: maybe it is overwritten before being read?

error: value assigned to `state` is never read
  --> src/optipng/bitset.rs:92:13
   |
92 |     let mut state: libc::c_int = 0;
   |             ^^^^^
   |
   = help: maybe it is overwritten before being read?

error: value assigned to `num` is never read
  --> src/optipng/bitset.rs:93:13
   |
93 |     let mut num: libc::c_int = 0;
   |             ^^^
   |
   = help: maybe it is overwritten before being read?

error: value assigned to `num1` is never read
  --> src/optipng/bitset.rs:94:13
   |
94 |     let mut num1: libc::c_int = 0;
   |             ^^^^
   |
   = help: maybe it is overwritten before being read?

error: value assigned to `num2` is never read
  --> src/optipng/bitset.rs:95:13
   |
95 |     let mut num2: libc::c_int = 0;
   |             ^^^^
   |
   = help: maybe it is overwritten before being read?

error: value assigned to `err_invalid` is never read
  --> src/optipng/bitset.rs:96:13
   |
96 |     let mut err_invalid: libc::c_int = 0;
   |             ^^^^^^^^^^^
   |
   = help: maybe it is overwritten before being read?

error: value assigned to `err_range` is never read
  --> src/optipng/bitset.rs:97:13
   |
97 |     let mut err_range: libc::c_int = 0;
   |             ^^^^^^^^^
   |
   = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `optipng::bitset::isspace` is unsafe and requires unsafe block
   --> src/optipng/bitset.rs:107:15
    |
107 |         while isspace(*ptr as libc::c_int) != 0 {
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/optipng/bitset.rs:85:1
    |
85  | / pub unsafe extern "C" fn opng_strparse_rangeset_to_bitset(
86  | |     mut out_set: *mut opng_bitset_t,
87  | |     mut rangeset_str: *const libc::c_char,
88  | |     mut mask_set: opng_bitset_t,
89  | | ) -> libc::c_int {
    | |________________^

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/bitset.rs:107:23
    |
107 |         while isspace(*ptr as libc::c_int) != 0 {
    |                       ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/bitset.rs:108:19
    |
108 |             ptr = ptr.offset(1);
    |                   ^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/bitset.rs:119:20
    |
119 |                 if *ptr as libc::c_int == '-' as i32 {
    |                    ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/bitset.rs:120:27
    |
120 |                     ptr = ptr.offset(1);
    |                           ^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/bitset.rs:136:20
    |
136 |                 if *ptr as libc::c_int >= '0' as i32 && *ptr as libc::c_int <= '9' as i32
    |                    ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/bitset.rs:136:57
    |
136 |                 if *ptr as libc::c_int >= '0' as i32 && *ptr as libc::c_int <= '9' as i32
    |                                                         ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/bitset.rs:141:32
    |
141 | ...                   + (*ptr as libc::c_int - '0' as i32);
    |                          ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/bitset.rs:146:31
    |
146 |                         ptr = ptr.offset(1);
    |                               ^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/bitset.rs:148:30
    |
148 |                         if !(*ptr as libc::c_int >= '0' as i32
    |                              ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/bitset.rs:149:32
    |
149 | ...                   && *ptr as libc::c_int <= '9' as i32)
    |                          ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/bitset.rs:185:12
    |
185 |         if *ptr as libc::c_int == ',' as i32 || *ptr as libc::c_int == ';' as i32 {
    |            ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/bitset.rs:185:49
    |
185 |         if *ptr as libc::c_int == ',' as i32 || *ptr as libc::c_int == ';' as i32 {
    |                                                 ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/bitset.rs:186:19
    |
186 |             ptr = ptr.offset(1);
    |                   ^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/bitset.rs:189:18
    |
189 |             if !(*ptr as libc::c_int == '-' as i32) {
    |                  ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `optipng::bitset::isspace` is unsafe and requires unsafe block
   --> src/optipng/bitset.rs:196:11
    |
196 |     while isspace(*ptr as libc::c_int) != 0 {
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/bitset.rs:196:19
    |
196 |     while isspace(*ptr as libc::c_int) != 0 {
    |                   ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/bitset.rs:197:15
    |
197 |         ptr = ptr.offset(1);
    |               ^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/bitset.rs:200:8
    |
200 |     if *ptr as libc::c_int != '\0' as i32 {
    |        ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/bitset.rs:204:9
    |
204 |         *__errno_location() = 22 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `optipng::bitset::__errno_location` is unsafe and requires unsafe block
   --> src/optipng/bitset.rs:204:10
    |
204 |         *__errno_location() = 22 as libc::c_int;
    |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/bitset.rs:205:9
    |
205 |         *out_set = 0 as libc::c_uint;
    |         ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/bitset.rs:208:9
    |
208 |         *__errno_location() = 34 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `optipng::bitset::__errno_location` is unsafe and requires unsafe block
   --> src/optipng/bitset.rs:208:10
    |
208 |         *__errno_location() = 34 as libc::c_int;
    |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/bitset.rs:209:9
    |
209 |         *out_set = !(0 as libc::c_uint);
    |         ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/bitset.rs:212:9
    |
212 |         *out_set = result;
    |         ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error: variable does not need to be mutable
  --> src/optipng/bitset.rs:86:5
   |
86 |     mut out_set: *mut opng_bitset_t,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

error: variable does not need to be mutable
  --> src/optipng/bitset.rs:87:5
   |
87 |     mut rangeset_str: *const libc::c_char,
   |     ----^^^^^^^^^^^^
   |     |
   |     help: remove this `mut`

error: variable does not need to be mutable
  --> src/optipng/bitset.rs:88:5
   |
88 |     mut mask_set: opng_bitset_t,
   |     ----^^^^^^^^
   |     |
   |     help: remove this `mut`

error[E0133]: call to unsafe function `optipng::ioutil::ftell` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:149:12
    |
149 |     return ftell(stream);
    |            ^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/optipng/ioutil.rs:148:1
    |
148 | pub unsafe extern "C" fn opng_ftello(mut stream: *mut FILE) -> opng_foffset_t {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: variable does not need to be mutable
   --> src/optipng/ioutil.rs:148:38
    |
148 | pub unsafe extern "C" fn opng_ftello(mut stream: *mut FILE) -> opng_foffset_t {
    |                                      ----^^^^^^
    |                                      |
    |                                      help: remove this `mut`

error[E0133]: call to unsafe function `optipng::ioutil::fseek` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:157:12
    |
157 |     return fseek(stream, offset, whence);
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/optipng/ioutil.rs:152:1
    |
152 | / pub unsafe extern "C" fn opng_fseeko(
153 | |     mut stream: *mut FILE,
154 | |     mut offset: opng_foffset_t,
155 | |     mut whence: libc::c_int,
156 | | ) -> libc::c_int {
    | |________________^

error: variable does not need to be mutable
   --> src/optipng/ioutil.rs:153:5
    |
153 |     mut stream: *mut FILE,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ioutil.rs:154:5
    |
154 |     mut offset: opng_foffset_t,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ioutil.rs:155:5
    |
155 |     mut whence: libc::c_int,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `result` is never read
   --> src/optipng/ioutil.rs:174:13
    |
174 |     let mut result: size_t = 0;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `optipng::ioutil::fgetpos` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:175:8
    |
175 |     if fgetpos(stream, &mut pos) != 0 as libc::c_int {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/optipng/ioutil.rs:160:1
    |
160 | / pub unsafe extern "C" fn opng_freado(
161 | |     mut stream: *mut FILE,
162 | |     mut offset: opng_foffset_t,
163 | |     mut whence: libc::c_int,
164 | |     mut block: *mut libc::c_void,
165 | |     mut blocksize: size_t,
166 | | ) -> size_t {
    | |___________^

error[E0133]: call to unsafe function `optipng::ioutil::opng_fseeko` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:178:8
    |
178 |     if opng_fseeko(stream, offset, whence) == 0 as libc::c_int {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::ioutil::fread` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:179:18
    |
179 |         result = fread(block, 1 as libc::c_int as libc::c_ulong, blocksize, stream);
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::ioutil::fsetpos` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:183:8
    |
183 |     if fsetpos(stream, &mut pos) != 0 as libc::c_int {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/optipng/ioutil.rs:161:5
    |
161 |     mut stream: *mut FILE,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ioutil.rs:162:5
    |
162 |     mut offset: opng_foffset_t,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ioutil.rs:163:5
    |
163 |     mut whence: libc::c_int,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ioutil.rs:164:5
    |
164 |     mut block: *mut libc::c_void,
    |     ----^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ioutil.rs:165:5
    |
165 |     mut blocksize: size_t,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `result` is never read
   --> src/optipng/ioutil.rs:203:13
    |
203 |     let mut result: size_t = 0;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `optipng::ioutil::fgetpos` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:204:8
    |
204 |     if fgetpos(stream, &mut pos) != 0 as libc::c_int
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/optipng/ioutil.rs:189:1
    |
189 | / pub unsafe extern "C" fn opng_fwriteo(
190 | |     mut stream: *mut FILE,
191 | |     mut offset: opng_foffset_t,
192 | |     mut whence: libc::c_int,
193 | |     mut block: *const libc::c_void,
194 | |     mut blocksize: size_t,
195 | | ) -> size_t {
    | |___________^

error[E0133]: call to unsafe function `optipng::ioutil::fflush` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:205:12
    |
205 |         || fflush(stream) != 0 as libc::c_int
    |            ^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::ioutil::opng_fseeko` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:209:8
    |
209 |     if opng_fseeko(stream, offset, whence) == 0 as libc::c_int {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::ioutil::fwrite` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:210:18
    |
210 |         result = fwrite(block, 1 as libc::c_int as libc::c_ulong, blocksize, stream);
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::ioutil::fflush` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:214:8
    |
214 |     if fflush(stream) != 0 as libc::c_int {
    |        ^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::ioutil::fsetpos` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:217:8
    |
217 |     if fsetpos(stream, &mut pos) != 0 as libc::c_int {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/optipng/ioutil.rs:190:5
    |
190 |     mut stream: *mut FILE,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ioutil.rs:191:5
    |
191 |     mut offset: opng_foffset_t,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ioutil.rs:192:5
    |
192 |     mut whence: libc::c_int,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ioutil.rs:193:5
    |
193 |     mut block: *const libc::c_void,
    |     ----^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ioutil.rs:194:5
    |
194 |     mut blocksize: size_t,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

error[E0133]: call to unsafe function `optipng::ioutil::fstat` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:244:8
    |
244 |     if fstat(fileno(stream), &mut sbuf) != 0 as libc::c_int {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/optipng/ioutil.rs:223:1
    |
223 | / pub unsafe extern "C" fn opng_fgetsize(
224 | |     mut stream: *mut FILE,
225 | |     mut size: *mut opng_fsize_t,
226 | | ) -> libc::c_int {
    | |________________^

error[E0133]: call to unsafe function `optipng::ioutil::fileno` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:244:14
    |
244 |     if fstat(fileno(stream), &mut sbuf) != 0 as libc::c_int {
    |              ^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:250:5
    |
250 |     *size = sbuf.st_size as opng_fsize_t;
    |     ^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error: variable does not need to be mutable
   --> src/optipng/ioutil.rs:224:5
    |
224 |     mut stream: *mut FILE,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ioutil.rs:225:5
    |
225 |     mut size: *mut opng_fsize_t,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `path` is never read
   --> src/optipng/ioutil.rs:260:13
    |
260 |     let mut path: *const libc::c_char = 0 as *const libc::c_char;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `ptr` is never read
   --> src/optipng/ioutil.rs:261:13
    |
261 |     let mut ptr: *const libc::c_char = 0 as *const libc::c_char;
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `dirlen` is never read
   --> src/optipng/ioutil.rs:262:13
    |
262 |     let mut dirlen: size_t = 0;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `optipng::ioutil::strpbrk` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:265:15
    |
265 |         ptr = strpbrk(path, b"/\0" as *const u8 as *const libc::c_char);
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/optipng/ioutil.rs:254:1
    |
254 | / pub unsafe extern "C" fn opng_path_replace_dir(
255 | |     mut buffer: *mut libc::c_char,
256 | |     mut bufsize: size_t,
257 | |     mut old_path: *const libc::c_char,
258 | |     mut new_dirname: *const libc::c_char,
259 | | ) -> *mut libc::c_char {
    | |______________________^

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:269:16
    |
269 |         path = ptr.offset(1 as libc::c_int as isize);
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::ioutil::strlen` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:271:14
    |
271 |     dirlen = strlen(new_dirname);
    |              ^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::ioutil::strlen` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:272:28
    |
272 |     if dirlen.wrapping_add(strlen(path)).wrapping_add(2 as libc::c_int as libc::c_ulong)
    |                            ^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::ioutil::strcpy` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:278:9
    |
278 |         strcpy(buffer, new_dirname);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::ioutil::strchr` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:279:12
    |
279 |           if (strchr(
    |  ____________^
280 | |             b"/\0" as *const u8 as *const libc::c_char,
281 | |             *buffer.offset(dirlen.wrapping_sub(1 as libc::c_int as size_t) as isize)
282 | |                 as libc::c_int,
283 | |         ))
    | |__________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:281:13
    |
281 |             *buffer.offset(dirlen.wrapping_sub(1 as libc::c_int as size_t) as isize)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:281:14
    |
281 |             *buffer.offset(dirlen.wrapping_sub(1 as libc::c_int as size_t) as isize)
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:288:13
    |
288 |             *buffer.offset(fresh0 as isize) = '/' as i32 as libc::c_char;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:288:14
    |
288 |             *buffer.offset(fresh0 as isize) = '/' as i32 as libc::c_char;
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::ioutil::strcpy` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:291:5
    |
291 |     strcpy(buffer.offset(dirlen as isize), path);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:291:12
    |
291 |     strcpy(buffer.offset(dirlen as isize), path);
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/optipng/ioutil.rs:255:5
    |
255 |     mut buffer: *mut libc::c_char,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ioutil.rs:256:5
    |
256 |     mut bufsize: size_t,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ioutil.rs:257:5
    |
257 |     mut old_path: *const libc::c_char,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ioutil.rs:258:5
    |
258 |     mut new_dirname: *const libc::c_char,
    |     ----^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `i` is never read
   --> src/optipng/ioutil.rs:301:13
    |
301 |     let mut i: size_t = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `pos` is never read
   --> src/optipng/ioutil.rs:302:13
    |
302 |     let mut pos: size_t = 0;
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:303:8
    |
303 |     if *new_extname.offset(0 as libc::c_int as isize) as libc::c_int != '.' as i32 {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/optipng/ioutil.rs:295:1
    |
295 | / pub unsafe extern "C" fn opng_path_replace_ext(
296 | |     mut buffer: *mut libc::c_char,
297 | |     mut bufsize: size_t,
298 | |     mut old_path: *const libc::c_char,
299 | |     mut new_extname: *const libc::c_char,
300 | | ) -> *mut libc::c_char {
    | |______________________^

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:303:9
    |
303 |     if *new_extname.offset(0 as libc::c_int as isize) as libc::c_int != '.' as i32 {
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:308:11
    |
308 |     while *old_path.offset(i as isize) as libc::c_int != '\0' as i32 {
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:308:12
    |
308 |     while *old_path.offset(i as isize) as libc::c_int != '\0' as i32 {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:312:30
    |
312 |         let ref mut fresh1 = *buffer.offset(i as isize);
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:312:31
    |
312 |         let ref mut fresh1 = *buffer.offset(i as isize);
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:313:19
    |
313 |         *fresh1 = *old_path.offset(i as isize);
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:313:20
    |
313 |         *fresh1 = *old_path.offset(i as isize);
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:327:30
    |
327 |         let ref mut fresh2 = *buffer.offset(i as isize);
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:327:31
    |
327 |         let ref mut fresh2 = *buffer.offset(i as isize);
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:328:19
    |
328 |         *fresh2 = *new_extname;
    |                   ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:334:23
    |
334 |         new_extname = new_extname.offset(1);
    |                       ^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/optipng/ioutil.rs:296:5
    |
296 |     mut buffer: *mut libc::c_char,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ioutil.rs:297:5
    |
297 |     mut bufsize: size_t,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ioutil.rs:298:5
    |
298 |     mut old_path: *const libc::c_char,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error[E0133]: call to unsafe function `optipng::ioutil::strlen` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:347:8
    |
347 |     if (strlen(path))
    |        ^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/optipng/ioutil.rs:339:1
    |
339 | / pub unsafe extern "C" fn opng_path_make_backup(
340 | |     mut buffer: *mut libc::c_char,
341 | |     mut bufsize: size_t,
342 | |     mut path: *const libc::c_char,
343 | | ) -> *mut libc::c_char {
    | |______________________^

error[E0133]: call to unsafe function `optipng::ioutil::strcpy` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:353:5
    |
353 |     strcpy(buffer, path);
    |     ^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::ioutil::strcat` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:354:5
    |
354 |     strcat(buffer, bak_extname.as_ptr());
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:354:20
    |
354 |     strcat(buffer, bak_extname.as_ptr());
    |                    ^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error: variable does not need to be mutable
   --> src/optipng/ioutil.rs:340:5
    |
340 |     mut buffer: *mut libc::c_char,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ioutil.rs:341:5
    |
341 |     mut bufsize: size_t,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ioutil.rs:342:5
    |
342 |     mut path: *const libc::c_char,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

error[E0133]: call to unsafe function `optipng::ioutil::access` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:364:12
    |
364 |         if access(dest_path, 0 as libc::c_int) >= 0 as libc::c_int {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/optipng/ioutil.rs:358:1
    |
358 | / pub unsafe extern "C" fn opng_os_rename(
359 | |     mut src_path: *const libc::c_char,
360 | |     mut dest_path: *const libc::c_char,
361 | |     mut clobber: libc::c_int,
362 | | ) -> libc::c_int {
    | |________________^

error[E0133]: call to unsafe function `optipng::ioutil::rename` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:368:12
    |
368 |     return rename(src_path, dest_path);
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/optipng/ioutil.rs:359:5
    |
359 |     mut src_path: *const libc::c_char,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ioutil.rs:360:5
    |
360 |     mut dest_path: *const libc::c_char,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ioutil.rs:361:5
    |
361 |     mut clobber: libc::c_int,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:374:8
    |
374 |     if *dirname.offset(0 as libc::c_int as isize) as libc::c_int == '\0' as i32 {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/optipng/ioutil.rs:371:1
    |
371 | / pub unsafe extern "C" fn opng_os_create_dir(
372 | |     mut dirname: *const libc::c_char,
373 | | ) -> libc::c_int {
    | |________________^

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:374:9
    |
374 |     if *dirname.offset(0 as libc::c_int as isize) as libc::c_int == '\0' as i32 {
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::ioutil::stat` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:394:8
    |
394 |     if stat(dirname, &mut sbuf) == 0 as libc::c_int {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::ioutil::mkdir` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:401:12
    |
401 |     return mkdir(dirname, 0o777 as libc::c_int as __mode_t);
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/optipng/ioutil.rs:372:5
    |
372 |     mut dirname: *const libc::c_char,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `result` is never read
   --> src/optipng/ioutil.rs:425:13
    |
425 |     let mut result: libc::c_int = 0;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `optipng::ioutil::stat` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:426:8
    |
426 |     if stat(src_path, &mut sbuf) != 0 as libc::c_int {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/optipng/ioutil.rs:404:1
    |
404 | / pub unsafe extern "C" fn opng_os_copy_file_attr(
405 | |     mut src_path: *const libc::c_char,
406 | |     mut dest_path: *const libc::c_char,
407 | | ) -> libc::c_int {
    | |________________^

error[E0133]: call to unsafe function `optipng::ioutil::chown` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:430:5
    |
430 |     chown(dest_path, sbuf.st_uid, sbuf.st_gid) != 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::ioutil::chmod` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:431:8
    |
431 |     if chmod(dest_path, sbuf.st_mode) != 0 as libc::c_int {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::ioutil::utimensat` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:437:8
    |
437 |       if utimensat(
    |  ________^
438 | |         -(100 as libc::c_int),
439 | |         dest_path,
440 | |         times.as_mut_ptr() as *const timespec,
441 | |         0 as libc::c_int,
442 | |     ) != 0 as libc::c_int
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/optipng/ioutil.rs:405:5
    |
405 |     mut src_path: *const libc::c_char,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ioutil.rs:406:5
    |
406 |     mut dest_path: *const libc::c_char,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `faccess` is never read
   --> src/optipng/ioutil.rs:453:13
    |
453 |     let mut faccess: libc::c_int = 0;
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `freg` is never read
   --> src/optipng/ioutil.rs:454:13
    |
454 |     let mut freg: libc::c_int = 0;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `optipng::ioutil::strchr` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:457:9
    |
457 |     if !(strchr(mode, 'f' as i32)).is_null() {
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/optipng/ioutil.rs:449:1
    |
449 | / pub unsafe extern "C" fn opng_os_test_file_access(
450 | |     mut path: *const libc::c_char,
451 | |     mut mode: *const libc::c_char,
452 | | ) -> libc::c_int {
    | |________________^

error[E0133]: call to unsafe function `optipng::ioutil::strchr` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:460:9
    |
460 |     if !(strchr(mode, 'r' as i32)).is_null() {
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::ioutil::strchr` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:463:9
    |
463 |     if !(strchr(mode, 'w' as i32)).is_null() {
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::ioutil::strchr` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:466:9
    |
466 |     if !(strchr(mode, 'x' as i32)).is_null() {
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::ioutil::strchr` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:470:12
    |
470 |         if (strchr(mode, 'e' as i32)).is_null() {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::ioutil::stat` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:491:8
    |
491 |     if stat(path, &mut sbuf) != 0 as libc::c_int {
    |        ^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::ioutil::access` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:503:12
    |
503 |     return access(path, faccess);
    |            ^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/optipng/ioutil.rs:450:5
    |
450 |     mut path: *const libc::c_char,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ioutil.rs:451:5
    |
451 |     mut mode: *const libc::c_char,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

error[E0133]: call to unsafe function `optipng::ioutil::stat` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:544:8
    |
544 |     if stat(path1, &mut sbuf1) != 0 as libc::c_int
    |        ^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/optipng/ioutil.rs:506:1
    |
506 | / pub unsafe extern "C" fn opng_os_test_file_equiv(
507 | |     mut path1: *const libc::c_char,
508 | |     mut path2: *const libc::c_char,
509 | | ) -> libc::c_int {
    | |________________^

error[E0133]: call to unsafe function `optipng::ioutil::stat` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:545:12
    |
545 |         || stat(path2, &mut sbuf2) != 0 as libc::c_int
    |            ^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/optipng/ioutil.rs:507:5
    |
507 |     mut path1: *const libc::c_char,
    |     ----^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ioutil.rs:508:5
    |
508 |     mut path2: *const libc::c_char,
    |     ----^^^^^
    |     |
    |     help: remove this `mut`

error[E0133]: call to unsafe function `optipng::ioutil::unlink` is unsafe and requires unsafe block
   --> src/optipng/ioutil.rs:561:12
    |
561 |     return unlink(path);
    |            ^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/optipng/ioutil.rs:560:1
    |
560 | pub unsafe extern "C" fn opng_os_unlink(mut path: *const libc::c_char) -> libc::c_int {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: variable does not need to be mutable
   --> src/optipng/ioutil.rs:560:41
    |
560 | pub unsafe extern "C" fn opng_os_unlink(mut path: *const libc::c_char) -> libc::c_int {
    |                                         ----^^^^
    |                                         |
    |                                         help: remove this `mut`

error[E0133]: call to unsafe function `optipng::optim::memset` is unsafe and requires unsafe block
   --> src/optipng/optim.rs:223:5
    |
223 | /     memset(
224 | |         &mut s_image as *mut opng_image_struct as *mut libc::c_void,
225 | |         0 as libc::c_int,
226 | |         ::core::mem::size_of::<opng_image_struct>() as libc::c_ulong,
227 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/optipng/optim.rs:222:1
    |
222 | unsafe extern "C" fn opng_clear_image_info() {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:224:14
    |
224 |         &mut s_image as *mut opng_image_struct as *mut libc::c_void,
    |              ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:234:5
    |
234 |     usr_printf = (*init_ui).printf_fn;
    |     ^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/optipng/optim.rs:230:1
    |
230 | / pub unsafe extern "C" fn opng_initialize(
231 | |     mut init_options: *const opng_options,
232 | |     mut init_ui: *const opng_ui,
233 | | ) -> libc::c_int {
    | |________________^

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optim.rs:234:18
    |
234 |     usr_printf = (*init_ui).printf_fn;
    |                  ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:235:5
    |
235 |     usr_print_cntrl = (*init_ui).print_cntrl_fn;
    |     ^^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optim.rs:235:23
    |
235 |     usr_print_cntrl = (*init_ui).print_cntrl_fn;
    |                       ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:236:5
    |
236 |     usr_progress = (*init_ui).progress_fn;
    |     ^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optim.rs:236:20
    |
236 |     usr_progress = (*init_ui).progress_fn;
    |                    ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:237:5
    |
237 |     usr_panic = (*init_ui).panic_fn;
    |     ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optim.rs:237:17
    |
237 |     usr_panic = (*init_ui).panic_fn;
    |                 ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:238:8
    |
238 |     if usr_printf.is_none() || usr_print_cntrl.is_none() || usr_progress.is_none()
    |        ^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:238:32
    |
238 |     if usr_printf.is_none() || usr_print_cntrl.is_none() || usr_progress.is_none()
    |                                ^^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:238:61
    |
238 |     if usr_printf.is_none() || usr_print_cntrl.is_none() || usr_progress.is_none()
    |                                                             ^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:239:12
    |
239 |         || usr_panic.is_none()
    |            ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:243:5
    |
243 |     s_options = *init_options;
    |     ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optim.rs:243:17
    |
243 |     s_options = *init_options;
    |                 ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:244:8
    |
244 |     if s_options.optim_level == 0 as libc::c_int {
    |        ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:245:9
    |
245 |         s_options.np = 1 as libc::c_int;
    |         ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:246:9
    |
246 |         s_options.nc = s_options.np;
    |         ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:246:24
    |
246 |         s_options.nc = s_options.np;
    |                        ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:247:9
    |
247 |         s_options.nb = s_options.nc;
    |         ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:247:24
    |
247 |         s_options.nb = s_options.nc;
    |                        ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:248:9
    |
248 |         s_options.nz = 1 as libc::c_int;
    |         ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optim::memset` is unsafe and requires unsafe block
   --> src/optipng/optim.rs:250:5
    |
250 | /     memset(
251 | |         &mut s_summary as *mut opng_summary_struct as *mut libc::c_void,
252 | |         0 as libc::c_int,
253 | |         ::core::mem::size_of::<opng_summary_struct>() as libc::c_ulong,
254 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:251:14
    |
251 |         &mut s_summary as *mut opng_summary_struct as *mut libc::c_void,
    |              ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:255:5
    |
255 |     s_engine.started = 1 as libc::c_int;
    |     ^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error: variable does not need to be mutable
   --> src/optipng/optim.rs:231:5
    |
231 |     mut init_options: *const opng_options,
    |     ----^^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/optim.rs:232:5
    |
232 |     mut init_ui: *const opng_ui,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error: unused variable: `status`
   --> src/optipng/optim.rs:262:13
    |
262 |     let mut status: opng_status_t = OPNG_STATUS_OK;
    |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_status`

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:264:8
    |
264 |     if s_engine.started == 0 {
    |        ^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/optipng/optim.rs:259:1
    |
259 | / pub unsafe extern "C" fn opng_optimize(
260 | |     mut infile_name: *const libc::c_char,
261 | | ) -> libc::c_int {
    | |________________^

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/optipng/optim.rs:265:9
    |
265 | /         usr_panic
266 | |             .expect(
267 | |                 "non-null function pointer",
268 | |             )(
269 | |             b"The OptiPNG engine is not running\0" as *const u8 as *const libc::c_char,
270 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:265:9
    |
265 |         usr_panic
    |         ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/optipng/optim.rs:272:5
    |
272 | /     usr_printf
273 | |         .expect(
274 | |             "non-null function pointer",
275 | |         )(b"** Processing: %s\n\0" as *const u8 as *const libc::c_char, infile_name);
    | |____________________________________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:272:5
    |
272 |     usr_printf
    |     ^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:276:5
    |
276 |     s_summary.file_count = (s_summary.file_count).wrapping_add(1);
    |     ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:276:29
    |
276 |     s_summary.file_count = (s_summary.file_count).wrapping_add(1);
    |                             ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:277:5
    |
277 |     s_summary.file_count;
    |     ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optim::opng_clear_image_info` is unsafe and requires unsafe block
   --> src/optipng/optim.rs:278:5
    |
278 |     opng_clear_image_info();
    |     ^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/optipng/optim.rs:279:5
    |
279 | /     usr_printf
280 | |         .expect(
281 | |             "non-null function pointer",
282 | |         )(b"\n\0" as *const u8 as *const libc::c_char);
    | |______________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:279:5
    |
279 |     usr_printf
    |     ^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error: variable does not need to be mutable
   --> src/optipng/optim.rs:260:5
    |
260 |     mut infile_name: *const libc::c_char,
    |     ----^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/optim.rs:262:9
    |
262 |     let mut status: opng_status_t = OPNG_STATUS_OK;
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/optim.rs:263:9
    |
263 |     let mut result: libc::c_int = 0;
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:287:8
    |
287 |     if s_options.verbose != 0 || s_summary.snip_count > 0 as libc::c_int as libc::c_uint
    |        ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/optipng/optim.rs:286:1
    |
286 | pub unsafe extern "C" fn opng_finalize() -> libc::c_int {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:287:34
    |
287 |     if s_options.verbose != 0 || s_summary.snip_count > 0 as libc::c_int as libc::c_uint
    |                                  ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:288:12
    |
288 |         || s_summary.err_count > 0 as libc::c_int as libc::c_uint
    |            ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/optipng/optim.rs:290:9
    |
290 | /         usr_printf
291 | |             .expect(
292 | |                 "non-null function pointer",
293 | |             )(b"** Status report\n\0" as *const u8 as *const libc::c_char);
    | |__________________________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:290:9
    |
290 |         usr_printf
    |         ^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/optipng/optim.rs:294:9
    |
294 | /         usr_printf
295 | |             .expect(
296 | |                 "non-null function pointer",
297 | |             )(
298 | |             b"%u file(s) have been processed.\n\0" as *const u8 as *const libc::c_char,
299 | |             s_summary.file_count,
300 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:294:9
    |
294 |         usr_printf
    |         ^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:299:13
    |
299 |             s_summary.file_count,
    |             ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:301:12
    |
301 |         if s_summary.snip_count > 0 as libc::c_int as libc::c_uint {
    |            ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/optipng/optim.rs:302:13
    |
302 | /             usr_printf
303 | |                 .expect(
304 | |                     "non-null function pointer",
305 | |                 )(
...   |
308 | |                 s_summary.snip_count,
309 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:302:13
    |
302 |             usr_printf
    |             ^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:308:17
    |
308 |                 s_summary.snip_count,
    |                 ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:311:12
    |
311 |         if s_summary.err_count > 0 as libc::c_int as libc::c_uint {
    |            ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/optipng/optim.rs:312:13
    |
312 | /             usr_printf
313 | |                 .expect(
314 | |                     "non-null function pointer",
315 | |                 )(
...   |
318 | |                 s_summary.err_count,
319 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:312:13
    |
312 |             usr_printf
    |             ^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:318:17
    |
318 |                 s_summary.err_count,
    |                 ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:320:16
    |
320 |             if s_summary.fix_count > 0 as libc::c_int as libc::c_uint {
    |                ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/optipng/optim.rs:321:17
    |
321 | /                 usr_printf
322 | |                     .expect(
323 | |                         "non-null function pointer",
324 | |                     )(
...   |
327 | |                     s_summary.fix_count,
328 | |                 );
    | |_________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:321:17
    |
321 |                 usr_printf
    |                 ^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:327:21
    |
327 |                     s_summary.fix_count,
    |                     ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optim.rs:332:5
    |
332 |     s_engine.started = 0 as libc::c_int;
    |     ^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::fprintf` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:228:5
    |
228 |     fprintf(stderr, b"** Error: \0" as *const u8 as *const libc::c_char);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/optipng/optipng.rs:226:1
    |
226 | unsafe extern "C" fn error(mut fmt: *const libc::c_char, mut args: ...) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:228:13
    |
228 |     fprintf(stderr, b"** Error: \0" as *const u8 as *const libc::c_char);
    |             ^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::vfprintf` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:230:5
    |
230 |     vfprintf(stderr, fmt, arg_ptr.as_va_list());
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:230:14
    |
230 |     vfprintf(stderr, fmt, arg_ptr.as_va_list());
    |              ^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::fprintf` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:231:5
    |
231 |     fprintf(stderr, b"\n\0" as *const u8 as *const libc::c_char);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:231:13
    |
231 |     fprintf(stderr, b"\n\0" as *const u8 as *const libc::c_char);
    |             ^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::exit` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:232:5
    |
232 |     exit(1 as libc::c_int);
    |     ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/optipng/optipng.rs:226:28
    |
226 | unsafe extern "C" fn error(mut fmt: *const libc::c_char, mut args: ...) {
    |                            ----^^^
    |                            |
    |                            help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/optipng.rs:226:58
    |
226 | unsafe extern "C" fn error(mut fmt: *const libc::c_char, mut args: ...) {
    |                                                          ----^^^^
    |                                                          |
    |                                                          help: remove this `mut`

error[E0133]: call to unsafe function `optipng::optipng::fprintf` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:235:5
    |
235 | /     fprintf(
236 | |         stderr,
237 | |         b"\n** INTERNAL ERROR: %s\n\0" as *const u8 as *const libc::c_char,
238 | |         msg,
239 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/optipng/optipng.rs:234:1
    |
234 | unsafe extern "C" fn panic(mut msg: *const libc::c_char) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:236:9
    |
236 |         stderr,
    |         ^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::fprintf` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:240:5
    |
240 | /     fprintf(
241 | |         stderr,
242 | |         b"Please submit a defect report.\nhttp://optipng.sourceforge.net/\n\n\0"
243 | |             as *const u8 as *const libc::c_char,
244 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:241:9
    |
241 |         stderr,
    |         ^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::fflush` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:245:5
    |
245 |     fflush(stderr);
    |     ^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:245:12
    |
245 |     fflush(stderr);
    |            ^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:246:8
    |
246 |     if options.debug != 0 {
    |        ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::abort` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:247:9
    |
247 |         abort();
    |         ^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::fprintf` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:249:9
    |
249 | /         fprintf(
250 | |             stderr,
251 | |             b"The execution of this program has been terminated abnormally.\n\0"
252 | |                 as *const u8 as *const libc::c_char,
253 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:250:13
    |
250 |             stderr,
    |             ^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::exit` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:254:9
    |
254 |         exit(70 as libc::c_int);
    |         ^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/optipng/optipng.rs:234:28
    |
234 | unsafe extern "C" fn panic(mut msg: *const libc::c_char) {
    |                            ----^^^
    |                            |
    |                            help: remove this `mut`

error: value assigned to `ch1` is never read
   --> src/optipng/optipng.rs:261:13
    |
261 |     let mut ch1: libc::c_int = 0;
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `ch2` is never read
   --> src/optipng/optipng.rs:262:13
    |
262 |     let mut ch2: libc::c_int = 0;
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:265:16
    |
265 |         str1 = str1.offset(1);
    |                ^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/optipng/optipng.rs:257:1
    |
257 | / unsafe extern "C" fn opng_strcasecmp(
258 | |     mut str1: *const libc::c_char,
259 | |     mut str2: *const libc::c_char,
260 | | ) -> libc::c_int {
    | |________________^

error[E0133]: call to unsafe function `optipng::optipng::tolower` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:266:15
    |
266 |         ch1 = tolower(*fresh0 as libc::c_int);
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:266:23
    |
266 |         ch1 = tolower(*fresh0 as libc::c_int);
    |                       ^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:268:16
    |
268 |         str2 = str2.offset(1);
    |                ^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::tolower` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:269:15
    |
269 |         ch2 = tolower(*fresh1 as libc::c_int);
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:269:23
    |
269 |         ch2 = tolower(*fresh1 as libc::c_int);
    |                       ^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:279:11
    |
279 |     while *(*__ctype_b_loc()).offset(*str as libc::c_int as isize) as libc::c_int
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/optipng/optipng.rs:278:1
    |
278 | unsafe extern "C" fn opng_strltrim(mut str: *const libc::c_char) -> *mut libc::c_char {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:279:12
    |
279 |     while *(*__ctype_b_loc()).offset(*str as libc::c_int as isize) as libc::c_int
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:279:12
    |
279 |     while *(*__ctype_b_loc()).offset(*str as libc::c_int as isize) as libc::c_int
    |            ^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::__ctype_b_loc` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:279:14
    |
279 |     while *(*__ctype_b_loc()).offset(*str as libc::c_int as isize) as libc::c_int
    |              ^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:279:38
    |
279 |     while *(*__ctype_b_loc()).offset(*str as libc::c_int as isize) as libc::c_int
    |                                      ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:282:15
    |
282 |         str = str.offset(1);
    |               ^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: value assigned to `len` is never read
   --> src/optipng/optipng.rs:291:13
    |
291 |     let mut len: size_t = 0;
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `optipng::optipng::strlen` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:292:11
    |
292 |     len = strlen(str);
    |           ^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/optipng/optipng.rs:287:1
    |
287 | / unsafe extern "C" fn opng_strtail(
288 | |     mut str: *const libc::c_char,
289 | |     mut num: size_t,
290 | | ) -> *mut libc::c_char {
    | |______________________^

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:296:12
    |
296 |     return (str as *mut libc::c_char).offset(len as isize).offset(-(num as isize));
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:296:12
    |
296 |     return (str as *mut libc::c_char).offset(len as isize).offset(-(num as isize));
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/optipng/optipng.rs:288:5
    |
288 |     mut str: *const libc::c_char,
    |     ----^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/optipng.rs:289:5
    |
289 |     mut num: size_t,
    |     ----^^^
    |     |
    |     help: remove this `mut`

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:302:12
    |
302 |         if *str as libc::c_int == '\0' as i32 {
    |            ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/optipng/optipng.rs:298:1
    |
298 | / unsafe extern "C" fn opng_strpbrk_digit(
299 | |     mut str: *const libc::c_char,
300 | | ) -> *mut libc::c_char {
    | |______________________^

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:305:12
    |
305 |         if *(*__ctype_b_loc()).offset(*str as libc::c_int as isize) as libc::c_int
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:305:13
    |
305 |         if *(*__ctype_b_loc()).offset(*str as libc::c_int as isize) as libc::c_int
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:305:13
    |
305 |         if *(*__ctype_b_loc()).offset(*str as libc::c_int as isize) as libc::c_int
    |             ^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::__ctype_b_loc` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:305:15
    |
305 |         if *(*__ctype_b_loc()).offset(*str as libc::c_int as isize) as libc::c_int
    |               ^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:305:39
    |
305 |         if *(*__ctype_b_loc()).offset(*str as libc::c_int as isize) as libc::c_int
    |                                       ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:310:15
    |
310 |         str = str.offset(1);
    |               ^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: value assigned to `begin_ptr` is never read
   --> src/optipng/optipng.rs:319:13
    |
319 |     let mut begin_ptr: *const libc::c_char = 0 as *const libc::c_char;
    |             ^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `end_ptr` is never read
   --> src/optipng/optipng.rs:320:13
    |
320 |     let mut end_ptr: *mut libc::c_char = 0 as *mut libc::c_char;
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `multiplier` is never read
   --> src/optipng/optipng.rs:321:13
    |
321 |     let mut multiplier: libc::c_ulong = 0;
    |             ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `optipng::optipng::opng_strltrim` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:322:15
    |
322 |     end_ptr = opng_strltrim(in_str);
    |               ^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/optipng/optipng.rs:314:1
    |
314 | / unsafe extern "C" fn opng_str2ulong(
315 | |     mut out_val: *mut libc::c_ulong,
316 | |     mut in_str: *const libc::c_char,
317 | |     mut allow_multiplier: libc::c_int,
318 | | ) -> libc::c_int {
    | |________________^

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:324:8
    |
324 |     if *begin_ptr as libc::c_int >= '0' as i32 && *begin_ptr as libc::c_int <= '9' as i32
    |        ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:324:51
    |
324 |     if *begin_ptr as libc::c_int >= '0' as i32 && *begin_ptr as libc::c_int <= '9' as i32
    |                                                   ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:326:9
    |
326 |         *out_val = strtoul(begin_ptr, &mut end_ptr, 10 as libc::c_int);
    |         ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strtoul` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:326:20
    |
326 |         *out_val = strtoul(begin_ptr, &mut end_ptr, 10 as libc::c_int);
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:329:9
    |
329 |         *__errno_location() = 22 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::__errno_location` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:329:10
    |
329 |         *__errno_location() = 22 as libc::c_int;
    |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:330:9
    |
330 |         *out_val = 0 as libc::c_int as libc::c_ulong;
    |         ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:334:12
    |
334 |         if *end_ptr as libc::c_int == 'k' as i32 || *end_ptr as libc::c_int == 'K' as i32
    |            ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:334:53
    |
334 |         if *end_ptr as libc::c_int == 'k' as i32 || *end_ptr as libc::c_int == 'K' as i32
    |                                                     ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:336:23
    |
336 |             end_ptr = end_ptr.offset(1);
    |                       ^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:339:19
    |
339 |         } else if *end_ptr as libc::c_int == 'M' as i32 {
    |                   ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:340:23
    |
340 |             end_ptr = end_ptr.offset(1);
    |                       ^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:343:19
    |
343 |         } else if *end_ptr as libc::c_int == 'G' as i32 {
    |                   ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:344:23
    |
344 |             end_ptr = end_ptr.offset(1);
    |                       ^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:353:16
    |
353 |             if *out_val
    |                ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:359:17
    |
359 |                 *__errno_location() = 34 as libc::c_int;
    |                 ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::__errno_location` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:359:18
    |
359 |                 *__errno_location() = 34 as libc::c_int;
    |                  ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:360:17
    |
360 |                 *out_val = (9223372036854775807 as libc::c_long as libc::c_ulong)
    |                 ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:364:17
    |
364 |                 *out_val = (*out_val).wrapping_mul(multiplier);
    |                 ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:364:28
    |
364 |                 *out_val = (*out_val).wrapping_mul(multiplier);
    |                            ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:368:8
    |
368 |     if *opng_strltrim(end_ptr) as libc::c_int != '\0' as i32 {
    |        ^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::opng_strltrim` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:368:9
    |
368 |     if *opng_strltrim(end_ptr) as libc::c_int != '\0' as i32 {
    |         ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:369:9
    |
369 |         *__errno_location() = 22 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::__errno_location` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:369:10
    |
369 |         *__errno_location() = 22 as libc::c_int;
    |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/optipng/optipng.rs:315:5
    |
315 |     mut out_val: *mut libc::c_ulong,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/optipng.rs:316:5
    |
316 |     mut in_str: *const libc::c_char,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/optipng.rs:317:5
    |
317 |     mut allow_multiplier: libc::c_int,
    |     ----^^^^^^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:378:29
    |
378 |     if opt_arg.is_null() || *opng_strltrim(opt_arg) as libc::c_int == '\0' as i32 {
    |                             ^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/optipng/optipng.rs:374:1
    |
374 | / unsafe extern "C" fn err_option_arg(
375 | |     mut opt: *const libc::c_char,
376 | |     mut opt_arg: *const libc::c_char,
377 | | ) {
    | |_^

error[E0133]: call to unsafe function `optipng::optipng::opng_strltrim` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:378:30
    |
378 |     if opt_arg.is_null() || *opng_strltrim(opt_arg) as libc::c_int == '\0' as i32 {
    |                              ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::error` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:379:9
    |
379 | /         error(
380 | |             b"Missing argument for option %s\0" as *const u8 as *const libc::c_char,
381 | |             opt,
382 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::error` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:384:9
    |
384 | /         error(
385 | |             b"Invalid argument for option %s: %s\0" as *const u8 as *const libc::c_char,
386 | |             opt,
387 | |             opt_arg,
388 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/optipng/optipng.rs:375:5
    |
375 |     mut opt: *const libc::c_char,
    |     ----^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/optipng.rs:376:5
    |
376 |     mut opt_arg: *const libc::c_char,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error[E0133]: call to unsafe function `optipng::optipng::opng_str2ulong` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:398:8
    |
398 |     if opng_str2ulong(&mut value, opt_arg, 0 as libc::c_int) != 0 as libc::c_int
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/optipng/optipng.rs:391:1
    |
391 | / unsafe extern "C" fn check_num_option(
392 | |     mut opt: *const libc::c_char,
393 | |     mut opt_arg: *const libc::c_char,
394 | |     mut lowest: libc::c_int,
395 | |     mut highest: libc::c_int,
396 | | ) -> libc::c_int {
    | |________________^

error[E0133]: call to unsafe function `optipng::optipng::err_option_arg` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:402:9
    |
402 |         err_option_arg(opt, opt_arg);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/optipng/optipng.rs:392:5
    |
392 |     mut opt: *const libc::c_char,
    |     ----^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/optipng.rs:393:5
    |
393 |     mut opt_arg: *const libc::c_char,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/optipng.rs:394:5
    |
394 |     mut lowest: libc::c_int,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/optipng.rs:395:5
    |
395 |     mut highest: libc::c_int,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `result` is never read
   --> src/optipng/optipng.rs:413:13
    |
413 |     let mut result: libc::c_int = 0;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `optipng::optipng::opng_str2ulong` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:414:8
    |
414 |     if opng_str2ulong(&mut value, opt_arg, 1 as libc::c_int) == 0 as libc::c_int {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/optipng/optipng.rs:406:1
    |
406 | / unsafe extern "C" fn check_power2_option(
407 | |     mut opt: *const libc::c_char,
408 | |     mut opt_arg: *const libc::c_char,
409 | |     mut lowest: libc::c_int,
410 | |     mut highest: libc::c_int,
411 | | ) -> libc::c_int {
    | |________________^

error[E0133]: call to unsafe function `optipng::optipng::err_option_arg` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:436:5
    |
436 |     err_option_arg(opt, opt_arg);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/optipng/optipng.rs:407:5
    |
407 |     mut opt: *const libc::c_char,
    |     ----^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/optipng.rs:408:5
    |
408 |     mut opt_arg: *const libc::c_char,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error[E0133]: call to unsafe function `optipng::optipng::opng_strparse_rangeset_to_bitset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:445:8
    |
445 |     if opng_strparse_rangeset_to_bitset(&mut result, opt_arg, result_mask)
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/optipng/optipng.rs:439:1
    |
439 | / unsafe extern "C" fn check_rangeset_option(
440 | |     mut opt: *const libc::c_char,
441 | |     mut opt_arg: *const libc::c_char,
442 | |     mut result_mask: opng_bitset_t,
443 | | ) -> opng_bitset_t {
    | |__________________^

error[E0133]: call to unsafe function `optipng::optipng::err_option_arg` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:454:9
    |
454 |         err_option_arg(opt, opt_arg);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/optipng/optipng.rs:440:5
    |
440 |     mut opt: *const libc::c_char,
    |     ----^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/optipng.rs:441:5
    |
441 |     mut opt_arg: *const libc::c_char,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/optipng.rs:442:5
    |
442 |     mut result_mask: opng_bitset_t,
    |     ----^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `i` is never read
   --> src/optipng/optipng.rs:462:13
    |
462 |     let mut i: libc::c_uint = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `optipng::optipng::strcmp` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:463:8
    |
463 |     if strcmp(b"all\0" as *const u8 as *const libc::c_char, opt_arg) == 0 as libc::c_int
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/optipng/optipng.rs:458:1
    |
458 | / unsafe extern "C" fn check_obj_option(
459 | |     mut opt: *const libc::c_char,
460 | |     mut opt_arg: *const libc::c_char,
461 | | ) {
    | |_^

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:469:14
    |
469 |         if !(*opt_arg.offset(i as isize) as libc::c_int >= 'A' as i32
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:469:15
    |
469 |         if !(*opt_arg.offset(i as isize) as libc::c_int >= 'A' as i32
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:470:16
    |
470 |             && *opt_arg.offset(i as isize) as libc::c_int <= 'Z' as i32
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:470:17
    |
470 |             && *opt_arg.offset(i as isize) as libc::c_int <= 'Z' as i32
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:471:16
    |
471 |             || *opt_arg.offset(i as isize) as libc::c_int >= 'a' as i32
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:471:17
    |
471 |             || *opt_arg.offset(i as isize) as libc::c_int >= 'a' as i32
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:472:20
    |
472 |                 && *opt_arg.offset(i as isize) as libc::c_int <= 'z' as i32)
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:472:21
    |
472 |                 && *opt_arg.offset(i as isize) as libc::c_int <= 'z' as i32)
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:480:12
    |
480 |         && *opt_arg.offset(i as isize) as libc::c_int == '\0' as i32
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:480:13
    |
480 |         && *opt_arg.offset(i as isize) as libc::c_int == '\0' as i32
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::error` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:482:9
    |
482 | /         error(
483 | |             b"Manipulation of individual chunks is not implemented\0" as *const u8
484 | |                 as *const libc::c_char,
485 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::err_option_arg` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:487:9
    |
487 |         err_option_arg(opt, opt_arg);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/optipng/optipng.rs:459:5
    |
459 |     mut opt: *const libc::c_char,
    |     ----^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/optipng.rs:460:5
    |
460 |     mut opt_arg: *const libc::c_char,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `ptr` is never read
   --> src/optipng/optipng.rs:496:13
    |
496 |     let mut ptr: *const libc::c_char = 0 as *const libc::c_char;
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `opt_len` is never read
   --> src/optipng/optipng.rs:497:13
    |
497 |     let mut opt_len: libc::c_uint = 0;
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:498:8
    |
498 |     if *str.offset(0 as libc::c_int as isize) as libc::c_int != '-' as i32
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/optipng/optipng.rs:490:1
    |
490 | / unsafe extern "C" fn scan_option(
491 | |     mut str: *const libc::c_char,
492 | |     mut opt_buf: *mut libc::c_char,
493 | |     mut opt_buf_size: size_t,
494 | |     mut opt_arg_ptr: *mut *const libc::c_char,
495 | | ) -> libc::c_int {
    | |________________^

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:498:9
    |
498 |     if *str.offset(0 as libc::c_int as isize) as libc::c_int != '-' as i32
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:499:12
    |
499 |         || *str.offset(1 as libc::c_int as isize) as libc::c_int == '\0' as i32
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:499:13
    |
499 |         || *str.offset(1 as libc::c_int as isize) as libc::c_int == '\0' as i32
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:504:11
    |
504 |     ptr = str.offset(1 as libc::c_int as isize);
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:505:11
    |
505 |     while *ptr as libc::c_int == '-' as i32 {
    |           ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:506:15
    |
506 |         ptr = ptr.offset(1);
    |               ^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:509:8
    |
509 |     if *ptr as libc::c_int == '\0' as i32 {
    |        ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:510:15
    |
510 |         ptr = ptr.offset(-1);
    |               ^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:515:13
    |
515 | /             *opt_buf
516 | |                 .offset(opt_len as isize) = tolower(*ptr as libc::c_int) as libc::c_char;
    | |_________________________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:515:14
    |
515 |               *opt_buf
    |  ______________^
516 | |                 .offset(opt_len as isize) = tolower(*ptr as libc::c_int) as libc::c_char;
    | |_________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::tolower` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:516:45
    |
516 |                 .offset(opt_len as isize) = tolower(*ptr as libc::c_int) as libc::c_char;
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:516:53
    |
516 |                 .offset(opt_len as isize) = tolower(*ptr as libc::c_int) as libc::c_char;
    |                                                     ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:520:15
    |
520 |         ptr = ptr.offset(1);
    |               ^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:522:12
    |
522 |         if *ptr as libc::c_int == '\0' as i32
    |            ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:523:16
    |
523 |             || *(*__ctype_b_loc()).offset(*ptr as libc::c_int as isize) as libc::c_int
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:523:17
    |
523 |             || *(*__ctype_b_loc()).offset(*ptr as libc::c_int as isize) as libc::c_int
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:523:17
    |
523 |             || *(*__ctype_b_loc()).offset(*ptr as libc::c_int as isize) as libc::c_int
    |                 ^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::__ctype_b_loc` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:523:19
    |
523 |             || *(*__ctype_b_loc()).offset(*ptr as libc::c_int as isize) as libc::c_int
    |                   ^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:523:43
    |
523 |             || *(*__ctype_b_loc()).offset(*ptr as libc::c_int as isize) as libc::c_int
    |                                           ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:526:19
    |
526 |             while *(*__ctype_b_loc()).offset(*ptr as libc::c_int as isize) as libc::c_int
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:526:20
    |
526 |             while *(*__ctype_b_loc()).offset(*ptr as libc::c_int as isize) as libc::c_int
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:526:20
    |
526 |             while *(*__ctype_b_loc()).offset(*ptr as libc::c_int as isize) as libc::c_int
    |                    ^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::__ctype_b_loc` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:526:22
    |
526 |             while *(*__ctype_b_loc()).offset(*ptr as libc::c_int as isize) as libc::c_int
    |                      ^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:526:46
    |
526 |             while *(*__ctype_b_loc()).offset(*ptr as libc::c_int as isize) as libc::c_int
    |                                              ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:529:23
    |
529 |                 ptr = ptr.offset(1);
    |                       ^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:532:13
    |
532 |             *opt_arg_ptr = if *ptr as libc::c_int != '\0' as i32 {
    |             ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:532:31
    |
532 |             *opt_arg_ptr = if *ptr as libc::c_int != '\0' as i32 {
    |                               ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:539:18
    |
539 |             if !(*ptr as libc::c_int == '=' as i32) {
    |                  ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:542:19
    |
542 |             ptr = ptr.offset(1);
    |                   ^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:544:13
    |
544 |             *opt_arg_ptr = ptr;
    |             ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:550:13
    |
550 |             *opt_buf.offset(opt_len as isize) = '\0' as i32 as libc::c_char;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:550:14
    |
550 |             *opt_buf.offset(opt_len as isize) = '\0' as i32 as libc::c_char;
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:552:13
    |
552 | /             *opt_buf
553 | |                 .offset(
554 | |                     opt_buf_size.wrapping_sub(1 as libc::c_int as size_t) as isize,
555 | |                 ) = '\0' as i32 as libc::c_char;
    | |_________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:552:14
    |
552 |               *opt_buf
    |  ______________^
553 | |                 .offset(
554 | |                     opt_buf_size.wrapping_sub(1 as libc::c_int as size_t) as isize,
555 | |                 ) = '\0' as i32 as libc::c_char;
    | |_________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/optipng/optipng.rs:491:5
    |
491 |     mut str: *const libc::c_char,
    |     ----^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/optipng.rs:492:5
    |
492 |     mut opt_buf: *mut libc::c_char,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/optipng.rs:493:5
    |
493 |     mut opt_buf_size: size_t,
    |     ----^^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/optipng.rs:494:5
    |
494 |     mut opt_arg_ptr: *mut *const libc::c_char,
    |     ----^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `arg` is never read
   --> src/optipng/optipng.rs:564:13
    |
564 |     let mut arg: *mut libc::c_char = 0 as *mut libc::c_char;
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `opt_len` is never read
   --> src/optipng/optipng.rs:566:13
    |
566 |     let mut opt_len: size_t = 0;
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `simple_opt` is never read
   --> src/optipng/optipng.rs:568:13
    |
568 |     let mut simple_opt: libc::c_int = 0;
    |             ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `stop_switch` is never read
   --> src/optipng/optipng.rs:569:13
    |
569 |     let mut stop_switch: libc::c_int = 0;
    |             ^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `set` is never read
   --> src/optipng/optipng.rs:570:13
    |
570 |     let mut set: opng_bitset_t = 0;
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `val` is never read
   --> src/optipng/optipng.rs:571:13
    |
571 |     let mut val: libc::c_int = 0;
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `file_count` is never read
   --> src/optipng/optipng.rs:572:13
    |
572 |     let mut file_count: libc::c_uint = 0;
    |             ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `i` is never read
   --> src/optipng/optipng.rs:573:13
    |
573 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `optipng::optipng::memset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:574:5
    |
574 | /     memset(
575 | |         &mut options as *mut opng_options as *mut libc::c_void,
576 | |         0 as libc::c_int,
577 | |         ::core::mem::size_of::<opng_options>() as libc::c_ulong,
578 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/optipng/optipng.rs:560:1
    |
560 | / unsafe extern "C" fn parse_args(
561 | |     mut argc: libc::c_int,
562 | |     mut argv: *mut *mut libc::c_char,
563 | | ) {
    | |_^

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:575:14
    |
575 |         &mut options as *mut opng_options as *mut libc::c_void,
    |              ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:579:5
    |
579 |     options.optim_level = -(1 as libc::c_int);
    |     ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:580:5
    |
580 |     options.interlace = -(1 as libc::c_int);
    |     ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:585:15
    |
585 |         arg = *argv.offset(i as isize);
    |               ^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:585:16
    |
585 |         arg = *argv.offset(i as isize);
    |                ^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::scan_option` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:587:16
    |
587 |               || scan_option(
    |  ________________^
588 | |                 arg,
589 | |                 opt.as_mut_ptr(),
590 | |                 ::core::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong,
591 | |                 &mut xopt,
592 | |             ) < 1 as libc::c_int
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strlen` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:597:23
    |
597 |             opt_len = strlen(opt.as_mut_ptr());
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:598:34
    |
598 |             let ref mut fresh2 = *argv.offset(i as isize);
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:598:35
    |
598 |             let ref mut fresh2 = *argv.offset(i as isize);
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strchr` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:600:17
    |
600 |               if !(strchr(
    |  _________________^
601 | |                 b"fio\0" as *const u8 as *const libc::c_char,
602 | |                 opt[0 as libc::c_int as usize] as libc::c_int,
603 | |             ))
    | |______________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:605:20
    |
605 |                   && *(*__ctype_b_loc())
    |  ____________________^
606 | |                     .offset(opt[1 as libc::c_int as usize] as libc::c_int as isize)
    | |___________________________________________________________________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:605:21
    |
605 |                   && *(*__ctype_b_loc())
    |  _____________________^
606 | |                     .offset(opt[1 as libc::c_int as usize] as libc::c_int as isize)
    | |___________________________________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:605:21
    |
605 |                 && *(*__ctype_b_loc())
    |                     ^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::__ctype_b_loc` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:605:23
    |
605 |                 && *(*__ctype_b_loc())
    |                       ^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:610:24
    |
610 |                       && *(*__ctype_b_loc())
    |  ________________________^
611 | |                         .offset(opt[1 as libc::c_int as usize] as libc::c_int as isize)
    | |_______________________________________________________________________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:610:25
    |
610 |                       && *(*__ctype_b_loc())
    |  _________________________^
611 | |                         .offset(opt[1 as libc::c_int as usize] as libc::c_int as isize)
    | |_______________________________________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:610:25
    |
610 |                     && *(*__ctype_b_loc())
    |                         ^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::__ctype_b_loc` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:610:27
    |
610 |                     && *(*__ctype_b_loc())
    |                           ^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:614:24
    |
614 |                       && *(*__ctype_b_loc())
    |  ________________________^
615 | |                         .offset(opt[2 as libc::c_int as usize] as libc::c_int as isize)
    | |_______________________________________________________________________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:614:25
    |
614 |                       && *(*__ctype_b_loc())
    |  _________________________^
615 | |                         .offset(opt[2 as libc::c_int as usize] as libc::c_int as isize)
    | |_______________________________________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:614:25
    |
614 |                     && *(*__ctype_b_loc())
    |                         ^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::__ctype_b_loc` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:614:27
    |
614 |                     && *(*__ctype_b_loc())
    |                           ^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset_from` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:619:27
    |
619 |                   opt_len = (opng_strpbrk_digit(opt.as_mut_ptr()))
    |  ___________________________^
620 | |                     .offset_from(opt.as_mut_ptr()) as libc::c_long as size_t;
    | |__________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::opng_strpbrk_digit` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:619:27
    |
619 |                 opt_len = (opng_strpbrk_digit(opt.as_mut_ptr()))
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::opng_strpbrk_digit` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:622:24
    |
622 |                 xopt = opng_strpbrk_digit(arg);
    |                        ^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strcmp` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:625:16
    |
625 |             if strcmp(b"-\0" as *const u8 as *const libc::c_char, opt.as_mut_ptr())
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strcmp` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:629:23
    |
629 |               } else if strcmp(
    |  _______________________^
630 | |                 b"?\0" as *const u8 as *const libc::c_char,
631 | |                 opt.as_mut_ptr(),
632 | |             ) == 0 as libc::c_int
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strncmp` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:633:20
    |
633 |                   || strncmp(
    |  ____________________^
634 | |                     b"help\0" as *const u8 as *const libc::c_char,
635 | |                     opt.as_mut_ptr(),
636 | |                     opt_len,
637 | |                 ) == 0 as libc::c_int
    | |_________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:639:17
    |
639 |                 local_options.help = 1 as libc::c_int;
    |                 ^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strncmp` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:640:23
    |
640 |               } else if strncmp(
    |  _______________________^
641 | |                 b"backup\0" as *const u8 as *const libc::c_char,
642 | |                 opt.as_mut_ptr(),
643 | |                 opt_len,
644 | |             ) == 0 as libc::c_int
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strncmp` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:645:20
    |
645 |                   || strncmp(
    |  ____________________^
646 | |                     b"keep\0" as *const u8 as *const libc::c_char,
647 | |                     opt.as_mut_ptr(),
648 | |                     opt_len,
649 | |                 ) == 0 as libc::c_int
    | |_________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:651:17
    |
651 |                 options.backup = 1 as libc::c_int;
    |                 ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strncmp` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:652:23
    |
652 |               } else if strncmp(
    |  _______________________^
653 | |                 b"clobber\0" as *const u8 as *const libc::c_char,
654 | |                 opt.as_mut_ptr(),
655 | |                 opt_len,
656 | |             ) == 0 as libc::c_int
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:658:17
    |
658 |                 options.clobber = 1 as libc::c_int;
    |                 ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strcmp` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:659:23
    |
659 |               } else if strcmp(
    |  _______________________^
660 | |                 b"debug\0" as *const u8 as *const libc::c_char,
661 | |                 opt.as_mut_ptr(),
662 | |             ) == 0 as libc::c_int
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:664:17
    |
664 |                 options.debug = 1 as libc::c_int;
    |                 ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strncmp` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:665:23
    |
665 |               } else if strncmp(
    |  _______________________^
666 | |                 b"fix\0" as *const u8 as *const libc::c_char,
667 | |                 opt.as_mut_ptr(),
668 | |                 opt_len,
669 | |             ) == 0 as libc::c_int && opt_len >= 2 as libc::c_int as size_t
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:671:17
    |
671 |                 options.fix = 1 as libc::c_int;
    |                 ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strncmp` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:672:23
    |
672 |               } else if strncmp(
    |  _______________________^
673 | |                 b"force\0" as *const u8 as *const libc::c_char,
674 | |                 opt.as_mut_ptr(),
675 | |                 opt_len,
676 | |             ) == 0 as libc::c_int && opt_len >= 2 as libc::c_int as size_t
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:678:17
    |
678 |                 options.force = 1 as libc::c_int;
    |                 ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strncmp` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:679:23
    |
679 |               } else if strncmp(
    |  _______________________^
680 | |                 b"full\0" as *const u8 as *const libc::c_char,
681 | |                 opt.as_mut_ptr(),
682 | |                 opt_len,
683 | |             ) == 0 as libc::c_int && opt_len >= 2 as libc::c_int as size_t
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:685:17
    |
685 |                 options.full = 1 as libc::c_int;
    |                 ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strcmp` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:686:23
    |
686 |               } else if strcmp(
    |  _______________________^
687 | |                 b"nb\0" as *const u8 as *const libc::c_char,
688 | |                 opt.as_mut_ptr(),
689 | |             ) == 0 as libc::c_int
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:691:17
    |
691 |                 options.nb = 1 as libc::c_int;
    |                 ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strcmp` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:692:23
    |
692 |               } else if strcmp(
    |  _______________________^
693 | |                 b"nc\0" as *const u8 as *const libc::c_char,
694 | |                 opt.as_mut_ptr(),
695 | |             ) == 0 as libc::c_int
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:697:17
    |
697 |                 options.nc = 1 as libc::c_int;
    |                 ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strcmp` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:698:23
    |
698 |               } else if strcmp(
    |  _______________________^
699 | |                 b"np\0" as *const u8 as *const libc::c_char,
700 | |                 opt.as_mut_ptr(),
701 | |             ) == 0 as libc::c_int
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:703:17
    |
703 |                 options.np = 1 as libc::c_int;
    |                 ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strcmp` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:704:23
    |
704 |               } else if strcmp(
    |  _______________________^
705 | |                 b"nx\0" as *const u8 as *const libc::c_char,
706 | |                 opt.as_mut_ptr(),
707 | |             ) == 0 as libc::c_int
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:709:17
    |
709 |                 options.np = 1 as libc::c_int;
    |                 ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:710:17
    |
710 |                 options.nc = options.np;
    |                 ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:710:30
    |
710 |                 options.nc = options.np;
    |                              ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:711:17
    |
711 |                 options.nb = options.nc;
    |                 ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:711:30
    |
711 |                 options.nb = options.nc;
    |                              ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strcmp` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:712:23
    |
712 |               } else if strcmp(
    |  _______________________^
713 | |                 b"nz\0" as *const u8 as *const libc::c_char,
714 | |                 opt.as_mut_ptr(),
715 | |             ) == 0 as libc::c_int
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:717:17
    |
717 |                 options.nz = 1 as libc::c_int;
    |                 ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strncmp` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:718:23
    |
718 |               } else if strncmp(
    |  _______________________^
719 | |                 b"preserve\0" as *const u8 as *const libc::c_char,
720 | |                 opt.as_mut_ptr(),
721 | |                 opt_len,
722 | |             ) == 0 as libc::c_int
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:724:17
    |
724 |                 options.preserve = 1 as libc::c_int;
    |                 ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strncmp` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:725:23
    |
725 |               } else if strncmp(
    |  _______________________^
726 | |                 b"quiet\0" as *const u8 as *const libc::c_char,
727 | |                 opt.as_mut_ptr(),
728 | |                 opt_len,
729 | |             ) == 0 as libc::c_int
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strncmp` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:730:20
    |
730 |                   || strncmp(
    |  ____________________^
731 | |                     b"silent\0" as *const u8 as *const libc::c_char,
732 | |                     opt.as_mut_ptr(),
733 | |                     opt_len,
734 | |                 ) == 0 as libc::c_int && opt_len >= 3 as libc::c_int as size_t
    | |_________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:736:17
    |
736 |                 options.quiet = 1 as libc::c_int;
    |                 ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strncmp` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:737:23
    |
737 |               } else if strncmp(
    |  _______________________^
738 | |                 b"simulate\0" as *const u8 as *const libc::c_char,
739 | |                 opt.as_mut_ptr(),
740 | |                 opt_len,
741 | |             ) == 0 as libc::c_int && opt_len >= 3 as libc::c_int as size_t
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:743:17
    |
743 |                 options.simulate = 1 as libc::c_int;
    |                 ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strncmp` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:744:23
    |
744 |               } else if strncmp(
    |  _______________________^
745 | |                 b"snip\0" as *const u8 as *const libc::c_char,
746 | |                 opt.as_mut_ptr(),
747 | |                 opt_len,
748 | |             ) == 0 as libc::c_int && opt_len >= 2 as libc::c_int as size_t
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:750:17
    |
750 |                 options.snip = 1 as libc::c_int;
    |                 ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strcmp` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:751:23
    |
751 |               } else if strcmp(
    |  _______________________^
752 | |                 b"v\0" as *const u8 as *const libc::c_char,
753 | |                 opt.as_mut_ptr(),
754 | |             ) == 0 as libc::c_int
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:756:17
    |
756 |                 options.verbose = 1 as libc::c_int;
    |                 ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:757:17
    |
757 |                 local_options.version = 1 as libc::c_int;
    |                 ^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strncmp` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:758:23
    |
758 |               } else if strncmp(
    |  _______________________^
759 | |                 b"verbose\0" as *const u8 as *const libc::c_char,
760 | |                 opt.as_mut_ptr(),
761 | |                 opt_len,
762 | |             ) == 0 as libc::c_int && opt_len >= 4 as libc::c_int as size_t
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:764:17
    |
764 |                 options.verbose = 1 as libc::c_int;
    |                 ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strncmp` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:765:23
    |
765 |               } else if strncmp(
    |  _______________________^
766 | |                 b"version\0" as *const u8 as *const libc::c_char,
767 | |                 opt.as_mut_ptr(),
768 | |                 opt_len,
769 | |             ) == 0 as libc::c_int && opt_len >= 4 as libc::c_int as size_t
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:771:17
    |
771 |                 local_options.version = 1 as libc::c_int;
    |                 ^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:777:32
    |
777 |                         xopt = *argv.offset(i as isize);
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:777:33
    |
777 |                         xopt = *argv.offset(i as isize);
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:778:46
    |
778 |                         let ref mut fresh3 = *argv.offset(i as isize);
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:778:47
    |
778 |                         let ref mut fresh3 = *argv.offset(i as isize);
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::error` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:787:21
    |
787 | /                     error(
788 | |                         b"No argument allowed for option: %s\0" as *const u8
789 | |                             as *const libc::c_char,
790 | |                         arg,
791 | |                     );
    | |_____________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strcmp` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:793:23
    |
793 |               } else if strcmp(
    |  _______________________^
794 | |                 b"o\0" as *const u8 as *const libc::c_char,
795 | |                 opt.as_mut_ptr(),
796 | |             ) == 0 as libc::c_int
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::check_num_option` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:798:23
    |
798 |                   val = check_num_option(
    |  _______________________^
799 | |                     b"-o\0" as *const u8 as *const libc::c_char,
800 | |                     xopt,
801 | |                     0 as libc::c_int,
802 | |                     2147483647 as libc::c_int,
803 | |                 );
    | |_________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:804:20
    |
804 |                 if options.optim_level < 0 as libc::c_int {
    |                    ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:805:21
    |
805 |                     options.optim_level = val;
    |                     ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:806:27
    |
806 |                 } else if options.optim_level != val {
    |                           ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::error` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:807:21
    |
807 | /                     error(
808 | |                         b"Multiple optimization levels are not permitted\0" as *const u8
809 | |                             as *const libc::c_char,
810 | |                     );
    | |_____________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strcmp` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:812:23
    |
812 |               } else if strcmp(
    |  _______________________^
813 | |                 b"i\0" as *const u8 as *const libc::c_char,
814 | |                 opt.as_mut_ptr(),
815 | |             ) == 0 as libc::c_int
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::check_num_option` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:817:23
    |
817 |                   val = check_num_option(
    |  _______________________^
818 | |                     b"-i\0" as *const u8 as *const libc::c_char,
819 | |                     xopt,
820 | |                     0 as libc::c_int,
821 | |                     1 as libc::c_int,
822 | |                 );
    | |_________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:823:20
    |
823 |                 if options.interlace < 0 as libc::c_int {
    |                    ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:824:21
    |
824 |                     options.interlace = val;
    |                     ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:825:27
    |
825 |                 } else if options.interlace != val {
    |                           ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::error` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:826:21
    |
826 | /                     error(
827 | |                         b"Multiple interlace types are not permitted\0" as *const u8
828 | |                             as *const libc::c_char,
829 | |                     );
    | |_____________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strcmp` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:831:23
    |
831 |               } else if strcmp(
    |  _______________________^
832 | |                 b"f\0" as *const u8 as *const libc::c_char,
833 | |                 opt.as_mut_ptr(),
834 | |             ) == 0 as libc::c_int
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::check_rangeset_option` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:836:23
    |
836 |                   set = check_rangeset_option(
    |  _______________________^
837 | |                     b"-f\0" as *const u8 as *const libc::c_char,
838 | |                     xopt,
839 | |                     (((1 as libc::c_int) << 5 as libc::c_int + 1 as libc::c_int)
840 | |                         - ((1 as libc::c_int) << 0 as libc::c_int)) as opng_bitset_t,
841 | |                 );
    | |_________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:842:17
    |
842 |                 options.filter_set |= set;
    |                 ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strcmp` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:843:23
    |
843 |               } else if strcmp(
    |  _______________________^
844 | |                 b"zc\0" as *const u8 as *const libc::c_char,
845 | |                 opt.as_mut_ptr(),
846 | |             ) == 0 as libc::c_int
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::check_rangeset_option` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:848:23
    |
848 |                   set = check_rangeset_option(
    |  _______________________^
849 | |                     b"-zc\0" as *const u8 as *const libc::c_char,
850 | |                     xopt,
851 | |                     (((1 as libc::c_int) << 9 as libc::c_int + 1 as libc::c_int)
852 | |                         - ((1 as libc::c_int) << 1 as libc::c_int)) as opng_bitset_t,
853 | |                 );
    | |_________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:854:17
    |
854 |                 options.compr_level_set |= set;
    |                 ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strcmp` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:855:23
    |
855 |               } else if strcmp(
    |  _______________________^
856 | |                 b"zm\0" as *const u8 as *const libc::c_char,
857 | |                 opt.as_mut_ptr(),
858 | |             ) == 0 as libc::c_int
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::check_rangeset_option` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:860:23
    |
860 |                   set = check_rangeset_option(
    |  _______________________^
861 | |                     b"-zm\0" as *const u8 as *const libc::c_char,
862 | |                     xopt,
863 | |                     (((1 as libc::c_int) << 9 as libc::c_int + 1 as libc::c_int)
864 | |                         - ((1 as libc::c_int) << 1 as libc::c_int)) as opng_bitset_t,
865 | |                 );
    | |_________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:866:17
    |
866 |                 options.mem_level_set |= set;
    |                 ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strcmp` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:867:23
    |
867 |               } else if strcmp(
    |  _______________________^
868 | |                 b"zs\0" as *const u8 as *const libc::c_char,
869 | |                 opt.as_mut_ptr(),
870 | |             ) == 0 as libc::c_int
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::check_rangeset_option` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:872:23
    |
872 |                   set = check_rangeset_option(
    |  _______________________^
873 | |                     b"-zs\0" as *const u8 as *const libc::c_char,
874 | |                     xopt,
875 | |                     (((1 as libc::c_int) << 3 as libc::c_int + 1 as libc::c_int)
876 | |                         - ((1 as libc::c_int) << 0 as libc::c_int)) as opng_bitset_t,
877 | |                 );
    | |_________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:878:17
    |
878 |                 options.strategy_set |= set;
    |                 ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strcmp` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:879:23
    |
879 |               } else if strcmp(
    |  _______________________^
880 | |                 b"zw\0" as *const u8 as *const libc::c_char,
881 | |                 opt.as_mut_ptr(),
882 | |             ) == 0 as libc::c_int
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::check_power2_option` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:884:23
    |
884 |                   val = check_power2_option(
    |  _______________________^
885 | |                     b"-zw\0" as *const u8 as *const libc::c_char,
886 | |                     xopt,
887 | |                     8 as libc::c_int,
888 | |                     15 as libc::c_int,
889 | |                 );
    | |_________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:890:20
    |
890 |                 if options.window_bits == 0 as libc::c_int {
    |                    ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:891:21
    |
891 |                     options.window_bits = val;
    |                     ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:892:27
    |
892 |                 } else if options.window_bits != val {
    |                           ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::error` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:893:21
    |
893 | /                     error(
894 | |                         b"Multiple window sizes are not permitted\0" as *const u8
895 | |                             as *const libc::c_char,
896 | |                     );
    | |_____________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strncmp` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:898:23
    |
898 |               } else if strncmp(
    |  _______________________^
899 | |                 b"strip\0" as *const u8 as *const libc::c_char,
900 | |                 opt.as_mut_ptr(),
901 | |                 opt_len,
902 | |             ) == 0 as libc::c_int && opt_len >= 2 as libc::c_int as size_t
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::check_obj_option` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:904:17
    |
904 |                 check_obj_option(b"-strip\0" as *const u8 as *const libc::c_char, xopt);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:905:17
    |
905 |                 options.strip_all = 1 as libc::c_int;
    |                 ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strncmp` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:906:23
    |
906 |               } else if strncmp(
    |  _______________________^
907 | |                 b"out\0" as *const u8 as *const libc::c_char,
908 | |                 opt.as_mut_ptr(),
909 | |                 opt_len,
910 | |             ) == 0 as libc::c_int && opt_len >= 2 as libc::c_int as size_t
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:912:22
    |
912 |                 if !(options.out_name).is_null() {
    |                      ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::error` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:913:21
    |
913 | /                     error(
914 | |                         b"Multiple output file names are not permitted\0" as *const u8
915 | |                             as *const libc::c_char,
916 | |                     );
    | |_____________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:918:20
    |
918 |                 if *xopt.offset(0 as libc::c_int as isize) as libc::c_int == '\0' as i32
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:918:21
    |
918 |                 if *xopt.offset(0 as libc::c_int as isize) as libc::c_int == '\0' as i32
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::err_option_arg` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:920:21
    |
920 | /                     err_option_arg(
921 | |                         b"-out\0" as *const u8 as *const libc::c_char,
922 | |                         0 as *const libc::c_char,
923 | |                     );
    | |_____________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:925:17
    |
925 |                 options.out_name = xopt;
    |                 ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strncmp` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:926:23
    |
926 |               } else if strncmp(
    |  _______________________^
927 | |                 b"dir\0" as *const u8 as *const libc::c_char,
928 | |                 opt.as_mut_ptr(),
929 | |                 opt_len,
930 | |             ) == 0 as libc::c_int
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:932:22
    |
932 |                 if !(options.dir_name).is_null() {
    |                      ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::error` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:933:21
    |
933 | /                     error(
934 | |                         b"Multiple output dir names are not permitted\0" as *const u8
935 | |                             as *const libc::c_char,
936 | |                     );
    | |_____________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:938:20
    |
938 |                 if *xopt.offset(0 as libc::c_int as isize) as libc::c_int == '\0' as i32
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:938:21
    |
938 |                 if *xopt.offset(0 as libc::c_int as isize) as libc::c_int == '\0' as i32
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::err_option_arg` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:940:21
    |
940 | /                     err_option_arg(
941 | |                         b"-dir\0" as *const u8 as *const libc::c_char,
942 | |                         0 as *const libc::c_char,
943 | |                     );
    | |_____________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:945:17
    |
945 |                 options.dir_name = xopt;
    |                 ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strncmp` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:946:23
    |
946 |               } else if strncmp(
    |  _______________________^
947 | |                 b"log\0" as *const u8 as *const libc::c_char,
948 | |                 opt.as_mut_ptr(),
949 | |                 opt_len,
950 | |             ) == 0 as libc::c_int
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:952:22
    |
952 |                 if !(options.log_name).is_null() {
    |                      ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::error` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:953:21
    |
953 | /                     error(
954 | |                         b"Multiple log file names are not permitted\0" as *const u8
955 | |                             as *const libc::c_char,
956 | |                     );
    | |_____________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:958:20
    |
958 |                 if *xopt.offset(0 as libc::c_int as isize) as libc::c_int == '\0' as i32
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:958:21
    |
958 |                 if *xopt.offset(0 as libc::c_int as isize) as libc::c_int == '\0' as i32
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::err_option_arg` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:960:21
    |
960 | /                     err_option_arg(
961 | |                         b"-log\0" as *const u8 as *const libc::c_char,
962 | |                         0 as *const libc::c_char,
963 | |                     );
    | |_____________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:965:17
    |
965 |                 options.log_name = xopt;
    |                 ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::error` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:967:17
    |
967 | /                 error(
968 | |                     b"Unrecognized option: %s\0" as *const u8 as *const libc::c_char,
969 | |                     arg,
970 | |                 );
    | |_________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:976:10
    |
976 |     if !(options.out_name).is_null() {
    |          ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::error` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:978:13
    |
978 | /             error(
979 | |                 b"The option -out requires one input file\0" as *const u8
980 | |                     as *const libc::c_char,
981 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:983:14
    |
983 |         if !(options.dir_name).is_null() {
    |              ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::error` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:984:13
    |
984 | /             error(
985 | |                 b"The options -out and -dir are mutually exclusive\0" as *const u8
986 | |                     as *const libc::c_char,
987 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:990:10
    |
990 |     if !(options.log_name).is_null() {
    |          ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::opng_strcasecmp` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:991:12
    |
991 |           if opng_strcasecmp(
    |  ____________^
992 | |             b".log\0" as *const u8 as *const libc::c_char,
993 | |             opng_strtail(options.log_name, 4 as libc::c_int as size_t),
994 | |         ) != 0 as libc::c_int
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::opng_strtail` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:993:13
    |
993 |             opng_strtail(options.log_name, 4 as libc::c_int as size_t),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:993:26
    |
993 |             opng_strtail(options.log_name, 4 as libc::c_int as size_t),
    |                          ^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::error` is unsafe and requires unsafe block
   --> src/optipng/optipng.rs:996:13
    |
996 | /             error(
997 | |                 b"To prevent accidental data corruption, the log file name must end with \".log\"\0"
998 | |                     as *const u8 as *const libc::c_char,
999 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1002:8
     |
1002 |     if local_options.help != 0 {
     |        ^^^^^^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1003:9
     |
1003 |         operation = OP_SHOW_HELP;
     |         ^^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1005:9
     |
1005 |         operation = OP_RUN;
     |         ^^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1006:15
     |
1006 |     } else if local_options.version != 0 {
     |               ^^^^^^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1007:9
     |
1007 |         operation = OP_SHOW_VERSION;
     |         ^^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1009:9
     |
1009 |         operation = OP_SHOW_HELP;
     |         ^^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error: variable does not need to be mutable
   --> src/optipng/optipng.rs:561:5
    |
561 |     mut argc: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/optipng.rs:562:5
    |
562 |     mut argv: *mut *mut libc::c_char,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1014:8
     |
1014 |     if *fmt.offset(0 as libc::c_int as isize) as libc::c_int == '\0' as i32 {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/optipng/optipng.rs:1012:1
     |
1012 | unsafe extern "C" fn app_printf(mut fmt: *const libc::c_char, mut args: ...) {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1014:9
     |
1014 |     if *fmt.offset(0 as libc::c_int as isize) as libc::c_int == '\0' as i32 {
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1017:5
     |
1017 |     start_of_line = if *fmt
     |     ^^^^^^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1017:24
     |
1017 |       start_of_line = if *fmt
     |  ________________________^
1018 | |         .offset((strlen(fmt)).wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize)
     | |_______________________________________________________________________________________^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1017:25
     |
1017 |       start_of_line = if *fmt
     |  _________________________^
1018 | |         .offset((strlen(fmt)).wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize)
     | |_______________________________________________________________________________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::strlen` is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1018:17
     |
1018 |         .offset((strlen(fmt)).wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize)
     |                 ^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1025:9
     |
1025 |     if !con_file.is_null() {
     |         ^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::vfprintf` is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1027:9
     |
1027 |         vfprintf(con_file, fmt, arg_ptr.as_va_list());
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1027:18
     |
1027 |         vfprintf(con_file, fmt, arg_ptr.as_va_list());
     |                  ^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1029:9
     |
1029 |     if !log_file.is_null() {
     |         ^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::vfprintf` is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1031:9
     |
1031 |         vfprintf(log_file, fmt, arg_ptr.as_va_list());
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1031:18
     |
1031 |         vfprintf(log_file, fmt, arg_ptr.as_va_list());
     |                  ^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error: variable does not need to be mutable
    --> src/optipng/optipng.rs:1012:33
     |
1012 | unsafe extern "C" fn app_printf(mut fmt: *const libc::c_char, mut args: ...) {
     |                                 ----^^^
     |                                 |
     |                                 help: remove this `mut`

error: variable does not need to be mutable
    --> src/optipng/optipng.rs:1012:63
     |
1012 | unsafe extern "C" fn app_printf(mut fmt: *const libc::c_char, mut args: ...) {
     |                                                               ----^^^^
     |                                                               |
     |                                                               help: remove this `mut`

error: value assigned to `con_str` is never read
    --> src/optipng/optipng.rs:1035:13
     |
1035 |     let mut con_str: *const libc::c_char = 0 as *const libc::c_char;
     |             ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `log_str` is never read
    --> src/optipng/optipng.rs:1036:13
     |
1036 |     let mut log_str: *const libc::c_char = 0 as *const libc::c_char;
     |             ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `i` is never read
    --> src/optipng/optipng.rs:1037:13
     |
1037 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1041:9
     |
1041 |         start_of_line = 1 as libc::c_int;
     |         ^^^^^^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/optipng/optipng.rs:1034:1
     |
1034 | unsafe extern "C" fn app_print_cntrl(mut cntrl_code: libc::c_int) {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1043:12
     |
1043 |         if start_of_line == 0 {
     |            ^^^^^^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1046:13
     |
1046 |             start_of_line = 1 as libc::c_int;
     |             ^^^^^^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1052:12
     |
1052 |         && start_of_line != 0
     |            ^^^^^^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1054:13
     |
1054 |         if !con_file.is_null() {
     |             ^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::fputc` is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1057:17
     |
1057 |                 fputc(' ' as i32, con_file);
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1057:35
     |
1057 |                 fputc(' ' as i32, con_file);
     |                                   ^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1068:9
     |
1068 |     if !con_file.is_null() {
     |         ^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::fputs` is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1069:9
     |
1069 |         fputs(con_str, con_file);
     |         ^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1069:24
     |
1069 |         fputs(con_str, con_file);
     |                        ^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1071:9
     |
1071 |     if !log_file.is_null() {
     |         ^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::fputs` is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1072:9
     |
1072 |         fputs(log_str, log_file);
     |         ^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1072:24
     |
1072 |         fputs(log_str, log_file);
     |                        ^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error: variable does not need to be mutable
    --> src/optipng/optipng.rs:1034:38
     |
1034 | unsafe extern "C" fn app_print_cntrl(mut cntrl_code: libc::c_int) {
     |                                      ----^^^^^^^^^^
     |                                      |
     |                                      help: remove this `mut`

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1079:9
     |
1079 |     if !con_file.is_null() {
     |         ^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/optipng/optipng.rs:1075:1
     |
1075 | / unsafe extern "C" fn app_progress(
1076 | |     mut current_step: libc::c_ulong,
1077 | |     mut total_steps: libc::c_ulong,
1078 | | ) {
     | |_^

error[E0133]: call to unsafe function `optipng::optipng::fflush` is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1080:9
     |
1080 |         fflush(con_file);
     |         ^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1080:16
     |
1080 |         fflush(con_file);
     |                ^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error: variable does not need to be mutable
    --> src/optipng/optipng.rs:1076:5
     |
1076 |     mut current_step: libc::c_ulong,
     |     ----^^^^^^^^^^^^
     |     |
     |     help: remove this `mut`

error: variable does not need to be mutable
    --> src/optipng/optipng.rs:1077:5
     |
1077 |     mut total_steps: libc::c_ulong,
     |     ----^^^^^^^^^^^
     |     |
     |     help: remove this `mut`

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1087:5
     |
1087 |     start_of_line = 1 as libc::c_int;
     |     ^^^^^^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/optipng/optipng.rs:1086:1
     |
1086 | unsafe extern "C" fn app_init() {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1088:8
     |
1088 |     if operation as libc::c_uint == OP_SHOW_HELP as libc::c_int as libc::c_uint
     |        ^^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1089:12
     |
1089 |         || operation as libc::c_uint == OP_SHOW_VERSION as libc::c_int as libc::c_uint
     |            ^^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1091:9
     |
1091 |         con_file = stdout;
     |         ^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1091:20
     |
1091 |         con_file = stdout;
     |                    ^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1092:15
     |
1092 |     } else if options.quiet == 0 {
     |               ^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1093:9
     |
1093 |         con_file = stderr;
     |         ^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1093:20
     |
1093 |         con_file = stderr;
     |                    ^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1095:9
     |
1095 |         con_file = 0 as *mut FILE;
     |         ^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1097:10
     |
1097 |     if !(options.log_name).is_null() {
     |          ^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1098:9
     |
1098 |         log_file = fopen(options.log_name, b"a\0" as *const u8 as *const libc::c_char);
     |         ^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::fopen` is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1098:20
     |
1098 |         log_file = fopen(options.log_name, b"a\0" as *const u8 as *const libc::c_char);
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1098:26
     |
1098 |         log_file = fopen(options.log_name, b"a\0" as *const u8 as *const libc::c_char);
     |                          ^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1099:12
     |
1099 |         if log_file.is_null() {
     |            ^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::error` is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1100:13
     |
1100 | /             error(
1101 | |                 b"Can't open log file: %s\n\0" as *const u8 as *const libc::c_char,
1102 | |                 options.log_name,
1103 | |             );
     | |_____________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1102:17
     |
1102 |                 options.log_name,
     |                 ^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::setvbuf` is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1105:9
     |
1105 | /         setvbuf(
1106 | |             log_file,
1107 | |             0 as *mut libc::c_char,
1108 | |             1 as libc::c_int,
1109 | |             8192 as libc::c_int as size_t,
1110 | |         );
     | |_________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1106:13
     |
1106 |             log_file,
     |             ^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::app_printf` is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1111:9
     |
1111 | /         app_printf(
1112 | |             b"** Warning: %s\n\n\0" as *const u8 as *const libc::c_char,
1113 | |             b"The option -log is deprecated; use shell redirection\0" as *const u8
1114 | |                 as *const libc::c_char,
1115 | |         );
     | |_________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1119:9
     |
1119 |     if !log_file.is_null() {
     |         ^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/optipng/optipng.rs:1118:1
     |
1118 | unsafe extern "C" fn app_finish() {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `optipng::optipng::fclose` is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1120:9
     |
1120 |         fclose(log_file);
     |         ^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1120:16
     |
1120 |         fclose(log_file);
     |                ^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error: value assigned to `result` is never read
    --> src/optipng/optipng.rs:1127:13
     |
1127 |     let mut result: libc::c_int = 0;
     |             ^^^^^^
     |
     = help: maybe it is overwritten before being read?

error: value assigned to `i` is never read
    --> src/optipng/optipng.rs:1134:13
     |
1134 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `optipng::optipng::opng_initialize` is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1145:8
     |
1145 |     if opng_initialize(&mut options, &mut ui) != 0 as libc::c_int {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/optipng/optipng.rs:1123:1
     |
1123 | / unsafe extern "C" fn process_files(
1124 | |     mut argc: libc::c_int,
1125 | |     mut argv: *mut *mut libc::c_char,
1126 | | ) -> libc::c_int {
     | |________________^

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1145:29
     |
1145 |     if opng_initialize(&mut options, &mut ui) != 0 as libc::c_int {
     |                             ^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::panic` is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1146:9
     |
1146 | /         panic(
1147 | |             b"Can't initialize optimization engine\0" as *const u8 as *const libc::c_char,
1148 | |         );
     | |_________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1153:14
     |
1153 |         if !((*argv.offset(i as isize)).is_null()
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1153:16
     |
1153 |         if !((*argv.offset(i as isize)).is_null()
     |                ^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1154:16
     |
1154 |             || *(*argv.offset(i as isize)).offset(0 as libc::c_int as isize)
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1154:17
     |
1154 |             || *(*argv.offset(i as isize)).offset(0 as libc::c_int as isize)
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1154:17
     |
1154 |             || *(*argv.offset(i as isize)).offset(0 as libc::c_int as isize)
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1154:19
     |
1154 |             || *(*argv.offset(i as isize)).offset(0 as libc::c_int as isize)
     |                   ^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::opng_optimize` is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1157:16
     |
1157 |             if opng_optimize(*argv.offset(i as isize)) != 0 as libc::c_int {
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1157:30
     |
1157 |             if opng_optimize(*argv.offset(i as isize)) != 0 as libc::c_int {
     |                              ^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1157:31
     |
1157 |             if opng_optimize(*argv.offset(i as isize)) != 0 as libc::c_int {
     |                               ^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::opng_finalize` is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1164:8
     |
1164 |     if opng_finalize() != 0 as libc::c_int {
     |        ^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::panic` is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1165:9
     |
1165 | /         panic(
1166 | |             b"Can't finalize optimization engine\0" as *const u8 as *const libc::c_char,
1167 | |         );
     | |_________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
    --> src/optipng/optipng.rs:1124:5
     |
1124 |     mut argc: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

error: variable does not need to be mutable
    --> src/optipng/optipng.rs:1125:5
     |
1125 |     mut argv: *mut *mut libc::c_char,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

error: value assigned to `result` is never read
    --> src/optipng/optipng.rs:1175:13
     |
1175 |     let mut result: libc::c_int = 0;
     |             ^^^^^^
     |
     = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `optipng::optipng::parse_args` is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1176:5
     |
1176 |     parse_args(argc, argv);
     |     ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/optipng/optipng.rs:1171:1
     |
1171 | / unsafe fn main_0(
1172 | |     mut argc: libc::c_int,
1173 | |     mut argv: *mut *mut libc::c_char,
1174 | | ) -> libc::c_int {
     | |________________^

error[E0133]: call to unsafe function `optipng::optipng::app_init` is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1177:5
     |
1177 |     app_init();
     |     ^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1179:8
     |
1179 |     if local_options.version != 0 {
     |        ^^^^^^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::app_printf` is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1180:9
     |
1180 |         app_printf(b"%s\n\0" as *const u8 as *const libc::c_char, msg_intro);
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1180:67
     |
1180 |         app_printf(b"%s\n\0" as *const u8 as *const libc::c_char, msg_intro);
     |                                                                   ^^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1182:11
     |
1182 |     match operation as libc::c_uint {
     |           ^^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::process_files` is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1184:22
     |
1184 |             result = process_files(argc, argv);
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1187:16
     |
1187 |             if local_options.help != 0 {
     |                ^^^^^^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::app_printf` is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1188:17
     |
1188 | /                 app_printf(
1189 | |                     b"%s%s%s\0" as *const u8 as *const libc::c_char,
1190 | |                     msg_help_synopsis,
1191 | |                     msg_help_options,
1192 | |                     msg_help_examples,
1193 | |                 );
     | |_________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1190:21
     |
1190 |                     msg_help_synopsis,
     |                     ^^^^^^^^^^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1191:21
     |
1191 |                     msg_help_options,
     |                     ^^^^^^^^^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1192:21
     |
1192 |                     msg_help_examples,
     |                     ^^^^^^^^^^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::app_printf` is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1195:17
     |
1195 | /                 app_printf(
1196 | |                     b"%s%s%s%s\0" as *const u8 as *const libc::c_char,
1197 | |                     msg_help_synopsis,
1198 | |                     msg_help_basic_options,
1199 | |                     msg_help_examples,
1200 | |                     msg_help_more,
1201 | |                 );
     | |_________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1197:21
     |
1197 |                     msg_help_synopsis,
     |                     ^^^^^^^^^^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1198:21
     |
1198 |                     msg_help_basic_options,
     |                     ^^^^^^^^^^^^^^^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1199:21
     |
1199 |                     msg_help_examples,
     |                     ^^^^^^^^^^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1200:21
     |
1200 |                     msg_help_more,
     |                     ^^^^^^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::app_printf` is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1205:13
     |
1205 |             app_printf(b"%s\n\0" as *const u8 as *const libc::c_char, msg_license);
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1205:71
     |
1205 |             app_printf(b"%s\n\0" as *const u8 as *const libc::c_char, msg_license);
     |                                                                       ^^^^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::app_printf` is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1206:13
     |
1206 | /             app_printf(
1207 | |                 b"Using libpng version %s and zlib version %s\n\0" as *const u8
1208 | |                     as *const libc::c_char,
1209 | |                 png_get_libpng_ver(0 as *const png_struct),
1210 | |                 zlibVersion(),
1211 | |             );
     | |_____________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::png_get_libpng_ver` is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1209:17
     |
1209 |                 png_get_libpng_ver(0 as *const png_struct),
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::zlibVersion` is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1210:17
     |
1210 |                 zlibVersion(),
     |                 ^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::optipng::app_finish` is unsafe and requires unsafe block
    --> src/optipng/optipng.rs:1217:5
     |
1217 |     app_finish();
     |     ^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
    --> src/optipng/optipng.rs:1172:5
     |
1172 |     mut argc: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

error: variable does not need to be mutable
    --> src/optipng/optipng.rs:1173:5
     |
1173 |     mut argv: *mut *mut libc::c_char,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

error: value assigned to `result` is never read
  --> src/optipng/ratio.rs:42:13
   |
42 |     let mut result: libc::c_int = 0;
   |             ^^^^^^
   |
   = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `optipng::ratio::vsnprintf` is unsafe and requires unsafe block
  --> src/optipng/ratio.rs:44:14
   |
44 |     result = vsnprintf(buffer, buffer_size, format, arg_ptr.as_va_list());
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
  --> src/optipng/ratio.rs:35:1
   |
35 | / unsafe extern "C" fn opng_snprintf_impl(
36 | |     mut buffer: *mut libc::c_char,
37 | |     mut buffer_size: size_t,
38 | |     mut format: *const libc::c_char,
39 | |     mut args: ...
40 | | ) -> libc::c_int {
   | |________________^

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src/optipng/ratio.rs:47:13
   |
47 | /             *buffer
48 | |                 .offset(
49 | |                     buffer_size.wrapping_sub(1 as libc::c_int as size_t) as isize,
50 | |                 ) = '\0' as i32 as libc::c_char;
   | |_________________^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
  --> src/optipng/ratio.rs:47:14
   |
47 |               *buffer
   |  ______________^
48 | |                 .offset(
49 | |                     buffer_size.wrapping_sub(1 as libc::c_int as size_t) as isize,
50 | |                 ) = '\0' as i32 as libc::c_char;
   | |_________________^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
  --> src/optipng/ratio.rs:36:5
   |
36 |     mut buffer: *mut libc::c_char,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

error: variable does not need to be mutable
  --> src/optipng/ratio.rs:37:5
   |
37 |     mut buffer_size: size_t,
   |     ----^^^^^^^^^^^
   |     |
   |     help: remove this `mut`

error: variable does not need to be mutable
  --> src/optipng/ratio.rs:38:5
   |
38 |     mut format: *const libc::c_char,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

error: variable does not need to be mutable
  --> src/optipng/ratio.rs:39:5
   |
39 |     mut args: ...
   |     ----^^^^
   |     |
   |     help: remove this `mut`

error: value assigned to `integer_part` is never read
  --> src/optipng/ratio.rs:63:13
   |
63 |     let mut integer_part: opng_uxlong_impl_t = 0;
   |             ^^^^^^^^^^^^
   |
   = help: maybe it is overwritten before being read?

error: value assigned to `remainder` is never read
  --> src/optipng/ratio.rs:64:13
   |
64 |     let mut remainder: opng_uxlong_impl_t = 0;
   |             ^^^^^^^^^
   |
   = help: maybe it is overwritten before being read?

error: value assigned to `fractional_part` is never read
  --> src/optipng/ratio.rs:65:13
   |
65 |     let mut fractional_part: libc::c_uint = 0;
   |             ^^^^^^^^^^^^^^^
   |
   = help: maybe it is overwritten before being read?

error: value assigned to `scale` is never read
  --> src/optipng/ratio.rs:66:13
   |
66 |     let mut scale: libc::c_uint = 0;
   |             ^^^^^
   |
   = help: maybe it is overwritten before being read?

error: value assigned to `scaled_ratio` is never read
  --> src/optipng/ratio.rs:67:13
   |
67 |     let mut scaled_ratio: libc::c_double = 0.;
   |             ^^^^^^^^^^^^
   |
   = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `optipng::ratio::opng_snprintf_impl` is unsafe and requires unsafe block
  --> src/optipng/ratio.rs:69:16
   |
69 |           return opng_snprintf_impl(
   |  ________________^
70 | |             buffer,
71 | |             buffer_size,
72 | |             if num == 0 as libc::c_int as opng_uxlong_impl_t {
...  |
76 | |             },
77 | |         );
   | |_________^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
  --> src/optipng/ratio.rs:56:1
   |
56 | / unsafe extern "C" fn opng_sprint_uratio_impl(
57 | |     mut buffer: *mut libc::c_char,
58 | |     mut buffer_size: size_t,
59 | |     mut num: opng_uxlong_impl_t,
60 | |     mut denom: opng_uxlong_impl_t,
61 | |     mut always_percent: libc::c_int,
62 | | ) -> libc::c_int {
   | |________________^

error[E0133]: call to unsafe function `optipng::ratio::opng_snprintf_impl` is unsafe and requires unsafe block
  --> src/optipng/ratio.rs:89:16
   |
89 |           return opng_snprintf_impl(
   |  ________________^
90 | |             buffer,
91 | |             buffer_size,
92 | |             b"%u.%02u%%\0" as *const u8 as *const libc::c_char,
93 | |             fractional_part.wrapping_div(100 as libc::c_int as libc::c_uint),
94 | |             fractional_part.wrapping_rem(100 as libc::c_int as libc::c_uint),
95 | |         );
   | |_________^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::ratio::opng_snprintf_impl` is unsafe and requires unsafe block
   --> src/optipng/ratio.rs:109:16
    |
109 |           return opng_snprintf_impl(
    |  ________________^
110 | |             buffer,
111 | |             buffer_size,
112 | |             b"%llu%02u%%\0" as *const u8 as *const libc::c_char,
113 | |             integer_part,
114 | |             fractional_part,
115 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::ratio::opng_snprintf_impl` is unsafe and requires unsafe block
   --> src/optipng/ratio.rs:118:16
    |
118 |           return opng_snprintf_impl(
    |  ________________^
119 | |             buffer,
120 | |             buffer_size,
121 | |             b"%llu.%02ux\0" as *const u8 as *const libc::c_char,
122 | |             integer_part,
123 | |             fractional_part,
124 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `optipng::ratio::opng_snprintf_impl` is unsafe and requires unsafe block
   --> src/optipng/ratio.rs:134:12
    |
134 |       return opng_snprintf_impl(
    |  ____________^
135 | |         buffer,
136 | |         buffer_size,
137 | |         b"%llux\0" as *const u8 as *const libc::c_char,
138 | |         integer_part,
139 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
  --> src/optipng/ratio.rs:57:5
   |
57 |     mut buffer: *mut libc::c_char,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

error: variable does not need to be mutable
  --> src/optipng/ratio.rs:58:5
   |
58 |     mut buffer_size: size_t,
   |     ----^^^^^^^^^^^
   |     |
   |     help: remove this `mut`

error: variable does not need to be mutable
  --> src/optipng/ratio.rs:59:5
   |
59 |     mut num: opng_uxlong_impl_t,
   |     ----^^^
   |     |
   |     help: remove this `mut`

error: variable does not need to be mutable
  --> src/optipng/ratio.rs:60:5
   |
60 |     mut denom: opng_uxlong_impl_t,
   |     ----^^^^^
   |     |
   |     help: remove this `mut`

error: variable does not need to be mutable
  --> src/optipng/ratio.rs:61:5
   |
61 |     mut always_percent: libc::c_int,
   |     ----^^^^^^^^^^^^^^
   |     |
   |     help: remove this `mut`

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/ratio.rs:147:39
    |
147 |     let mut num: opng_uxlong_impl_t = (*ratio).num as opng_uxlong_impl_t;
    |                                       ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/optipng/ratio.rs:142:1
    |
142 | / pub unsafe extern "C" fn opng_ulratio_to_factor_string(
143 | |     mut buffer: *mut libc::c_char,
144 | |     mut buffer_size: size_t,
145 | |     mut ratio: *const opng_ulratio,
146 | | ) -> libc::c_int {
    | |________________^

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/ratio.rs:148:41
    |
148 |     let mut denom: opng_uxlong_impl_t = (*ratio).denom as opng_uxlong_impl_t;
    |                                         ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `optipng::ratio::opng_sprint_uratio_impl` is unsafe and requires unsafe block
   --> src/optipng/ratio.rs:149:12
    |
149 |     return opng_sprint_uratio_impl(buffer, buffer_size, num, denom, 0 as libc::c_int);
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/optipng/ratio.rs:143:5
    |
143 |     mut buffer: *mut libc::c_char,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ratio.rs:144:5
    |
144 |     mut buffer_size: size_t,
    |     ----^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ratio.rs:145:5
    |
145 |     mut ratio: *const opng_ulratio,
    |     ----^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ratio.rs:147:9
    |
147 |     let mut num: opng_uxlong_impl_t = (*ratio).num as opng_uxlong_impl_t;
    |         ----^^^
    |         |
    |         help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ratio.rs:148:9
    |
148 |     let mut denom: opng_uxlong_impl_t = (*ratio).denom as opng_uxlong_impl_t;
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/ratio.rs:157:39
    |
157 |     let mut num: opng_uxlong_impl_t = (*ratio).num as opng_uxlong_impl_t;
    |                                       ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/optipng/ratio.rs:152:1
    |
152 | / pub unsafe extern "C" fn opng_ulratio_to_percent_string(
153 | |     mut buffer: *mut libc::c_char,
154 | |     mut buffer_size: size_t,
155 | |     mut ratio: *const opng_ulratio,
156 | | ) -> libc::c_int {
    | |________________^

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/ratio.rs:158:41
    |
158 |     let mut denom: opng_uxlong_impl_t = (*ratio).denom as opng_uxlong_impl_t;
    |                                         ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `optipng::ratio::opng_sprint_uratio_impl` is unsafe and requires unsafe block
   --> src/optipng/ratio.rs:159:12
    |
159 |     return opng_sprint_uratio_impl(buffer, buffer_size, num, denom, 1 as libc::c_int);
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/optipng/ratio.rs:153:5
    |
153 |     mut buffer: *mut libc::c_char,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ratio.rs:154:5
    |
154 |     mut buffer_size: size_t,
    |     ----^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ratio.rs:155:5
    |
155 |     mut ratio: *const opng_ulratio,
    |     ----^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ratio.rs:157:9
    |
157 |     let mut num: opng_uxlong_impl_t = (*ratio).num as opng_uxlong_impl_t;
    |         ----^^^
    |         |
    |         help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ratio.rs:158:9
    |
158 |     let mut denom: opng_uxlong_impl_t = (*ratio).denom as opng_uxlong_impl_t;
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/ratio.rs:167:39
    |
167 |     let mut num: opng_uxlong_impl_t = (*ratio).num;
    |                                       ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/optipng/ratio.rs:162:1
    |
162 | / pub unsafe extern "C" fn opng_ullratio_to_factor_string(
163 | |     mut buffer: *mut libc::c_char,
164 | |     mut buffer_size: size_t,
165 | |     mut ratio: *const opng_ullratio,
166 | | ) -> libc::c_int {
    | |________________^

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/ratio.rs:168:41
    |
168 |     let mut denom: opng_uxlong_impl_t = (*ratio).denom;
    |                                         ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `optipng::ratio::opng_sprint_uratio_impl` is unsafe and requires unsafe block
   --> src/optipng/ratio.rs:169:12
    |
169 |     return opng_sprint_uratio_impl(buffer, buffer_size, num, denom, 0 as libc::c_int);
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/optipng/ratio.rs:163:5
    |
163 |     mut buffer: *mut libc::c_char,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ratio.rs:164:5
    |
164 |     mut buffer_size: size_t,
    |     ----^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ratio.rs:165:5
    |
165 |     mut ratio: *const opng_ullratio,
    |     ----^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ratio.rs:167:9
    |
167 |     let mut num: opng_uxlong_impl_t = (*ratio).num;
    |         ----^^^
    |         |
    |         help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ratio.rs:168:9
    |
168 |     let mut denom: opng_uxlong_impl_t = (*ratio).denom;
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/ratio.rs:177:39
    |
177 |     let mut num: opng_uxlong_impl_t = (*ratio).num;
    |                                       ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/optipng/ratio.rs:172:1
    |
172 | / pub unsafe extern "C" fn opng_ullratio_to_percent_string(
173 | |     mut buffer: *mut libc::c_char,
174 | |     mut buffer_size: size_t,
175 | |     mut ratio: *const opng_ullratio,
176 | | ) -> libc::c_int {
    | |________________^

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/optipng/ratio.rs:178:41
    |
178 |     let mut denom: opng_uxlong_impl_t = (*ratio).denom;
    |                                         ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `optipng::ratio::opng_sprint_uratio_impl` is unsafe and requires unsafe block
   --> src/optipng/ratio.rs:179:12
    |
179 |     return opng_sprint_uratio_impl(buffer, buffer_size, num, denom, 1 as libc::c_int);
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/optipng/ratio.rs:173:5
    |
173 |     mut buffer: *mut libc::c_char,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ratio.rs:174:5
    |
174 |     mut buffer_size: size_t,
    |     ----^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ratio.rs:175:5
    |
175 |     mut ratio: *const opng_ullratio,
    |     ----^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ratio.rs:177:9
    |
177 |     let mut num: opng_uxlong_impl_t = (*ratio).num;
    |         ----^^^
    |         |
    |         help: remove this `mut`

error: variable does not need to be mutable
   --> src/optipng/ratio.rs:178:9
    |
178 |     let mut denom: opng_uxlong_impl_t = (*ratio).denom;
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

error[E0133]: call to unsafe function `pngxtern::pngxmem::pngx_malloc_rows_extended` is unsafe and requires unsafe block
  --> src/pngxtern/pngxmem.rs:55:12
   |
55 |       return pngx_malloc_rows_extended(
   |  ____________^
56 | |         png_ptr,
57 | |         info_ptr,
58 | |         0 as libc::c_int as pngx_alloc_size_t,
59 | |         filler,
60 | |     );
   | |_____^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
  --> src/pngxtern/pngxmem.rs:50:1
   |
50 | / pub unsafe extern "C" fn pngx_malloc_rows(
51 | |     mut png_ptr: png_structp,
52 | |     mut info_ptr: png_infop,
53 | |     mut filler: libc::c_int,
54 | | ) -> png_bytepp {
   | |_______________^

error: variable does not need to be mutable
  --> src/pngxtern/pngxmem.rs:51:5
   |
51 |     mut png_ptr: png_structp,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

error: variable does not need to be mutable
  --> src/pngxtern/pngxmem.rs:52:5
   |
52 |     mut info_ptr: png_infop,
   |     ----^^^^^^^^
   |     |
   |     help: remove this `mut`

error: variable does not need to be mutable
  --> src/pngxtern/pngxmem.rs:53:5
   |
53 |     mut filler: libc::c_int,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

error: value assigned to `row_size` is never read
  --> src/pngxtern/pngxmem.rs:69:13
   |
69 |     let mut row_size: pngx_alloc_size_t = 0;
   |             ^^^^^^^^
   |
   = help: maybe it is overwritten before being read?

error: value assigned to `row` is never read
  --> src/pngxtern/pngxmem.rs:70:13
   |
70 |     let mut row: png_bytep = 0 as *mut png_byte;
   |             ^^^
   |
   = help: maybe it is overwritten before being read?

error: value assigned to `rows` is never read
  --> src/pngxtern/pngxmem.rs:71:13
   |
71 |     let mut rows: png_bytepp = 0 as *mut *mut png_byte;
   |             ^^^^
   |
   = help: maybe it is overwritten before being read?

error: value assigned to `height` is never read
  --> src/pngxtern/pngxmem.rs:72:13
   |
72 |     let mut height: png_uint_32 = 0;
   |             ^^^^^^
   |
   = help: maybe it is overwritten before being read?

error: value assigned to `i` is never read
  --> src/pngxtern/pngxmem.rs:73:13
   |
73 |     let mut i: png_uint_32 = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `pngxtern::pngxmem::png_get_image_height` is unsafe and requires unsafe block
  --> src/pngxtern/pngxmem.rs:74:14
   |
74 |       height = png_get_image_height(
   |  ______________^
75 | |         png_ptr as *const png_struct,
76 | |         info_ptr as *const png_info,
77 | |     );
   | |_____^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
  --> src/pngxtern/pngxmem.rs:63:1
   |
63 | / pub unsafe extern "C" fn pngx_malloc_rows_extended(
64 | |     mut png_ptr: png_structp,
65 | |     mut info_ptr: png_infop,
66 | |     mut min_row_size: pngx_alloc_size_t,
67 | |     mut filler: libc::c_int,
68 | | ) -> png_bytepp {
   | |_______________^

error[E0133]: call to unsafe function `pngxtern::pngxmem::png_error` is unsafe and requires unsafe block
  --> src/pngxtern/pngxmem.rs:79:9
   |
79 | /         png_error(
80 | |             png_ptr as *const png_struct,
81 | |             b"Missing IHDR\0" as *const u8 as *const libc::c_char,
82 | |         );
   | |_________^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxmem::png_get_rowbytes` is unsafe and requires unsafe block
  --> src/pngxtern/pngxmem.rs:84:16
   |
84 |       row_size = png_get_rowbytes(
   |  ________________^
85 | |         png_ptr as *const png_struct,
86 | |         info_ptr as *const png_info,
87 | |     );
   | |_____^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxmem::png_error` is unsafe and requires unsafe block
  --> src/pngxtern/pngxmem.rs:93:9
   |
93 | /         png_error(
94 | |             png_ptr as *const png_struct,
95 | |             b"Can't handle exceedingly large image dimensions\0" as *const u8
96 | |                 as *const libc::c_char,
97 | |         );
   | |_________^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxmem::png_free_data` is unsafe and requires unsafe block
   --> src/pngxtern/pngxmem.rs:102:5
    |
102 | /     png_free_data(
103 | |         png_ptr as *const png_struct,
104 | |         info_ptr,
105 | |         0x40 as libc::c_uint,
106 | |         0 as libc::c_int,
107 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxmem::png_malloc` is unsafe and requires unsafe block
   --> src/pngxtern/pngxmem.rs:108:12
    |
108 |       rows = png_malloc(
    |  ____________^
109 | |         png_ptr as *const png_struct,
110 | |         (height as libc::c_ulong)
111 | |             .wrapping_mul(::core::mem::size_of::<png_bytep>() as libc::c_ulong),
112 | |     ) as png_bytepp;
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxmem::png_malloc` is unsafe and requires unsafe block
   --> src/pngxtern/pngxmem.rs:118:15
    |
118 |         row = png_malloc(png_ptr as *const png_struct, row_size) as png_bytep;
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxmem::png_free` is unsafe and requires unsafe block
   --> src/pngxtern/pngxmem.rs:122:17
    |
122 | /                 png_free(
123 | |                     png_ptr as *const png_struct,
124 | |                     *rows.offset(i as isize) as png_voidp,
125 | |                 );
    | |_________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxmem.rs:124:21
    |
124 |                     *rows.offset(i as isize) as png_voidp,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxmem.rs:124:22
    |
124 |                     *rows.offset(i as isize) as png_voidp,
    |                      ^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxmem::png_free` is unsafe and requires unsafe block
   --> src/pngxtern/pngxmem.rs:127:13
    |
127 |             png_free(png_ptr as *const png_struct, rows as png_voidp);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxmem::memset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxmem.rs:131:13
    |
131 |             memset(row as *mut libc::c_void, filler, row_size);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxmem.rs:133:30
    |
133 |         let ref mut fresh0 = *rows.offset(i as isize);
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxmem.rs:133:31
    |
133 |         let ref mut fresh0 = *rows.offset(i as isize);
    |                               ^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxmem::png_set_rows` is unsafe and requires unsafe block
   --> src/pngxtern/pngxmem.rs:138:5
    |
138 |     png_set_rows(png_ptr as *const png_struct, info_ptr, rows);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
  --> src/pngxtern/pngxmem.rs:64:5
   |
64 |     mut png_ptr: png_structp,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

error: variable does not need to be mutable
  --> src/pngxtern/pngxmem.rs:65:5
   |
65 |     mut info_ptr: png_infop,
   |     ----^^^^^^^^
   |     |
   |     help: remove this `mut`

error: variable does not need to be mutable
  --> src/pngxtern/pngxmem.rs:66:5
   |
66 |     mut min_row_size: pngx_alloc_size_t,
   |     ----^^^^^^^^^^^^
   |     |
   |     help: remove this `mut`

error: variable does not need to be mutable
  --> src/pngxtern/pngxmem.rs:67:5
   |
67 |     mut filler: libc::c_int,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:146:13
    |
146 |     return (*ptr.offset(0 as libc::c_int as isize) as libc::c_uint)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/pngxtern/pngxrbmp.rs:145:1
    |
145 | unsafe extern "C" fn bmp_get_word(mut ptr: png_bytep) -> libc::c_uint {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:146:14
    |
146 |     return (*ptr.offset(0 as libc::c_int as isize) as libc::c_uint)
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:148:14
    |
148 |             (*ptr.offset(1 as libc::c_int as isize) as libc::c_uint) << 8 as libc::c_int,
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:148:15
    |
148 |             (*ptr.offset(1 as libc::c_int as isize) as libc::c_uint) << 8 as libc::c_int,
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/pngxtern/pngxrbmp.rs:145:35
    |
145 | unsafe extern "C" fn bmp_get_word(mut ptr: png_bytep) -> libc::c_uint {
    |                                   ----^^^
    |                                   |
    |                                   help: remove this `mut`

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:152:13
    |
152 |     return (*ptr.offset(0 as libc::c_int as isize) as png_uint_32)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/pngxtern/pngxrbmp.rs:151:1
    |
151 | unsafe extern "C" fn bmp_get_dword(mut ptr: png_bytep) -> png_uint_32 {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:152:14
    |
152 |     return (*ptr.offset(0 as libc::c_int as isize) as png_uint_32)
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:154:14
    |
154 |             (*ptr.offset(1 as libc::c_int as isize) as png_uint_32) << 8 as libc::c_int,
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:154:15
    |
154 |             (*ptr.offset(1 as libc::c_int as isize) as png_uint_32) << 8 as libc::c_int,
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:157:14
    |
157 |             (*ptr.offset(2 as libc::c_int as isize) as png_uint_32) << 16 as libc::c_int,
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:157:15
    |
157 |             (*ptr.offset(2 as libc::c_int as isize) as png_uint_32) << 16 as libc::c_int,
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:160:14
    |
160 |             (*ptr.offset(3 as libc::c_int as isize) as png_uint_32) << 24 as libc::c_int,
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:160:15
    |
160 |             (*ptr.offset(3 as libc::c_int as isize) as png_uint_32) << 24 as libc::c_int,
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/pngxtern/pngxrbmp.rs:151:36
    |
151 | unsafe extern "C" fn bmp_get_dword(mut ptr: png_bytep) -> png_uint_32 {
    |                                    ----^^^
    |                                    |
    |                                    help: remove this `mut`

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::memset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:169:5
    |
169 |     memset(ptr.offset(offset as isize) as *mut libc::c_void, ch, len);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/pngxtern/pngxrbmp.rs:163:1
    |
163 | / unsafe extern "C" fn bmp_memset_bytes(
164 | |     mut ptr: png_bytep,
165 | |     mut offset: size_t,
166 | |     mut ch: libc::c_int,
167 | |     mut len: size_t,
168 | | ) {
    | |_^

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:169:12
    |
169 |     memset(ptr.offset(offset as isize) as *mut libc::c_void, ch, len);
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/pngxtern/pngxrbmp.rs:164:5
    |
164 |     mut ptr: png_bytep,
    |     ----^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrbmp.rs:165:5
    |
165 |     mut offset: size_t,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrbmp.rs:166:5
    |
166 |     mut ch: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrbmp.rs:167:5
    |
167 |     mut len: size_t,
    |     ----^^^
    |     |
    |     help: remove this `mut`

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:180:11
    |
180 |     ptr = ptr.offset((offset / 2 as libc::c_int as size_t) as isize);
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/pngxtern/pngxrbmp.rs:171:1
    |
171 | / unsafe extern "C" fn bmp_memset_halfbytes(
172 | |     mut ptr: png_bytep,
173 | |     mut offset: size_t,
174 | |     mut ch: libc::c_int,
175 | |     mut len: size_t,
176 | | ) {
    | |_^

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:182:9
    |
182 |         *ptr = (*ptr as libc::c_int & 0xf0 as libc::c_int | ch & 0xf as libc::c_int)
    |         ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:182:17
    |
182 |         *ptr = (*ptr as libc::c_int & 0xf0 as libc::c_int | ch & 0xf as libc::c_int)
    |                 ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:186:15
    |
186 |         ptr = ptr.offset(1);
    |               ^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::memset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:191:5
    |
191 |     memset(ptr as *mut libc::c_void, ch, len / 2 as libc::c_int as size_t);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:193:9
    |
193 | /         *ptr
194 | |             .offset(
195 | |                 (len / 2 as libc::c_int as size_t) as isize,
196 | |             ) = (ch & 0xf0 as libc::c_int) as png_byte;
    | |_____________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:193:10
    |
193 |           *ptr
    |  __________^
194 | |             .offset(
195 | |                 (len / 2 as libc::c_int as size_t) as isize,
196 | |             ) = (ch & 0xf0 as libc::c_int) as png_byte;
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/pngxtern/pngxrbmp.rs:173:5
    |
173 |     mut offset: size_t,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `result` is never read
   --> src/pngxtern/pngxrbmp.rs:205:13
    |
205 |     let mut result: size_t = 0;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::fread` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:206:14
    |
206 |       result = fread(
    |  ______________^
207 | |         ptr.offset(offset as isize) as *mut libc::c_void,
208 | |         1 as libc::c_int as libc::c_ulong,
209 | |         len,
210 | |         stream,
211 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/pngxtern/pngxrbmp.rs:199:1
    |
199 | / unsafe extern "C" fn bmp_fread_bytes(
200 | |     mut ptr: png_bytep,
201 | |     mut offset: size_t,
202 | |     mut len: size_t,
203 | |     mut stream: *mut FILE,
204 | | ) -> size_t {
    | |___________^

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:207:9
    |
207 |         ptr.offset(offset as isize) as *mut libc::c_void,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::getc` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:213:9
    |
213 |         getc(stream);
    |         ^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/pngxtern/pngxrbmp.rs:200:5
    |
200 |     mut ptr: png_bytep,
    |     ----^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrbmp.rs:201:5
    |
201 |     mut offset: size_t,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrbmp.rs:202:5
    |
202 |     mut len: size_t,
    |     ----^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrbmp.rs:203:5
    |
203 |     mut stream: *mut FILE,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `result` is never read
   --> src/pngxtern/pngxrbmp.rs:223:13
    |
223 |     let mut result: size_t = 0;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `ch` is never read
   --> src/pngxtern/pngxrbmp.rs:224:13
    |
224 |     let mut ch: libc::c_int = 0;
    |             ^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:228:11
    |
228 |     ptr = ptr.offset((offset / 2 as libc::c_int as size_t) as isize);
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/pngxtern/pngxrbmp.rs:217:1
    |
217 | / unsafe extern "C" fn bmp_fread_halfbytes(
218 | |     mut ptr: png_bytep,
219 | |     mut offset: size_t,
220 | |     mut len: size_t,
221 | |     mut stream: *mut FILE,
222 | | ) -> size_t {
    | |___________^

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::getc` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:232:18
    |
232 |             ch = getc(stream);
    |                  ^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:236:13
    |
236 |             *ptr = (*ptr as libc::c_int & 0xf0 as libc::c_int
    |             ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:236:21
    |
236 |             *ptr = (*ptr as libc::c_int & 0xf0 as libc::c_int
    |                     ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:238:19
    |
238 |             ptr = ptr.offset(1);
    |                   ^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:240:13
    |
240 |             *ptr = ((ch & 0xf as libc::c_int) << 4 as libc::c_int) as png_byte;
    |             ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::fread` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:244:18
    |
244 |           result = (fread(
    |  __________________^
245 | |             ptr as *mut libc::c_void,
246 | |             1 as libc::c_int as libc::c_ulong,
247 | |             len.wrapping_add(1 as libc::c_int as size_t) / 2 as libc::c_int as size_t,
248 | |             stream,
249 | |         ))
    | |__________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::getc` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:253:9
    |
253 |         getc(stream);
    |         ^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/pngxtern/pngxrbmp.rs:219:5
    |
219 |     mut offset: size_t,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrbmp.rs:220:5
    |
220 |     mut len: size_t,
    |     ----^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrbmp.rs:221:5
    |
221 |     mut stream: *mut FILE,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:262:5
    |
262 |     *shift_bit = 0 as libc::c_int as png_byte;
    |     ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/pngxtern/pngxrbmp.rs:257:1
    |
257 | / unsafe extern "C" fn bmp_process_mask(
258 | |     mut bmp_mask: png_uint_32,
259 | |     mut sig_bit: png_bytep,
260 | |     mut shift_bit: png_bytep,
261 | | ) {
    | |_^

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:263:5
    |
263 |     *sig_bit = *shift_bit;
    |     ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:263:16
    |
263 |     *sig_bit = *shift_bit;
    |                ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:269:9
    |
269 |         *shift_bit = (*shift_bit).wrapping_add(1);
    |         ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:269:22
    |
269 |         *shift_bit = (*shift_bit).wrapping_add(1);
    |                      ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:270:9
    |
270 |         *shift_bit;
    |         ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:274:16
    |
274 |             || *sig_bit as libc::c_int >= 8 as libc::c_int
    |                ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:276:13
    |
276 |             *sig_bit = 0 as libc::c_int as png_byte;
    |             ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:280:9
    |
280 |         *sig_bit = (*sig_bit).wrapping_add(1);
    |         ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:280:20
    |
280 |         *sig_bit = (*sig_bit).wrapping_add(1);
    |                    ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:281:9
    |
281 |         *sig_bit;
    |         ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error: variable does not need to be mutable
   --> src/pngxtern/pngxrbmp.rs:259:5
    |
259 |     mut sig_bit: png_bytep,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrbmp.rs:260:5
    |
260 |     mut shift_bit: png_bytep,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `result` is never read
   --> src/pngxtern/pngxrbmp.rs:291:13
    |
291 |     let mut result: size_t = 0;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `crt_row` is never read
   --> src/pngxtern/pngxrbmp.rs:292:13
    |
292 |     let mut crt_row: png_bytepp = 0 as *mut *mut png_byte;
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `inc` is never read
   --> src/pngxtern/pngxrbmp.rs:293:13
    |
293 |     let mut inc: libc::c_int = 0;
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `crtn` is never read
   --> src/pngxtern/pngxrbmp.rs:294:13
    |
294 |     let mut crtn: size_t = 0;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `dcrtn` is never read
   --> src/pngxtern/pngxrbmp.rs:295:13
    |
295 |     let mut dcrtn: size_t = 0;
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `endn` is never read
   --> src/pngxtern/pngxrbmp.rs:296:13
    |
296 |     let mut endn: size_t = 0;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `len` is never read
   --> src/pngxtern/pngxrbmp.rs:297:13
    |
297 |     let mut len: libc::c_uint = 0;
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `b1` is never read
   --> src/pngxtern/pngxrbmp.rs:298:13
    |
298 |     let mut b1: libc::c_uint = 0;
    |             ^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `b2` is never read
   --> src/pngxtern/pngxrbmp.rs:299:13
    |
299 |     let mut b2: libc::c_uint = 0;
    |             ^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `ch` is never read
   --> src/pngxtern/pngxrbmp.rs:300:13
    |
300 |     let mut ch: libc::c_int = 0;
    |             ^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `bmp_memset_fn` is never read
   --> src/pngxtern/pngxrbmp.rs:301:13
    |
301 |     let mut bmp_memset_fn: Option::<
    |             ^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `bmp_fread_fn` is never read
   --> src/pngxtern/pngxrbmp.rs:304:13
    |
304 |     let mut bmp_fread_fn: Option::<
    |             ^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:342:20
    |
342 |               crtn = bmp_fread_fn
    |  ____________________^
343 | |                 .expect(
344 | |                     "non-null function pointer",
345 | |                 )(*crt_row, 0 as libc::c_int as size_t, endn, stream);
    | |_____________________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/pngxtern/pngxrbmp.rs:284:1
    |
284 | / unsafe extern "C" fn bmp_read_rows(
285 | |     mut begin_row: png_bytepp,
286 | |     mut end_row: png_bytepp,
287 | |     mut row_size: size_t,
288 | |     mut compression: libc::c_uint,
289 | |     mut stream: *mut FILE,
290 | | ) -> size_t {
    | |___________^

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:345:19
    |
345 |                 )(*crt_row, 0 as libc::c_int as size_t, endn, stream);
    |                   ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:351:23
    |
351 |             crt_row = crt_row.offset(inc as isize);
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::getc` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:366:18
    |
366 |             ch = getc(stream);
    |                  ^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::getc` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:368:18
    |
368 |             ch = getc(stream);
    |                  ^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:375:21
    |
375 | /                     bmp_memset_fn
376 | |                         .expect(
377 | |                             "non-null function pointer",
378 | |                         )(*crt_row, crtn, 0 as libc::c_int, endn.wrapping_sub(crtn));
    | |____________________________________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:378:27
    |
378 |                         )(*crt_row, crtn, 0 as libc::c_int, endn.wrapping_sub(crtn));
    |                           ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:379:31
    |
379 |                     crt_row = crt_row.offset(inc as isize);
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::getc` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:386:26
    |
386 |                     ch = getc(stream);
    |                          ^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::ungetc` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:388:25
    |
388 |                         ungetc(ch, stream);
    |                         ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::getc` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:391:25
    |
391 |                         getc(stream);
    |                         ^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:395:21
    |
395 | /                     bmp_memset_fn
396 | |                         .expect(
397 | |                             "non-null function pointer",
398 | |                         )(*crt_row, crtn, 0 as libc::c_int, endn.wrapping_sub(crtn));
    | |____________________________________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:398:27
    |
398 |                         )(*crt_row, crtn, 0 as libc::c_int, endn.wrapping_sub(crtn));
    |                           ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:399:31
    |
399 |                     crt_row = crt_row.offset(inc as isize);
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset_from` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:402:25
    |
402 |                         end_row.offset_from(begin_row) as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset_from` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:404:25
    |
404 |                         begin_row.offset_from(end_row) as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::getc` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:408:26
    |
408 |                     ch = getc(stream);
    |                          ^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::getc` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:410:26
    |
410 |                     ch = getc(stream);
    |                          ^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:421:25
    |
421 | /                         bmp_memset_fn
422 | |                             .expect(
423 | |                                 "non-null function pointer",
424 | |                             )(*crt_row, crtn, 0 as libc::c_int, endn.wrapping_sub(crtn));
    | |________________________________________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:424:31
    |
424 | ...                   )(*crt_row, crtn, 0 as libc::c_int, endn.wrapping_sub(crtn));
    |                         ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:425:35
    |
425 |                         crt_row = crt_row.offset(inc as isize);
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:436:25
    |
436 | /                         bmp_memset_fn
437 | |                             .expect(
438 | |                                 "non-null function pointer",
439 | |                             )(
...   |
443 | |                             dcrtn.wrapping_sub(crtn),
444 | |                         );
    | |_________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:440:29
    |
440 | ...                   *crt_row,
    |                       ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:452:24
    |
452 |                       if bmp_fread_fn
    |  ________________________^
453 | |                         .expect(
454 | |                             "non-null function pointer",
455 | |                         )(*crt_row, crtn, len as size_t, stream) != len as size_t
    | |________________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:455:27
    |
455 |                         )(*crt_row, crtn, len as size_t, stream) != len as size_t
    |                           ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:467:17
    |
467 | /                 bmp_memset_fn
468 | |                     .expect(
469 | |                         "non-null function pointer",
470 | |                     )(*crt_row, crtn, b2 as libc::c_int, len as size_t);
    | |_______________________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:470:23
    |
470 |                     )(*crt_row, crtn, b2 as libc::c_int, len as size_t);
    |                       ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:478:9
    |
478 | /         bmp_memset_fn
479 | |             .expect(
480 | |                 "non-null function pointer",
481 | |             )(*crt_row, crtn, 0 as libc::c_int, endn.wrapping_sub(crtn));
    | |________________________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:481:15
    |
481 |             )(*crt_row, crtn, 0 as libc::c_int, endn.wrapping_sub(crtn));
    |               ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:483:19
    |
483 |         crt_row = crt_row.offset(inc as isize);
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/pngxtern/pngxrbmp.rs:285:5
    |
285 |     mut begin_row: png_bytepp,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrbmp.rs:286:5
    |
286 |     mut end_row: png_bytepp,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrbmp.rs:287:5
    |
287 |     mut row_size: size_t,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrbmp.rs:288:5
    |
288 |     mut compression: libc::c_uint,
    |     ----^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrbmp.rs:289:5
    |
289 |     mut stream: *mut FILE,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `src_ptr` is never read
   --> src/pngxtern/pngxrbmp.rs:495:13
    |
495 |     let mut src_ptr: png_bytep = 0 as *mut png_byte;
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `dest_ptr` is never read
   --> src/pngxtern/pngxrbmp.rs:496:13
    |
496 |     let mut dest_ptr: png_bytep = 0 as *mut png_byte;
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `num_samples` is never read
   --> src/pngxtern/pngxrbmp.rs:498:13
    |
498 |     let mut num_samples: libc::c_uint = 0;
    |             ^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `sample` is never read
   --> src/pngxtern/pngxrbmp.rs:499:13
    |
499 |     let mut sample: libc::c_uint = 0;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `mask` is never read
   --> src/pngxtern/pngxrbmp.rs:500:13
    |
500 |     let mut mask: libc::c_uint = 0;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `wpix` is never read
   --> src/pngxtern/pngxrbmp.rs:501:13
    |
501 |     let mut wpix: libc::c_uint = 0;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `dwpix` is never read
   --> src/pngxtern/pngxrbmp.rs:502:13
    |
502 |     let mut dwpix: png_uint_32 = 0;
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `x` is never read
   --> src/pngxtern/pngxrbmp.rs:503:13
    |
503 |     let mut x: png_uint_32 = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `y` is never read
   --> src/pngxtern/pngxrbmp.rs:504:13
    |
504 |     let mut y: png_uint_32 = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `i` is never read
   --> src/pngxtern/pngxrbmp.rs:505:13
    |
505 |     let mut i: libc::c_uint = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:509:23
    |
509 |             src_ptr = *row_pointers.offset(y as isize);
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/pngxtern/pngxrbmp.rs:487:1
    |
487 | / unsafe extern "C" fn bmp_to_png_rows(
488 | |     mut row_pointers: png_bytepp,
489 | |     mut width: png_uint_32,
490 | |     mut height: png_uint_32,
...   |
493 | |     mut rgba_shift: png_bytep,
494 | | ) {
    | |_^

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:509:24
    |
509 |             src_ptr = *row_pointers.offset(y as isize);
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:512:41
    |
512 |                 let mut tmp: png_byte = *src_ptr.offset(0 as libc::c_int as isize);
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:512:42
    |
512 |                 let mut tmp: png_byte = *src_ptr.offset(0 as libc::c_int as isize);
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:513:17
    |
513 | /                 *src_ptr
514 | |                     .offset(
515 | |                         0 as libc::c_int as isize,
516 | |                     ) = *src_ptr.offset(2 as libc::c_int as isize);
    | |_____________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:513:18
    |
513 |                   *src_ptr
    |  __________________^
514 | |                     .offset(
515 | |                         0 as libc::c_int as isize,
516 | |                     ) = *src_ptr.offset(2 as libc::c_int as isize);
    | |_____________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:516:25
    |
516 |                     ) = *src_ptr.offset(2 as libc::c_int as isize);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:516:26
    |
516 |                     ) = *src_ptr.offset(2 as libc::c_int as isize);
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:517:17
    |
517 |                 *src_ptr.offset(2 as libc::c_int as isize) = tmp;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:517:18
    |
517 |                 *src_ptr.offset(2 as libc::c_int as isize) = tmp;
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:520:27
    |
520 |                 src_ptr = src_ptr.offset(3 as libc::c_int as isize);
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:527:23
    |
527 |     num_samples = (if *rgba_sig.offset(3 as libc::c_int as isize) as libc::c_int
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:527:24
    |
527 |     num_samples = (if *rgba_sig.offset(3 as libc::c_int as isize) as libc::c_int
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:538:16
    |
538 |             << *rgba_sig.offset(i as isize) as libc::c_int)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:538:17
    |
538 |             << *rgba_sig.offset(i as isize) as libc::c_int)
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:546:23
    |
546 |               src_ptr = (*row_pointers.offset(y as isize))
    |  _______________________^
547 | |                 .offset(
548 | |                     (width.wrapping_sub(1 as libc::c_int as png_uint_32)
549 | |                         * 2 as libc::c_int as png_uint_32) as isize,
550 | |                 );
    | |_________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:546:23
    |
546 |             src_ptr = (*row_pointers.offset(y as isize))
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:546:25
    |
546 |             src_ptr = (*row_pointers.offset(y as isize))
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:551:24
    |
551 |               dest_ptr = (*row_pointers.offset(y as isize))
    |  ________________________^
552 | |                 .offset(
553 | |                     width
554 | |                         .wrapping_sub(1 as libc::c_int as png_uint_32)
555 | |                         .wrapping_mul(num_samples) as isize,
556 | |                 );
    | |_________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:551:24
    |
551 |             dest_ptr = (*row_pointers.offset(y as isize))
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:551:26
    |
551 |             dest_ptr = (*row_pointers.offset(y as isize))
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:559:25
    |
559 |                 wpix = (*src_ptr.offset(0 as libc::c_int as isize) as libc::c_uint)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:559:26
    |
559 |                 wpix = (*src_ptr.offset(0 as libc::c_int as isize) as libc::c_uint)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:561:26
    |
561 |                         (*src_ptr.offset(1 as libc::c_int as isize) as libc::c_uint)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:561:27
    |
561 |                         (*src_ptr.offset(1 as libc::c_int as isize) as libc::c_uint)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:567:38
    |
567 |                     sample = wpix >> *rgba_shift.offset(i as isize) as libc::c_int
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:567:39
    |
567 |                     sample = wpix >> *rgba_shift.offset(i as isize) as libc::c_int
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:569:21
    |
569 | /                     *dest_ptr
570 | |                         .offset(
571 | |                             i as isize,
572 | |                         ) = sample
    | |_________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:569:22
    |
569 |                       *dest_ptr
    |  ______________________^
570 | |                         .offset(
571 | |                             i as isize,
572 | |                         ) = sample
    | |_________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:583:27
    |
583 |                 src_ptr = src_ptr.offset(-(2 as libc::c_int as isize));
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:584:28
    |
584 |                 dest_ptr = dest_ptr.offset(-(num_samples as isize));
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:592:24
    |
592 |             dest_ptr = *row_pointers.offset(y as isize);
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:592:25
    |
592 |             dest_ptr = *row_pointers.offset(y as isize);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:596:26
    |
596 |                 dwpix = (*src_ptr.offset(0 as libc::c_int as isize) as png_uint_32)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:596:27
    |
596 |                 dwpix = (*src_ptr.offset(0 as libc::c_int as isize) as png_uint_32)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:598:26
    |
598 |                         (*src_ptr.offset(1 as libc::c_int as isize) as png_uint_32)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:598:27
    |
598 |                         (*src_ptr.offset(1 as libc::c_int as isize) as png_uint_32)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:602:26
    |
602 |                         (*src_ptr.offset(2 as libc::c_int as isize) as png_uint_32)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:602:27
    |
602 |                         (*src_ptr.offset(2 as libc::c_int as isize) as png_uint_32)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:606:26
    |
606 |                         (*src_ptr.offset(3 as libc::c_int as isize) as png_uint_32)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:606:27
    |
606 |                         (*src_ptr.offset(3 as libc::c_int as isize) as png_uint_32)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:612:39
    |
612 |                     sample = dwpix >> *rgba_shift.offset(i as isize) as libc::c_int
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:612:40
    |
612 |                     sample = dwpix >> *rgba_shift.offset(i as isize) as libc::c_int
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:614:21
    |
614 | /                     *dest_ptr
615 | |                         .offset(
616 | |                             i as isize,
617 | |                         ) = sample
    | |_________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:614:22
    |
614 |                       *dest_ptr
    |  ______________________^
615 | |                         .offset(
616 | |                             i as isize,
617 | |                         ) = sample
    | |_________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:628:27
    |
628 |                 src_ptr = src_ptr.offset(4 as libc::c_int as isize);
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:629:28
    |
629 |                 dest_ptr = dest_ptr.offset(num_samples as isize);
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/pngxtern/pngxrbmp.rs:488:5
    |
488 |     mut row_pointers: png_bytepp,
    |     ----^^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrbmp.rs:489:5
    |
489 |     mut width: png_uint_32,
    |     ----^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrbmp.rs:490:5
    |
490 |     mut height: png_uint_32,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrbmp.rs:491:5
    |
491 |     mut pixdepth: libc::c_uint,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrbmp.rs:492:5
    |
492 |     mut rgba_sig: png_bytep,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrbmp.rs:493:5
    |
493 |     mut rgba_shift: png_bytep,
    |     ----^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrbmp.rs:512:21
    |
512 |                 let mut tmp: png_byte = *src_ptr.offset(0 as libc::c_int as isize);
    |                     ----^^^
    |                     |
    |                     help: remove this `mut`

error: value assigned to `bihsize` is never read
   --> src/pngxtern/pngxrbmp.rs:652:13
    |
652 |     let mut bihsize: png_uint_32 = 0;
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::bmp_get_word` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:656:8
    |
656 |     if bmp_get_word(sig) != 0x4d42 as libc::c_int as libc::c_uint {
    |        ^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/pngxtern/pngxrbmp.rs:637:1
    |
637 | / pub unsafe extern "C" fn pngx_sig_is_bmp(
638 | |     mut sig: png_bytep,
639 | |     mut sig_size: size_t,
640 | |     mut fmt_name_ptr: png_const_charpp,
641 | |     mut fmt_long_name_ptr: png_const_charpp,
642 | | ) -> libc::c_int {
    | |________________^

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::bmp_get_dword` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:659:15
    |
659 |     bihsize = bmp_get_dword(sig.offset(14 as libc::c_int as isize));
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:659:29
    |
659 |     bihsize = bmp_get_dword(sig.offset(14 as libc::c_int as isize));
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:667:9
    |
667 |         *fmt_name_ptr = bmp_fmt_name.as_ptr();
    |         ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:667:25
    |
667 |         *fmt_name_ptr = bmp_fmt_name.as_ptr();
    |                         ^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:671:13
    |
671 |             *fmt_long_name_ptr = os2bmp_fmt_long_name.as_ptr();
    |             ^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:671:34
    |
671 |             *fmt_long_name_ptr = os2bmp_fmt_long_name.as_ptr();
    |                                  ^^^^^^^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:673:13
    |
673 |             *fmt_long_name_ptr = winbmp_fmt_long_name.as_ptr();
    |             ^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:673:34
    |
673 |             *fmt_long_name_ptr = winbmp_fmt_long_name.as_ptr();
    |                                  ^^^^^^^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error: variable does not need to be mutable
   --> src/pngxtern/pngxrbmp.rs:638:5
    |
638 |     mut sig: png_bytep,
    |     ----^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrbmp.rs:639:5
    |
639 |     mut sig_size: size_t,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrbmp.rs:640:5
    |
640 |     mut fmt_name_ptr: png_const_charpp,
    |     ----^^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrbmp.rs:641:5
    |
641 |     mut fmt_long_name_ptr: png_const_charpp,
    |     ----^^^^^^^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `offbits` is never read
   --> src/pngxtern/pngxrbmp.rs:687:13
    |
687 |     let mut offbits: png_uint_32 = 0;
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `bihsize` is never read
   --> src/pngxtern/pngxrbmp.rs:688:13
    |
688 |     let mut bihsize: png_uint_32 = 0;
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `skip` is never read
   --> src/pngxtern/pngxrbmp.rs:689:13
    |
689 |     let mut skip: png_uint_32 = 0;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `width` is never read
   --> src/pngxtern/pngxrbmp.rs:690:13
    |
690 |     let mut width: png_uint_32 = 0;
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `height` is never read
   --> src/pngxtern/pngxrbmp.rs:691:13
    |
691 |     let mut height: png_uint_32 = 0;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `rowsize` is never read
   --> src/pngxtern/pngxrbmp.rs:692:13
    |
692 |     let mut rowsize: png_uint_32 = 0;
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `topdown` is never read
   --> src/pngxtern/pngxrbmp.rs:693:13
    |
693 |     let mut topdown: libc::c_int = 0;
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `pixdepth` is never read
   --> src/pngxtern/pngxrbmp.rs:694:13
    |
694 |     let mut pixdepth: libc::c_uint = 0;
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `compression` is never read
   --> src/pngxtern/pngxrbmp.rs:695:13
    |
695 |     let mut compression: png_uint_32 = 0;
    |             ^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `palsize` is never read
   --> src/pngxtern/pngxrbmp.rs:696:13
    |
696 |     let mut palsize: libc::c_uint = 0;
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `palnum` is never read
   --> src/pngxtern/pngxrbmp.rs:697:13
    |
697 |     let mut palnum: libc::c_uint = 0;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `bit_depth` is never read
   --> src/pngxtern/pngxrbmp.rs:701:13
    |
701 |     let mut bit_depth: libc::c_int = 0;
    |             ^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `color_type` is never read
   --> src/pngxtern/pngxrbmp.rs:702:13
    |
702 |     let mut color_type: libc::c_int = 0;
    |             ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `row_pointers` is never read
   --> src/pngxtern/pngxrbmp.rs:715:13
    |
715 |     let mut row_pointers: png_bytepp = 0 as *mut *mut png_byte;
    |             ^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `begin_row` is never read
   --> src/pngxtern/pngxrbmp.rs:716:13
    |
716 |     let mut begin_row: png_bytepp = 0 as *mut *mut png_byte;
    |             ^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `end_row` is never read
   --> src/pngxtern/pngxrbmp.rs:717:13
    |
717 |     let mut end_row: png_bytepp = 0 as *mut *mut png_byte;
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `i` is never read
   --> src/pngxtern/pngxrbmp.rs:718:13
    |
718 |     let mut i: libc::c_uint = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `y` is never read
   --> src/pngxtern/pngxrbmp.rs:719:13
    |
719 |     let mut y: size_t = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:685:26
    |
685 |     let bih: png_bytep = bfh.as_mut_ptr().offset(14 as libc::c_int as isize);
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/pngxtern/pngxrbmp.rs:679:1
    |
679 | / pub unsafe extern "C" fn pngx_read_bmp(
680 | |     mut png_ptr: png_structp,
681 | |     mut info_ptr: png_infop,
682 | |     mut stream: *mut FILE,
683 | | ) -> libc::c_int {
    | |________________^

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::fread` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:722:12
    |
722 |           if fread(
    |  ____________^
723 | |             bfh.as_mut_ptr() as *mut libc::c_void,
724 | |             (14 as libc::c_int + 4 as libc::c_int) as libc::c_ulong,
725 | |             1 as libc::c_int as libc::c_ulong,
726 | |             stream,
727 | |         ) != 1 as libc::c_int as libc::c_ulong
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::bmp_get_word` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:731:19
    |
731 |         } else if bmp_get_word(bfh.as_mut_ptr().offset(0 as libc::c_int as isize))
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:731:32
    |
731 |         } else if bmp_get_word(bfh.as_mut_ptr().offset(0 as libc::c_int as isize))
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::fread` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:736:12
    |
736 |           if fread(
    |  ____________^
737 | |             bfh.as_mut_ptr() as *mut libc::c_void,
738 | |             (128 as libc::c_int - 14 as libc::c_int - 4 as libc::c_int) as libc::c_ulong,
739 | |             1 as libc::c_int as libc::c_ulong,
740 | |             stream,
741 | |         ) != 1 as libc::c_int as libc::c_ulong
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::bmp_get_dword` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:752:15
    |
752 |     offbits = bmp_get_dword(bfh.as_mut_ptr().offset(10 as libc::c_int as isize));
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:752:29
    |
752 |     offbits = bmp_get_dword(bfh.as_mut_ptr().offset(10 as libc::c_int as isize));
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::bmp_get_dword` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:753:15
    |
753 |     bihsize = bmp_get_dword(bfh.as_mut_ptr().offset(14 as libc::c_int as isize));
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:753:29
    |
753 |     bihsize = bmp_get_dword(bfh.as_mut_ptr().offset(14 as libc::c_int as isize));
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::fread` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:768:8
    |
768 |       if fread(
    |  ________^
769 | |         bih.offset(4 as libc::c_int as isize) as *mut libc::c_void,
770 | |         bihsize.wrapping_sub(4 as libc::c_int as png_uint_32) as libc::c_ulong,
771 | |         1 as libc::c_int as libc::c_ulong,
772 | |         stream,
773 | |     ) != 1 as libc::c_int as libc::c_ulong
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:769:9
    |
769 |         bih.offset(4 as libc::c_int as isize) as *mut libc::c_void,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::fseek` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:778:12
    |
778 |         if fseek(stream, skip as libc::c_long, 1 as libc::c_int) != 0 as libc::c_int {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::bmp_get_word` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:785:17
    |
785 |         width = bmp_get_word(bih.offset(4 as libc::c_int as isize));
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:785:30
    |
785 |         width = bmp_get_word(bih.offset(4 as libc::c_int as isize));
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::bmp_get_word` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:786:18
    |
786 |         height = bmp_get_word(bih.offset(6 as libc::c_int as isize));
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:786:31
    |
786 |         height = bmp_get_word(bih.offset(6 as libc::c_int as isize));
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::bmp_get_word` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:787:20
    |
787 |         pixdepth = bmp_get_word(bih.offset(10 as libc::c_int as isize));
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:787:33
    |
787 |         pixdepth = bmp_get_word(bih.offset(10 as libc::c_int as isize));
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::bmp_get_dword` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:791:17
    |
791 |         width = bmp_get_dword(bih.offset(4 as libc::c_int as isize));
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:791:31
    |
791 |         width = bmp_get_dword(bih.offset(4 as libc::c_int as isize));
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::bmp_get_dword` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:792:18
    |
792 |         height = bmp_get_dword(bih.offset(8 as libc::c_int as isize));
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:792:32
    |
792 |         height = bmp_get_dword(bih.offset(8 as libc::c_int as isize));
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::bmp_get_word` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:793:20
    |
793 |         pixdepth = bmp_get_word(bih.offset(14 as libc::c_int as isize));
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:793:33
    |
793 |         pixdepth = bmp_get_word(bih.offset(14 as libc::c_int as isize));
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::bmp_get_dword` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:794:23
    |
794 |         compression = bmp_get_dword(bih.offset(16 as libc::c_int as isize));
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:794:37
    |
794 |         compression = bmp_get_dword(bih.offset(16 as libc::c_int as isize));
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::fread` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:810:16
    |
810 |               if fread(
    |  ________________^
811 | |                 bih.offset(40 as libc::c_int as isize) as *mut libc::c_void,
812 | |                 i as libc::c_ulong,
813 | |                 1 as libc::c_int as libc::c_ulong,
814 | |                 stream,
815 | |             ) != 1 as libc::c_int as libc::c_ulong
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:811:17
    |
811 |                 bih.offset(40 as libc::c_int as isize) as *mut libc::c_void,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::memset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:824:5
    |
824 | /     memset(
825 | |         rgba_mask.as_mut_ptr() as *mut libc::c_void,
826 | |         0 as libc::c_int,
827 | |         ::core::mem::size_of::<[png_uint_32; 4]>() as libc::c_ulong,
828 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::bmp_get_dword` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:850:33
    |
850 |                     as usize] = bmp_get_dword(bih.offset(40 as libc::c_int as isize));
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:850:47
    |
850 |                     as usize] = bmp_get_dword(bih.offset(40 as libc::c_int as isize));
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::bmp_get_dword` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:852:33
    |
852 |                     as usize] = bmp_get_dword(bih.offset(44 as libc::c_int as isize));
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:852:47
    |
852 |                     as usize] = bmp_get_dword(bih.offset(44 as libc::c_int as isize));
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::bmp_get_dword` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:854:33
    |
854 |                     as usize] = bmp_get_dword(bih.offset(48 as libc::c_int as isize));
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:854:47
    |
854 |                     as usize] = bmp_get_dword(bih.offset(48 as libc::c_int as isize));
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::png_error` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:856:17
    |
856 | /                 png_error(
857 | |                     png_ptr as *const png_struct,
858 | |                     b"Missing color mask in BMP file\0" as *const u8
859 | |                         as *const libc::c_char,
860 | |                 );
    | |_________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::bmp_get_dword` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:865:29
    |
865 |                 as usize] = bmp_get_dword(bih.offset(52 as libc::c_int as isize));
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:865:43
    |
865 |                 as usize] = bmp_get_dword(bih.offset(52 as libc::c_int as isize));
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::png_error` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:896:13
    |
896 | /             png_error(
897 | |                 png_ptr as *const png_struct,
898 | |                 b"JPEG-compressed BMP files are not supported\0" as *const u8
899 | |                     as *const libc::c_char,
900 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::ungetc` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:903:16
    |
903 |             if ungetc(getc(stream), stream) == 0 as libc::c_int {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::getc` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:903:23
    |
903 |             if ungetc(getc(stream), stream) == 0 as libc::c_int {
    |                       ^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::png_set_sig_bytes` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:904:17
    |
904 |                 png_set_sig_bytes(png_ptr, 8 as libc::c_int);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::png_set_read_fn` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:906:13
    |
906 |             png_set_read_fn(png_ptr, stream as png_voidp, None);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::png_read_png` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:907:13
    |
907 |             png_read_png(png_ptr, info_ptr, 0 as libc::c_int, 0 as *mut libc::c_void);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::png_error` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:911:13
    |
911 | /             png_error(
912 | |                 png_ptr as *const png_struct,
913 | |                 b"Unsupported compression method in BMP file\0" as *const u8
914 | |                     as *const libc::c_char,
915 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::png_error` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:922:9
    |
922 | /         png_error(
923 | |             png_ptr as *const png_struct,
924 | |             b"Invalid image dimensions in BMP file\0" as *const u8 as *const libc::c_char,
925 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::png_error` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:928:9
    |
928 | /         png_error(
929 | |             png_ptr as *const png_struct,
930 | |             b"Invalid pixel depth in BMP file\0" as *const u8 as *const libc::c_char,
931 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::png_error` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrbmp.rs:985:9
    |
985 | /         png_error(
986 | |             png_ptr as *const png_struct,
987 | |             b"Can't handle exceedingly large BMP dimensions\0" as *const u8
988 | |                 as *const libc::c_char,
989 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::png_set_IHDR` is unsafe and requires unsafe block
    --> src/pngxtern/pngxrbmp.rs:991:5
     |
991  | /     png_set_IHDR(
992  | |         png_ptr as *const png_struct,
993  | |         info_ptr,
994  | |         width,
...    |
1000 | |         0 as libc::c_int,
1001 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::bmp_process_mask` is unsafe and requires unsafe block
    --> src/pngxtern/pngxrbmp.rs:1005:13
     |
1005 | /             bmp_process_mask(
1006 | |                 rgba_mask[i as usize],
1007 | |                 &mut *rgba_sig.as_mut_ptr().offset(i as isize),
1008 | |                 &mut *rgba_shift.as_mut_ptr().offset(i as isize),
1009 | |             );
     | |_____________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/pngxtern/pngxrbmp.rs:1007:22
     |
1007 |                 &mut *rgba_sig.as_mut_ptr().offset(i as isize),
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/pngxtern/pngxrbmp.rs:1007:23
     |
1007 |                 &mut *rgba_sig.as_mut_ptr().offset(i as isize),
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/pngxtern/pngxrbmp.rs:1008:22
     |
1008 |                 &mut *rgba_shift.as_mut_ptr().offset(i as isize),
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/pngxtern/pngxrbmp.rs:1008:23
     |
1008 |                 &mut *rgba_shift.as_mut_ptr().offset(i as isize),
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::png_error` is unsafe and requires unsafe block
    --> src/pngxtern/pngxrbmp.rs:1017:13
     |
1017 | /             png_error(
1018 | |                 png_ptr as *const png_struct,
1019 | |                 b"Invalid color mask in BMP file\0" as *const u8 as *const libc::c_char,
1020 | |             );
     | |_____________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::png_set_sBIT` is unsafe and requires unsafe block
    --> src/pngxtern/pngxrbmp.rs:1032:13
     |
1032 | /             png_set_sBIT(
1033 | |                 png_ptr as *const png_struct,
1034 | |                 info_ptr,
1035 | |                 &mut sig_bit as *mut png_color_8 as png_const_color_8p,
1036 | |             );
     | |_____________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::fread` is unsafe and requires unsafe block
    --> src/pngxtern/pngxrbmp.rs:1042:16
     |
1042 |               if fread(
     |  ________________^
1043 | |                 rgbq.as_mut_ptr() as *mut libc::c_void,
1044 | |                 palsize as libc::c_ulong,
1045 | |                 1 as libc::c_int as libc::c_ulong,
1046 | |                 stream,
1047 | |             ) != 1 as libc::c_int as libc::c_ulong
     | |_____________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::png_set_PLTE` is unsafe and requires unsafe block
    --> src/pngxtern/pngxrbmp.rs:1057:9
     |
1057 | /         png_set_PLTE(
1058 | |             png_ptr,
1059 | |             info_ptr,
1060 | |             palette.as_mut_ptr() as png_const_colorp,
1061 | |             i as libc::c_int,
1062 | |         );
     | |_________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::png_error` is unsafe and requires unsafe block
    --> src/pngxtern/pngxrbmp.rs:1064:13
     |
1064 | /             png_error(
1065 | |                 png_ptr as *const png_struct,
1066 | |                 b"Error reading color palette in BMP file\0" as *const u8
1067 | |                     as *const libc::c_char,
1068 | |             );
     | |_____________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::pngx_malloc_rows_extended` is unsafe and requires unsafe block
    --> src/pngxtern/pngxrbmp.rs:1071:20
     |
1071 |       row_pointers = pngx_malloc_rows_extended(
     |  ____________________^
1072 | |         png_ptr,
1073 | |         info_ptr,
1074 | |         rowsize as pngx_alloc_size_t,
1075 | |         -(1 as libc::c_int),
1076 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/pngxtern/pngxrbmp.rs:1079:19
     |
1079 |         end_row = row_pointers.offset(height as isize);
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/pngxtern/pngxrbmp.rs:1081:21
     |
1081 |           begin_row = row_pointers
     |  _____________________^
1082 | |             .offset(height as isize)
1083 | |             .offset(-(1 as libc::c_int as isize));
     | |_________________________________________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/pngxtern/pngxrbmp.rs:1081:21
     |
1081 |           begin_row = row_pointers
     |  _____________________^
1082 | |             .offset(height as isize)
     | |____________________________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/pngxtern/pngxrbmp.rs:1084:19
     |
1084 |         end_row = row_pointers.offset(-(1 as libc::c_int as isize));
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::fseek` is unsafe and requires unsafe block
    --> src/pngxtern/pngxrbmp.rs:1087:9
     |
1087 |         fseek(stream, skip as libc::c_long, 1 as libc::c_int);
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::bmp_read_rows` is unsafe and requires unsafe block
    --> src/pngxtern/pngxrbmp.rs:1089:9
     |
1089 |     y = bmp_read_rows(begin_row, end_row, rowsize as size_t, compression, stream);
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::bmp_to_png_rows` is unsafe and requires unsafe block
    --> src/pngxtern/pngxrbmp.rs:1091:9
     |
1091 | /         bmp_to_png_rows(
1092 | |             row_pointers,
1093 | |             width,
1094 | |             height,
...    |
1097 | |             rgba_shift.as_mut_ptr(),
1098 | |         );
     | |_________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrbmp::png_error` is unsafe and requires unsafe block
    --> src/pngxtern/pngxrbmp.rs:1101:9
     |
1101 | /         png_error(
1102 | |             png_ptr as *const png_struct,
1103 | |             b"Error reading BMP file\0" as *const u8 as *const libc::c_char,
1104 | |         );
     | |_________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/pngxtern/pngxrbmp.rs:680:5
    |
680 |     mut png_ptr: png_structp,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrbmp.rs:681:5
    |
681 |     mut info_ptr: png_infop,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrbmp.rs:682:5
    |
682 |     mut stream: *mut FILE,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `has_png_sig` is never read
   --> src/pngxtern/pngxread.rs:217:13
    |
217 |     let mut has_png_sig: libc::c_int = 0;
    |             ^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `pngxtern::pngxread::memcmp` is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:221:20
    |
221 |       has_png_sig = (memcmp(
    |  ____________________^
222 | |         sig as *const libc::c_void,
223 | |         png_file_sig.as_ptr() as *const libc::c_void,
224 | |         8 as libc::c_int as libc::c_ulong,
225 | |     ) == 0 as libc::c_int) as libc::c_int;
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/pngxtern/pngxread.rs:162:1
    |
162 | / unsafe extern "C" fn pngx_sig_is_png(
163 | |     mut png_ptr: png_structp,
164 | |     mut sig: png_bytep,
165 | |     mut sig_size: size_t,
166 | |     mut fmt_name_ptr: png_const_charpp,
167 | |     mut fmt_long_name_ptr: png_const_charpp,
168 | | ) -> libc::c_int {
    | |________________^

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:223:9
    |
223 |         png_file_sig.as_ptr() as *const libc::c_void,
    |         ^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxread::memcmp` is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:226:8
    |
226 |       if memcmp(
    |  ________^
227 | |         sig
228 | |             .offset(
229 | |                 (if has_png_sig != 0 { 8 as libc::c_int } else { 0 as libc::c_int })
...   |
233 | |         8 as libc::c_int as libc::c_ulong,
234 | |     ) != 0 as libc::c_int
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:227:9
    |
227 | /         sig
228 | |             .offset(
229 | |                 (if has_png_sig != 0 { 8 as libc::c_int } else { 0 as libc::c_int })
230 | |                     as isize,
231 | |             ) as *const libc::c_void,
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:232:9
    |
232 |         png_ihdr_sig.as_ptr() as *const libc::c_void,
    |         ^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxread::memcmp` is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:236:12
    |
236 |           if memcmp(
    |  ____________^
237 | |             sig as *const libc::c_void,
238 | |             png_file_sig.as_ptr() as *const libc::c_void,
239 | |             4 as libc::c_int as libc::c_ulong,
240 | |         ) == 0 as libc::c_int
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:238:13
    |
238 |             png_file_sig.as_ptr() as *const libc::c_void,
    |             ^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:241:17
    |
241 |             && (*sig.offset(4 as libc::c_int as isize) as libc::c_int
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:241:18
    |
241 |             && (*sig.offset(4 as libc::c_int as isize) as libc::c_int
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:243:20
    |
243 |                 || *sig.offset(4 as libc::c_int as isize) as libc::c_int
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:243:21
    |
243 |                 || *sig.offset(4 as libc::c_int as isize) as libc::c_int
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxread::png_error` is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:246:13
    |
246 | /             png_error(
247 | |                 png_ptr as *const png_struct,
248 | |                 b"PNG file appears to be corrupted by text file conversions\0"
249 | |                     as *const u8 as *const libc::c_char,
250 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxread::memcmp` is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:251:19
    |
251 |           } else if memcmp(
    |  ___________________^
252 | |             sig as *const libc::c_void,
253 | |             mng_file_sig.as_ptr() as *const libc::c_void,
254 | |             8 as libc::c_int as libc::c_ulong,
255 | |         ) == 0 as libc::c_int
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:253:13
    |
253 |             mng_file_sig.as_ptr() as *const libc::c_void,
    |             ^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxread::png_error` is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:257:13
    |
257 | /             png_error(
258 | |                 png_ptr as *const png_struct,
259 | |                 b"MNG decoding is not supported\0" as *const u8 as *const libc::c_char,
260 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:265:9
    |
265 |         *fmt_name_ptr = if has_png_sig != 0 {
    |         ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:266:13
    |
266 |             pngx_png_standalone_fmt_name.as_ptr()
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:268:13
    |
268 |             pngx_png_datastream_fmt_name.as_ptr()
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:272:9
    |
272 |         *fmt_long_name_ptr = if has_png_sig != 0 {
    |         ^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:273:13
    |
273 |             pngx_png_standalone_fmt_long_name.as_ptr()
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:275:13
    |
275 |             pngx_png_datastream_fmt_long_name.as_ptr()
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error: variable does not need to be mutable
   --> src/pngxtern/pngxread.rs:163:5
    |
163 |     mut png_ptr: png_structp,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxread.rs:164:5
    |
164 |     mut sig: png_bytep,
    |     ----^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxread.rs:165:5
    |
165 |     mut sig_size: size_t,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxread.rs:166:5
    |
166 |     mut fmt_name_ptr: png_const_charpp,
    |     ----^^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxread.rs:167:5
    |
167 |     mut fmt_long_name_ptr: png_const_charpp,
    |     ----^^^^^^^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `num` is never read
   --> src/pngxtern/pngxread.rs:288:13
    |
288 |     let mut num: size_t = 0;
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `read_fn` is never read
   --> src/pngxtern/pngxread.rs:289:13
    |
289 |     let mut read_fn: Option::<
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `stream` is never read
   --> src/pngxtern/pngxread.rs:292:13
    |
292 |     let mut stream: *mut FILE = 0 as *mut FILE;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `result` is never read
   --> src/pngxtern/pngxread.rs:300:13
    |
300 |     let mut result: libc::c_int = 0;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `pngxtern::pngxread::png_get_io_ptr` is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:301:14
    |
301 |     stream = png_get_io_ptr(png_ptr as *const png_struct) as *mut FILE;
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/pngxtern/pngxread.rs:281:1
    |
281 | / pub unsafe extern "C" fn pngx_read_image(
282 | |     mut png_ptr: png_structp,
283 | |     mut info_ptr: png_infop,
284 | |     mut fmt_name_ptr: png_const_charpp,
285 | |     mut fmt_long_name_ptr: png_const_charpp,
286 | | ) -> libc::c_int {
    | |________________^

error[E0133]: call to unsafe function `pngxtern::pngxread::fgetpos` is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:302:8
    |
302 |     if fgetpos(stream, &mut fpos) != 0 as libc::c_int {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxread::png_error` is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:303:9
    |
303 | /         png_error(
304 | |             png_ptr as *const png_struct,
305 | |             b"Can't ftell in input file stream\0" as *const u8 as *const libc::c_char,
306 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxread::fread` is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:308:11
    |
308 |       num = fread(
    |  ___________^
309 | |         sig.as_mut_ptr() as *mut libc::c_void,
310 | |         1 as libc::c_int as libc::c_ulong,
311 | |         ::core::mem::size_of::<[png_byte; 128]>() as libc::c_ulong,
312 | |         stream,
313 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxread::fsetpos` is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:314:8
    |
314 |     if fsetpos(stream, &mut fpos) != 0 as libc::c_int {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxread::png_error` is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:315:9
    |
315 | /         png_error(
316 | |             png_ptr as *const png_struct,
317 | |             b"Can't fseek in input file stream\0" as *const u8 as *const libc::c_char,
318 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxread::pngx_sig_is_png` is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:320:8
    |
320 |     if pngx_sig_is_png(png_ptr, sig.as_mut_ptr(), num, fmt_name_ptr, fmt_long_name_ptr)
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxread::png_read_png` is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:323:9
    |
323 |         png_read_png(png_ptr, info_ptr, 0 as libc::c_int, 0 as *mut libc::c_void);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxread::getc` is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:324:12
    |
324 |         if getc(stream) != -(1 as libc::c_int) {
    |            ^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxread::png_warning` is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:325:13
    |
325 | /             png_warning(
326 | |                 png_ptr as *const png_struct,
327 | |                 b"Extraneous data found after IEND\0" as *const u8 as *const libc::c_char,
328 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxread::fseek` is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:329:13
    |
329 |             fseek(stream, 0 as libc::c_int as libc::c_long, 2 as libc::c_int);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxread::pngx_sig_is_bmp` is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:333:8
    |
333 |     if pngx_sig_is_bmp(sig.as_mut_ptr(), num, fmt_name_ptr, fmt_long_name_ptr)
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxread::pngx_sig_is_gif` is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:340:15
    |
340 |     } else if pngx_sig_is_gif(sig.as_mut_ptr(), num, fmt_name_ptr, fmt_long_name_ptr)
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxread::pngx_sig_is_jpeg` is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:347:15
    |
347 |     } else if pngx_sig_is_jpeg(sig.as_mut_ptr(), num, fmt_name_ptr, fmt_long_name_ptr)
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxread::pngx_sig_is_pnm` is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:354:15
    |
354 |     } else if pngx_sig_is_pnm(sig.as_mut_ptr(), num, fmt_name_ptr, fmt_long_name_ptr)
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxread::pngx_sig_is_tiff` is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:361:15
    |
361 |     } else if pngx_sig_is_tiff(sig.as_mut_ptr(), num, fmt_name_ptr, fmt_long_name_ptr)
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:371:14
    |
371 |     result = read_fn.expect("non-null function pointer")(png_ptr, info_ptr, stream);
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxread::fsetpos` is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:373:12
    |
373 |         if fsetpos(stream, &mut fpos) != 0 as libc::c_int {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxread::png_error` is unsafe and requires unsafe block
   --> src/pngxtern/pngxread.rs:374:13
    |
374 | /             png_error(
375 | |                 png_ptr as *const png_struct,
376 | |                 b"Can't fseek in input file stream\0" as *const u8 as *const libc::c_char,
377 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/pngxtern/pngxread.rs:282:5
    |
282 |     mut png_ptr: png_structp,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxread.rs:283:5
    |
283 |     mut info_ptr: png_infop,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxread.rs:284:5
    |
284 |     mut fmt_name_ptr: png_const_charpp,
    |     ----^^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxread.rs:285:5
    |
285 |     mut fmt_long_name_ptr: png_const_charpp,
    |     ----^^^^^^^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error[E0133]: call to unsafe function `pngxtern::pngxrgif::memcmp` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:229:8
    |
229 |       if memcmp(
    |  ________^
230 | |         sig as *const libc::c_void,
231 | |         gif_sig_gif87a.as_ptr() as *const libc::c_void,
232 | |         6 as libc::c_int as libc::c_ulong,
233 | |     ) != 0 as libc::c_int
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/pngxtern/pngxrgif.rs:220:1
    |
220 | / pub unsafe extern "C" fn pngx_sig_is_gif(
221 | |     mut sig: png_bytep,
222 | |     mut sig_size: size_t,
223 | |     mut fmt_name_ptr: png_const_charpp,
224 | |     mut fmt_long_name_ptr: png_const_charpp,
225 | | ) -> libc::c_int {
    | |________________^

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:231:9
    |
231 |         gif_sig_gif87a.as_ptr() as *const libc::c_void,
    |         ^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrgif::memcmp` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:234:12
    |
234 |           && memcmp(
    |  ____________^
235 | |             sig as *const libc::c_void,
236 | |             gif_sig_gif89a.as_ptr() as *const libc::c_void,
237 | |             6 as libc::c_int as libc::c_ulong,
238 | |         ) != 0 as libc::c_int
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:236:13
    |
236 |             gif_sig_gif89a.as_ptr() as *const libc::c_void,
    |             ^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:243:9
    |
243 |         *fmt_name_ptr = gif_fmt_name.as_ptr();
    |         ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:243:25
    |
243 |         *fmt_name_ptr = gif_fmt_name.as_ptr();
    |                         ^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:246:9
    |
246 |         *fmt_long_name_ptr = gif_fmt_long_name.as_ptr();
    |         ^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:246:30
    |
246 |         *fmt_long_name_ptr = gif_fmt_long_name.as_ptr();
    |                              ^^^^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error: variable does not need to be mutable
   --> src/pngxtern/pngxrgif.rs:221:5
    |
221 |     mut sig: png_bytep,
    |     ----^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrgif.rs:222:5
    |
222 |     mut sig_size: size_t,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrgif.rs:223:5
    |
223 |     mut fmt_name_ptr: png_const_charpp,
    |     ----^^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrgif.rs:224:5
    |
224 |     mut fmt_long_name_ptr: png_const_charpp,
    |     ----^^^^^^^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:255:9
    |
255 |     if !err_gif_image_ptr.is_null() {
    |         ^^^^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/pngxtern/pngxrgif.rs:254:1
    |
254 | unsafe extern "C" fn pngx_gif_error(mut msg: *const libc::c_char) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `pngxtern::pngxrgif::GIFDestroyImage` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:256:9
    |
256 |         GIFDestroyImage(err_gif_image_ptr);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:256:25
    |
256 |         GIFDestroyImage(err_gif_image_ptr);
    |                         ^^^^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:258:9
    |
258 |     if !err_gif_ext_ptr.is_null() {
    |         ^^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrgif::GIFDestroyExtension` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:259:9
    |
259 |         GIFDestroyExtension(err_gif_ext_ptr);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:259:29
    |
259 |         GIFDestroyExtension(err_gif_ext_ptr);
    |                             ^^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrgif::png_error` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:261:5
    |
261 |     png_error(err_png_ptr as *const png_struct, msg);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:261:15
    |
261 |     png_error(err_png_ptr as *const png_struct, msg);
    |               ^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error: variable does not need to be mutable
   --> src/pngxtern/pngxrgif.rs:254:37
    |
254 | unsafe extern "C" fn pngx_gif_error(mut msg: *const libc::c_char) {
    |                                     ----^^^
    |                                     |
    |                                     help: remove this `mut`

error[E0133]: call to unsafe function `pngxtern::pngxrgif::png_warning` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:264:5
    |
264 |     png_warning(err_png_ptr as *const png_struct, msg);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/pngxtern/pngxrgif.rs:263:1
    |
263 | unsafe extern "C" fn pngx_gif_warning(mut msg: *const libc::c_char) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:264:17
    |
264 |     png_warning(err_png_ptr as *const png_struct, msg);
    |                 ^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error: variable does not need to be mutable
   --> src/pngxtern/pngxrgif.rs:263:39
    |
263 | unsafe extern "C" fn pngx_gif_warning(mut msg: *const libc::c_char) {
    |                                       ----^^^
    |                                       |
    |                                       help: remove this `mut`

error: value assigned to `i` is never read
   --> src/pngxtern/pngxrgif.rs:277:13
    |
277 |     let mut i: libc::c_uint = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:281:20
    |
281 |               .red = *color_table
    |  ____________________^
282 | |             .offset((3 as libc::c_int as libc::c_uint).wrapping_mul(i) as isize);
    | |________________________________________________________________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/pngxtern/pngxrgif.rs:266:1
    |
266 | / unsafe extern "C" fn pngx_set_gif_palette(
267 | |     mut png_ptr: png_structp,
268 | |     mut info_ptr: png_infop,
269 | |     mut color_table: *mut libc::c_uchar,
270 | |     mut num_colors: libc::c_uint,
271 | | ) {
    | |_^

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:281:21
    |
281 |               .red = *color_table
    |  _____________________^
282 | |             .offset((3 as libc::c_int as libc::c_uint).wrapping_mul(i) as isize);
    | |________________________________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:284:22
    |
284 |               .green = *color_table
    |  ______________________^
285 | |             .offset(
286 | |                 (3 as libc::c_int as libc::c_uint)
287 | |                     .wrapping_mul(i)
288 | |                     .wrapping_add(1 as libc::c_int as libc::c_uint) as isize,
289 | |             );
    | |_____________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:284:23
    |
284 |               .green = *color_table
    |  _______________________^
285 | |             .offset(
286 | |                 (3 as libc::c_int as libc::c_uint)
287 | |                     .wrapping_mul(i)
288 | |                     .wrapping_add(1 as libc::c_int as libc::c_uint) as isize,
289 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:291:21
    |
291 |               .blue = *color_table
    |  _____________________^
292 | |             .offset(
293 | |                 (3 as libc::c_int as libc::c_uint)
294 | |                     .wrapping_mul(i)
295 | |                     .wrapping_add(2 as libc::c_int as libc::c_uint) as isize,
296 | |             );
    | |_____________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:291:22
    |
291 |               .blue = *color_table
    |  ______________________^
292 | |             .offset(
293 | |                 (3 as libc::c_int as libc::c_uint)
294 | |                     .wrapping_mul(i)
295 | |                     .wrapping_add(2 as libc::c_int as libc::c_uint) as isize,
296 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrgif::png_set_PLTE` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:300:5
    |
300 | /     png_set_PLTE(
301 | |         png_ptr,
302 | |         info_ptr,
303 | |         palette.as_mut_ptr() as png_const_colorp,
304 | |         num_colors as libc::c_int,
305 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/pngxtern/pngxrgif.rs:267:5
    |
267 |     mut png_ptr: png_structp,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrgif.rs:268:5
    |
268 |     mut info_ptr: png_infop,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrgif.rs:269:5
    |
269 |     mut color_table: *mut libc::c_uchar,
    |     ----^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrgif.rs:270:5
    |
270 |     mut num_colors: libc::c_uint,
    |     ----^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `i` is never read
   --> src/pngxtern/pngxrgif.rs:313:13
    |
313 |     let mut i: libc::c_uint = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `pngxtern::pngxrgif::png_set_tRNS` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:321:5
    |
321 | /     png_set_tRNS(
322 | |         png_ptr,
323 | |         info_ptr,
324 | |         trans.as_mut_ptr() as png_const_bytep,
325 | |         transparent as libc::c_int + 1 as libc::c_int,
326 | |         0 as png_const_color_16p,
327 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/pngxtern/pngxrgif.rs:307:1
    |
307 | / unsafe extern "C" fn pngx_set_gif_transparent(
308 | |     mut png_ptr: png_structp,
309 | |     mut info_ptr: png_infop,
310 | |     mut transparent: libc::c_uint,
311 | | ) {
    | |_^

error: variable does not need to be mutable
   --> src/pngxtern/pngxrgif.rs:308:5
    |
308 |     mut png_ptr: png_structp,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrgif.rs:309:5
    |
309 |     mut info_ptr: png_infop,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrgif.rs:310:5
    |
310 |     mut transparent: libc::c_uint,
    |     ----^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `blockCode` is never read
   --> src/pngxtern/pngxrgif.rs:372:13
    |
372 |     let mut blockCode: libc::c_int = 0;
    |             ^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `transparent` is never read
   --> src/pngxtern/pngxrgif.rs:375:13
    |
375 |     let mut transparent: libc::c_uint = 0;
    |             ^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `numImages` is never read
   --> src/pngxtern/pngxrgif.rs:376:13
    |
376 |     let mut numImages: libc::c_uint = 0;
    |             ^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `width` is never read
   --> src/pngxtern/pngxrgif.rs:377:13
    |
377 |     let mut width: png_uint_32 = 0;
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `height` is never read
   --> src/pngxtern/pngxrgif.rs:378:13
    |
378 |     let mut height: png_uint_32 = 0;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `row_pointers` is never read
   --> src/pngxtern/pngxrgif.rs:379:13
    |
379 |     let mut row_pointers: png_bytepp = 0 as *mut *mut png_byte;
    |             ^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:380:5
    |
380 |     GIFError = Some(pngx_gif_error as unsafe extern "C" fn(*const libc::c_char) -> ());
    |     ^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/pngxtern/pngxrgif.rs:330:1
    |
330 | / pub unsafe extern "C" fn pngx_read_gif(
331 | |     mut png_ptr: png_structp,
332 | |     mut info_ptr: png_infop,
333 | |     mut stream: *mut FILE,
334 | | ) -> libc::c_int {
    | |________________^

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:381:5
    |
381 |     GIFWarning = Some(
    |     ^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:384:5
    |
384 |     err_png_ptr = png_ptr;
    |     ^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:385:5
    |
385 |     err_gif_image_ptr = 0 as *mut GIFImage;
    |     ^^^^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:386:5
    |
386 |     err_gif_ext_ptr = 0 as *mut GIFExtension;
    |     ^^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrgif::GIFReadScreen` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:387:5
    |
387 |     GIFReadScreen(&mut screen, stream);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrgif::png_set_IHDR` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:390:5
    |
390 | /     png_set_IHDR(
391 | |         png_ptr as *const png_struct,
392 | |         info_ptr,
393 | |         width,
...   |
399 | |         0 as libc::c_int,
400 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrgif::pngx_malloc_rows` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:401:20
    |
401 |     row_pointers = pngx_malloc_rows(png_ptr, info_ptr, screen.Background as libc::c_int);
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrgif::GIFInitImage` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:402:5
    |
402 |     GIFInitImage(&mut image, &mut screen, row_pointers);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:403:5
    |
403 |     err_gif_image_ptr = &mut image;
    |     ^^^^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrgif::GIFInitExtension` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:404:5
    |
404 |     GIFInitExtension(&mut ext, &mut screen, 256 as libc::c_int as libc::c_uint);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:405:5
    |
405 |     err_gif_ext_ptr = &mut ext;
    |     ^^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrgif::GIFReadNextBlock` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:409:21
    |
409 |         blockCode = GIFReadNextBlock(&mut image, &mut ext, stream);
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrgif::pngx_set_interlace_type` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:413:21
    |
413 |                     pngx_set_interlace_type(png_ptr, info_ptr, 1 as libc::c_int);
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrgif::GIFGetColorTable` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:415:17
    |
415 |                 GIFGetColorTable(&mut colorTable, &mut numColors, &mut image);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrgif::pngx_set_gif_palette` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:416:17
    |
416 |                 pngx_set_gif_palette(png_ptr, info_ptr, colorTable, numColors);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrgif::pngx_set_gif_transparent` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:418:21
    |
418 |                     pngx_set_gif_transparent(png_ptr, info_ptr, transparent);
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrgif::GIFGetGraphicCtl` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:426:17
    |
426 |                 GIFGetGraphicCtl(&mut graphicExt, &mut ext);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrgif::png_error` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:438:9
    |
438 | /         png_error(
439 | |             png_ptr as *const png_struct,
440 | |             b"No image in GIF file\0" as *const u8 as *const libc::c_char,
441 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrgif::GIFDestroyImage` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:443:5
    |
443 |     GIFDestroyImage(&mut image);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrgif::GIFDestroyExtension` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrgif.rs:444:5
    |
444 |     GIFDestroyExtension(&mut ext);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/pngxtern/pngxrgif.rs:331:5
    |
331 |     mut png_ptr: png_structp,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrgif.rs:332:5
    |
332 |     mut info_ptr: png_infop,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrgif.rs:333:5
    |
333 |     mut stream: *mut FILE,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `fmt` is never read
   --> src/pngxtern/pngxrjpg.rs:115:13
    |
115 |     let mut fmt: *const libc::c_char = 0 as *const libc::c_char;
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `marker` is never read
   --> src/pngxtern/pngxrjpg.rs:116:13
    |
116 |     let mut marker: libc::c_uint = 0;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `result` is never read
   --> src/pngxtern/pngxrjpg.rs:117:13
    |
117 |     let mut result: libc::c_int = 0;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrjpg.rs:121:8
    |
121 |     if *sig.offset(0 as libc::c_int as isize) as libc::c_int == 0xff as libc::c_int
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/pngxtern/pngxrjpg.rs:109:1
    |
109 | / pub unsafe extern "C" fn pngx_sig_is_jpeg(
110 | |     mut sig: png_bytep,
111 | |     mut sig_size: size_t,
112 | |     mut fmt_name_ptr: png_const_charpp,
113 | |     mut fmt_long_name_ptr: png_const_charpp,
114 | | ) -> libc::c_int {
    | |________________^

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrjpg.rs:121:9
    |
121 |     if *sig.offset(0 as libc::c_int as isize) as libc::c_int == 0xff as libc::c_int
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrjpg.rs:122:12
    |
122 |         && *sig.offset(1 as libc::c_int as isize) as libc::c_int == 0xd8 as libc::c_int
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrjpg.rs:122:13
    |
122 |         && *sig.offset(1 as libc::c_int as isize) as libc::c_int == 0xd8 as libc::c_int
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrjpg.rs:123:12
    |
123 |         && *sig.offset(2 as libc::c_int as isize) as libc::c_int == 0xff as libc::c_int
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrjpg.rs:123:13
    |
123 |         && *sig.offset(2 as libc::c_int as isize) as libc::c_int == 0xff as libc::c_int
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrjpg.rs:126:15
    |
126 |             | *sig.offset(3 as libc::c_int as isize) as libc::c_uint;
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrjpg.rs:126:16
    |
126 |             | *sig.offset(3 as libc::c_int as isize) as libc::c_uint;
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrjpg::memcmp` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrjpg.rs:135:15
    |
135 |       } else if memcmp(
    |  _______________^
136 | |         sig as *const libc::c_void,
137 | |         jpeg_sig_jp2.as_ptr() as *const libc::c_void,
138 | |         12 as libc::c_int as libc::c_ulong,
139 | |     ) == 0 as libc::c_int
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxrjpg.rs:137:9
    |
137 |         jpeg_sig_jp2.as_ptr() as *const libc::c_void,
    |         ^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrjpg::memcmp` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrjpg.rs:140:12
    |
140 |           || memcmp(
    |  ____________^
141 | |             sig as *const libc::c_void,
142 | |             jpeg_sig_jpc.as_ptr() as *const libc::c_void,
143 | |             4 as libc::c_int as libc::c_ulong,
144 | |         ) == 0 as libc::c_int
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxrjpg.rs:142:13
    |
142 |             jpeg_sig_jpc.as_ptr() as *const libc::c_void,
    |             ^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrjpg::memcmp` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrjpg.rs:148:15
    |
148 |       } else if memcmp(
    |  _______________^
149 | |         sig as *const libc::c_void,
150 | |         jpeg_sig_jng.as_ptr() as *const libc::c_void,
151 | |         8 as libc::c_int as libc::c_ulong,
152 | |     ) == 0 as libc::c_int
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxrjpg.rs:150:9
    |
150 |         jpeg_sig_jng.as_ptr() as *const libc::c_void,
    |         ^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrjpg::memcmp` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrjpg.rs:153:12
    |
153 |           || memcmp(
    |  ____________^
154 | |             sig as *const libc::c_void,
155 | |             jpeg_sig_jng_jhdr.as_ptr() as *const libc::c_void,
156 | |             8 as libc::c_int as libc::c_ulong,
157 | |         ) == 0 as libc::c_int
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxrjpg.rs:155:13
    |
155 |             jpeg_sig_jng_jhdr.as_ptr() as *const libc::c_void,
    |             ^^^^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrjpg.rs:165:9
    |
165 |         *fmt_name_ptr = fmt;
    |         ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrjpg.rs:168:9
    |
168 |         *fmt_long_name_ptr = fmt;
    |         ^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error: variable does not need to be mutable
   --> src/pngxtern/pngxrjpg.rs:110:5
    |
110 |     mut sig: png_bytep,
    |     ----^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrjpg.rs:111:5
    |
111 |     mut sig_size: size_t,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrjpg.rs:112:5
    |
112 |     mut fmt_name_ptr: png_const_charpp,
    |     ----^^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrjpg.rs:113:5
    |
113 |     mut fmt_long_name_ptr: png_const_charpp,
    |     ----^^^^^^^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `sig_code` is never read
   --> src/pngxtern/pngxrjpg.rs:179:13
    |
179 |     let mut sig_code: libc::c_int = 0;
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `pngxtern::pngxrjpg::fread` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrjpg.rs:180:8
    |
180 |       if fread(
    |  ________^
181 | |         buf.as_mut_ptr() as *mut libc::c_void,
182 | |         12 as libc::c_int as libc::c_ulong,
183 | |         1 as libc::c_int as libc::c_ulong,
184 | |         stream,
185 | |     ) != 1 as libc::c_int as libc::c_ulong
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/pngxtern/pngxrjpg.rs:173:1
    |
173 | / pub unsafe extern "C" fn pngx_read_jpeg(
174 | |     mut png_ptr: png_structp,
175 | |     mut info_ptr: png_infop,
176 | |     mut stream: *mut FILE,
177 | | ) -> libc::c_int {
    | |________________^

error[E0133]: call to unsafe function `pngxtern::pngxrjpg::pngx_sig_is_jpeg` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrjpg.rs:189:16
    |
189 |       sig_code = pngx_sig_is_jpeg(
    |  ________________^
190 | |         buf.as_mut_ptr(),
191 | |         12 as libc::c_int as size_t,
192 | |         0 as png_const_charpp,
193 | |         0 as png_const_charpp,
194 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrjpg::png_error` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrjpg.rs:197:13
    |
197 | /             png_error(
198 | |                 png_ptr as *const png_struct,
199 | |                 b"JPEG decoding is not supported\0" as *const u8 as *const libc::c_char,
200 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrjpg::png_error` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrjpg.rs:203:13
    |
203 | /             png_error(
204 | |                 png_ptr as *const png_struct,
205 | |                 b"JPEG-2000 decoding is not supported\0" as *const u8
206 | |                     as *const libc::c_char,
207 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrjpg::png_error` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrjpg.rs:210:13
    |
210 | /             png_error(
211 | |                 png_ptr as *const png_struct,
212 | |                 b"JNG (JPEG) decoding is not supported\0" as *const u8
213 | |                     as *const libc::c_char,
214 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/pngxtern/pngxrjpg.rs:174:5
    |
174 |     mut png_ptr: png_structp,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrjpg.rs:175:5
    |
175 |     mut info_ptr: png_infop,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrjpg.rs:176:5
    |
176 |     mut stream: *mut FILE,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:191:8
    |
191 |     if *sig.offset(0 as libc::c_int as isize) as libc::c_int != 'P' as i32
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/pngxtern/pngxrpnm.rs:160:1
    |
160 | / pub unsafe extern "C" fn pngx_sig_is_pnm(
161 | |     mut sig: png_bytep,
162 | |     mut sig_size: size_t,
163 | |     mut fmt_name_ptr: png_const_charpp,
164 | |     mut fmt_long_name_ptr: png_const_charpp,
165 | | ) -> libc::c_int {
    | |________________^

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:191:9
    |
191 |     if *sig.offset(0 as libc::c_int as isize) as libc::c_int != 'P' as i32
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:192:13
    |
192 |         || (*sig.offset(1 as libc::c_int as isize) as libc::c_int) < '1' as i32
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:192:14
    |
192 |         || (*sig.offset(1 as libc::c_int as isize) as libc::c_int) < '1' as i32
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:193:12
    |
193 |         || *sig.offset(1 as libc::c_int as isize) as libc::c_int > '7' as i32
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:193:13
    |
193 |         || *sig.offset(1 as libc::c_int as isize) as libc::c_int > '7' as i32
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:197:8
    |
197 |     if *sig.offset(2 as libc::c_int as isize) as libc::c_int != ' ' as i32
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:197:9
    |
197 |     if *sig.offset(2 as libc::c_int as isize) as libc::c_int != ' ' as i32
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:198:12
    |
198 |         && *sig.offset(2 as libc::c_int as isize) as libc::c_int != '\t' as i32
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:198:13
    |
198 |         && *sig.offset(2 as libc::c_int as isize) as libc::c_int != '\t' as i32
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:199:12
    |
199 |         && *sig.offset(2 as libc::c_int as isize) as libc::c_int != '\n' as i32
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:199:13
    |
199 |         && *sig.offset(2 as libc::c_int as isize) as libc::c_int != '\n' as i32
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:200:12
    |
200 |         && *sig.offset(2 as libc::c_int as isize) as libc::c_int != '\r' as i32
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:200:13
    |
200 |         && *sig.offset(2 as libc::c_int as isize) as libc::c_int != '\r' as i32
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:201:12
    |
201 |         && *sig.offset(2 as libc::c_int as isize) as libc::c_int != '#' as i32
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:201:13
    |
201 |         && *sig.offset(2 as libc::c_int as isize) as libc::c_int != '#' as i32
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:206:9
    |
206 |         *fmt_name_ptr = fmt_names[(*sig.offset(1 as libc::c_int as isize) as libc::c_int
    |         ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:206:25
    |
206 |         *fmt_name_ptr = fmt_names[(*sig.offset(1 as libc::c_int as isize) as libc::c_int
    |                         ^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:206:36
    |
206 |         *fmt_name_ptr = fmt_names[(*sig.offset(1 as libc::c_int as isize) as libc::c_int
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:206:37
    |
206 |         *fmt_name_ptr = fmt_names[(*sig.offset(1 as libc::c_int as isize) as libc::c_int
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:210:9
    |
210 |         *fmt_long_name_ptr = fmt_long_names[(*sig.offset(1 as libc::c_int as isize)
    |         ^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:210:30
    |
210 |         *fmt_long_name_ptr = fmt_long_names[(*sig.offset(1 as libc::c_int as isize)
    |                              ^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:210:46
    |
210 |         *fmt_long_name_ptr = fmt_long_names[(*sig.offset(1 as libc::c_int as isize)
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:210:47
    |
210 |         *fmt_long_name_ptr = fmt_long_names[(*sig.offset(1 as libc::c_int as isize)
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/pngxtern/pngxrpnm.rs:161:5
    |
161 |     mut sig: png_bytep,
    |     ----^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrpnm.rs:162:5
    |
162 |     mut sig_size: size_t,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrpnm.rs:163:5
    |
163 |     mut fmt_name_ptr: png_const_charpp,
    |     ----^^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrpnm.rs:164:5
    |
164 |     mut fmt_long_name_ptr: png_const_charpp,
    |     ----^^^^^^^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `ch` is never read
   --> src/pngxtern/pngxrpnm.rs:219:13
    |
219 |     let mut ch: libc::c_int = 0;
    |             ^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:220:8
    |
220 |     if (*pnm_ptr).format >= PNM_P1 as libc::c_int as libc::c_uint
    |        ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/pngxtern/pngxrpnm.rs:215:1
    |
215 | / unsafe extern "C" fn pnm_fpeek_eof(
216 | |     mut pnm_ptr: *mut pnm_struct,
217 | |     mut stream: *mut FILE,
218 | | ) -> libc::c_int {
    | |________________^

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:221:12
    |
221 |         && (*pnm_ptr).format <= PNM_P3 as libc::c_int as libc::c_uint
    |            ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrpnm::getc` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:224:18
    |
224 |             ch = getc(stream);
    |                  ^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrpnm::getc` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:227:26
    |
227 |                     ch = getc(stream);
    |                          ^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrpnm::getc` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:245:14
    |
245 |         ch = getc(stream);
    |              ^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrpnm::ungetc` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:250:5
    |
250 |     ungetc(ch, stream);
    |     ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/pngxtern/pngxrpnm.rs:216:5
    |
216 |     mut pnm_ptr: *mut pnm_struct,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrpnm.rs:217:5
    |
217 |     mut stream: *mut FILE,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `format` is never read
   --> src/pngxtern/pngxrpnm.rs:266:13
    |
266 |     let mut format: libc::c_uint = 0;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `depth` is never read
   --> src/pngxtern/pngxrpnm.rs:267:13
    |
267 |     let mut depth: libc::c_uint = 0;
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `width` is never read
   --> src/pngxtern/pngxrpnm.rs:268:13
    |
268 |     let mut width: libc::c_uint = 0;
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `height` is never read
   --> src/pngxtern/pngxrpnm.rs:269:13
    |
269 |     let mut height: libc::c_uint = 0;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `maxval` is never read
   --> src/pngxtern/pngxrpnm.rs:270:13
    |
270 |     let mut maxval: libc::c_uint = 0;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `max_width` is never read
   --> src/pngxtern/pngxrpnm.rs:271:13
    |
271 |     let mut max_width: libc::c_uint = 0;
    |             ^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `num_samples` is never read
   --> src/pngxtern/pngxrpnm.rs:272:13
    |
272 |     let mut num_samples: libc::c_uint = 0;
    |             ^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `sample_size` is never read
   --> src/pngxtern/pngxrpnm.rs:273:13
    |
273 |     let mut sample_size: libc::c_uint = 0;
    |             ^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `pnmrow` is never read
   --> src/pngxtern/pngxrpnm.rs:274:13
    |
274 |     let mut pnmrow: *mut libc::c_uint = 0 as *mut libc::c_uint;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `row_size` is never read
   --> src/pngxtern/pngxrpnm.rs:275:13
    |
275 |     let mut row_size: size_t = 0;
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `row_pointers` is never read
   --> src/pngxtern/pngxrpnm.rs:276:13
    |
276 |     let mut row_pointers: png_bytepp = 0 as *mut *mut png_byte;
    |             ^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `i` is never read
   --> src/pngxtern/pngxrpnm.rs:284:13
    |
284 |     let mut i: libc::c_uint = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `j` is never read
   --> src/pngxtern/pngxrpnm.rs:285:13
    |
285 |     let mut j: libc::c_uint = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `failed` is never read
   --> src/pngxtern/pngxrpnm.rs:286:13
    |
286 |     let mut failed: libc::c_int = 0;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `overflow` is never read
   --> src/pngxtern/pngxrpnm.rs:287:13
    |
287 |     let mut overflow: libc::c_int = 0;
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `pngxtern::pngxrpnm::pnm_fget_header` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:288:8
    |
288 |     if pnm_fget_header(&mut pnminfo, stream) != 1 as libc::c_int {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/pngxtern/pngxrpnm.rs:254:1
    |
254 | / pub unsafe extern "C" fn pngx_read_pnm(
255 | |     mut png_ptr: png_structp,
256 | |     mut info_ptr: png_infop,
257 | |     mut stream: *mut FILE,
258 | | ) -> libc::c_int {
    | |________________^

error[E0133]: call to unsafe function `pngxtern::pngxrpnm::png_error` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:297:9
    |
297 | /         png_error(
298 | |             png_ptr as *const png_struct,
299 | |             b"Can't handle PNM formats newer than PPM (\"P6\")\0" as *const u8
300 | |                 as *const libc::c_char,
301 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrpnm::png_error` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:320:9
    |
320 | /         png_error(
321 | |             png_ptr as *const png_struct,
322 | |             b"Can't handle exceedingly large PNM dimensions\0" as *const u8
323 | |                 as *const libc::c_char,
324 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrpnm::png_error` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:330:9
    |
330 | /         png_error(
331 | |             png_ptr as *const png_struct,
332 | |             b"Can't handle PNM samples larger than 16 bits\0" as *const u8
333 | |                 as *const libc::c_char,
334 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrpnm::png_set_IHDR` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:339:5
    |
339 | /     png_set_IHDR(
340 | |         png_ptr as *const png_struct,
341 | |         info_ptr,
342 | |         width,
...   |
356 | |         0 as libc::c_int,
357 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrpnm::png_warning` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:366:9
    |
366 | /         png_warning(
367 | |             png_ptr as *const png_struct,
368 | |             b"Possibly inexact sample conversion from PNM to PNG\0" as *const u8
369 | |                 as *const libc::c_char,
370 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrpnm::png_set_sBIT` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:382:9
    |
382 | /         png_set_sBIT(
383 | |             png_ptr as *const png_struct,
384 | |             info_ptr,
385 | |             &mut sig_bit as *mut png_color_8 as png_const_color_8p,
386 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrpnm::pngx_malloc_rows` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:388:20
    |
388 |     row_pointers = pngx_malloc_rows(png_ptr, info_ptr, -(1 as libc::c_int));
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrpnm::png_malloc` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:395:18
    |
395 |           pnmrow = png_malloc(
    |  __________________^
396 | |             png_ptr as *const png_struct,
397 | |             (num_samples as libc::c_ulong)
398 | |                 .wrapping_mul(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong),
399 | |         ) as *mut libc::c_uint;
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrpnm::pnm_fget_values` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:406:16
    |
406 |               if pnm_fget_values(
    |  ________________^
407 | |                 &mut pnminfo,
408 | |                 pnmrow,
409 | |                 1 as libc::c_int as libc::c_uint,
410 | |                 stream,
411 | |             ) <= 0 as libc::c_int
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:418:49
    |
418 |                     let mut val: libc::c_uint = *pnmrow.offset(j as isize);
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:418:50
    |
418 |                     let mut val: libc::c_uint = *pnmrow.offset(j as isize);
    |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:430:21
    |
430 | /                     *(*row_pointers.offset(i as isize))
431 | |                         .offset(j as isize) = val as png_byte;
    | |___________________________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:430:22
    |
430 |                       *(*row_pointers.offset(i as isize))
    |  ______________________^
431 | |                         .offset(j as isize) = val as png_byte;
    | |___________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:430:22
    |
430 |                     *(*row_pointers.offset(i as isize))
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:430:24
    |
430 |                     *(*row_pointers.offset(i as isize))
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:438:50
    |
438 |                     let mut val_0: png_uint_32 = *pnmrow.offset(j as isize);
    |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:438:51
    |
438 |                     let mut val_0: png_uint_32 = *pnmrow.offset(j as isize);
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:449:21
    |
449 | /                     *(*row_pointers.offset(i as isize))
450 | |                         .offset(
451 | |                             (2 as libc::c_int as libc::c_uint).wrapping_mul(j) as isize,
452 | |                         ) = (val_0 >> 8 as libc::c_int) as png_byte;
    | |_________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:449:22
    |
449 |                       *(*row_pointers.offset(i as isize))
    |  ______________________^
450 | |                         .offset(
451 | |                             (2 as libc::c_int as libc::c_uint).wrapping_mul(j) as isize,
452 | |                         ) = (val_0 >> 8 as libc::c_int) as png_byte;
    | |_________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:449:22
    |
449 |                     *(*row_pointers.offset(i as isize))
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:449:24
    |
449 |                     *(*row_pointers.offset(i as isize))
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:453:21
    |
453 | /                     *(*row_pointers.offset(i as isize))
454 | |                         .offset(
455 | |                             (2 as libc::c_int as libc::c_uint)
456 | |                                 .wrapping_mul(j)
457 | |                                 .wrapping_add(1 as libc::c_int as libc::c_uint) as isize,
458 | |                         ) = (val_0 & 0xff as libc::c_int as png_uint_32) as png_byte;
    | |_________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:453:22
    |
453 |                       *(*row_pointers.offset(i as isize))
    |  ______________________^
454 | |                         .offset(
455 | |                             (2 as libc::c_int as libc::c_uint)
456 | |                                 .wrapping_mul(j)
457 | |                                 .wrapping_add(1 as libc::c_int as libc::c_uint) as isize,
458 | |                         ) = (val_0 & 0xff as libc::c_int as png_uint_32) as png_byte;
    | |_________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:453:22
    |
453 |                     *(*row_pointers.offset(i as isize))
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:453:24
    |
453 |                     *(*row_pointers.offset(i as isize))
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrpnm::pnm_fget_bytes` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:472:16
    |
472 |               if pnm_fget_bytes(
    |  ________________^
473 | |                 &mut pnminfo,
474 | |                 *row_pointers.offset(i as isize),
475 | |                 sample_size as size_t,
476 | |                 1 as libc::c_int as libc::c_uint,
477 | |                 stream,
478 | |             ) <= 0 as libc::c_int
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:474:17
    |
474 |                 *row_pointers.offset(i as isize),
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:474:18
    |
474 |                 *row_pointers.offset(i as isize),
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrpnm::memset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:489:9
    |
489 | /         memset(
490 | |             *row_pointers.offset(i as isize) as *mut libc::c_void,
491 | |             0 as libc::c_int,
492 | |             row_size,
493 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:490:13
    |
490 |             *row_pointers.offset(i as isize) as *mut libc::c_void,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:490:14
    |
490 |             *row_pointers.offset(i as isize) as *mut libc::c_void,
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrpnm::png_free` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:498:9
    |
498 |         png_free(png_ptr as *const png_struct, pnmrow as png_voidp);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrpnm::png_warning` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:501:9
    |
501 | /         png_warning(
502 | |             png_ptr as *const png_struct,
503 | |             b"Overflow in PNM samples\0" as *const u8 as *const libc::c_char,
504 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrpnm::png_error` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:507:9
    |
507 | /         png_error(
508 | |             png_ptr as *const png_struct,
509 | |             b"Error in PNM image file\0" as *const u8 as *const libc::c_char,
510 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrpnm::pnm_fpeek_eof` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:511:15
    |
511 |     } else if pnm_fpeek_eof(&mut pnminfo, stream) == 0 {
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrpnm::png_warning` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrpnm.rs:512:9
    |
512 | /         png_warning(
513 | |             png_ptr as *const png_struct,
514 | |             b"Extraneous data found after PNM image\0" as *const u8
515 | |                 as *const libc::c_char,
516 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/pngxtern/pngxrpnm.rs:255:5
    |
255 |     mut png_ptr: png_structp,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrpnm.rs:256:5
    |
256 |     mut info_ptr: png_infop,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrpnm.rs:257:5
    |
257 |     mut stream: *mut FILE,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error[E0133]: call to unsafe function `pngxtern::pngxrtif::memcmp` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:131:8
    |
131 |       if memcmp(
    |  ________^
132 | |         sig as *const libc::c_void,
133 | |         minitiff_sig_m.as_ptr() as *const libc::c_void,
134 | |         4 as libc::c_int as libc::c_ulong,
135 | |     ) != 0 as libc::c_int
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/pngxtern/pngxrtif.rs:122:1
    |
122 | / pub unsafe extern "C" fn pngx_sig_is_tiff(
123 | |     mut sig: png_bytep,
124 | |     mut sig_size: size_t,
125 | |     mut fmt_name_ptr: png_const_charpp,
126 | |     mut fmt_long_name_ptr: png_const_charpp,
127 | | ) -> libc::c_int {
    | |________________^

error[E0133]: use of extern static is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:133:9
    |
133 |         minitiff_sig_m.as_ptr() as *const libc::c_void,
    |         ^^^^^^^^^^^^^^ use of extern static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrtif::memcmp` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:136:12
    |
136 |           && memcmp(
    |  ____________^
137 | |             sig as *const libc::c_void,
138 | |             minitiff_sig_i.as_ptr() as *const libc::c_void,
139 | |             4 as libc::c_int as libc::c_ulong,
140 | |         ) != 0 as libc::c_int
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of extern static is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:138:13
    |
138 |             minitiff_sig_i.as_ptr() as *const libc::c_void,
    |             ^^^^^^^^^^^^^^ use of extern static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:145:9
    |
145 |         *fmt_name_ptr = tiff_fmt_name.as_ptr();
    |         ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:145:25
    |
145 |         *fmt_name_ptr = tiff_fmt_name.as_ptr();
    |                         ^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:148:9
    |
148 |         *fmt_long_name_ptr = tiff_fmt_long_name.as_ptr();
    |         ^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:148:30
    |
148 |         *fmt_long_name_ptr = tiff_fmt_long_name.as_ptr();
    |                              ^^^^^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error: variable does not need to be mutable
   --> src/pngxtern/pngxrtif.rs:123:5
    |
123 |     mut sig: png_bytep,
    |     ----^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrtif.rs:124:5
    |
124 |     mut sig_size: size_t,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrtif.rs:125:5
    |
125 |     mut fmt_name_ptr: png_const_charpp,
    |     ----^^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrtif.rs:126:5
    |
126 |     mut fmt_long_name_ptr: png_const_charpp,
    |     ----^^^^^^^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error[E0133]: call to unsafe function `pngxtern::pngxrtif::png_error` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:155:5
    |
155 |     png_error(err_png_ptr as *const png_struct, msg);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/pngxtern/pngxrtif.rs:154:1
    |
154 | unsafe extern "C" fn pngx_tiff_error(mut msg: *const libc::c_char) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:155:15
    |
155 |     png_error(err_png_ptr as *const png_struct, msg);
    |               ^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error: variable does not need to be mutable
   --> src/pngxtern/pngxrtif.rs:154:38
    |
154 | unsafe extern "C" fn pngx_tiff_error(mut msg: *const libc::c_char) {
    |                                      ----^^^
    |                                      |
    |                                      help: remove this `mut`

error[E0133]: call to unsafe function `pngxtern::pngxrtif::strstr` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:158:9
    |
158 |     if !(strstr(msg, b"multi-image\0" as *const u8 as *const libc::c_char)).is_null() {
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/pngxtern/pngxrtif.rs:157:1
    |
157 | unsafe extern "C" fn pngx_tiff_warning(mut msg: *const libc::c_char) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:159:9
    |
159 |         num_extra_images = num_extra_images.wrapping_add(1);
    |         ^^^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:159:28
    |
159 |         num_extra_images = num_extra_images.wrapping_add(1);
    |                            ^^^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:160:9
    |
160 |         num_extra_images;
    |         ^^^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error: variable does not need to be mutable
   --> src/pngxtern/pngxrtif.rs:157:40
    |
157 | unsafe extern "C" fn pngx_tiff_warning(mut msg: *const libc::c_char) {
    |                                        ----^^^
    |                                        |
    |                                        help: remove this `mut`

error: value assigned to `width` is never read
   --> src/pngxtern/pngxrtif.rs:184:13
    |
184 |     let mut width: libc::c_uint = 0;
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `height` is never read
   --> src/pngxtern/pngxrtif.rs:185:13
    |
185 |     let mut height: libc::c_uint = 0;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `pixel_size` is never read
   --> src/pngxtern/pngxrtif.rs:186:13
    |
186 |     let mut pixel_size: libc::c_uint = 0;
    |             ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `sample_depth` is never read
   --> src/pngxtern/pngxrtif.rs:187:13
    |
187 |     let mut sample_depth: libc::c_uint = 0;
    |             ^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `sample_max` is never read
   --> src/pngxtern/pngxrtif.rs:188:13
    |
188 |     let mut sample_max: libc::c_uint = 0;
    |             ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `color_type` is never read
   --> src/pngxtern/pngxrtif.rs:189:13
    |
189 |     let mut color_type: libc::c_int = 0;
    |             ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `sample_overflow` is never read
   --> src/pngxtern/pngxrtif.rs:190:13
    |
190 |     let mut sample_overflow: libc::c_int = 0;
    |             ^^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `row_pointers` is never read
   --> src/pngxtern/pngxrtif.rs:191:13
    |
191 |     let mut row_pointers: png_bytepp = 0 as *mut *mut png_byte;
    |             ^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `row` is never read
   --> src/pngxtern/pngxrtif.rs:192:13
    |
192 |     let mut row: png_bytep = 0 as *mut png_byte;
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `i` is never read
   --> src/pngxtern/pngxrtif.rs:193:13
    |
193 |     let mut i: libc::c_uint = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `j` is never read
   --> src/pngxtern/pngxrtif.rs:194:13
    |
194 |     let mut j: libc::c_uint = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `k` is never read
   --> src/pngxtern/pngxrtif.rs:195:13
    |
195 |     let mut k: libc::c_uint = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:196:5
    |
196 |     err_png_ptr = png_ptr;
    |     ^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/pngxtern/pngxrtif.rs:164:1
    |
164 | / pub unsafe extern "C" fn pngx_read_tiff(
165 | |     mut png_ptr: png_structp,
166 | |     mut info_ptr: png_infop,
167 | |     mut stream: *mut FILE,
168 | | ) -> libc::c_int {
    | |________________^

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:197:5
    |
197 |     num_extra_images = 0 as libc::c_int as libc::c_uint;
    |     ^^^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrtif::minitiff_init_info` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:198:5
    |
198 |     minitiff_init_info(&mut tiff_info);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrtif::minitiff_read_info` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:207:5
    |
207 |     minitiff_read_info(&mut tiff_info, stream);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrtif::minitiff_validate_info` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:208:5
    |
208 |     minitiff_validate_info(&mut tiff_info);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrtif::png_error` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:227:13
    |
227 | /             png_error(
228 | |                 png_ptr as *const png_struct,
229 | |                 b"Unsupported TIFF color space\0" as *const u8 as *const libc::c_char,
230 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrtif::png_error` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:235:9
    |
235 | /         png_error(
236 | |             png_ptr as *const png_struct,
237 | |             b"Unsupported TIFF sample depth\0" as *const u8 as *const libc::c_char,
238 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrtif::png_set_IHDR` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:243:5
    |
243 | /     png_set_IHDR(
244 | |         png_ptr as *const png_struct,
245 | |         info_ptr,
246 | |         width,
...   |
256 | |         0 as libc::c_int,
257 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrtif::pngx_malloc_rows` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:258:20
    |
258 |     row_pointers = pngx_malloc_rows(png_ptr, info_ptr, 0 as libc::c_int);
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:262:19
    |
262 |             row = *row_pointers.offset(i as isize);
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:262:20
    |
262 |             row = *row_pointers.offset(i as isize);
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrtif::minitiff_read_row` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:263:13
    |
263 |             minitiff_read_row(&mut tiff_info, row, i as size_t, stream);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:267:47
    |
267 |                     let mut b: libc::c_uint = *row.offset(j as isize) as libc::c_uint;
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:267:48
    |
267 |                     let mut b: libc::c_uint = *row.offset(j as isize) as libc::c_uint;
    |                                                ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:272:21
    |
272 | /                     *row
273 | |                         .offset(
274 | |                             j as isize,
275 | |                         ) = b
    | |_________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:272:22
    |
272 |                       *row
    |  ______________________^
273 | |                         .offset(
274 | |                             j as isize,
275 | |                         ) = b
    | |_________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:288:21
    |
288 | /                     *row
289 | |                         .offset(
290 | |                             j as isize,
291 | |                         ) = (255 as libc::c_int - *row.offset(j as isize) as libc::c_int)
    | |_________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:288:22
    |
288 |                       *row
    |  ______________________^
289 | |                         .offset(
290 | |                             j as isize,
291 | |                         ) = (255 as libc::c_int - *row.offset(j as isize) as libc::c_int)
    | |_________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:291:51
    |
291 |                         ) = (255 as libc::c_int - *row.offset(j as isize) as libc::c_int)
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:291:52
    |
291 |                         ) = (255 as libc::c_int - *row.offset(j as isize) as libc::c_int)
    |                                                    ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:303:19
    |
303 |             row = *row_pointers.offset(i as isize);
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:303:20
    |
303 |             row = *row_pointers.offset(i as isize);
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrtif::minitiff_read_row` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:304:13
    |
304 |             minitiff_read_row(&mut tiff_info, row, i as size_t, stream);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:309:45
    |
309 |                     let mut b_0: png_byte = *row.offset(k as isize);
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:309:46
    |
309 |                     let mut b_0: png_byte = *row.offset(k as isize);
    |                                              ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:310:21
    |
310 | /                     *row
311 | |                         .offset(
312 | |                             k as isize,
313 | |                         ) = *row
    | |_________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:310:22
    |
310 |                       *row
    |  ______________________^
311 | |                         .offset(
312 | |                             k as isize,
313 | |                         ) = *row
    | |_________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:313:29
    |
313 |                           ) = *row
    |  _____________________________^
314 | |                         .offset(
315 | |                             k.wrapping_add(1 as libc::c_int as libc::c_uint) as isize,
316 | |                         );
    | |_________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:313:30
    |
313 |                           ) = *row
    |  ______________________________^
314 | |                         .offset(
315 | |                             k.wrapping_add(1 as libc::c_int as libc::c_uint) as isize,
316 | |                         );
    | |_________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:317:21
    |
317 | /                     *row
318 | |                         .offset(
319 | |                             k.wrapping_add(1 as libc::c_int as libc::c_uint) as isize,
320 | |                         ) = b_0;
    | |_________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:317:22
    |
317 |                       *row
    |  ______________________^
318 | |                         .offset(
319 | |                             k.wrapping_add(1 as libc::c_int as libc::c_uint) as isize,
320 | |                         ) = b_0;
    | |_________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:330:52
    |
330 |                     let mut b_1: libc::c_uint = (((*row.offset(k as isize)
    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:330:53
    |
330 |                     let mut b_1: libc::c_uint = (((*row.offset(k as isize)
    |                                                     ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:332:27
    |
332 |                           + *row
    |  ___________________________^
333 | |                             .offset(
334 | |                                 k.wrapping_add(1 as libc::c_int as libc::c_uint) as isize,
335 | |                             ) as libc::c_int) as libc::c_uint;
    | |_____________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:332:28
    |
332 |                           + *row
    |  ____________________________^
333 | |                             .offset(
334 | |                                 k.wrapping_add(1 as libc::c_int as libc::c_uint) as isize,
335 | |                             ) as libc::c_int) as libc::c_uint;
    | |_____________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:346:21
    |
346 |                     *row.offset(k as isize) = (b_1 >> 8 as libc::c_int) as png_byte;
    |                     ^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:346:22
    |
346 |                     *row.offset(k as isize) = (b_1 >> 8 as libc::c_int) as png_byte;
    |                      ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:347:21
    |
347 | /                     *row
348 | |                         .offset(
349 | |                             k.wrapping_add(1 as libc::c_int as libc::c_uint) as isize,
350 | |                         ) = (b_1 & 255 as libc::c_int as libc::c_uint) as png_byte;
    | |_________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:347:22
    |
347 |                       *row
    |  ______________________^
348 | |                         .offset(
349 | |                             k.wrapping_add(1 as libc::c_int as libc::c_uint) as isize,
350 | |                         ) = (b_1 & 255 as libc::c_int as libc::c_uint) as png_byte;
    | |_________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrtif::png_warning` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:361:9
    |
361 | /         png_warning(
362 | |             png_ptr as *const png_struct,
363 | |             b"Overflow in TIFF samples\0" as *const u8 as *const libc::c_char,
364 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pngxtern::pngxrtif::minitiff_destroy_info` is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:366:5
    |
366 |     minitiff_destroy_info(&mut tiff_info);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/pngxtern/pngxrtif.rs:367:60
    |
367 |     return (1 as libc::c_int as libc::c_uint).wrapping_add(num_extra_images)
    |                                                            ^^^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error: variable does not need to be mutable
   --> src/pngxtern/pngxrtif.rs:165:5
    |
165 |     mut png_ptr: png_structp,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrtif.rs:166:5
    |
166 |     mut info_ptr: png_infop,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrtif.rs:167:5
    |
167 |     mut stream: *mut FILE,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxrtif.rs:309:25
    |
309 |                     let mut b_0: png_byte = *row.offset(k as isize);
    |                         ----^^^
    |                         |
    |                         help: remove this `mut`

error[E0133]: call to unsafe function `pngxtern::pngxset::png_get_IHDR` is unsafe and requires unsafe block
  --> src/pngxtern/pngxset.rs:49:8
   |
49 |       if png_get_IHDR(
   |  ________^
50 | |         png_ptr as *const png_struct,
51 | |         info_ptr as *const png_info,
52 | |         &mut width,
...  |
58 | |         &mut filter_type,
59 | |     ) == 0
   | |_____^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
  --> src/pngxtern/pngxset.rs:37:1
   |
37 | / pub unsafe extern "C" fn pngx_set_compression_type(
38 | |     mut png_ptr: png_structp,
39 | |     mut info_ptr: png_infop,
40 | |     mut compression_type: libc::c_int,
41 | | ) {
   | |_^

error[E0133]: call to unsafe function `pngxtern::pngxset::png_set_IHDR` is unsafe and requires unsafe block
  --> src/pngxtern/pngxset.rs:66:5
   |
66 | /     png_set_IHDR(
67 | |         png_ptr as *const png_struct,
68 | |         info_ptr,
69 | |         width,
...  |
75 | |         filter_type,
76 | |     );
   | |_____^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
  --> src/pngxtern/pngxset.rs:38:5
   |
38 |     mut png_ptr: png_structp,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

error: variable does not need to be mutable
  --> src/pngxtern/pngxset.rs:39:5
   |
39 |     mut info_ptr: png_infop,
   |     ----^^^^^^^^
   |     |
   |     help: remove this `mut`

error: variable does not need to be mutable
  --> src/pngxtern/pngxset.rs:40:5
   |
40 |     mut compression_type: libc::c_int,
   |     ----^^^^^^^^^^^^^^^^
   |     |
   |     help: remove this `mut`

error[E0133]: call to unsafe function `pngxtern::pngxset::png_get_IHDR` is unsafe and requires unsafe block
   --> src/pngxtern/pngxset.rs:91:8
    |
91  |       if png_get_IHDR(
    |  ________^
92  | |         png_ptr as *const png_struct,
93  | |         info_ptr as *const png_info,
94  | |         &mut width,
...   |
100 | |         &mut old_filter_type,
101 | |     ) == 0
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/pngxtern/pngxset.rs:79:1
    |
79  | / pub unsafe extern "C" fn pngx_set_filter_type(
80  | |     mut png_ptr: png_structp,
81  | |     mut info_ptr: png_infop,
82  | |     mut filter_type: libc::c_int,
83  | | ) {
    | |_^

error[E0133]: call to unsafe function `pngxtern::pngxset::png_set_IHDR` is unsafe and requires unsafe block
   --> src/pngxtern/pngxset.rs:108:5
    |
108 | /     png_set_IHDR(
109 | |         png_ptr as *const png_struct,
110 | |         info_ptr,
111 | |         width,
...   |
117 | |         filter_type,
118 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
  --> src/pngxtern/pngxset.rs:80:5
   |
80 |     mut png_ptr: png_structp,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

error: variable does not need to be mutable
  --> src/pngxtern/pngxset.rs:81:5
   |
81 |     mut info_ptr: png_infop,
   |     ----^^^^^^^^
   |     |
   |     help: remove this `mut`

error: variable does not need to be mutable
  --> src/pngxtern/pngxset.rs:82:5
   |
82 |     mut filter_type: libc::c_int,
   |     ----^^^^^^^^^^^
   |     |
   |     help: remove this `mut`

error[E0133]: call to unsafe function `pngxtern::pngxset::png_get_IHDR` is unsafe and requires unsafe block
   --> src/pngxtern/pngxset.rs:133:8
    |
133 |       if png_get_IHDR(
    |  ________^
134 | |         png_ptr as *const png_struct,
135 | |         info_ptr as *const png_info,
136 | |         &mut width,
...   |
142 | |         &mut filter_type,
143 | |     ) == 0
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/pngxtern/pngxset.rs:121:1
    |
121 | / pub unsafe extern "C" fn pngx_set_interlace_type(
122 | |     mut png_ptr: png_structp,
123 | |     mut info_ptr: png_infop,
124 | |     mut interlace_type: libc::c_int,
125 | | ) {
    | |_^

error[E0133]: call to unsafe function `pngxtern::pngxset::png_set_IHDR` is unsafe and requires unsafe block
   --> src/pngxtern/pngxset.rs:150:5
    |
150 | /     png_set_IHDR(
151 | |         png_ptr as *const png_struct,
152 | |         info_ptr,
153 | |         width,
...   |
159 | |         filter_type,
160 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/pngxtern/pngxset.rs:122:5
    |
122 |     mut png_ptr: png_structp,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxset.rs:123:5
    |
123 |     mut info_ptr: png_infop,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pngxtern/pngxset.rs:124:5
    |
124 |     mut interlace_type: libc::c_int,
    |     ----^^^^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error[E0133]: call to unsafe function `pnmio::pnmin::getc` is unsafe and requires unsafe block
  --> src/pnmio/pnmin.rs:78:31
   |
78 |     let mut ch: libc::c_int = getc(stream);
   |                               ^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
  --> src/pnmio/pnmin.rs:77:1
   |
77 | unsafe extern "C" fn pnm_fget_char(mut stream: *mut FILE) -> libc::c_int {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `pnmio::pnmin::getc` is unsafe and requires unsafe block
  --> src/pnmio/pnmin.rs:81:18
   |
81 |             ch = getc(stream);
   |                  ^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmin::getc` is unsafe and requires unsafe block
  --> src/pnmio/pnmin.rs:88:14
   |
88 |         ch = getc(stream);
   |              ^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmin::ungetc` is unsafe and requires unsafe block
  --> src/pnmio/pnmin.rs:90:13
   |
90 |             ungetc(ch, stream);
   |             ^^^^^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
  --> src/pnmio/pnmin.rs:77:36
   |
77 | unsafe extern "C" fn pnm_fget_char(mut stream: *mut FILE) -> libc::c_int {
   |                                    ----^^^^^^
   |                                    |
   |                                    help: remove this `mut`

error: value assigned to `ch` is never read
   --> src/pnmio/pnmin.rs:100:13
    |
100 |     let mut ch: libc::c_int = 0;
    |             ^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `tmp` is never read
   --> src/pnmio/pnmin.rs:101:13
    |
101 |     let mut tmp: libc::c_uint = 0;
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `pnmio::pnmin::pnm_fget_char` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:103:14
    |
103 |         ch = pnm_fget_char(stream);
    |              ^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/pnmio/pnmin.rs:96:1
    |
96  | / unsafe extern "C" fn pnm_fscan_uint(
97  | |     mut stream: *mut FILE,
98  | |     mut value: *mut libc::c_uint,
99  | | ) -> libc::c_int {
    | |________________^

error[E0133]: call to unsafe function `pnmio::pnmin::ungetc` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:114:9
    |
114 |         ungetc(ch, stream);
    |         ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:117:5
    |
117 |     *value = 0 as libc::c_int as libc::c_uint;
    |     ^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:119:15
    |
119 |         tmp = (*value)
    |               ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:122:19
    |
122 |         if tmp >= *value {
    |                   ^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:123:13
    |
123 |             *value = tmp;
    |             ^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:125:13
    |
125 |             *value = (2147483647 as libc::c_int as libc::c_uint)
    |             ^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:128:13
    |
128 |             *__errno_location() = 34 as libc::c_int;
    |             ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmin::__errno_location` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:128:14
    |
128 |             *__errno_location() = 34 as libc::c_int;
    |              ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmin::getc` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:130:14
    |
130 |         ch = getc(stream);
    |              ^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmin::ungetc` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:137:9
    |
137 |         ungetc(ch, stream);
    |         ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
  --> src/pnmio/pnmin.rs:97:5
   |
97 |     mut stream: *mut FILE,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

error: variable does not need to be mutable
  --> src/pnmio/pnmin.rs:98:5
   |
98 |     mut value: *mut libc::c_uint,
   |     ----^^^^^
   |     |
   |     help: remove this `mut`

error: value assigned to `format` is never read
   --> src/pnmio/pnmin.rs:146:13
    |
146 |     let mut format: libc::c_uint = 0;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `ch` is never read
   --> src/pnmio/pnmin.rs:147:13
    |
147 |     let mut ch: libc::c_int = 0;
    |             ^^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: call to unsafe function `pnmio::pnmin::memset` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:148:5
    |
148 | /     memset(
149 | |         pnm_ptr as *mut libc::c_void,
150 | |         0 as libc::c_int,
151 | |         ::core::mem::size_of::<pnm_struct>() as libc::c_ulong,
152 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/pnmio/pnmin.rs:142:1
    |
142 | / pub unsafe extern "C" fn pnm_fget_header(
143 | |     mut pnm_ptr: *mut pnm_struct,
144 | |     mut stream: *mut FILE,
145 | | ) -> libc::c_int {
    | |________________^

error[E0133]: call to unsafe function `pnmio::pnmin::getc` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:153:10
    |
153 |     ch = getc(stream);
    |          ^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmin::getc` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:160:10
    |
160 |     ch = getc(stream);
    |          ^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmin::pnm_fget_char` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:165:10
    |
165 |     ch = pnm_fget_char(stream);
    |          ^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:170:5
    |
170 |     (*pnm_ptr).format = format;
    |     ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:174:9
    |
174 |         (*pnm_ptr)
    |         ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmin::pnm_fscan_uint` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:182:12
    |
182 |         if pnm_fscan_uint(stream, &mut (*pnm_ptr).width) != 1 as libc::c_int
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:182:40
    |
182 |         if pnm_fscan_uint(stream, &mut (*pnm_ptr).width) != 1 as libc::c_int
    |                                        ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmin::pnm_fscan_uint` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:183:16
    |
183 |             || pnm_fscan_uint(stream, &mut (*pnm_ptr).height) != 1 as libc::c_int
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:183:44
    |
183 |             || pnm_fscan_uint(stream, &mut (*pnm_ptr).height) != 1 as libc::c_int
    |                                            ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:190:13
    |
190 |             (*pnm_ptr).maxval = 1 as libc::c_int as libc::c_uint;
    |             ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmin::pnm_fscan_uint` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:191:19
    |
191 |         } else if pnm_fscan_uint(stream, &mut (*pnm_ptr).maxval) != 1 as libc::c_int {
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:191:47
    |
191 |         } else if pnm_fscan_uint(stream, &mut (*pnm_ptr).maxval) != 1 as libc::c_int {
    |                                               ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmin::pnm_is_valid` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:194:19
    |
194 |         return if pnm_is_valid(pnm_ptr) != 0 {
    |                   ^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/pnmio/pnmin.rs:143:5
    |
143 |     mut pnm_ptr: *mut pnm_struct,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmin.rs:144:5
    |
144 |     mut stream: *mut FILE,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: value assigned to `ch` is never read
   --> src/pnmio/pnmin.rs:216:13
    |
216 |     let mut ch: libc::c_int = 0;
    |             ^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `ch8` is never read
   --> src/pnmio/pnmin.rs:217:13
    |
217 |     let mut ch8: libc::c_int = 0;
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `ch16` is never read
   --> src/pnmio/pnmin.rs:218:13
    |
218 |     let mut ch16: libc::c_int = 0;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `ch24` is never read
   --> src/pnmio/pnmin.rs:219:13
    |
219 |     let mut ch24: libc::c_int = 0;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `mask` is never read
   --> src/pnmio/pnmin.rs:220:13
    |
220 |     let mut mask: libc::c_int = 0;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `i` is never read
   --> src/pnmio/pnmin.rs:221:13
    |
221 |     let mut i: size_t = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `j` is never read
   --> src/pnmio/pnmin.rs:222:13
    |
222 |     let mut j: size_t = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:210:36
    |
210 |     let mut format: libc::c_uint = (*pnm_ptr).format;
    |                                    ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/pnmio/pnmin.rs:204:1
    |
204 | / pub unsafe extern "C" fn pnm_fget_values(
205 | |     mut pnm_ptr: *const pnm_struct,
206 | |     mut sample_values: *mut libc::c_uint,
207 | |     mut num_rows: libc::c_uint,
208 | |     mut stream: *mut FILE,
209 | | ) -> libc::c_int {
    | |________________^

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:211:35
    |
211 |     let mut depth: libc::c_uint = (*pnm_ptr).depth;
    |                                   ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:212:35
    |
212 |     let mut width: libc::c_uint = (*pnm_ptr).width;
    |                                   ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:213:36
    |
213 |     let mut maxval: libc::c_uint = (*pnm_ptr).maxval;
    |                                    ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmin::pnm_fget_char` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:228:26
    |
228 |                     ch = pnm_fget_char(stream);
    |                          ^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmin::ungetc` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:236:21
    |
236 |                     ungetc(ch, stream);
    |                     ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:239:21
    |
239 | /                     *sample_values
240 | |                         .offset(
241 | |                             i as isize,
242 | |                         ) = (if ch == '0' as i32 {
    | |_________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:239:22
    |
239 |                       *sample_values
    |  ______________________^
240 | |                         .offset(
241 | |                             i as isize,
242 | |                         ) = (if ch == '0' as i32 {
    | |_________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmin::pnm_fscan_uint` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:255:20
    |
255 |                 if pnm_fscan_uint(stream, &mut *sample_values.offset(i as isize))
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:255:48
    |
255 |                 if pnm_fscan_uint(stream, &mut *sample_values.offset(i as isize))
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:255:49
    |
255 |                 if pnm_fscan_uint(stream, &mut *sample_values.offset(i as isize))
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmin::getc` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:268:22
    |
268 |                 ch = getc(stream);
    |                      ^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:276:21
    |
276 | /                     *sample_values
277 | |                         .offset(
278 | |                             fresh0 as isize,
279 | |                         ) = (if ch & mask != 0 {
    | |_________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:276:22
    |
276 |                       *sample_values
    |  ______________________^
277 | |                         .offset(
278 | |                             fresh0 as isize,
279 | |                         ) = (if ch & mask != 0 {
    | |_________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmin::getc` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:298:26
    |
298 |                     ch = getc(stream);
    |                          ^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:302:21
    |
302 |                     *sample_values.offset(i as isize) = ch as libc::c_uint;
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:302:22
    |
302 |                     *sample_values.offset(i as isize) = ch as libc::c_uint;
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmin::getc` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:309:27
    |
309 |                     ch8 = getc(stream);
    |                           ^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmin::getc` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:310:26
    |
310 |                     ch = getc(stream);
    |                          ^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:314:21
    |
314 | /                     *sample_values
315 | |                         .offset(
316 | |                             i as isize,
317 | |                         ) = ((ch8 as libc::c_uint) << 8 as libc::c_int)
    | |_________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:314:22
    |
314 |                       *sample_values
    |  ______________________^
315 | |                         .offset(
316 | |                             i as isize,
317 | |                         ) = ((ch8 as libc::c_uint) << 8 as libc::c_int)
    | |_________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmin::getc` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:327:32
    |
327 |                         ch24 = getc(stream);
    |                                ^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmin::getc` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:329:28
    |
329 |                     ch16 = getc(stream);
    |                            ^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmin::getc` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:330:27
    |
330 |                     ch8 = getc(stream);
    |                           ^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmin::getc` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:331:26
    |
331 |                     ch = getc(stream);
    |                          ^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:335:21
    |
335 | /                     *sample_values
336 | |                         .offset(
337 | |                             i as isize,
338 | |                         ) = ((ch24 as libc::c_uint) << 24 as libc::c_int)
    | |_________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:335:22
    |
335 |                       *sample_values
    |  ______________________^
336 | |                         .offset(
337 | |                             i as isize,
338 | |                         ) = ((ch24 as libc::c_uint) << 24 as libc::c_int)
    | |_________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:346:17
    |
346 |                 *__errno_location() = 22 as libc::c_int;
    |                 ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmin::__errno_location` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:346:18
    |
346 |                 *__errno_location() = 22 as libc::c_int;
    |                  ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:351:13
    |
351 |             *__errno_location() = 22 as libc::c_int;
    |             ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmin::__errno_location` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:351:14
    |
351 |             *__errno_location() = 22 as libc::c_int;
    |              ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmin::memset` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:356:9
    |
356 | /         memset(
357 | |             sample_values.offset(i as isize) as *mut libc::c_void,
358 | |             0 as libc::c_int,
359 | |             num_samples
360 | |                 .wrapping_sub(i)
361 | |                 .wrapping_mul(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong),
362 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:357:13
    |
357 |             sample_values.offset(i as isize) as *mut libc::c_void,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/pnmio/pnmin.rs:205:5
    |
205 |     mut pnm_ptr: *const pnm_struct,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmin.rs:206:5
    |
206 |     mut sample_values: *mut libc::c_uint,
    |     ----^^^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmin.rs:207:5
    |
207 |     mut num_rows: libc::c_uint,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmin.rs:208:5
    |
208 |     mut stream: *mut FILE,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmin.rs:210:9
    |
210 |     let mut format: libc::c_uint = (*pnm_ptr).format;
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmin.rs:211:9
    |
211 |     let mut depth: libc::c_uint = (*pnm_ptr).depth;
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmin.rs:212:9
    |
212 |     let mut width: libc::c_uint = (*pnm_ptr).width;
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmin.rs:213:9
    |
213 |     let mut maxval: libc::c_uint = (*pnm_ptr).maxval;
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmin.rs:214:9
    |
214 |     let mut row_length: size_t = depth as size_t * width as size_t;
    |         ----^^^^^^^^^^
    |         |
    |         help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmin.rs:215:9
    |
215 |     let mut num_samples: size_t = num_rows as size_t * row_length;
    |         ----^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

error: value assigned to `raw_sample_size` is never read
   --> src/pnmio/pnmin.rs:381:13
    |
381 |     let mut raw_sample_size: size_t = 0;
    |             ^^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `ch` is never read
   --> src/pnmio/pnmin.rs:382:13
    |
382 |     let mut ch: libc::c_int = 0;
    |             ^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `mask` is never read
   --> src/pnmio/pnmin.rs:383:13
    |
383 |     let mut mask: libc::c_int = 0;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `i` is never read
   --> src/pnmio/pnmin.rs:384:13
    |
384 |     let mut i: size_t = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `j` is never read
   --> src/pnmio/pnmin.rs:385:13
    |
385 |     let mut j: size_t = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:375:36
    |
375 |     let mut format: libc::c_uint = (*pnm_ptr).format;
    |                                    ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/pnmio/pnmin.rs:368:1
    |
368 | / pub unsafe extern "C" fn pnm_fget_bytes(
369 | |     mut pnm_ptr: *const pnm_struct,
370 | |     mut sample_bytes: *mut libc::c_uchar,
371 | |     mut sample_size: size_t,
372 | |     mut num_rows: libc::c_uint,
373 | |     mut stream: *mut FILE,
374 | | ) -> libc::c_int {
    | |________________^

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:376:35
    |
376 |     let mut depth: libc::c_uint = (*pnm_ptr).depth;
    |                                   ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:377:35
    |
377 |     let mut width: libc::c_uint = (*pnm_ptr).width;
    |                                   ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:378:36
    |
378 |     let mut maxval: libc::c_uint = (*pnm_ptr).maxval;
    |                                    ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:398:9
    |
398 |         *__errno_location() = 22 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmin::__errno_location` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:398:10
    |
398 |         *__errno_location() = 22 as libc::c_int;
    |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmin::getc` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:406:22
    |
406 |                 ch = getc(stream);
    |                      ^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:414:21
    |
414 | /                     *sample_bytes
415 | |                         .offset(
416 | |                             fresh1 as isize,
417 | |                         ) = (if ch & mask != 0 {
    | |_________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:414:22
    |
414 |                       *sample_bytes
    |  ______________________^
415 | |                         .offset(
416 | |                             fresh1 as isize,
417 | |                         ) = (if ch & mask != 0 {
    | |_________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmin::fread` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:433:17
    |
433 |               i = fread(
    |  _________________^
434 | |                 sample_bytes as *mut libc::c_void,
435 | |                 sample_size,
436 | |                 num_samples,
437 | |                 stream,
438 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:441:13
    |
441 |             *__errno_location() = 22 as libc::c_int;
    |             ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmin::__errno_location` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:441:14
    |
441 |             *__errno_location() = 22 as libc::c_int;
    |              ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmin::memset` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:446:9
    |
446 | /         memset(
447 | |             sample_bytes.offset(i as isize) as *mut libc::c_void,
448 | |             0 as libc::c_int,
449 | |             (sample_size * num_samples).wrapping_sub(i),
450 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/pnmio/pnmin.rs:447:13
    |
447 |             sample_bytes.offset(i as isize) as *mut libc::c_void,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/pnmio/pnmin.rs:369:5
    |
369 |     mut pnm_ptr: *const pnm_struct,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmin.rs:370:5
    |
370 |     mut sample_bytes: *mut libc::c_uchar,
    |     ----^^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmin.rs:371:5
    |
371 |     mut sample_size: size_t,
    |     ----^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmin.rs:372:5
    |
372 |     mut num_rows: libc::c_uint,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmin.rs:373:5
    |
373 |     mut stream: *mut FILE,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmin.rs:375:9
    |
375 |     let mut format: libc::c_uint = (*pnm_ptr).format;
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmin.rs:376:9
    |
376 |     let mut depth: libc::c_uint = (*pnm_ptr).depth;
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmin.rs:377:9
    |
377 |     let mut width: libc::c_uint = (*pnm_ptr).width;
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmin.rs:378:9
    |
378 |     let mut maxval: libc::c_uint = (*pnm_ptr).maxval;
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmin.rs:379:9
    |
379 |     let mut row_length: size_t = depth as size_t * width as size_t;
    |         ----^^^^^^^^^^
    |         |
    |         help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmin.rs:380:9
    |
380 |     let mut num_samples: size_t = num_rows as size_t * row_length;
    |         ----^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

error: value assigned to `result` is never read
  --> src/pnmio/pnmout.rs:82:13
   |
82 |     let mut result: libc::c_int = 0;
   |             ^^^^^^
   |
   = help: maybe it is overwritten before being read?

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src/pnmio/pnmout.rs:77:36
   |
77 |     let mut format: libc::c_uint = (*pnm_ptr).format;
   |                                    ^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
  --> src/pnmio/pnmout.rs:73:1
   |
73 | / pub unsafe extern "C" fn pnm_fput_header(
74 | |     mut pnm_ptr: *const pnm_struct,
75 | |     mut stream: *mut FILE,
76 | | ) -> libc::c_int {
   | |________________^

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src/pnmio/pnmout.rs:78:35
   |
78 |     let mut depth: libc::c_uint = (*pnm_ptr).depth;
   |                                   ^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src/pnmio/pnmout.rs:79:35
   |
79 |     let mut width: libc::c_uint = (*pnm_ptr).width;
   |                                   ^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src/pnmio/pnmout.rs:80:36
   |
80 |     let mut height: libc::c_uint = (*pnm_ptr).height;
   |                                    ^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src/pnmio/pnmout.rs:81:36
   |
81 |     let mut maxval: libc::c_uint = (*pnm_ptr).maxval;
   |                                    ^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmout::pnm_is_valid` is unsafe and requires unsafe block
  --> src/pnmio/pnmout.rs:83:8
   |
83 |     if pnm_is_valid(pnm_ptr) == 0 {
   |        ^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmout::fprintf` is unsafe and requires unsafe block
  --> src/pnmio/pnmout.rs:88:22
   |
88 |               result = fprintf(
   |  ______________________^
89 | |                 stream,
90 | |                 b"P%c\n%u %u\n\0" as *const u8 as *const libc::c_char,
91 | |                 format.wrapping_add('0' as i32 as libc::c_uint),
92 | |                 width,
93 | |                 height,
94 | |             );
   | |_____________^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmout::fprintf` is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:97:22
    |
97  |               result = fprintf(
    |  ______________________^
98  | |                 stream,
99  | |                 b"P%c\n%u %u\n%u\n\0" as *const u8 as *const libc::c_char,
100 | |                 format.wrapping_add('0' as i32 as libc::c_uint),
...   |
103 | |                 maxval,
104 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmout::fprintf` is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:107:22
    |
107 |               result = fprintf(
    |  ______________________^
108 | |                 stream,
109 | |                 b"P7\nDEPTH %u\nWIDTH %u\nHEIGHT %u\nMAXVAL %u\nENDHDR\n\0" as *const u8
110 | |                     as *const libc::c_char,
...   |
114 | |                 maxval,
115 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:118:13
    |
118 |             *__errno_location() = 22 as libc::c_int;
    |             ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmout::__errno_location` is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:118:14
    |
118 |             *__errno_location() = 22 as libc::c_int;
    |              ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
  --> src/pnmio/pnmout.rs:74:5
   |
74 |     mut pnm_ptr: *const pnm_struct,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

error: variable does not need to be mutable
  --> src/pnmio/pnmout.rs:75:5
   |
75 |     mut stream: *mut FILE,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

error: variable does not need to be mutable
  --> src/pnmio/pnmout.rs:77:9
   |
77 |     let mut format: libc::c_uint = (*pnm_ptr).format;
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

error: variable does not need to be mutable
  --> src/pnmio/pnmout.rs:78:9
   |
78 |     let mut depth: libc::c_uint = (*pnm_ptr).depth;
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

error: variable does not need to be mutable
  --> src/pnmio/pnmout.rs:79:9
   |
79 |     let mut width: libc::c_uint = (*pnm_ptr).width;
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

error: variable does not need to be mutable
  --> src/pnmio/pnmout.rs:80:9
   |
80 |     let mut height: libc::c_uint = (*pnm_ptr).height;
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

error: variable does not need to be mutable
  --> src/pnmio/pnmout.rs:81:9
   |
81 |     let mut maxval: libc::c_uint = (*pnm_ptr).maxval;
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

error: value assigned to `ch` is never read
   --> src/pnmio/pnmout.rs:141:13
    |
141 |     let mut ch: libc::c_int = 0;
    |             ^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `mask` is never read
   --> src/pnmio/pnmout.rs:142:13
    |
142 |     let mut mask: libc::c_int = 0;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `i` is never read
   --> src/pnmio/pnmout.rs:143:13
    |
143 |     let mut i: size_t = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `j` is never read
   --> src/pnmio/pnmout.rs:144:13
    |
144 |     let mut j: size_t = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:135:36
    |
135 |     let mut format: libc::c_uint = (*pnm_ptr).format;
    |                                    ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/pnmio/pnmout.rs:129:1
    |
129 | / pub unsafe extern "C" fn pnm_fput_values(
130 | |     mut pnm_ptr: *const pnm_struct,
131 | |     mut sample_values: *const libc::c_uint,
132 | |     mut num_rows: libc::c_uint,
133 | |     mut stream: *mut FILE,
134 | | ) -> libc::c_int {
    | |________________^

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:136:35
    |
136 |     let mut depth: libc::c_uint = (*pnm_ptr).depth;
    |                                   ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:137:35
    |
137 |     let mut width: libc::c_uint = (*pnm_ptr).width;
    |                                   ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:138:36
    |
138 |     let mut maxval: libc::c_uint = (*pnm_ptr).maxval;
    |                                    ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmout::putc` is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:150:20
    |
150 |                   if putc(
    |  ____________________^
151 | |                     (if *sample_values.offset(i as isize)
152 | |                         != 0 as libc::c_int as libc::c_uint
...   |
158 | |                     stream,
159 | |                 ) == -(1 as libc::c_int)
    | |_________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:151:25
    |
151 |                     (if *sample_values.offset(i as isize)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:151:26
    |
151 |                     (if *sample_values.offset(i as isize)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmout::putc` is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:166:24
    |
166 |                     if putc('\n' as i32, stream) == -(1 as libc::c_int) {
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmout::fprintf` is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:182:20
    |
182 |                   if fprintf(
    |  ____________________^
183 | |                     stream,
184 | |                     (if j == 0 as libc::c_int as size_t {
185 | |                         b"%u\n\0" as *const u8 as *const libc::c_char
...   |
189 | |                     *sample_values.offset(i as isize),
190 | |                 ) <= 0 as libc::c_int
    | |_________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:189:21
    |
189 |                     *sample_values.offset(i as isize),
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:189:22
    |
189 |                     *sample_values.offset(i as isize),
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:207:24
    |
207 |                     if *sample_values.offset(fresh0 as isize)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:207:25
    |
207 |                     if *sample_values.offset(fresh0 as isize)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmout::putc` is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:220:20
    |
220 |                 if putc(ch, stream) == -(1 as libc::c_int) {
    |                    ^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmout::putc` is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:229:24
    |
229 |                       if putc(
    |  ________________________^
230 | |                         (*sample_values.offset(i as isize)
231 | |                             & 0xff as libc::c_int as libc::c_uint) as libc::c_int,
232 | |                         stream,
233 | |                     ) == -(1 as libc::c_int)
    | |_____________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:230:26
    |
230 |                         (*sample_values.offset(i as isize)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:230:27
    |
230 |                         (*sample_values.offset(i as isize)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmout::putc` is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:243:24
    |
243 |                       if putc(
    |  ________________________^
244 | |                         (*sample_values.offset(i as isize) >> 8 as libc::c_int
245 | |                             & 0xff as libc::c_int as libc::c_uint) as libc::c_int,
246 | |                         stream,
247 | |                     ) == -(1 as libc::c_int)
    | |_____________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:244:26
    |
244 |                         (*sample_values.offset(i as isize) >> 8 as libc::c_int
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:244:27
    |
244 |                         (*sample_values.offset(i as isize) >> 8 as libc::c_int
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmout::putc` is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:248:28
    |
248 |                           || putc(
    |  ____________________________^
249 | |                             (*sample_values.offset(i as isize)
250 | |                                 & 0xff as libc::c_int as libc::c_uint) as libc::c_int,
251 | |                             stream,
252 | |                         ) == -(1 as libc::c_int)
    | |_________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:249:30
    |
249 | ...                   (*sample_values.offset(i as isize)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:249:31
    |
249 | ...                   (*sample_values.offset(i as isize)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmout::putc` is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:263:28
    |
263 |                           if putc(
    |  ____________________________^
264 | |                             (*sample_values.offset(i as isize) >> 24 as libc::c_int
265 | |                                 & 0xff as libc::c_int as libc::c_uint) as libc::c_int,
266 | |                             stream,
267 | |                         ) == -(1 as libc::c_int)
    | |_________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:264:30
    |
264 | ...                   (*sample_values.offset(i as isize) >> 24 as libc::c_int
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:264:31
    |
264 | ...                   (*sample_values.offset(i as isize) >> 24 as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmout::putc` is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:272:24
    |
272 |                       if putc(
    |  ________________________^
273 | |                         (*sample_values.offset(i as isize) >> 16 as libc::c_int
274 | |                             & 0xff as libc::c_int as libc::c_uint) as libc::c_int,
275 | |                         stream,
276 | |                     ) == -(1 as libc::c_int)
    | |_____________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:273:26
    |
273 |                         (*sample_values.offset(i as isize) >> 16 as libc::c_int
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:273:27
    |
273 |                         (*sample_values.offset(i as isize) >> 16 as libc::c_int
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmout::putc` is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:277:28
    |
277 |                           || putc(
    |  ____________________________^
278 | |                             (*sample_values.offset(i as isize) >> 8 as libc::c_int
279 | |                                 & 0xff as libc::c_int as libc::c_uint) as libc::c_int,
280 | |                             stream,
281 | |                         ) == -(1 as libc::c_int)
    | |_________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:278:30
    |
278 | ...                   (*sample_values.offset(i as isize) >> 8 as libc::c_int
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:278:31
    |
278 | ...                   (*sample_values.offset(i as isize) >> 8 as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmout::putc` is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:282:28
    |
282 |                           || putc(
    |  ____________________________^
283 | |                             (*sample_values.offset(i as isize)
284 | |                                 & 0xff as libc::c_int as libc::c_uint) as libc::c_int,
285 | |                             stream,
286 | |                         ) == -(1 as libc::c_int)
    | |_________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:283:30
    |
283 | ...                   (*sample_values.offset(i as isize)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:283:31
    |
283 | ...                   (*sample_values.offset(i as isize)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:294:17
    |
294 |                 *__errno_location() = 22 as libc::c_int;
    |                 ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmout::__errno_location` is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:294:18
    |
294 |                 *__errno_location() = 22 as libc::c_int;
    |                  ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:299:13
    |
299 |             *__errno_location() = 22 as libc::c_int;
    |             ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmout::__errno_location` is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:299:14
    |
299 |             *__errno_location() = 22 as libc::c_int;
    |              ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/pnmio/pnmout.rs:130:5
    |
130 |     mut pnm_ptr: *const pnm_struct,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmout.rs:131:5
    |
131 |     mut sample_values: *const libc::c_uint,
    |     ----^^^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmout.rs:132:5
    |
132 |     mut num_rows: libc::c_uint,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmout.rs:133:5
    |
133 |     mut stream: *mut FILE,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmout.rs:135:9
    |
135 |     let mut format: libc::c_uint = (*pnm_ptr).format;
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmout.rs:136:9
    |
136 |     let mut depth: libc::c_uint = (*pnm_ptr).depth;
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmout.rs:137:9
    |
137 |     let mut width: libc::c_uint = (*pnm_ptr).width;
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmout.rs:138:9
    |
138 |     let mut maxval: libc::c_uint = (*pnm_ptr).maxval;
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmout.rs:139:9
    |
139 |     let mut row_length: size_t = depth as size_t * width as size_t;
    |         ----^^^^^^^^^^
    |         |
    |         help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmout.rs:140:9
    |
140 |     let mut num_samples: size_t = num_rows as size_t * row_length;
    |         ----^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

error: value assigned to `raw_sample_size` is never read
   --> src/pnmio/pnmout.rs:319:13
    |
319 |     let mut raw_sample_size: size_t = 0;
    |             ^^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `ch` is never read
   --> src/pnmio/pnmout.rs:320:13
    |
320 |     let mut ch: libc::c_int = 0;
    |             ^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `mask` is never read
   --> src/pnmio/pnmout.rs:321:13
    |
321 |     let mut mask: libc::c_int = 0;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `i` is never read
   --> src/pnmio/pnmout.rs:322:13
    |
322 |     let mut i: size_t = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

error: value assigned to `j` is never read
   --> src/pnmio/pnmout.rs:323:13
    |
323 |     let mut j: size_t = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:313:36
    |
313 |     let mut format: libc::c_uint = (*pnm_ptr).format;
    |                                    ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/pnmio/pnmout.rs:306:1
    |
306 | / pub unsafe extern "C" fn pnm_fput_bytes(
307 | |     mut pnm_ptr: *const pnm_struct,
308 | |     mut sample_bytes: *const libc::c_uchar,
309 | |     mut sample_size: size_t,
310 | |     mut num_rows: libc::c_uint,
311 | |     mut stream: *mut FILE,
312 | | ) -> libc::c_int {
    | |________________^

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:314:35
    |
314 |     let mut depth: libc::c_uint = (*pnm_ptr).depth;
    |                                   ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:315:35
    |
315 |     let mut width: libc::c_uint = (*pnm_ptr).width;
    |                                   ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:316:36
    |
316 |     let mut maxval: libc::c_uint = (*pnm_ptr).maxval;
    |                                    ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:336:9
    |
336 |         *__errno_location() = 22 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmout::__errno_location` is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:336:10
    |
336 |         *__errno_location() = 22 as libc::c_int;
    |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:349:24
    |
349 |                     if *sample_bytes.offset(fresh1 as isize) as libc::c_int
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:349:25
    |
349 |                     if *sample_bytes.offset(fresh1 as isize) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmout::putc` is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:362:20
    |
362 |                 if putc(ch, stream) == -(1 as libc::c_int) {
    |                    ^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmout::fwrite` is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:368:17
    |
368 |               i = fwrite(
    |  _________________^
369 | |                 sample_bytes as *const libc::c_void,
370 | |                 sample_size,
371 | |                 num_samples,
372 | |                 stream,
373 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:376:13
    |
376 |             *__errno_location() = 22 as libc::c_int;
    |             ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmout::__errno_location` is unsafe and requires unsafe block
   --> src/pnmio/pnmout.rs:376:14
    |
376 |             *__errno_location() = 22 as libc::c_int;
    |              ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
   --> src/pnmio/pnmout.rs:307:5
    |
307 |     mut pnm_ptr: *const pnm_struct,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmout.rs:308:5
    |
308 |     mut sample_bytes: *const libc::c_uchar,
    |     ----^^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmout.rs:309:5
    |
309 |     mut sample_size: size_t,
    |     ----^^^^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmout.rs:310:5
    |
310 |     mut num_rows: libc::c_uint,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmout.rs:311:5
    |
311 |     mut stream: *mut FILE,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmout.rs:313:9
    |
313 |     let mut format: libc::c_uint = (*pnm_ptr).format;
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmout.rs:314:9
    |
314 |     let mut depth: libc::c_uint = (*pnm_ptr).depth;
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmout.rs:315:9
    |
315 |     let mut width: libc::c_uint = (*pnm_ptr).width;
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmout.rs:316:9
    |
316 |     let mut maxval: libc::c_uint = (*pnm_ptr).maxval;
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmout.rs:317:9
    |
317 |     let mut row_length: size_t = depth as size_t * width as size_t;
    |         ----^^^^^^^^^^
    |         |
    |         help: remove this `mut`

error: variable does not need to be mutable
   --> src/pnmio/pnmout.rs:318:9
    |
318 |     let mut num_samples: size_t = num_rows as size_t * row_length;
    |         ----^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src/pnmio/pnmutil.rs:25:36
   |
25 |     let mut format: libc::c_uint = (*pnm_ptr).format;
   |                                    ^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
  --> src/pnmio/pnmutil.rs:24:1
   |
24 | pub unsafe extern "C" fn pnm_is_valid(mut pnm_ptr: *const pnm_struct) -> libc::c_int {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src/pnmio/pnmutil.rs:26:35
   |
26 |     let mut depth: libc::c_uint = (*pnm_ptr).depth;
   |                                   ^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src/pnmio/pnmutil.rs:27:35
   |
27 |     let mut width: libc::c_uint = (*pnm_ptr).width;
   |                                   ^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src/pnmio/pnmutil.rs:28:36
   |
28 |     let mut height: libc::c_uint = (*pnm_ptr).height;
   |                                    ^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src/pnmio/pnmutil.rs:29:36
   |
29 |     let mut maxval: libc::c_uint = (*pnm_ptr).maxval;
   |                                    ^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error: variable does not need to be mutable
  --> src/pnmio/pnmutil.rs:24:39
   |
24 | pub unsafe extern "C" fn pnm_is_valid(mut pnm_ptr: *const pnm_struct) -> libc::c_int {
   |                                       ----^^^^^^^
   |                                       |
   |                                       help: remove this `mut`

error: variable does not need to be mutable
  --> src/pnmio/pnmutil.rs:25:9
   |
25 |     let mut format: libc::c_uint = (*pnm_ptr).format;
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

error: variable does not need to be mutable
  --> src/pnmio/pnmutil.rs:26:9
   |
26 |     let mut depth: libc::c_uint = (*pnm_ptr).depth;
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

error: variable does not need to be mutable
  --> src/pnmio/pnmutil.rs:27:9
   |
27 |     let mut width: libc::c_uint = (*pnm_ptr).width;
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

error: variable does not need to be mutable
  --> src/pnmio/pnmutil.rs:28:9
   |
28 |     let mut height: libc::c_uint = (*pnm_ptr).height;
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

error: variable does not need to be mutable
  --> src/pnmio/pnmutil.rs:29:9
   |
29 |     let mut maxval: libc::c_uint = (*pnm_ptr).maxval;
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src/pnmio/pnmutil.rs:67:36
   |
67 |     let mut maxval: libc::c_uint = (*pnm_ptr).maxval;
   |                                    ^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
  --> src/pnmio/pnmutil.rs:66:1
   |
66 | pub unsafe extern "C" fn pnm_raw_sample_size(mut pnm_ptr: *const pnm_struct) -> size_t {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src/pnmio/pnmutil.rs:69:9
   |
69 |         *__errno_location() = 22 as libc::c_int;
   |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmutil::__errno_location` is unsafe and requires unsafe block
  --> src/pnmio/pnmutil.rs:69:10
   |
69 |         *__errno_location() = 22 as libc::c_int;
   |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src/pnmio/pnmutil.rs:80:9
   |
80 |         *__errno_location() = 22 as libc::c_int;
   |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmutil::__errno_location` is unsafe and requires unsafe block
  --> src/pnmio/pnmutil.rs:80:10
   |
80 |         *__errno_location() = 22 as libc::c_int;
   |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
  --> src/pnmio/pnmutil.rs:66:46
   |
66 | pub unsafe extern "C" fn pnm_raw_sample_size(mut pnm_ptr: *const pnm_struct) -> size_t {
   |                                              ----^^^^^^^
   |                                              |
   |                                              help: remove this `mut`

error: variable does not need to be mutable
  --> src/pnmio/pnmutil.rs:67:9
   |
67 |     let mut maxval: libc::c_uint = (*pnm_ptr).maxval;
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src/pnmio/pnmutil.rs:90:35
   |
90 |     let mut depth: libc::c_uint = (*pnm_ptr).depth;
   |                                   ^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
  --> src/pnmio/pnmutil.rs:85:1
   |
85 | / pub unsafe extern "C" fn pnm_mem_size(
86 | |     mut pnm_ptr: *const pnm_struct,
87 | |     mut sample_size: size_t,
88 | |     mut num_rows: libc::c_uint,
89 | | ) -> size_t {
   | |___________^

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src/pnmio/pnmutil.rs:91:35
   |
91 |     let mut width: libc::c_uint = (*pnm_ptr).width;
   |                                   ^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src/pnmio/pnmutil.rs:96:9
   |
96 |         *__errno_location() = 22 as libc::c_int;
   |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmutil::__errno_location` is unsafe and requires unsafe block
  --> src/pnmio/pnmutil.rs:96:10
   |
96 |         *__errno_location() = 22 as libc::c_int;
   |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/pnmio/pnmutil.rs:102:9
    |
102 |         *__errno_location() = 34 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `pnmio::pnmutil::__errno_location` is unsafe and requires unsafe block
   --> src/pnmio/pnmutil.rs:102:10
    |
102 |         *__errno_location() = 34 as libc::c_int;
    |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: variable does not need to be mutable
  --> src/pnmio/pnmutil.rs:86:5
   |
86 |     mut pnm_ptr: *const pnm_struct,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

error: variable does not need to be mutable
  --> src/pnmio/pnmutil.rs:87:5
   |
87 |     mut sample_size: size_t,
   |     ----^^^^^^^^^^^
   |     |
   |     help: remove this `mut`

error: variable does not need to be mutable
  --> src/pnmio/pnmutil.rs:88:5
   |
88 |     mut num_rows: libc::c_uint,
   |     ----^^^^^^^^
   |     |
   |     help: remove this `mut`

error: variable does not need to be mutable
  --> src/pnmio/pnmutil.rs:90:9
   |
90 |     let mut depth: libc::c_uint = (*pnm_ptr).depth;
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

error: variable does not need to be mutable
  --> src/pnmio/pnmutil.rs:91:9
   |
91 |     let mut width: libc::c_uint = (*pnm_ptr).width;
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

Some errors have detailed explanations: E0133, E0658.
For more information about an error, try `rustc --explain E0133`.
error: could not compile `optipng_clippy` (bin "optipng_clippy") due to 3453 previous errors
