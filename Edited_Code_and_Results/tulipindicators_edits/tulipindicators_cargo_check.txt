    Checking tulipindicators v0.1.0 (/mnt/c/Users/mazin/Downloads/School/Research/datasets/2-C2Rust-Translation/tulipindicators_edits)
error[E0583]: file not found for module `kc`
  --> src/lib.rs:78:5
   |
78 |     pub mod kc;
   |     ^^^^^^^^^^^
   |
   = help: to create the module `kc`, create file "src/indicators/kc.rs" or "src/indicators/kc/mod.rs"
   = note: if there is a `mod kc` elsewhere in the crate already, import it with `use crate::...` instead

error[E0658]: extern types are experimental
 --> src/benchmark.rs:3:5
  |
3 |     pub type _IO_wide_data;
  |     ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/benchmark.rs:4:5
  |
4 |     pub type _IO_codecvt;
  |     ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/benchmark.rs:5:5
  |
5 |     pub type _IO_marker;
  |     ^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/benchmark.rs:6:5
  |
6 |     pub type ti_stream;
  |     ^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/benchmark.rs:7:5
  |
7 |     pub type tc_result;
  |     ^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/cli.rs:3:5
  |
3 |     pub type ti_stream;
  |     ^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/cli.rs:4:5
  |
4 |     pub type _IO_wide_data;
  |     ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/cli.rs:5:5
  |
5 |     pub type _IO_codecvt;
  |     ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/cli.rs:6:5
  |
6 |     pub type _IO_marker;
  |     ^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/fuzzer.rs:3:5
  |
3 |     pub type ti_stream;
  |     ^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/fuzzer.rs:4:5
  |
4 |     pub type tc_result;
  |     ^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/sample.rs:3:5
  |
3 |     pub type ti_stream;
  |     ^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/example2.rs:3:5
  |
3 |     pub type ti_stream;
  |     ^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/smoke.rs:3:5
  |
3 |     pub type ti_stream;
  |     ^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/smoke.rs:4:5
  |
4 |     pub type tc_result;
  |     ^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/smoke.rs:5:5
  |
5 |     pub type _IO_wide_data;
  |     ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/smoke.rs:6:5
  |
6 |     pub type _IO_codecvt;
  |     ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/smoke.rs:7:5
  |
7 |     pub type _IO_marker;
  |     ^^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/beta/ce.rs:3:5
  |
3 |     pub type ti_stream;
  |     ^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/beta/copp.rs:3:5
  |
3 |     pub type ti_stream;
  |     ^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/beta/dc.rs:3:5
  |
3 |     pub type ti_stream;
  |     ^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/beta/fi.rs:3:5
  |
3 |     pub type ti_stream;
  |     ^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/beta/kc.rs:3:5
  |
3 |     pub type ti_stream;
  |     ^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/beta/mama.rs:3:5
  |
3 |     pub type ti_stream;
  |     ^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/beta/pbands.rs:3:5
  |
3 |     pub type ti_stream;
  |     ^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/beta/pc.rs:3:5
  |
3 |     pub type ti_stream;
  |     ^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/beta/pfe.rs:3:5
  |
3 |     pub type ti_stream;
  |     ^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/beta/posc.rs:3:5
  |
3 |     pub type ti_stream;
  |     ^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/beta/rmi.rs:3:5
  |
3 |     pub type ti_stream;
  |     ^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/beta/rvi.rs:3:5
  |
3 |     pub type ti_stream;
  |     ^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/beta/smi.rs:3:5
  |
3 |     pub type ti_stream;
  |     ^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/beta/tsi.rs:3:5
  |
3 |     pub type ti_stream;
  |     ^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/beta/vwap.rs:3:5
  |
3 |     pub type ti_stream;
  |     ^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/indicators/atr.rs:3:5
  |
3 |     pub type ti_stream;
  |     ^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

error[E0658]: extern types are experimental
 --> src/indicators/sma.rs:3:5
  |
3 |     pub type ti_stream;
  |     ^^^^^^^^^^^^^^^^^^^
  |
  = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information

warning: type `size_t` should have an upper camel case name
  --> src/benchmark.rs:51:10
   |
51 | pub type size_t = libc::c_ulong;
   |          ^^^^^^ help: convert the identifier to upper camel case: `SizeT`
   |
   = note: `#[warn(non_camel_case_types)]` on by default

warning: type `__uint64_t` should have an upper camel case name
  --> src/benchmark.rs:52:10
   |
52 | pub type __uint64_t = libc::c_ulong;
   |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `Uint64T`

warning: type `__off_t` should have an upper camel case name
  --> src/benchmark.rs:53:10
   |
53 | pub type __off_t = libc::c_long;
   |          ^^^^^^^ help: convert the identifier to upper camel case: `OffT`

warning: type `__off64_t` should have an upper camel case name
  --> src/benchmark.rs:54:10
   |
54 | pub type __off64_t = libc::c_long;
   |          ^^^^^^^^^ help: convert the identifier to upper camel case: `Off64T`

warning: type `__clock_t` should have an upper camel case name
  --> src/benchmark.rs:55:10
   |
55 | pub type __clock_t = libc::c_long;
   |          ^^^^^^^^^ help: convert the identifier to upper camel case: `ClockT`

warning: type `_IO_lock_t` should have an upper camel case name
  --> src/benchmark.rs:89:10
   |
89 | pub type _IO_lock_t = ();
   |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `IoLockT`

warning: type `clock_t` should have an upper camel case name
  --> src/benchmark.rs:91:10
   |
91 | pub type clock_t = __clock_t;
   |          ^^^^^^^ help: convert the identifier to upper camel case: `ClockT`

warning: type `ti_indicator_start_function` should have an upper camel case name
   --> src/benchmark.rs:105:10
    |
105 | pub type ti_indicator_start_function = Option::<
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStartFunction`

warning: type `ti_indicator_function` should have an upper camel case name
   --> src/benchmark.rs:108:10
    |
108 | pub type ti_indicator_function = Option::<
    |          ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorFunction`

warning: type `ti_indicator_stream_new` should have an upper camel case name
   --> src/benchmark.rs:116:10
    |
116 | pub type ti_indicator_stream_new = Option::<
    |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamNew`

warning: type `ti_indicator_stream_run` should have an upper camel case name
   --> src/benchmark.rs:119:10
    |
119 | pub type ti_indicator_stream_run = Option::<
    |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamRun`

warning: type `ti_indicator_stream_free` should have an upper camel case name
   --> src/benchmark.rs:127:10
    |
127 | pub type ti_indicator_stream_free = Option::<unsafe extern "C" fn(*mut ti_stream) -> ()>;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamFree`

warning: type `uint64_t` should have an upper camel case name
   --> src/benchmark.rs:147:10
    |
147 | pub type uint64_t = __uint64_t;
    |          ^^^^^^^^ help: convert the identifier to upper camel case: `Uint64T`

warning: type `TC_REAL` should have an upper camel case name
   --> src/benchmark.rs:148:10
    |
148 | pub type TC_REAL = libc::c_double;
    |          ^^^^^^^ help: convert the identifier to upper camel case: `TcReal`

warning: type `tc_set` should have an upper camel case name
   --> src/benchmark.rs:149:10
    |
149 | pub type tc_set = uint64_t;
    |          ^^^^^^ help: convert the identifier to upper camel case: `TcSet`

warning: type `tc_candle_function` should have an upper camel case name
   --> src/benchmark.rs:161:10
    |
161 | pub type tc_candle_function = Option::<
    |          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TcCandleFunction`

warning: type `run_fun` should have an upper camel case name
   --> src/benchmark.rs:177:10
    |
177 | pub type run_fun = Option::<
    |          ^^^^^^^ help: convert the identifier to upper camel case: `RunFun`

warning: type `__off_t` should have an upper camel case name
  --> src/cli.rs:23:10
   |
23 | pub type __off_t = libc::c_long;
   |          ^^^^^^^ help: convert the identifier to upper camel case: `OffT`

warning: type `__off64_t` should have an upper camel case name
  --> src/cli.rs:24:10
   |
24 | pub type __off64_t = libc::c_long;
   |          ^^^^^^^^^ help: convert the identifier to upper camel case: `Off64T`

warning: type `size_t` should have an upper camel case name
  --> src/cli.rs:25:10
   |
25 | pub type size_t = libc::c_ulong;
   |          ^^^^^^ help: convert the identifier to upper camel case: `SizeT`

warning: type `ti_indicator_start_function` should have an upper camel case name
  --> src/cli.rs:26:10
   |
26 | pub type ti_indicator_start_function = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStartFunction`

warning: type `ti_indicator_function` should have an upper camel case name
  --> src/cli.rs:29:10
   |
29 | pub type ti_indicator_function = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorFunction`

warning: type `ti_indicator_stream_new` should have an upper camel case name
  --> src/cli.rs:37:10
   |
37 | pub type ti_indicator_stream_new = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamNew`

warning: type `ti_indicator_stream_run` should have an upper camel case name
  --> src/cli.rs:40:10
   |
40 | pub type ti_indicator_stream_run = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamRun`

warning: type `ti_indicator_stream_free` should have an upper camel case name
  --> src/cli.rs:48:10
   |
48 | pub type ti_indicator_stream_free = Option::<unsafe extern "C" fn(*mut ti_stream) -> ()>;
   |          ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamFree`

warning: type `_IO_lock_t` should have an upper camel case name
   --> src/cli.rs:101:10
    |
101 | pub type _IO_lock_t = ();
    |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `IoLockT`

warning: type `__uint64_t` should have an upper camel case name
  --> src/fuzzer.rs:26:10
   |
26 | pub type __uint64_t = libc::c_ulong;
   |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `Uint64T`

warning: type `ti_indicator_start_function` should have an upper camel case name
  --> src/fuzzer.rs:27:10
   |
27 | pub type ti_indicator_start_function = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStartFunction`

warning: type `ti_indicator_function` should have an upper camel case name
  --> src/fuzzer.rs:30:10
   |
30 | pub type ti_indicator_function = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorFunction`

warning: type `ti_indicator_stream_new` should have an upper camel case name
  --> src/fuzzer.rs:38:10
   |
38 | pub type ti_indicator_stream_new = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamNew`

warning: type `ti_indicator_stream_run` should have an upper camel case name
  --> src/fuzzer.rs:41:10
   |
41 | pub type ti_indicator_stream_run = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamRun`

warning: type `ti_indicator_stream_free` should have an upper camel case name
  --> src/fuzzer.rs:49:10
   |
49 | pub type ti_indicator_stream_free = Option::<unsafe extern "C" fn(*mut ti_stream) -> ()>;
   |          ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamFree`

warning: type `uint64_t` should have an upper camel case name
  --> src/fuzzer.rs:69:10
   |
69 | pub type uint64_t = __uint64_t;
   |          ^^^^^^^^ help: convert the identifier to upper camel case: `Uint64T`

warning: type `TC_REAL` should have an upper camel case name
  --> src/fuzzer.rs:70:10
   |
70 | pub type TC_REAL = libc::c_double;
   |          ^^^^^^^ help: convert the identifier to upper camel case: `TcReal`

warning: type `tc_set` should have an upper camel case name
  --> src/fuzzer.rs:71:10
   |
71 | pub type tc_set = uint64_t;
   |          ^^^^^^ help: convert the identifier to upper camel case: `TcSet`

warning: type `tc_candle_function` should have an upper camel case name
  --> src/fuzzer.rs:89:10
   |
89 | pub type tc_candle_function = Option::<
   |          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TcCandleFunction`

warning: type `ti_indicator_start_function` should have an upper camel case name
  --> src/sample.rs:16:10
   |
16 | pub type ti_indicator_start_function = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStartFunction`

warning: type `ti_indicator_function` should have an upper camel case name
  --> src/sample.rs:19:10
   |
19 | pub type ti_indicator_function = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorFunction`

warning: type `ti_indicator_stream_new` should have an upper camel case name
  --> src/sample.rs:27:10
   |
27 | pub type ti_indicator_stream_new = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamNew`

warning: type `ti_indicator_stream_run` should have an upper camel case name
  --> src/sample.rs:30:10
   |
30 | pub type ti_indicator_stream_run = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamRun`

warning: type `ti_indicator_stream_free` should have an upper camel case name
  --> src/sample.rs:38:10
   |
38 | pub type ti_indicator_stream_free = Option::<unsafe extern "C" fn(*mut ti_stream) -> ()>;
   |          ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamFree`

warning: type `__uint64_t` should have an upper camel case name
  --> src/candles.rs:25:10
   |
25 | pub type __uint64_t = libc::c_ulong;
   |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `Uint64T`

warning: type `uint64_t` should have an upper camel case name
  --> src/candles.rs:26:10
   |
26 | pub type uint64_t = __uint64_t;
   |          ^^^^^^^^ help: convert the identifier to upper camel case: `Uint64T`

warning: type `TC_REAL` should have an upper camel case name
  --> src/candles.rs:27:10
   |
27 | pub type TC_REAL = libc::c_double;
   |          ^^^^^^^ help: convert the identifier to upper camel case: `TcReal`

warning: type `tc_set` should have an upper camel case name
  --> src/candles.rs:43:10
   |
43 | pub type tc_set = uint64_t;
   |          ^^^^^^ help: convert the identifier to upper camel case: `TcSet`

warning: type `tc_candle_function` should have an upper camel case name
  --> src/candles.rs:55:10
   |
55 | pub type tc_candle_function = Option::<
   |          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TcCandleFunction`

warning: type `ti_indicator_start_function` should have an upper camel case name
 --> src/example2.rs:7:10
  |
7 | pub type ti_indicator_start_function = Option::<
  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStartFunction`

warning: type `ti_indicator_function` should have an upper camel case name
  --> src/example2.rs:10:10
   |
10 | pub type ti_indicator_function = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorFunction`

warning: type `ti_indicator_stream_new` should have an upper camel case name
  --> src/example2.rs:18:10
   |
18 | pub type ti_indicator_stream_new = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamNew`

warning: type `ti_indicator_stream_run` should have an upper camel case name
  --> src/example2.rs:21:10
   |
21 | pub type ti_indicator_stream_run = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamRun`

warning: type `ti_indicator_stream_free` should have an upper camel case name
  --> src/example2.rs:29:10
   |
29 | pub type ti_indicator_stream_free = Option::<unsafe extern "C" fn(*mut ti_stream) -> ()>;
   |          ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamFree`

warning: type `ti_indicator_start_function` should have an upper camel case name
   --> src/indicators_rs.rs:773:10
    |
773 | pub type ti_indicator_start_function = Option::<
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStartFunction`

warning: type `ti_indicator_function` should have an upper camel case name
   --> src/indicators_rs.rs:776:10
    |
776 | pub type ti_indicator_function = Option::<
    |          ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorFunction`

warning: type `ti_indicator_stream_new` should have an upper camel case name
   --> src/indicators_rs.rs:790:10
    |
790 | pub type ti_indicator_stream_new = Option::<
    |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamNew`

warning: type `ti_indicator_stream_run` should have an upper camel case name
   --> src/indicators_rs.rs:793:10
    |
793 | pub type ti_indicator_stream_run = Option::<
    |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamRun`

warning: type `ti_indicator_stream_free` should have an upper camel case name
   --> src/indicators_rs.rs:801:10
    |
801 | pub type ti_indicator_stream_free = Option::<unsafe extern "C" fn(*mut ti_stream) -> ()>;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamFree`

warning: type `__uint64_t` should have an upper camel case name
  --> src/smoke.rs:59:10
   |
59 | pub type __uint64_t = libc::c_ulong;
   |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `Uint64T`

warning: type `__off_t` should have an upper camel case name
  --> src/smoke.rs:60:10
   |
60 | pub type __off_t = libc::c_long;
   |          ^^^^^^^ help: convert the identifier to upper camel case: `OffT`

warning: type `__off64_t` should have an upper camel case name
  --> src/smoke.rs:61:10
   |
61 | pub type __off64_t = libc::c_long;
   |          ^^^^^^^^^ help: convert the identifier to upper camel case: `Off64T`

warning: type `__clock_t` should have an upper camel case name
  --> src/smoke.rs:62:10
   |
62 | pub type __clock_t = libc::c_long;
   |          ^^^^^^^^^ help: convert the identifier to upper camel case: `ClockT`

warning: type `size_t` should have an upper camel case name
  --> src/smoke.rs:63:10
   |
63 | pub type size_t = libc::c_ulong;
   |          ^^^^^^ help: convert the identifier to upper camel case: `SizeT`

warning: type `ti_indicator_start_function` should have an upper camel case name
  --> src/smoke.rs:64:10
   |
64 | pub type ti_indicator_start_function = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStartFunction`

warning: type `ti_indicator_function` should have an upper camel case name
  --> src/smoke.rs:67:10
   |
67 | pub type ti_indicator_function = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorFunction`

warning: type `ti_indicator_stream_new` should have an upper camel case name
  --> src/smoke.rs:75:10
   |
75 | pub type ti_indicator_stream_new = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamNew`

warning: type `ti_indicator_stream_run` should have an upper camel case name
  --> src/smoke.rs:78:10
   |
78 | pub type ti_indicator_stream_run = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamRun`

warning: type `ti_indicator_stream_free` should have an upper camel case name
  --> src/smoke.rs:86:10
   |
86 | pub type ti_indicator_stream_free = Option::<unsafe extern "C" fn(*mut ti_stream) -> ()>;
   |          ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamFree`

warning: type `uint64_t` should have an upper camel case name
   --> src/smoke.rs:106:10
    |
106 | pub type uint64_t = __uint64_t;
    |          ^^^^^^^^ help: convert the identifier to upper camel case: `Uint64T`

warning: type `TC_REAL` should have an upper camel case name
   --> src/smoke.rs:107:10
    |
107 | pub type TC_REAL = libc::c_double;
    |          ^^^^^^^ help: convert the identifier to upper camel case: `TcReal`

warning: type `tc_set` should have an upper camel case name
   --> src/smoke.rs:108:10
    |
108 | pub type tc_set = uint64_t;
    |          ^^^^^^ help: convert the identifier to upper camel case: `TcSet`

warning: type `tc_candle_function` should have an upper camel case name
   --> src/smoke.rs:120:10
    |
120 | pub type tc_candle_function = Option::<
    |          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TcCandleFunction`

warning: type `_IO_lock_t` should have an upper camel case name
   --> src/smoke.rs:169:10
    |
169 | pub type _IO_lock_t = ();
    |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `IoLockT`

warning: type `clock_t` should have an upper camel case name
   --> src/smoke.rs:171:10
    |
171 | pub type clock_t = __clock_t;
    |          ^^^^^^^ help: convert the identifier to upper camel case: `ClockT`

warning: type `__uint64_t` should have an upper camel case name
  --> src/tiamalgamation.rs:41:10
   |
41 | pub type __uint64_t = libc::c_ulong;
   |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `Uint64T`

warning: type `ti_indicator_start_function` should have an upper camel case name
  --> src/tiamalgamation.rs:42:10
   |
42 | pub type ti_indicator_start_function = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStartFunction`

warning: type `ti_indicator_function` should have an upper camel case name
  --> src/tiamalgamation.rs:45:10
   |
45 | pub type ti_indicator_function = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorFunction`

warning: type `ti_indicator_stream_new` should have an upper camel case name
  --> src/tiamalgamation.rs:59:10
   |
59 | pub type ti_indicator_stream_new = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamNew`

warning: type `ti_indicator_stream_run` should have an upper camel case name
  --> src/tiamalgamation.rs:62:10
   |
62 | pub type ti_indicator_stream_run = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamRun`

warning: type `ti_indicator_stream_free` should have an upper camel case name
  --> src/tiamalgamation.rs:70:10
   |
70 | pub type ti_indicator_stream_free = Option::<unsafe extern "C" fn(*mut ti_stream) -> ()>;
   |          ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamFree`

warning: type `uint64_t` should have an upper camel case name
   --> src/tiamalgamation.rs:120:10
    |
120 | pub type uint64_t = __uint64_t;
    |          ^^^^^^^^ help: convert the identifier to upper camel case: `Uint64T`

warning: type `TC_REAL` should have an upper camel case name
   --> src/tiamalgamation.rs:121:10
    |
121 | pub type TC_REAL = libc::c_double;
    |          ^^^^^^^ help: convert the identifier to upper camel case: `TcReal`

warning: type `tc_set` should have an upper camel case name
   --> src/tiamalgamation.rs:137:10
    |
137 | pub type tc_set = uint64_t;
    |          ^^^^^^ help: convert the identifier to upper camel case: `TcSet`

warning: type `tc_candle_function` should have an upper camel case name
   --> src/tiamalgamation.rs:149:10
    |
149 | pub type tc_candle_function = Option::<
    |          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TcCandleFunction`

warning: unused label
   --> src/beta/abands.rs:176:5
    |
176 |     'c_3579: {
    |     ^^^^^^^
    |
    = note: `#[warn(unused_labels)]` on by default

warning: unused label
   --> src/beta/abands.rs:275:5
    |
275 |     'c_4400: {
    |     ^^^^^^^

warning: type `size_t` should have an upper camel case name
  --> src/beta/alma.rs:16:10
   |
16 | pub type size_t = libc::c_ulong;
   |          ^^^^^^ help: convert the identifier to upper camel case: `SizeT`

warning: unused label
   --> src/beta/alma.rs:121:5
    |
121 |     'c_3559: {
    |     ^^^^^^^

warning: unused label
   --> src/beta/cmf.rs:105:5
    |
105 |     'c_3549: {
    |     ^^^^^^^

warning: unused label
  --> src/beta/ikhts.rs:79:5
   |
79 |     'c_3783: {
   |     ^^^^^^^

warning: unused label
   --> src/beta/ikhts.rs:118:5
    |
118 |     'c_3702: {
    |     ^^^^^^^

warning: unused label
   --> src/beta/ikhts.rs:167:5
    |
167 |     'c_3554: {
    |     ^^^^^^^

warning: unused label
   --> src/beta/kst.rs:162:5
    |
162 |     'c_3572: {
    |     ^^^^^^^

warning: unused label
   --> src/beta/kst.rs:311:5
    |
311 |     'c_4523: {
    |     ^^^^^^^

warning: unused label
   --> src/beta/pfe.rs:215:5
    |
215 |     'c_3573: {
    |     ^^^^^^^

warning: unused label
   --> src/beta/pfe.rs:312:5
    |
312 |     'c_4354: {
    |     ^^^^^^^

warning: unused label
  --> src/beta/rmta.rs:81:5
   |
81 |     'c_3547: {
   |     ^^^^^^^

warning: type `__uint64_t` should have an upper camel case name
  --> src/templates/candles.rs:24:10
   |
24 | pub type __uint64_t = libc::c_ulong;
   |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `Uint64T`

warning: type `uint64_t` should have an upper camel case name
  --> src/templates/candles.rs:25:10
   |
25 | pub type uint64_t = __uint64_t;
   |          ^^^^^^^^ help: convert the identifier to upper camel case: `Uint64T`

warning: type `TC_REAL` should have an upper camel case name
  --> src/templates/candles.rs:26:10
   |
26 | pub type TC_REAL = libc::c_double;
   |          ^^^^^^^ help: convert the identifier to upper camel case: `TcReal`

warning: type `tc_set` should have an upper camel case name
  --> src/templates/candles.rs:42:10
   |
42 | pub type tc_set = uint64_t;
   |          ^^^^^^ help: convert the identifier to upper camel case: `TcSet`

warning: type `tc_candle_function` should have an upper camel case name
  --> src/templates/candles.rs:54:10
   |
54 | pub type tc_candle_function = Option::<
   |          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TcCandleFunction`

warning: unused label
   --> src/templates/candles.rs:226:9
    |
226 |         'c_3279: {
    |         ^^^^^^^

warning: unused label
   --> src/templates/candles.rs:254:9
    |
254 |         'c_3232: {
    |         ^^^^^^^

warning: type `ti_indicator_start_function` should have an upper camel case name
 --> src/templates/indicators.rs:6:10
  |
6 | pub type ti_indicator_start_function = Option::<
  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStartFunction`

warning: type `ti_indicator_function` should have an upper camel case name
 --> src/templates/indicators.rs:9:10
  |
9 | pub type ti_indicator_function = Option::<
  |          ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorFunction`

warning: type `ti_indicator_stream_new` should have an upper camel case name
  --> src/templates/indicators.rs:23:10
   |
23 | pub type ti_indicator_stream_new = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamNew`

warning: type `ti_indicator_stream_run` should have an upper camel case name
  --> src/templates/indicators.rs:26:10
   |
26 | pub type ti_indicator_stream_run = Option::<
   |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamRun`

warning: type `ti_indicator_stream_free` should have an upper camel case name
  --> src/templates/indicators.rs:34:10
   |
34 | pub type ti_indicator_stream_free = Option::<unsafe extern "C" fn(*mut ti_stream) -> ()>;
   |          ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TiIndicatorStreamFree`

warning: variable does not need to be mutable
  --> src/candles.rs:86:13
   |
86 |         let mut init = tc_config {
   |             ----^^^^
   |             |
   |             help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
   --> src/candles.rs:103:17
    |
103 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:120:17
    |
120 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:137:17
    |
137 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:154:17
    |
154 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:171:17
    |
171 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:188:17
    |
188 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:205:17
    |
205 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:222:17
    |
222 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:239:17
    |
239 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:256:17
    |
256 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:273:17
    |
273 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:290:17
    |
290 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:307:17
    |
307 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:324:17
    |
324 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:341:17
    |
341 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:358:17
    |
358 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:375:17
    |
375 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:392:17
    |
392 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:409:17
    |
409 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:426:17
    |
426 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:443:17
    |
443 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:460:17
    |
460 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:477:17
    |
477 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:494:17
    |
494 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:511:17
    |
511 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:528:17
    |
528 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:545:17
    |
545 |             let mut init = tc_candle_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators_rs.rs:837:17
    |
837 |             let mut init = ti_indicator_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators_rs.rs:920:17
    |
920 |             let mut init = ti_indicator_info {
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:1002:17
     |
1002 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:1085:17
     |
1085 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:1167:17
     |
1167 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:1250:17
     |
1250 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:1333:17
     |
1333 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:1416:17
     |
1416 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:1498:17
     |
1498 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:1581:17
     |
1581 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:1663:17
     |
1663 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:1745:17
     |
1745 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:1827:17
     |
1827 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:1909:17
     |
1909 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:2015:17
     |
2015 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:2097:17
     |
2097 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:2179:17
     |
2179 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:2261:17
     |
2261 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:2344:17
     |
2344 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:2426:17
     |
2426 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:2509:17
     |
2509 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:2591:17
     |
2591 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:2674:17
     |
2674 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:2756:17
     |
2756 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:2838:17
     |
2838 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:2920:17
     |
2920 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:3002:17
     |
3002 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:3085:17
     |
3085 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:3168:17
     |
3168 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:3250:17
     |
3250 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:3332:17
     |
3332 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:3415:17
     |
3415 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:3498:17
     |
3498 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:3580:17
     |
3580 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:3663:17
     |
3663 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:3745:17
     |
3745 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:3827:17
     |
3827 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:3909:17
     |
3909 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:3991:17
     |
3991 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:4073:17
     |
4073 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:4155:17
     |
4155 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:4238:17
     |
4238 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:4321:17
     |
4321 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:4403:17
     |
4403 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:4485:17
     |
4485 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:4568:17
     |
4568 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:4651:17
     |
4651 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:4733:17
     |
4733 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:4815:17
     |
4815 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:4898:17
     |
4898 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:4981:17
     |
4981 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:5063:17
     |
5063 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:5153:17
     |
5153 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:5236:17
     |
5236 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:5318:17
     |
5318 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:5400:17
     |
5400 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:5490:17
     |
5490 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:5572:17
     |
5572 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:5654:17
     |
5654 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:5737:17
     |
5737 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:5820:17
     |
5820 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:5903:17
     |
5903 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:5985:17
     |
5985 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:6068:17
     |
6068 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:6150:17
     |
6150 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:6233:17
     |
6233 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:6315:17
     |
6315 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:6397:17
     |
6397 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:6479:17
     |
6479 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:6561:17
     |
6561 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:6644:17
     |
6644 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:6726:17
     |
6726 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:6809:17
     |
6809 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:6908:17
     |
6908 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:6990:17
     |
6990 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:7073:17
     |
7073 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:7156:17
     |
7156 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:7239:17
     |
7239 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:7321:17
     |
7321 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:7403:17
     |
7403 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:7485:17
     |
7485 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:7567:17
     |
7567 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:7650:17
     |
7650 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:7733:17
     |
7733 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:7816:17
     |
7816 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:7899:17
     |
7899 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:7981:17
     |
7981 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:8064:17
     |
8064 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:8146:17
     |
8146 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:8228:17
     |
8228 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:8310:17
     |
8310 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:8392:17
     |
8392 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:8474:17
     |
8474 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:8556:17
     |
8556 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:8639:17
     |
8639 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:8722:17
     |
8722 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:8805:17
     |
8805 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:8887:17
     |
8887 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:8970:17
     |
8970 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:9053:17
     |
9053 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:9135:17
     |
9135 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:9217:17
     |
9217 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:9299:17
     |
9299 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:9382:17
     |
9382 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:9465:17
     |
9465 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7591:17
     |
7591 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7674:17
     |
7674 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7756:17
     |
7756 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7839:17
     |
7839 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7921:17
     |
7921 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:8004:17
     |
8004 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:8087:17
     |
8087 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:8170:17
     |
8170 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:8252:17
     |
8252 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:8335:17
     |
8335 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:8417:17
     |
8417 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:8499:17
     |
8499 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:8581:17
     |
8581 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:8663:17
     |
8663 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:8769:17
     |
8769 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:8851:17
     |
8851 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:8933:17
     |
8933 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:9015:17
     |
9015 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:9098:17
     |
9098 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:9180:17
     |
9180 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:9263:17
     |
9263 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:9345:17
     |
9345 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:9428:17
     |
9428 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:9510:17
     |
9510 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:9592:17
     |
9592 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:9674:17
     |
9674 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:9756:17
     |
9756 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:9839:17
     |
9839 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:9922:17
     |
9922 |             let mut init = ti_indicator_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:10004:17
      |
10004 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:10086:17
      |
10086 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:10169:17
      |
10169 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:10252:17
      |
10252 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:10334:17
      |
10334 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:10417:17
      |
10417 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:10499:17
      |
10499 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:10581:17
      |
10581 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:10663:17
      |
10663 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:10745:17
      |
10745 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:10827:17
      |
10827 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:10909:17
      |
10909 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:10992:17
      |
10992 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:11075:17
      |
11075 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:11157:17
      |
11157 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:11239:17
      |
11239 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:11322:17
      |
11322 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:11405:17
      |
11405 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:11487:17
      |
11487 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:11569:17
      |
11569 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:11652:17
      |
11652 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:11735:17
      |
11735 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:11817:17
      |
11817 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:11907:17
      |
11907 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:11990:17
      |
11990 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:12072:17
      |
12072 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:12154:17
      |
12154 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:12244:17
      |
12244 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:12326:17
      |
12326 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:12408:17
      |
12408 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:12491:17
      |
12491 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:12574:17
      |
12574 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:12657:17
      |
12657 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:12739:17
      |
12739 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:12822:17
      |
12822 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:12904:17
      |
12904 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:12987:17
      |
12987 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:13069:17
      |
13069 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:13151:17
      |
13151 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:13233:17
      |
13233 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:13315:17
      |
13315 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:13398:17
      |
13398 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:13480:17
      |
13480 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:13563:17
      |
13563 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:13662:17
      |
13662 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:13744:17
      |
13744 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:13827:17
      |
13827 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:13910:17
      |
13910 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:13993:17
      |
13993 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:14075:17
      |
14075 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:14157:17
      |
14157 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:14239:17
      |
14239 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:14321:17
      |
14321 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:14404:17
      |
14404 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:14487:17
      |
14487 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:14570:17
      |
14570 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:14653:17
      |
14653 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:14735:17
      |
14735 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:14818:17
      |
14818 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:14900:17
      |
14900 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:14982:17
      |
14982 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:15064:17
      |
15064 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:15146:17
      |
15146 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:15228:17
      |
15228 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:15310:17
      |
15310 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:15393:17
      |
15393 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:15476:17
      |
15476 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:15559:17
      |
15559 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:15641:17
      |
15641 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:15724:17
      |
15724 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:15807:17
      |
15807 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:15889:17
      |
15889 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:15971:17
      |
15971 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16053:17
      |
16053 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16136:17
      |
16136 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16219:17
      |
16219 |             let mut init = ti_indicator_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16355:13
      |
16355 |         let mut init = tc_config {
      |             ----^^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16372:17
      |
16372 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16389:17
      |
16389 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16406:17
      |
16406 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16423:17
      |
16423 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16440:17
      |
16440 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16457:17
      |
16457 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16474:17
      |
16474 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16491:17
      |
16491 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16508:17
      |
16508 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16525:17
      |
16525 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16542:17
      |
16542 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16559:17
      |
16559 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16576:17
      |
16576 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16593:17
      |
16593 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16610:17
      |
16610 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16627:17
      |
16627 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16644:17
      |
16644 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16661:17
      |
16661 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16678:17
      |
16678 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16695:17
      |
16695 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16712:17
      |
16712 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16729:17
      |
16729 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16746:17
      |
16746 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16763:17
      |
16763 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16780:17
      |
16780 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16797:17
      |
16797 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16814:17
      |
16814 |             let mut init = tc_candle_info {
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
  --> src/templates/candles.rs:73:13
   |
73 |         let mut init = tc_config {
   |             ----^^^^
   |             |
   |             help: remove this `mut`

error[E0425]: cannot find function, tuple struct or tuple variant `CALC_TRUERANGE` in this scope
  --> src/beta/ce.rs:86:9
   |
86 |         CALC_TRUERANGE();
   |         ^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find function, tuple struct or tuple variant `CALC_TRUERANGE` in this scope
   --> src/beta/ce.rs:113:9
    |
113 |         CALC_TRUERANGE();
    |         ^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find function, tuple struct or tuple variant `CALC_TRUERANGE` in this scope
  --> src/beta/kc.rs:80:9
   |
80 |         CALC_TRUERANGE();
   |         ^^^^^^^^^^^^^^ not found in this scope

warning: value assigned to `i` is never read
   --> src/benchmark.rs:219:13
    |
219 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?
    = note: `#[warn(unused_assignments)]` on by default

warning: variable does not need to be mutable
   --> src/benchmark.rs:212:9
    |
212 |     let mut open: *mut libc::c_double = (in_0[0 as libc::c_int as usize]).as_mut_ptr();
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:213:9
    |
213 |     let mut high: *mut libc::c_double = (in_0[1 as libc::c_int as usize]).as_mut_ptr();
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:214:9
    |
214 |     let mut low: *mut libc::c_double = (in_0[2 as libc::c_int as usize]).as_mut_ptr();
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:215:9
    |
215 |     let mut close: *mut libc::c_double = (in_0[3 as libc::c_int as usize]).as_mut_ptr();
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:216:9
    |
216 |     let mut volume: *mut libc::c_double = (in_0[4 as libc::c_int as usize]).as_mut_ptr();
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: value assigned to `j` is never read
   --> src/benchmark.rs:388:13
    |
388 |     let mut j: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src/benchmark.rs:385:5
    |
385 |     mut info: *const ti_indicator_info,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:386:5
    |
386 |     mut inputs: *mut *mut libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: value assigned to `i` is never read
   --> src/benchmark.rs:480:21
    |
480 |             let mut i: libc::c_int = 0;
    |                     ^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src/benchmark.rs:455:5
    |
455 |     mut info: *const ti_indicator_info,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:456:5
    |
456 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:457:5
    |
457 |     mut goal: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: value assigned to `i` is never read
   --> src/benchmark.rs:540:21
    |
540 |             let mut i: libc::c_int = 0;
    |                     ^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src/benchmark.rs:515:5
    |
515 |     mut info: *const ti_indicator_info,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:516:5
    |
516 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:517:5
    |
517 |     mut goal: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:575:5
    |
575 |     mut info: *const ti_indicator_info,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:576:5
    |
576 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:577:5
    |
577 |     mut goal: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: value assigned to `i` is never read
   --> src/benchmark.rs:763:21
    |
763 |             let mut i: libc::c_int = 0;
    |                     ^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src/benchmark.rs:710:5
    |
710 |     mut info: *const ti_indicator_info,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:711:5
    |
711 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:712:5
    |
712 |     mut goal: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: unused variable: `ti`
   --> src/benchmark.rs:798:9
    |
798 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: variable does not need to be mutable
   --> src/benchmark.rs:796:5
    |
796 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:797:5
    |
797 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:798:5
    |
798 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: unused variable: `ti`
   --> src/benchmark.rs:806:9
    |
806 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: variable does not need to be mutable
   --> src/benchmark.rs:804:5
    |
804 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:805:5
    |
805 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:806:5
    |
806 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: unused variable: `ti`
   --> src/benchmark.rs:818:9
    |
818 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: variable does not need to be mutable
   --> src/benchmark.rs:816:5
    |
816 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:817:5
    |
817 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:818:5
    |
818 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: unused variable: `ti`
   --> src/benchmark.rs:828:9
    |
828 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: variable does not need to be mutable
   --> src/benchmark.rs:826:5
    |
826 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:827:5
    |
827 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:828:5
    |
828 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: unused variable: `ti`
   --> src/benchmark.rs:837:9
    |
837 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: variable does not need to be mutable
   --> src/benchmark.rs:835:5
    |
835 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:836:5
    |
836 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:837:5
    |
837 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: unused variable: `ti`
   --> src/benchmark.rs:846:9
    |
846 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: variable does not need to be mutable
   --> src/benchmark.rs:844:5
    |
844 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:845:5
    |
845 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:846:5
    |
846 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: unused variable: `ti`
   --> src/benchmark.rs:856:9
    |
856 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: variable does not need to be mutable
   --> src/benchmark.rs:854:5
    |
854 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:855:5
    |
855 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:856:5
    |
856 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: unused variable: `ti`
   --> src/benchmark.rs:865:9
    |
865 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: variable does not need to be mutable
   --> src/benchmark.rs:863:5
    |
863 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:864:5
    |
864 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:865:5
    |
865 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: unused variable: `ti`
   --> src/benchmark.rs:880:9
    |
880 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: variable does not need to be mutable
   --> src/benchmark.rs:878:5
    |
878 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:879:5
    |
879 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:880:5
    |
880 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: unused variable: `period`
   --> src/benchmark.rs:892:9
    |
892 |     mut period: libc::c_double,
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_period`

warning: unused variable: `ti`
   --> src/benchmark.rs:894:9
    |
894 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: variable does not need to be mutable
   --> src/benchmark.rs:892:5
    |
892 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:893:5
    |
893 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:894:5
    |
894 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: unused variable: `ti`
   --> src/benchmark.rs:903:9
    |
903 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: variable does not need to be mutable
   --> src/benchmark.rs:901:5
    |
901 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:902:5
    |
902 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:903:5
    |
903 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: unused variable: `ti`
   --> src/benchmark.rs:912:9
    |
912 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: variable does not need to be mutable
   --> src/benchmark.rs:910:5
    |
910 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:911:5
    |
911 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:912:5
    |
912 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: unused variable: `ti`
   --> src/benchmark.rs:921:9
    |
921 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: variable does not need to be mutable
   --> src/benchmark.rs:919:5
    |
919 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:920:5
    |
920 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:921:5
    |
921 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: unused variable: `ti`
   --> src/benchmark.rs:933:9
    |
933 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: variable does not need to be mutable
   --> src/benchmark.rs:931:5
    |
931 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:932:5
    |
932 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:933:5
    |
933 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: unused variable: `ti`
   --> src/benchmark.rs:947:9
    |
947 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: variable does not need to be mutable
   --> src/benchmark.rs:945:5
    |
945 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:946:5
    |
946 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:947:5
    |
947 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: unused variable: `ti`
   --> src/benchmark.rs:956:9
    |
956 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: variable does not need to be mutable
   --> src/benchmark.rs:954:5
    |
954 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:955:5
    |
955 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:956:5
    |
956 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: unused variable: `ti`
   --> src/benchmark.rs:969:9
    |
969 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: variable does not need to be mutable
   --> src/benchmark.rs:967:5
    |
967 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:968:5
    |
968 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:969:5
    |
969 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: unused variable: `ti`
   --> src/benchmark.rs:978:9
    |
978 |     mut ti: libc::c_int,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: variable does not need to be mutable
   --> src/benchmark.rs:976:5
    |
976 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:977:5
    |
977 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:978:5
    |
978 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:986:5
    |
986 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:987:5
    |
987 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:988:5
    |
988 |     mut ti: libc::c_int,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: unused variable: `ti`
    --> src/benchmark.rs:1000:9
     |
1000 |     mut ti: libc::c_int,
     |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: variable does not need to be mutable
   --> src/benchmark.rs:998:5
    |
998 |     mut period: libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/benchmark.rs:999:5
    |
999 |     mut options: *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1000:5
     |
1000 |     mut ti: libc::c_int,
     |     ----^^
     |     |
     |     help: remove this `mut`

warning: unused variable: `ti`
    --> src/benchmark.rs:1011:9
     |
1011 |     mut ti: libc::c_int,
     |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1009:5
     |
1009 |     mut period: libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1010:5
     |
1010 |     mut options: *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1011:5
     |
1011 |     mut ti: libc::c_int,
     |     ----^^
     |     |
     |     help: remove this `mut`

warning: unused variable: `ti`
    --> src/benchmark.rs:1020:9
     |
1020 |     mut ti: libc::c_int,
     |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1018:5
     |
1018 |     mut period: libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1019:5
     |
1019 |     mut options: *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1020:5
     |
1020 |     mut ti: libc::c_int,
     |     ----^^
     |     |
     |     help: remove this `mut`

warning: unused variable: `ti`
    --> src/benchmark.rs:1032:9
     |
1032 |     mut ti: libc::c_int,
     |         ^^ help: if this is intentional, prefix it with an underscore: `_ti`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1030:5
     |
1030 |     mut period: libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1031:5
     |
1031 |     mut options: *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1032:5
     |
1032 |     mut ti: libc::c_int,
     |     ----^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1043:5
     |
1043 |     mut a: libc::c_double,
     |     ----^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/benchmark.rs:1071:13
     |
1071 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
    --> src/benchmark.rs:1072:13
     |
1072 |     let mut j: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/benchmark.rs:1049:5
     |
1049 |     mut info: *const ti_indicator_info,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1050:5
     |
1050 |     mut what: *const libc::c_char,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1051:5
     |
1051 |     mut compare: *mut [libc::c_double; 4000],
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1053:9
     |
1053 |     let mut remap: [libc::c_int; 5] = [
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1075:13
     |
1075 |         let mut end: libc::c_int = 4000 as libc::c_int - ind_offset;
     |             ----^^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1079:21
     |
1079 |                 let mut a: libc::c_double = out[j
     |                     ----^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1082:21
     |
1082 |                 let mut b: libc::c_double = (*compare
     |                     ----^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1087:21
     |
1087 |                 let mut diff: libc::c_double = fabs(a - b);
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: value assigned to `best` is never read
    --> src/benchmark.rs:1418:13
     |
1418 |     let mut best: libc::c_int = 0;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/benchmark.rs:1426:17
     |
1426 |         let mut i: libc::c_int = 0;
     |                 ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `period` is never read
    --> src/benchmark.rs:1427:17
     |
1427 |         let mut period: libc::c_int = 0;
     |                 ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/benchmark.rs:1119:5
     |
1119 |     mut log: *mut FILE,
     |     ----^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1120:5
     |
1120 |     mut info: *const ti_indicator_info,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1121:5
     |
1121 |     mut run_info: *const libc::c_void,
     |     ----^^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1122:5
     |
1122 |     mut fun: run_fun,
     |     ----^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1123:5
     |
1123 |     mut name: *const libc::c_char,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/benchmark.rs:1518:13
     |
1518 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/benchmark.rs:1515:5
     |
1515 |     mut log: *mut FILE,
     |     ----^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1516:5
     |
1516 |     mut info: *const ti_indicator_info,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `best` is never read
    --> src/benchmark.rs:1649:13
     |
1649 |     let mut best: libc::c_int = 0;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/benchmark.rs:1657:17
     |
1657 |         let mut i: libc::c_int = 0;
     |                 ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `period` is never read
    --> src/benchmark.rs:1658:17
     |
1658 |         let mut period: libc::c_int = 0;
     |                 ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/benchmark.rs:1642:5
     |
1642 |     mut log: *mut FILE,
     |     ----^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1643:5
     |
1643 |     mut info: *const tc_candle_info,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1645:9
     |
1645 |     let mut name: *const libc::c_char = b"ti\0" as *const u8 as *const libc::c_char;
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1646:9
     |
1646 |     let mut pattern: tc_set = (*info).pattern;
     |         ----^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1733:5
     |
1733 |     mut log: *mut FILE,
     |     ----^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1734:5
     |
1734 |     mut info: *const tc_candle_info,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1773:5
     |
1773 |     mut argc: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1774:5
     |
1774 |     mut argv: *mut *mut libc::c_char,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1822:13
     |
1822 |         let mut log: *mut FILE = fopen(
     |             ----^^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/benchmark.rs:1874:17
     |
1874 |             let mut init = tc_candle_info {
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/cli.rs:108:36
    |
108 | pub unsafe extern "C" fn next_line(mut fp: *mut FILE) -> *mut libc::c_char {
    |                                    ----^^
    |                                    |
    |                                    help: remove this `mut`

warning: variable does not need to be mutable
   --> src/cli.rs:125:5
    |
125 |     mut fp: *mut FILE,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/cli.rs:126:5
    |
126 |     mut s: *mut libc::c_double,
    |     ----^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/cli.rs:128:9
    |
128 |     let mut line: *mut libc::c_char = next_line(fp);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: value assigned to `i` is never read
   --> src/cli.rs:215:13
    |
215 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src/cli.rs:157:5
    |
157 |     mut name: *const libc::c_char,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/cli.rs:158:5
    |
158 |     mut in_0: *const libc::c_char,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/cli.rs:159:5
    |
159 |     mut out: *const libc::c_char,
    |     ----^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/cli.rs:161:9
    |
161 |     let mut info: *const ti_indicator_info = ti_find_indicator(name);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/cli.rs:171:9
    |
171 |     let mut fin: *mut FILE = fopen(in_0, b"r\0" as *const u8 as *const libc::c_char);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/cli.rs:181:9
    |
181 |     let mut line: *mut libc::c_char = next_line(fin);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/cli.rs:294:9
    |
294 |     let mut fout: *mut FILE = fopen(out, b"w\0" as *const u8 as *const libc::c_char);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/cli.rs:343:5
    |
343 |     mut argc: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/cli.rs:344:5
    |
344 |     mut argv: *mut *mut libc::c_char,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/cli.rs:352:9
    |
352 |     let mut name: *const libc::c_char = *argv.offset(1 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/cli.rs:353:9
    |
353 |     let mut in_0: *const libc::c_char = *argv.offset(2 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/cli.rs:354:9
    |
354 |     let mut out: *const libc::c_char = *argv.offset(3 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: value assigned to `o` is never read
   --> src/fuzzer.rs:266:13
    |
266 |     let mut o: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
   --> src/fuzzer.rs:271:17
    |
271 |         let mut i: libc::c_int = 0;
    |                 ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `k` is never read
   --> src/fuzzer.rs:286:33
    |
286 |                         let mut k: libc::c_int = 0;
    |                                 ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
   --> src/fuzzer.rs:287:33
    |
287 |                         let mut j: libc::c_int = 0;
    |                                 ^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src/fuzzer.rs:259:5
    |
259 |     mut info: *const ti_indicator_info,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/fuzzer.rs:260:5
    |
260 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/fuzzer.rs:261:5
    |
261 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/fuzzer.rs:262:5
    |
262 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/fuzzer.rs:263:5
    |
263 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: value assigned to `i` is never read
   --> src/fuzzer.rs:422:13
    |
422 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `choices` is never read
   --> src/fuzzer.rs:466:13
    |
466 |     let mut choices: libc::c_int = 0;
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `optionsd` is never read
   --> src/fuzzer.rs:467:13
    |
467 |     let mut optionsd: *mut libc::c_double = 0 as *mut libc::c_double;
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
   --> src/fuzzer.rs:479:13
    |
479 |     let mut j: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `rsc` is never read
   --> src/fuzzer.rs:570:25
    |
570 |                         rsc = ((*info).stream_run)
    |                         ^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src/fuzzer.rs:360:43
    |
360 | pub unsafe extern "C" fn stress_indicator(mut info: *const ti_indicator_info) {
    |                                           ----^^^^
    |                                           |
    |                                           help: remove this `mut`

warning: variable does not need to be mutable
   --> src/fuzzer.rs:621:40
    |
621 | pub unsafe extern "C" fn stress_candle(mut info: *const tc_candle_info) {
    |                                        ----^^^^
    |                                        |
    |                                        help: remove this `mut`

warning: variable does not need to be mutable
   --> src/fuzzer.rs:649:9
    |
649 |     let mut output: *mut tc_result = tc_result_new();
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/fuzzer.rs:684:17
    |
684 |             let mut hit: tc_hit = tc_result_get(output, i);
    |                 ----^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/fuzzer.rs:729:17
    |
729 |             let mut patterns: tc_set = tc_result_at(output, i_0);
    |                 ----^^^^^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/fuzzer.rs:783:5
    |
783 |     mut argc: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/fuzzer.rs:784:5
    |
784 |     mut argv: *mut *mut libc::c_char,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/fuzzer.rs:788:13
    |
788 |         let mut ind_info: *const ti_indicator_info = ti_find_indicator(
    |             ----^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/fuzzer.rs:794:13
    |
794 |         let mut cnd_info: *const tc_candle_info = tc_find_candle(
    |             ----^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: value assigned to `i` is never read
   --> src/sample.rs:253:21
    |
253 |             let mut i: libc::c_int = 0;
    |                     ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
   --> src/sample.rs:340:13
    |
340 |     let mut j: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `i_0` is never read
   --> src/sample.rs:435:13
    |
435 |     let mut i_0: libc::c_int = 0;
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `i_1` is never read
   --> src/sample.rs:470:17
    |
470 |         let mut i_1: libc::c_int = 0;
    |                 ^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `k_0` is never read
   --> src/sample.rs:471:17
    |
471 |         let mut k_0: libc::c_int = 0;
    |                 ^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src/sample.rs:209:5
    |
209 |     mut argc: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/sample.rs:210:5
    |
210 |     mut argv: *mut *mut libc::c_char,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/sample.rs:458:9
    |
458 |     let mut start: libc::c_int = ((*info).start)
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: unnecessary `unsafe` block
   --> src/candles.rs:100:51
    |
100 | pub static mut tc_candles: [tc_candle_info; 27] = unsafe {
    |                                                   ^^^^^^ unnecessary `unsafe` block
    |
    = note: `#[warn(unused_unsafe)]` on by default

warning: variable does not need to be mutable
   --> src/candles.rs:557:5
    |
557 |     mut name: *const libc::c_char,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:578:38
    |
578 | pub unsafe extern "C" fn tc_get_info(mut pattern: tc_set) -> *const tc_candle_info {
    |                                      ----^^^^^^^
    |                                      |
    |                                      help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:582:9
    |
582 |     let mut k: tc_set = pattern & !pattern.wrapping_sub(1 as libc::c_int as tc_set);
    |         ----^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:601:51
    |
601 | pub unsafe extern "C" fn tc_config_set_to_default(mut config: *mut tc_config) {
    |                                                   ----^^^^^^
    |                                                   |
    |                                                   help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:610:9
    |
610 |     let mut k: *mut tc_result = malloc(
    |         ----^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:623:38
    |
623 | unsafe extern "C" fn tc_result_reset(mut result: *mut tc_result) {
    |                                      ----^^^^^^
    |                                      |
    |                                      help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:629:41
    |
629 | pub unsafe extern "C" fn tc_result_free(mut result: *mut tc_result) {
    |                                         ----^^^^^^
    |                                         |
    |                                         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:637:42
    |
637 | pub unsafe extern "C" fn tc_result_count(mut result: *const tc_result) -> libc::c_int {
    |                                          ----^^^^^^
    |                                          |
    |                                          help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:642:5
    |
642 |     mut result: *const tc_result,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:648:5
    |
648 |     mut result: *const tc_result,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:649:5
    |
649 |     mut index: libc::c_int,
    |     ----^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:654:9
    |
654 |     let mut hit: tc_hit = {
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:655:13
    |
655 |         let mut init = tc_hit {
    |             ----^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:665:5
    |
665 |     mut result: *const tc_result,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:666:5
    |
666 |     mut index: libc::c_int,
    |     ----^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:710:5
    |
710 |     mut result: *mut tc_result,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:711:5
    |
711 |     mut hit: tc_hit,
    |     ----^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:734:13
    |
734 |         let mut hits: *mut tc_hit = realloc(
    |             ----^^^^
    |             |
    |             help: remove this `mut`

warning: value assigned to `i` is never read
   --> src/candles.rs:854:13
    |
854 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
   --> src/candles.rs:875:13
    |
875 |         let upper: TC_REAL = *high.offset(i as isize) - top;
    |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
   --> src/candles.rs:876:13
    |
876 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
    |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: variable does not need to be mutable
   --> src/candles.rs:751:5
    |
751 |     mut patterns: tc_set,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:752:5
    |
752 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:753:5
    |
753 |     mut inputs: *const *const TC_REAL,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:754:5
    |
754 |     mut options: *const tc_config,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:755:5
    |
755 |     mut output: *mut tc_result,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:840:9
    |
840 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:841:9
    |
841 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:842:9
    |
842 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:843:9
    |
843 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:899:21
    |
899 |                 let mut init = tc_hit {
    |                     ----^^^^
    |                     |
    |                     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:930:21
    |
930 |                 let mut init = tc_hit {
    |                     ----^^^^
    |                     |
    |                     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:947:21
    |
947 |                 let mut init = tc_hit {
    |                     ----^^^^
    |                     |
    |                     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:964:21
    |
964 |                 let mut init = tc_hit {
    |                     ----^^^^
    |                     |
    |                     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:983:21
    |
983 |                 let mut init = tc_hit {
    |                     ----^^^^
    |                     |
    |                     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/candles.rs:999:21
    |
999 |                 let mut init = tc_hit {
    |                     ----^^^^
    |                     |
    |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1017:21
     |
1017 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1037:21
     |
1037 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1057:21
     |
1057 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1111:21
     |
1111 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1165:21
     |
1165 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1183:21
     |
1183 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1201:21
     |
1201 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1227:21
     |
1227 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1253:21
     |
1253 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1284:21
     |
1284 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1302:21
     |
1302 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1320:21
     |
1320 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1374:21
     |
1374 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1428:21
     |
1428 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1459:21
     |
1459 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1479:21
     |
1479 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1497:21
     |
1497 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1551:21
     |
1551 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1605:21
     |
1605 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1624:21
     |
1624 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/candles.rs:1670:13
     |
1670 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:1691:13
     |
1691 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:1692:13
     |
1692 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: variable does not need to be mutable
    --> src/candles.rs:1651:5
     |
1651 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1652:5
     |
1652 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1653:5
     |
1653 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1654:5
     |
1654 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1656:9
     |
1656 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1657:9
     |
1657 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1658:9
     |
1658 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1659:9
     |
1659 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1714:21
     |
1714 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/candles.rs:1760:13
     |
1760 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:1781:13
     |
1781 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:1782:13
     |
1782 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: variable does not need to be mutable
    --> src/candles.rs:1741:5
     |
1741 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1742:5
     |
1742 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1743:5
     |
1743 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1744:5
     |
1744 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1746:9
     |
1746 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1747:9
     |
1747 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1748:9
     |
1748 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1749:9
     |
1749 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1804:21
     |
1804 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/candles.rs:1850:13
     |
1850 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:1871:13
     |
1871 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:1872:13
     |
1872 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_total`
    --> src/candles.rs:1874:13
     |
1874 |         let avg_total: TC_REAL = avg_total_sum * div;
     |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: variable does not need to be mutable
    --> src/candles.rs:1831:5
     |
1831 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1832:5
     |
1832 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1833:5
     |
1833 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1834:5
     |
1834 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1836:9
     |
1836 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1837:9
     |
1837 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1838:9
     |
1838 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1839:9
     |
1839 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1880:21
     |
1880 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/candles.rs:1926:13
     |
1926 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:1947:13
     |
1947 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:1948:13
     |
1948 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_total`
    --> src/candles.rs:1950:13
     |
1950 |         let avg_total: TC_REAL = avg_total_sum * div;
     |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: variable does not need to be mutable
    --> src/candles.rs:1907:5
     |
1907 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1908:5
     |
1908 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1909:5
     |
1909 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1910:5
     |
1910 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1912:9
     |
1912 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1913:9
     |
1913 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1914:9
     |
1914 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1915:9
     |
1915 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1956:21
     |
1956 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/candles.rs:2002:13
     |
2002 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:2023:13
     |
2023 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:2024:13
     |
2024 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: variable does not need to be mutable
    --> src/candles.rs:1983:5
     |
1983 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1984:5
     |
1984 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1985:5
     |
1985 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1986:5
     |
1986 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1988:9
     |
1988 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1989:9
     |
1989 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1990:9
     |
1990 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:1991:9
     |
1991 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2034:21
     |
2034 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/candles.rs:2080:13
     |
2080 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:2101:13
     |
2101 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:2102:13
     |
2102 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_body`
    --> src/candles.rs:2103:13
     |
2103 |         let avg_body: TC_REAL = avg_body_sum * div;
     |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_body`

warning: variable does not need to be mutable
    --> src/candles.rs:2061:5
     |
2061 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2062:5
     |
2062 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2063:5
     |
2063 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2064:5
     |
2064 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2066:9
     |
2066 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2067:9
     |
2067 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2068:9
     |
2068 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2069:9
     |
2069 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2109:21
     |
2109 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/candles.rs:2155:13
     |
2155 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:2176:13
     |
2176 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:2177:13
     |
2177 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: variable does not need to be mutable
    --> src/candles.rs:2136:5
     |
2136 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2137:5
     |
2137 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2138:5
     |
2138 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2139:5
     |
2139 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2141:9
     |
2141 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2142:9
     |
2142 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2143:9
     |
2143 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2144:9
     |
2144 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2186:21
     |
2186 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/candles.rs:2232:13
     |
2232 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:2253:13
     |
2253 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:2254:13
     |
2254 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_body`
    --> src/candles.rs:2255:13
     |
2255 |         let avg_body: TC_REAL = avg_body_sum * div;
     |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_body`

warning: unused variable: `avg_total`
    --> src/candles.rs:2256:13
     |
2256 |         let avg_total: TC_REAL = avg_total_sum * div;
     |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: variable does not need to be mutable
    --> src/candles.rs:2213:5
     |
2213 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2214:5
     |
2214 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2215:5
     |
2215 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2216:5
     |
2216 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2218:9
     |
2218 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2219:9
     |
2219 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2220:9
     |
2220 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2221:9
     |
2221 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2264:21
     |
2264 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/candles.rs:2310:13
     |
2310 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:2331:13
     |
2331 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:2332:13
     |
2332 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_body`
    --> src/candles.rs:2333:13
     |
2333 |         let avg_body: TC_REAL = avg_body_sum * div;
     |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_body`

warning: unused variable: `avg_total`
    --> src/candles.rs:2334:13
     |
2334 |         let avg_total: TC_REAL = avg_total_sum * div;
     |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: variable does not need to be mutable
    --> src/candles.rs:2291:5
     |
2291 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2292:5
     |
2292 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2293:5
     |
2293 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2294:5
     |
2294 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2296:9
     |
2296 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2297:9
     |
2297 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2298:9
     |
2298 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2299:9
     |
2299 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2342:21
     |
2342 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/candles.rs:2388:13
     |
2388 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:2409:13
     |
2409 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:2410:13
     |
2410 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: variable does not need to be mutable
    --> src/candles.rs:2369:5
     |
2369 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2370:5
     |
2370 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2371:5
     |
2371 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2372:5
     |
2372 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2374:9
     |
2374 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2375:9
     |
2375 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2376:9
     |
2376 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2377:9
     |
2377 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2455:21
     |
2455 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/candles.rs:2501:13
     |
2501 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:2522:13
     |
2522 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:2523:13
     |
2523 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_total`
    --> src/candles.rs:2525:13
     |
2525 |         let avg_total: TC_REAL = avg_total_sum * div;
     |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: variable does not need to be mutable
    --> src/candles.rs:2482:5
     |
2482 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2483:5
     |
2483 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2484:5
     |
2484 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2485:5
     |
2485 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2487:9
     |
2487 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2488:9
     |
2488 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2489:9
     |
2489 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2490:9
     |
2490 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2568:21
     |
2568 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/candles.rs:2614:13
     |
2614 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:2635:13
     |
2635 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:2636:13
     |
2636 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_body`
    --> src/candles.rs:2637:13
     |
2637 |         let avg_body: TC_REAL = avg_body_sum * div;
     |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_body`

warning: variable does not need to be mutable
    --> src/candles.rs:2595:5
     |
2595 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2596:5
     |
2596 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2597:5
     |
2597 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2598:5
     |
2598 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2600:9
     |
2600 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2601:9
     |
2601 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2602:9
     |
2602 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2603:9
     |
2603 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2645:21
     |
2645 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/candles.rs:2691:13
     |
2691 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:2712:13
     |
2712 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:2713:13
     |
2713 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: variable does not need to be mutable
    --> src/candles.rs:2672:5
     |
2672 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2673:5
     |
2673 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2674:5
     |
2674 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2675:5
     |
2675 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2677:9
     |
2677 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2678:9
     |
2678 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2679:9
     |
2679 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2680:9
     |
2680 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2722:21
     |
2722 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/candles.rs:2768:13
     |
2768 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:2789:13
     |
2789 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:2790:13
     |
2790 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: variable does not need to be mutable
    --> src/candles.rs:2749:5
     |
2749 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2750:5
     |
2750 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2751:5
     |
2751 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2752:5
     |
2752 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2754:9
     |
2754 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2755:9
     |
2755 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2756:9
     |
2756 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2757:9
     |
2757 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2807:21
     |
2807 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/candles.rs:2853:13
     |
2853 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:2874:13
     |
2874 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:2875:13
     |
2875 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: variable does not need to be mutable
    --> src/candles.rs:2834:5
     |
2834 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2835:5
     |
2835 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2836:5
     |
2836 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2837:5
     |
2837 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2839:9
     |
2839 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2840:9
     |
2840 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2841:9
     |
2841 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2842:9
     |
2842 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2892:21
     |
2892 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/candles.rs:2938:13
     |
2938 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:2959:13
     |
2959 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:2960:13
     |
2960 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: variable does not need to be mutable
    --> src/candles.rs:2919:5
     |
2919 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2920:5
     |
2920 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2921:5
     |
2921 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2922:5
     |
2922 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2924:9
     |
2924 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2925:9
     |
2925 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2926:9
     |
2926 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2927:9
     |
2927 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:2982:21
     |
2982 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/candles.rs:3028:13
     |
3028 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:3049:13
     |
3049 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:3050:13
     |
3050 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: variable does not need to be mutable
    --> src/candles.rs:3009:5
     |
3009 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3010:5
     |
3010 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3011:5
     |
3011 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3012:5
     |
3012 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3014:9
     |
3014 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3015:9
     |
3015 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3016:9
     |
3016 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3017:9
     |
3017 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3059:21
     |
3059 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/candles.rs:3105:13
     |
3105 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:3126:13
     |
3126 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:3127:13
     |
3127 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: variable does not need to be mutable
    --> src/candles.rs:3086:5
     |
3086 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3087:5
     |
3087 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3088:5
     |
3088 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3089:5
     |
3089 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3091:9
     |
3091 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3092:9
     |
3092 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3093:9
     |
3093 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3094:9
     |
3094 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3136:21
     |
3136 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/candles.rs:3182:13
     |
3182 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:3203:13
     |
3203 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:3204:13
     |
3204 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: variable does not need to be mutable
    --> src/candles.rs:3163:5
     |
3163 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3164:5
     |
3164 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3165:5
     |
3165 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3166:5
     |
3166 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3168:9
     |
3168 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3169:9
     |
3169 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3170:9
     |
3170 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3171:9
     |
3171 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3249:21
     |
3249 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/candles.rs:3295:13
     |
3295 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:3316:13
     |
3316 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:3317:13
     |
3317 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_total`
    --> src/candles.rs:3319:13
     |
3319 |         let avg_total: TC_REAL = avg_total_sum * div;
     |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: variable does not need to be mutable
    --> src/candles.rs:3276:5
     |
3276 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3277:5
     |
3277 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3278:5
     |
3278 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3279:5
     |
3279 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3281:9
     |
3281 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3282:9
     |
3282 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3283:9
     |
3283 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3284:9
     |
3284 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3362:21
     |
3362 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/candles.rs:3408:13
     |
3408 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:3429:13
     |
3429 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:3430:13
     |
3430 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: variable does not need to be mutable
    --> src/candles.rs:3389:5
     |
3389 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3390:5
     |
3390 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3391:5
     |
3391 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3392:5
     |
3392 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3394:9
     |
3394 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3395:9
     |
3395 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3396:9
     |
3396 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3397:9
     |
3397 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3452:21
     |
3452 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/candles.rs:3498:13
     |
3498 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:3519:13
     |
3519 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:3520:13
     |
3520 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_total`
    --> src/candles.rs:3522:13
     |
3522 |         let avg_total: TC_REAL = avg_total_sum * div;
     |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: variable does not need to be mutable
    --> src/candles.rs:3479:5
     |
3479 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3480:5
     |
3480 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3481:5
     |
3481 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3482:5
     |
3482 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3484:9
     |
3484 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3485:9
     |
3485 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3486:9
     |
3486 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3487:9
     |
3487 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3531:21
     |
3531 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/candles.rs:3577:13
     |
3577 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:3598:13
     |
3598 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:3599:13
     |
3599 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_body`
    --> src/candles.rs:3600:13
     |
3600 |         let avg_body: TC_REAL = avg_body_sum * div;
     |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_body`

warning: unused variable: `avg_total`
    --> src/candles.rs:3601:13
     |
3601 |         let avg_total: TC_REAL = avg_total_sum * div;
     |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: variable does not need to be mutable
    --> src/candles.rs:3558:5
     |
3558 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3559:5
     |
3559 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3560:5
     |
3560 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3561:5
     |
3561 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3563:9
     |
3563 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3564:9
     |
3564 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3565:9
     |
3565 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3566:9
     |
3566 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3608:21
     |
3608 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/candles.rs:3654:13
     |
3654 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:3675:13
     |
3675 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:3676:13
     |
3676 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_body`
    --> src/candles.rs:3677:13
     |
3677 |         let avg_body: TC_REAL = avg_body_sum * div;
     |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_body`

warning: unused variable: `avg_total`
    --> src/candles.rs:3678:13
     |
3678 |         let avg_total: TC_REAL = avg_total_sum * div;
     |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: variable does not need to be mutable
    --> src/candles.rs:3635:5
     |
3635 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3636:5
     |
3636 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3637:5
     |
3637 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3638:5
     |
3638 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3640:9
     |
3640 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3641:9
     |
3641 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3642:9
     |
3642 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3643:9
     |
3643 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3721:21
     |
3721 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/candles.rs:3767:13
     |
3767 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:3788:13
     |
3788 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:3789:13
     |
3789 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_body`
    --> src/candles.rs:3790:13
     |
3790 |         let avg_body: TC_REAL = avg_body_sum * div;
     |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_body`

warning: unused variable: `avg_total`
    --> src/candles.rs:3791:13
     |
3791 |         let avg_total: TC_REAL = avg_total_sum * div;
     |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: variable does not need to be mutable
    --> src/candles.rs:3748:5
     |
3748 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3749:5
     |
3749 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3750:5
     |
3750 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3751:5
     |
3751 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3753:9
     |
3753 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3754:9
     |
3754 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3755:9
     |
3755 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3756:9
     |
3756 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3834:21
     |
3834 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/candles.rs:3880:13
     |
3880 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
    --> src/candles.rs:3901:13
     |
3901 |         let upper: TC_REAL = *high.offset(i as isize) - top;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
    --> src/candles.rs:3902:13
     |
3902 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: variable does not need to be mutable
    --> src/candles.rs:3861:5
     |
3861 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3862:5
     |
3862 |     mut inputs: *const *const TC_REAL,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3863:5
     |
3863 |     mut options: *const tc_config,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3864:5
     |
3864 |     mut output: *mut tc_result,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3866:9
     |
3866 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3867:9
     |
3867 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3868:9
     |
3868 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3869:9
     |
3869 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/candles.rs:3912:21
     |
3912 |                 let mut init = tc_hit {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/example1.rs:21:13
   |
21 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/example1.rs:20:38
   |
20 | pub unsafe extern "C" fn print_array(mut p: *const libc::c_double, size: libc::c_int) {
   |                                      ----^
   |                                      |
   |                                      help: remove this `mut`

warning: variable does not need to be mutable
  --> src/example1.rs:66:9
   |
66 |     let mut data_out: *mut libc::c_double = malloc(
   |         ----^^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/example1.rs:85:9
   |
85 |     let mut error: libc::c_int = ti_sma(
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/example2.rs:59:17
   |
59 |         let mut i: libc::c_int = 0;
   |                 ^
   |
   = help: maybe it is overwritten before being read?

warning: unnecessary `unsafe` block
   --> src/indicators_rs.rs:834:58
    |
834 | pub static mut ti_indicators: [ti_indicator_info; 105] = unsafe {
    |                                                          ^^^^^^ unnecessary `unsafe` block

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:9539:5
     |
9539 |     mut stream: *mut ti_stream,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:9540:5
     |
9540 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:9541:5
     |
9541 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:9542:5
     |
9542 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:9549:5
     |
9549 |     mut stream: *mut ti_stream,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:9555:5
     |
9555 |     mut stream: *mut ti_stream,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:9560:41
     |
9560 | pub unsafe extern "C" fn ti_stream_free(mut stream: *mut ti_stream) {
     |                                         ----^^^^^^
     |                                         |
     |                                         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/indicators_rs.rs:9566:5
     |
9566 |     mut name: *const libc::c_char,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
   --> src/smoke.rs:354:13
    |
354 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src/smoke.rs:349:5
    |
349 |     mut a: *mut libc::c_double,
    |     ----^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/smoke.rs:350:5
    |
350 |     mut b: *mut libc::c_double,
    |     ----^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/smoke.rs:351:5
    |
351 |     mut size_a: libc::c_int,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/smoke.rs:352:5
    |
352 |     mut size_b: libc::c_int,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/smoke.rs:405:36
    |
405 | pub unsafe extern "C" fn next_line(mut fp: *mut FILE) -> *mut libc::c_char {
    |                                    ----^^
    |                                    |
    |                                    help: remove this `mut`

warning: variable does not need to be mutable
   --> src/smoke.rs:422:5
    |
422 |     mut fp: *mut FILE,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/smoke.rs:423:5
    |
423 |     mut s: *mut libc::c_double,
    |     ----^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/smoke.rs:425:9
    |
425 |     let mut line: *mut libc::c_char = next_line(fp);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: value assigned to `s` is never read
   --> src/smoke.rs:493:13
    |
493 |     let mut s: *const libc::c_char = 0 as *const libc::c_char;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
   --> src/smoke.rs:521:13
    |
521 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src/smoke.rs:465:5
    |
465 |     mut fp: *mut FILE,
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/smoke.rs:466:5
    |
466 |     mut name: *const libc::c_char,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/smoke.rs:467:5
    |
467 |     mut count: libc::c_int,
    |     ----^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/smoke.rs:469:9
    |
469 |     let mut info: *const ti_indicator_info = ti_find_indicator(name);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: value assigned to `num` is never read
   --> src/smoke.rs:961:17
    |
961 |         let mut num: *mut libc::c_char = 0 as *mut libc::c_char;
    |                 ^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src/smoke.rs:880:39
    |
880 | pub unsafe extern "C" fn test_candles(mut fp: *mut FILE, mut count: libc::c_int) {
    |                                       ----^^
    |                                       |
    |                                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/smoke.rs:880:58
    |
880 | pub unsafe extern "C" fn test_candles(mut fp: *mut FILE, mut count: libc::c_int) {
    |                                                          ----^^^^^
    |                                                          |
    |                                                          help: remove this `mut`

warning: variable does not need to be mutable
   --> src/smoke.rs:921:9
    |
921 |     let mut output: *mut tc_result = tc_result_new();
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/smoke.rs:949:13
    |
949 |         let mut info: *const tc_candle_info = tc_find_candle(name);
    |             ----^^^^
    |             |
    |             help: remove this `mut`

warning: value assigned to `line` is never read
    --> src/smoke.rs:1027:13
     |
1027 |     let mut line: *mut libc::c_char = 0 as *mut libc::c_char;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/smoke.rs:1010:31
     |
1010 | pub unsafe extern "C" fn test(mut fname: *const libc::c_char, mut count: libc::c_int) {
     |                               ----^^^^^
     |                               |
     |                               help: remove this `mut`

warning: variable does not need to be mutable
    --> src/smoke.rs:1010:63
     |
1010 | pub unsafe extern "C" fn test(mut fname: *const libc::c_char, mut count: libc::c_int) {
     |                                                               ----^^^^^
     |                                                               |
     |                                                               help: remove this `mut`

warning: variable does not need to be mutable
    --> src/smoke.rs:1012:9
     |
1012 |     let mut fp: *mut FILE = fopen(fname, b"r\0" as *const u8 as *const libc::c_char);
     |         ----^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/smoke.rs:1048:17
     |
1048 |             let mut name: *mut libc::c_char = strtok(
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/smoke.rs:1188:9
     |
1188 |     let mut b: *mut ti_buffer = ti_buffer_new(3 as libc::c_int);
     |         ----^
     |         |
     |         help: remove this `mut`

warning: value assigned to `get` is never read
    --> src/smoke.rs:1539:13
     |
1539 |     let mut get: libc::c_double = 0.;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/smoke.rs:1482:13
     |
1482 |         let mut init = s {
     |             ----^^^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/smoke.rs:1484:21
     |
1484 |                 let mut init = C2RustUnnamed {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: unused variable: `options`
   --> src/tiamalgamation.rs:167:9
    |
167 |     mut options: *const libc::c_double,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:167:5
    |
167 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: value assigned to `i` is never read
   --> src/tiamalgamation.rs:180:13
    |
180 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `options`
   --> src/tiamalgamation.rs:175:9
    |
175 |     mut options: *const libc::c_double,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:173:5
    |
173 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:174:5
    |
174 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:175:5
    |
175 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:176:5
    |
176 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:178:9
    |
178 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:179:9
    |
179 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `options`
   --> src/tiamalgamation.rs:191:9
    |
191 |     mut options: *const libc::c_double,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:191:5
    |
191 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: value assigned to `i` is never read
   --> src/tiamalgamation.rs:204:13
    |
204 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `options`
   --> src/tiamalgamation.rs:199:9
    |
199 |     mut options: *const libc::c_double,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:197:5
    |
197 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:198:5
    |
198 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:199:5
    |
199 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:200:5
    |
200 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:202:9
    |
202 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:203:9
    |
203 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `options`
   --> src/tiamalgamation.rs:214:42
    |
214 | pub unsafe extern "C" fn ti_ad_start(mut options: *const libc::c_double) -> libc::c_int {
    |                                          ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:214:38
    |
214 | pub unsafe extern "C" fn ti_ad_start(mut options: *const libc::c_double) -> libc::c_int {
    |                                      ----^^^^^^^
    |                                      |
    |                                      help: remove this `mut`

warning: value assigned to `i` is never read
   --> src/tiamalgamation.rs:230:13
    |
230 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `options`
   --> src/tiamalgamation.rs:221:9
    |
221 |     mut options: *const libc::c_double,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:219:5
    |
219 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:220:5
    |
220 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:221:5
    |
221 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:222:5
    |
222 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:224:9
    |
224 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:225:9
    |
225 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:226:9
    |
226 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:227:9
    |
227 |     let mut volume: *const libc::c_double = *inputs.offset(3 as libc::c_int as isize);
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:228:9
    |
228 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `options`
   --> src/tiamalgamation.rs:248:9
    |
248 |     mut options: *const libc::c_double,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:248:5
    |
248 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: value assigned to `i` is never read
   --> src/tiamalgamation.rs:262:13
    |
262 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `options`
   --> src/tiamalgamation.rs:256:9
    |
256 |     mut options: *const libc::c_double,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:254:5
    |
254 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:255:5
    |
255 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:256:5
    |
256 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:257:5
    |
257 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:259:9
    |
259 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:260:9
    |
260 |     let mut in2: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:261:9
    |
261 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:273:5
    |
273 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: value assigned to `i` is never read
   --> src/tiamalgamation.rs:310:13
    |
310 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:279:5
    |
279 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:280:5
    |
280 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:281:5
    |
281 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:282:5
    |
282 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:284:9
    |
284 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:285:9
    |
285 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:286:9
    |
286 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:287:9
    |
287 |     let mut volume: *const libc::c_double = *inputs.offset(3 as libc::c_int as isize);
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:356:5
    |
356 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: value assigned to `i` is never read
   --> src/tiamalgamation.rs:383:13
    |
383 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `dp` is never read
   --> src/tiamalgamation.rs:386:17
    |
386 |         let mut dp: libc::c_double = 0.;
    |                 ^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `dm` is never read
   --> src/tiamalgamation.rs:387:17
    |
387 |         let mut dm: libc::c_double = 0.;
    |                 ^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `dp_0` is never read
   --> src/tiamalgamation.rs:414:17
    |
414 |         let mut dp_0: libc::c_double = 0.;
    |                 ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `dm_0` is never read
   --> src/tiamalgamation.rs:415:17
    |
415 |         let mut dm_0: libc::c_double = 0.;
    |                 ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:363:5
    |
363 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:364:5
    |
364 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:365:5
    |
365 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:366:5
    |
366 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:368:9
    |
368 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:369:9
    |
369 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:406:9
    |
406 |     let mut di_up: libc::c_double = dmup;
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:407:9
    |
407 |     let mut di_down: libc::c_double = dmdown;
    |         ----^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:408:9
    |
408 |     let mut dm_diff: libc::c_double = fabs(di_up - di_down);
    |         ----^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:409:9
    |
409 |     let mut dm_sum: libc::c_double = di_up + di_down;
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:410:9
    |
410 |     let mut dx: libc::c_double = dm_diff / dm_sum * 100 as libc::c_int as libc::c_double;
    |         ----^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:430:13
    |
430 |         let mut di_up_0: libc::c_double = dmup;
    |             ----^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:431:13
    |
431 |         let mut di_down_0: libc::c_double = dmdown;
    |             ----^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:432:13
    |
432 |         let mut dm_diff_0: libc::c_double = fabs(di_up_0 - di_down_0);
    |             ----^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:433:13
    |
433 |         let mut dm_sum_0: libc::c_double = di_up_0 + di_down_0;
    |             ----^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:434:13
    |
434 |         let mut dx_0: libc::c_double = dm_diff_0 / dm_sum_0
    |             ----^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:473:5
    |
473 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: value assigned to `i` is never read
   --> src/tiamalgamation.rs:500:13
    |
500 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `dp` is never read
   --> src/tiamalgamation.rs:503:17
    |
503 |         let mut dp: libc::c_double = 0.;
    |                 ^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `dm` is never read
   --> src/tiamalgamation.rs:504:17
    |
504 |         let mut dm: libc::c_double = 0.;
    |                 ^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `dp_0` is never read
   --> src/tiamalgamation.rs:533:17
    |
533 |         let mut dp_0: libc::c_double = 0.;
    |                 ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `dm_0` is never read
   --> src/tiamalgamation.rs:534:17
    |
534 |         let mut dm_0: libc::c_double = 0.;
    |                 ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:480:5
    |
480 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:481:5
    |
481 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:482:5
    |
482 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:483:5
    |
483 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:485:9
    |
485 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:486:9
    |
486 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:523:9
    |
523 |     let mut di_up: libc::c_double = dmup;
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:524:9
    |
524 |     let mut di_down: libc::c_double = dmdown;
    |         ----^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:525:9
    |
525 |     let mut dm_diff: libc::c_double = fabs(di_up - di_down);
    |         ----^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:526:9
    |
526 |     let mut dm_sum: libc::c_double = di_up + di_down;
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:527:9
    |
527 |     let mut dx: libc::c_double = dm_diff / dm_sum * 100 as libc::c_int as libc::c_double;
    |         ----^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:529:9
    |
529 |     let mut adxr: *mut ti_buffer = ti_buffer_new(period - 1 as libc::c_int);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:549:13
    |
549 |         let mut di_up_0: libc::c_double = dmup;
    |             ----^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:550:13
    |
550 |         let mut di_down_0: libc::c_double = dmdown;
    |             ----^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:551:13
    |
551 |         let mut dm_diff_0: libc::c_double = fabs(di_up_0 - di_down_0);
    |             ----^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:552:13
    |
552 |         let mut dm_sum_0: libc::c_double = di_up_0 + di_down_0;
    |             ----^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:553:13
    |
553 |         let mut dx_0: libc::c_double = dm_diff_0 / dm_sum_0
    |             ----^^^^
    |             |
    |             help: remove this `mut`

warning: unused variable: `options`
   --> src/tiamalgamation.rs:608:42
    |
608 | pub unsafe extern "C" fn ti_ao_start(mut options: *const libc::c_double) -> libc::c_int {
    |                                          ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:608:38
    |
608 | pub unsafe extern "C" fn ti_ao_start(mut options: *const libc::c_double) -> libc::c_int {
    |                                      ----^^^^^^^
    |                                      |
    |                                      help: remove this `mut`

warning: value assigned to `i` is never read
   --> src/tiamalgamation.rs:629:13
    |
629 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:613:5
    |
613 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:614:5
    |
614 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:615:5
    |
615 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:616:5
    |
616 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:618:9
    |
618 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:619:9
    |
619 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:632:13
    |
632 |         let mut hl: libc::c_double = 0.5f64
    |             ----^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:646:13
    |
646 |         let mut hl_0: libc::c_double = 0.5f64
    |             ----^^^^
    |             |
    |             help: remove this `mut`

warning: unused variable: `options`
   --> src/tiamalgamation.rs:685:9
    |
685 |     mut options: *const libc::c_double,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:685:5
    |
685 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: value assigned to `i` is never read
   --> src/tiamalgamation.rs:720:13
    |
720 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:691:5
    |
691 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:692:5
    |
692 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:693:5
    |
693 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:694:5
    |
694 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:696:9
    |
696 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:714:9
    |
714 |     let mut short_per: libc::c_double = 2 as libc::c_int as libc::c_double
    |         ----^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:716:9
    |
716 |     let mut long_per: libc::c_double = 2 as libc::c_int as libc::c_double
    |         ----^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:753:5
    |
753 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: value assigned to `bar` is never read
   --> src/tiamalgamation.rs:781:13
    |
781 |     let mut bar: libc::c_double = 0.;
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
   --> src/tiamalgamation.rs:782:13
    |
782 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
   --> src/tiamalgamation.rs:783:13
    |
783 |     let mut j: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:759:5
    |
759 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:760:5
    |
760 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:761:5
    |
761 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:762:5
    |
762 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:764:9
    |
764 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:765:9
    |
765 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:875:5
    |
875 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: value assigned to `i` is never read
   --> src/tiamalgamation.rs:902:13
    |
902 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
   --> src/tiamalgamation.rs:903:13
    |
903 |     let mut j: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:881:5
    |
881 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:882:5
    |
882 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:883:5
    |
883 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:884:5
    |
884 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:886:9
    |
886 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:887:9
    |
887 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `options`
   --> src/tiamalgamation.rs:975:9
    |
975 |     mut options: *const libc::c_double,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:975:5
    |
975 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: value assigned to `i` is never read
   --> src/tiamalgamation.rs:988:13
    |
988 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `options`
   --> src/tiamalgamation.rs:983:9
    |
983 |     mut options: *const libc::c_double,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:981:5
    |
981 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:982:5
    |
982 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:983:5
    |
983 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:984:5
    |
984 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:986:9
    |
986 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:987:9
    |
987 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `options`
   --> src/tiamalgamation.rs:999:9
    |
999 |     mut options: *const libc::c_double,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
   --> src/tiamalgamation.rs:999:5
    |
999 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:1012:13
     |
1012 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:1007:9
     |
1007 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1005:5
     |
1005 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1006:5
     |
1006 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1007:5
     |
1007 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1008:5
     |
1008 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1010:9
     |
1010 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1011:9
     |
1011 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1023:5
     |
1023 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `truerange` is never read
    --> src/tiamalgamation.rs:1047:13
     |
1047 |     let mut truerange: libc::c_double = 0.;
     |             ^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:1051:13
     |
1051 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1029:5
     |
1029 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1030:5
     |
1030 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1031:5
     |
1031 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1032:5
     |
1032 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1034:9
     |
1034 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1035:9
     |
1035 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1036:9
     |
1036 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1118:5
     |
1118 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1119:5
     |
1119 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1120:5
     |
1120 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1121:5
     |
1121 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1132:9
     |
1132 |     let mut truerange: *mut libc::c_double = malloc(
     |         ----^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1179:5
     |
1179 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1180:5
     |
1180 |     mut stream_in: *mut *mut ti_stream,
     |     ----^^^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1182:9
     |
1182 |     let mut stream: *mut *mut ti_stream_atr = stream_in as *mut *mut ti_stream_atr;
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: value assigned to `truerange` is never read
    --> src/tiamalgamation.rs:1225:21
     |
1225 |             let mut truerange: libc::c_double = 0.;
     |                     ^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `truerange_0` is never read
    --> src/tiamalgamation.rs:1259:21
     |
1259 |             let mut truerange_0: libc::c_double = 0.;
     |                     ^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1200:5
     |
1200 |     mut stream_in: *mut ti_stream,
     |     ----^^^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1201:5
     |
1201 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1202:5
     |
1202 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1203:5
     |
1203 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1205:9
     |
1205 |     let mut stream: *mut ti_stream_atr = stream_in as *mut ti_stream_atr;
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1206:9
     |
1206 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1207:9
     |
1207 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1208:9
     |
1208 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1290:45
     |
1290 | pub unsafe extern "C" fn ti_atr_stream_free(mut stream: *mut ti_stream) {
     |                                             ----^^^^^^
     |                                             |
     |                                             help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:1295:9
     |
1295 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1295:5
     |
1295 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:1311:13
     |
1311 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:1303:9
     |
1303 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1301:5
     |
1301 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1302:5
     |
1302 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1303:5
     |
1303 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1304:5
     |
1304 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1306:9
     |
1306 |     let mut open: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1307:9
     |
1307 |     let mut high: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1308:9
     |
1308 |     let mut low: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1309:9
     |
1309 |     let mut close: *const libc::c_double = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1310:9
     |
1310 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1326:5
     |
1326 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:1352:13
     |
1352 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1332:5
     |
1332 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1333:5
     |
1333 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1334:5
     |
1334 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1335:5
     |
1335 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1337:9
     |
1337 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:1446:9
     |
1446 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1446:5
     |
1446 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:1462:13
     |
1462 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:1454:9
     |
1454 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1452:5
     |
1452 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1453:5
     |
1453 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1454:5
     |
1454 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1455:5
     |
1455 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1457:9
     |
1457 |     let mut open: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1458:9
     |
1458 |     let mut high: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1459:9
     |
1459 |     let mut low: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1460:9
     |
1460 |     let mut close: *const libc::c_double = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1461:9
     |
1461 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1465:13
     |
1465 |         let mut hl: libc::c_double = *high.offset(i as isize) - *low.offset(i as isize);
     |             ----^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1481:5
     |
1481 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:1506:13
     |
1506 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
    --> src/tiamalgamation.rs:1507:13
     |
1507 |     let mut j: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1488:5
     |
1488 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1489:5
     |
1489 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1490:5
     |
1490 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1491:5
     |
1491 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1493:9
     |
1493 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1494:9
     |
1494 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1495:9
     |
1495 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1505:9
     |
1505 |     let mut sum: *mut ti_buffer = ti_buffer_new(period);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:1563:9
     |
1563 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1563:5
     |
1563 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:1576:13
     |
1576 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:1571:9
     |
1571 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1569:5
     |
1569 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1570:5
     |
1570 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1571:5
     |
1571 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1572:5
     |
1572 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1574:9
     |
1574 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1575:9
     |
1575 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1587:5
     |
1587 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:1609:13
     |
1609 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1593:5
     |
1593 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1594:5
     |
1594 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1595:5
     |
1595 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1596:5
     |
1596 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1598:9
     |
1598 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:1703:9
     |
1703 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1703:5
     |
1703 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:1716:13
     |
1716 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:1711:9
     |
1711 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1709:5
     |
1709 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1710:5
     |
1710 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1711:5
     |
1711 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1712:5
     |
1712 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1714:9
     |
1714 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1715:9
     |
1715 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:1727:9
     |
1727 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1727:5
     |
1727 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:1740:13
     |
1740 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:1735:9
     |
1735 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1733:5
     |
1733 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1734:5
     |
1734 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1735:5
     |
1735 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1736:5
     |
1736 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1738:9
     |
1738 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1739:9
     |
1739 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:1751:9
     |
1751 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1751:5
     |
1751 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:1765:13
     |
1765 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:1759:9
     |
1759 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1757:5
     |
1757 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1758:5
     |
1758 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1759:5
     |
1759 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1760:5
     |
1760 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1762:9
     |
1762 |     let mut a: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1763:9
     |
1763 |     let mut b: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^
     |         |
     |         help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:1784:9
     |
1784 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1784:5
     |
1784 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:1798:13
     |
1798 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:1792:9
     |
1792 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1790:5
     |
1790 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1791:5
     |
1791 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1792:5
     |
1792 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1793:5
     |
1793 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1795:9
     |
1795 |     let mut a: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1796:9
     |
1796 |     let mut b: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1814:5
     |
1814 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:1841:13
     |
1841 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1821:5
     |
1821 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1822:5
     |
1822 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1823:5
     |
1823 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1824:5
     |
1824 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1826:9
     |
1826 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1827:9
     |
1827 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1838:9
     |
1838 |     let mut lag: *mut ti_buffer = ti_buffer_new(period);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:1892:9
     |
1892 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1892:5
     |
1892 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:1910:13
     |
1910 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1898:5
     |
1898 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1899:5
     |
1899 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1900:5
     |
1900 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1901:5
     |
1901 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1903:9
     |
1903 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1913:13
     |
1913 |         let mut d: libc::c_double = *output.offset(-(1 as libc::c_int) as isize) - scale;
     |             ----^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1928:5
     |
1928 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:1954:13
     |
1954 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1935:5
     |
1935 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1936:5
     |
1936 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1937:5
     |
1937 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1938:5
     |
1938 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1940:9
     |
1940 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1992:38
     |
1992 | pub unsafe extern "C" fn ti_di_start(mut options: *const libc::c_double) -> libc::c_int {
     |                                      ----^^^^^^^
     |                                      |
     |                                      help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:2019:13
     |
2019 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `truerange` is never read
    --> src/tiamalgamation.rs:2022:17
     |
2022 |         let mut truerange: libc::c_double = 0.;
     |                 ^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `dp` is never read
    --> src/tiamalgamation.rs:2037:17
     |
2037 |         let mut dp: libc::c_double = 0.;
     |                 ^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `dm` is never read
    --> src/tiamalgamation.rs:2038:17
     |
2038 |         let mut dm: libc::c_double = 0.;
     |                 ^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `truerange_0` is never read
    --> src/tiamalgamation.rs:2064:17
     |
2064 |         let mut truerange_0: libc::c_double = 0.;
     |                 ^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `dp_0` is never read
    --> src/tiamalgamation.rs:2079:17
     |
2079 |         let mut dp_0: libc::c_double = 0.;
     |                 ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `dm_0` is never read
    --> src/tiamalgamation.rs:2080:17
     |
2080 |         let mut dm_0: libc::c_double = 0.;
     |                 ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1997:5
     |
1997 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1998:5
     |
1998 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:1999:5
     |
1999 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2000:5
     |
2000 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2002:9
     |
2002 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2003:9
     |
2003 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2004:9
     |
2004 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:2142:9
     |
2142 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2142:5
     |
2142 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:2156:13
     |
2156 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:2150:9
     |
2150 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2148:5
     |
2148 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2149:5
     |
2149 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2150:5
     |
2150 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2151:5
     |
2151 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2153:9
     |
2153 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2154:9
     |
2154 |     let mut in2: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2155:9
     |
2155 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2166:38
     |
2166 | pub unsafe extern "C" fn ti_dm_start(mut options: *const libc::c_double) -> libc::c_int {
     |                                      ----^^^^^^^
     |                                      |
     |                                      help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:2191:13
     |
2191 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `dp` is never read
    --> src/tiamalgamation.rs:2194:17
     |
2194 |         let mut dp: libc::c_double = 0.;
     |                 ^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `dm` is never read
    --> src/tiamalgamation.rs:2195:17
     |
2195 |         let mut dm: libc::c_double = 0.;
     |                 ^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `dp_0` is never read
    --> src/tiamalgamation.rs:2221:17
     |
2221 |         let mut dp_0: libc::c_double = 0.;
     |                 ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `dm_0` is never read
    --> src/tiamalgamation.rs:2222:17
     |
2222 |         let mut dm_0: libc::c_double = 0.;
     |                 ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2171:5
     |
2171 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2172:5
     |
2172 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2173:5
     |
2173 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2174:5
     |
2174 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2176:9
     |
2176 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2177:9
     |
2177 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2284:5
     |
2284 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:2307:13
     |
2307 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2290:5
     |
2290 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2291:5
     |
2291 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2292:5
     |
2292 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2293:5
     |
2293 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2295:9
     |
2295 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2347:38
     |
2347 | pub unsafe extern "C" fn ti_dx_start(mut options: *const libc::c_double) -> libc::c_int {
     |                                      ----^^^^^^^
     |                                      |
     |                                      help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:2371:13
     |
2371 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `dp` is never read
    --> src/tiamalgamation.rs:2374:17
     |
2374 |         let mut dp: libc::c_double = 0.;
     |                 ^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `dm` is never read
    --> src/tiamalgamation.rs:2375:17
     |
2375 |         let mut dm: libc::c_double = 0.;
     |                 ^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `dp_0` is never read
    --> src/tiamalgamation.rs:2403:17
     |
2403 |         let mut dp_0: libc::c_double = 0.;
     |                 ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `dm_0` is never read
    --> src/tiamalgamation.rs:2404:17
     |
2404 |         let mut dm_0: libc::c_double = 0.;
     |                 ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2352:5
     |
2352 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2353:5
     |
2353 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2354:5
     |
2354 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2355:5
     |
2355 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2357:9
     |
2357 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2358:9
     |
2358 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2393:9
     |
2393 |     let mut di_up: libc::c_double = dmup;
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2394:9
     |
2394 |     let mut di_down: libc::c_double = dmdown;
     |         ----^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2395:9
     |
2395 |     let mut dm_diff: libc::c_double = fabs(di_up - di_down);
     |         ----^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2396:9
     |
2396 |     let mut dm_sum: libc::c_double = di_up + di_down;
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2397:9
     |
2397 |     let mut dx: libc::c_double = dm_diff / dm_sum * 100 as libc::c_int as libc::c_double;
     |         ----^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2419:13
     |
2419 |         let mut di_up_0: libc::c_double = dmup;
     |             ----^^^^^^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2420:13
     |
2420 |         let mut di_down_0: libc::c_double = dmdown;
     |             ----^^^^^^^^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2421:13
     |
2421 |         let mut dm_diff_0: libc::c_double = fabs(di_up_0 - di_down_0);
     |             ----^^^^^^^^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2422:13
     |
2422 |         let mut dm_sum_0: libc::c_double = di_up_0 + di_down_0;
     |             ----^^^^^^^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2423:13
     |
2423 |         let mut dx_0: libc::c_double = dm_diff_0 / dm_sum_0
     |             ----^^^^
     |             |
     |             help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:2452:9
     |
2452 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2452:5
     |
2452 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:2470:13
     |
2470 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2458:5
     |
2458 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2459:5
     |
2459 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2460:5
     |
2460 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2461:5
     |
2461 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2463:9
     |
2463 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2473:13
     |
2473 |         let mut d: libc::c_double = *output.offset(-(1 as libc::c_int) as isize) * scale;
     |             ----^
     |             |
     |             help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:2488:9
     |
2488 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2488:5
     |
2488 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:2514:13
     |
2514 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2494:5
     |
2494 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2495:5
     |
2495 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2496:5
     |
2496 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2497:5
     |
2497 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2499:9
     |
2499 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:2545:9
     |
2545 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2545:5
     |
2545 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:2565:13
     |
2565 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2551:5
     |
2551 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2552:5
     |
2552 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2553:5
     |
2553 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2554:5
     |
2554 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2556:9
     |
2556 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2557:9
     |
2557 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2558:9
     |
2558 |     let mut volume: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2568:13
     |
2568 |         let mut hl: libc::c_double = (*high.offset(i as isize) + *low.offset(i as isize))
     |             ----^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2570:13
     |
2570 |         let mut br: libc::c_double = *volume.offset(i as isize) / 10000.0f64
     |             ----^^
     |             |
     |             help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:2600:9
     |
2600 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2600:5
     |
2600 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:2613:13
     |
2613 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:2608:9
     |
2608 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2606:5
     |
2606 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2607:5
     |
2607 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2608:5
     |
2608 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2609:5
     |
2609 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2611:9
     |
2611 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2612:9
     |
2612 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2624:5
     |
2624 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `bar` is never read
    --> src/tiamalgamation.rs:2656:13
     |
2656 |     let mut bar: libc::c_double = 0.;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:2658:13
     |
2658 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
    --> src/tiamalgamation.rs:2659:13
     |
2659 |     let mut j: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2630:5
     |
2630 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2631:5
     |
2631 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2632:5
     |
2632 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2633:5
     |
2633 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2635:9
     |
2635 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2636:9
     |
2636 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:2765:9
     |
2765 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2765:5
     |
2765 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:2778:13
     |
2778 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:2773:9
     |
2773 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2771:5
     |
2771 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2772:5
     |
2772 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2773:5
     |
2773 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2774:5
     |
2774 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2776:9
     |
2776 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2777:9
     |
2777 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2789:5
     |
2789 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:2815:13
     |
2815 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2795:5
     |
2795 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2796:5
     |
2796 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2797:5
     |
2797 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2798:5
     |
2798 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2800:9
     |
2800 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2867:5
     |
2867 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:2903:13
     |
2903 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2875:5
     |
2875 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2876:5
     |
2876 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2877:5
     |
2877 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2878:5
     |
2878 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2880:9
     |
2880 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2918:9
     |
2918 |     let mut buff: *mut ti_buffer = ti_buffer_new(periodsqrt);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2979:5
     |
2979 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:3004:13
     |
3004 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `er` is never read
    --> src/tiamalgamation.rs:3019:13
     |
3019 |     let mut er: libc::c_double = 0.;
     |             ^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `sc` is never read
    --> src/tiamalgamation.rs:3020:13
     |
3020 |     let mut sc: libc::c_double = 0.;
     |             ^^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2985:5
     |
2985 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2986:5
     |
2986 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2987:5
     |
2987 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2988:5
     |
2988 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:2990:9
     |
2990 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:3073:9
     |
3073 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3073:5
     |
3073 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:3113:13
     |
3113 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3079:5
     |
3079 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3080:5
     |
3080 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3081:5
     |
3081 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3082:5
     |
3082 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3084:9
     |
3084 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3085:9
     |
3085 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3086:9
     |
3086 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3087:9
     |
3087 |     let mut volume: *const libc::c_double = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3170:5
     |
3170 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:3190:13
     |
3190 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3176:5
     |
3176 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3177:5
     |
3177 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3178:5
     |
3178 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3179:5
     |
3179 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3181:9
     |
3181 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3220:5
     |
3220 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:3245:13
     |
3245 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3226:5
     |
3226 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3227:5
     |
3227 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3228:5
     |
3228 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3229:5
     |
3229 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3231:9
     |
3231 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3293:5
     |
3293 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:3318:13
     |
3318 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3299:5
     |
3299 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3300:5
     |
3300 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3301:5
     |
3301 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3302:5
     |
3302 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3304:9
     |
3304 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3366:5
     |
3366 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:3390:13
     |
3390 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3372:5
     |
3372 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3373:5
     |
3373 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3374:5
     |
3374 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3375:5
     |
3375 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3377:9
     |
3377 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:3436:42
     |
3436 | pub unsafe extern "C" fn ti_ln_start(mut options: *const libc::c_double) -> libc::c_int {
     |                                          ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3436:38
     |
3436 | pub unsafe extern "C" fn ti_ln_start(mut options: *const libc::c_double) -> libc::c_int {
     |                                      ----^^^^^^^
     |                                      |
     |                                      help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:3448:13
     |
3448 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:3443:9
     |
3443 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3441:5
     |
3441 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3442:5
     |
3442 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3443:5
     |
3443 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3444:5
     |
3444 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3446:9
     |
3446 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3447:9
     |
3447 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:3459:9
     |
3459 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3459:5
     |
3459 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:3472:13
     |
3472 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:3467:9
     |
3467 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3465:5
     |
3465 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3466:5
     |
3466 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3467:5
     |
3467 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3468:5
     |
3468 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3470:9
     |
3470 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3471:9
     |
3471 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3483:5
     |
3483 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:3534:13
     |
3534 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3491:5
     |
3491 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3492:5
     |
3492 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3493:5
     |
3493 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3494:5
     |
3494 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3496:9
     |
3496 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3525:9
     |
3525 |     let mut signal_per: libc::c_double = 2 as libc::c_int as libc::c_double
     |         ----^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:3613:9
     |
3613 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3613:5
     |
3613 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:3631:13
     |
3631 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3619:5
     |
3619 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3620:5
     |
3620 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3621:5
     |
3621 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3622:5
     |
3622 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3624:9
     |
3624 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3625:9
     |
3625 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3626:9
     |
3626 |     let mut volume: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3662:5
     |
3662 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3664:9
     |
3664 |     let mut sum_p: libc::c_int = *options.offset(0 as libc::c_int as isize)
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:3692:13
     |
3692 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3670:5
     |
3670 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3671:5
     |
3671 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3672:5
     |
3672 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3673:5
     |
3673 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3675:9
     |
3675 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3676:9
     |
3676 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3691:9
     |
3691 |     let mut sum: *mut ti_buffer = ti_buffer_new(period);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3695:13
     |
3695 |         let mut hl: libc::c_double = *high.offset(i as isize) - *low.offset(i as isize);
     |             ----^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3746:5
     |
3746 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:3769:13
     |
3769 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
    --> src/tiamalgamation.rs:3770:13
     |
3770 |     let mut j: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3752:5
     |
3752 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3753:5
     |
3753 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3754:5
     |
3754 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3755:5
     |
3755 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3757:9
     |
3757 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3822:5
     |
3822 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3823:5
     |
3823 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3824:5
     |
3824 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3825:5
     |
3825 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3827:9
     |
3827 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3859:38
     |
3859 | pub unsafe extern "C" fn ti_md_start(mut options: *const libc::c_double) -> libc::c_int {
     |                                      ----^^^^^^^
     |                                      |
     |                                      help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:3880:13
     |
3880 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
    --> src/tiamalgamation.rs:3881:13
     |
3881 |     let mut j: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3864:5
     |
3864 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3865:5
     |
3865 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3866:5
     |
3866 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3867:5
     |
3867 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3869:9
     |
3869 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:3926:9
     |
3926 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3926:5
     |
3926 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:3940:13
     |
3940 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:3934:9
     |
3934 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3932:5
     |
3932 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3933:5
     |
3933 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3934:5
     |
3934 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3935:5
     |
3935 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3937:9
     |
3937 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3938:9
     |
3938 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3939:9
     |
3939 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3954:5
     |
3954 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:3980:13
     |
3980 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3960:5
     |
3960 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3961:5
     |
3961 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3962:5
     |
3962 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3963:5
     |
3963 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3965:9
     |
3965 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3966:9
     |
3966 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3967:9
     |
3967 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3968:9
     |
3968 |     let mut volume: *const libc::c_double = *inputs.offset(3 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3981:9
     |
3981 |     let mut up: *mut ti_buffer = ti_buffer_new(period);
     |         ----^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:3982:9
     |
3982 |     let mut down: *mut ti_buffer = ti_buffer_new(period);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4087:5
     |
4087 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:4110:13
     |
4110 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
    --> src/tiamalgamation.rs:4111:13
     |
4111 |     let mut j: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4093:5
     |
4093 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4094:5
     |
4094 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4095:5
     |
4095 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4096:5
     |
4096 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4098:9
     |
4098 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4163:5
     |
4163 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4164:5
     |
4164 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4165:5
     |
4165 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4166:5
     |
4166 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4168:9
     |
4168 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4218:5
     |
4218 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:4238:13
     |
4238 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4224:5
     |
4224 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4225:5
     |
4225 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4226:5
     |
4226 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4227:5
     |
4227 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4229:9
     |
4229 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4268:5
     |
4268 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `weight` is never read
    --> src/tiamalgamation.rs:4291:13
     |
4291 |     let mut weight: libc::c_double = 0 as libc::c_int as libc::c_double;
     |             ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `phase` is never read
    --> src/tiamalgamation.rs:4292:13
     |
4292 |     let mut phase: libc::c_double = 0.;
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `rp` is never read
    --> src/tiamalgamation.rs:4293:13
     |
4293 |     let mut rp: libc::c_double = 0.;
     |             ^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ip` is never read
    --> src/tiamalgamation.rs:4294:13
     |
4294 |     let mut ip: libc::c_double = 0.;
     |             ^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:4295:13
     |
4295 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
    --> src/tiamalgamation.rs:4296:13
     |
4296 |     let mut j: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4274:5
     |
4274 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4275:5
     |
4275 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4276:5
     |
4276 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4277:5
     |
4277 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4279:9
     |
4279 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:4376:9
     |
4376 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4376:5
     |
4376 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:4390:13
     |
4390 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:4384:9
     |
4384 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4382:5
     |
4382 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4383:5
     |
4383 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4384:5
     |
4384 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4385:5
     |
4385 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4387:9
     |
4387 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4388:9
     |
4388 |     let mut in2: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4389:9
     |
4389 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4401:5
     |
4401 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `truerange` is never read
    --> src/tiamalgamation.rs:4425:13
     |
4425 |     let mut truerange: libc::c_double = 0.;
     |             ^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:4429:13
     |
4429 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4407:5
     |
4407 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4408:5
     |
4408 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4409:5
     |
4409 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4410:5
     |
4410 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4412:9
     |
4412 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4413:9
     |
4413 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4414:9
     |
4414 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:4498:9
     |
4498 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4498:5
     |
4498 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:4519:13
     |
4519 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4504:5
     |
4504 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4505:5
     |
4505 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4506:5
     |
4506 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4507:5
     |
4507 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4509:9
     |
4509 |     let mut close: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4510:9
     |
4510 |     let mut volume: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:4555:9
     |
4555 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4555:5
     |
4555 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:4574:13
     |
4574 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:4563:9
     |
4563 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4561:5
     |
4561 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4562:5
     |
4562 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4563:5
     |
4563 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4564:5
     |
4564 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4566:9
     |
4566 |     let mut close: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4567:9
     |
4567 |     let mut volume: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:4593:9
     |
4593 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4593:5
     |
4593 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:4628:13
     |
4628 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4599:5
     |
4599 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4600:5
     |
4600 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4601:5
     |
4601 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4602:5
     |
4602 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4604:9
     |
4604 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4622:9
     |
4622 |     let mut short_per: libc::c_double = 2 as libc::c_int as libc::c_double
     |         ----^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4624:9
     |
4624 |     let mut long_per: libc::c_double = 2 as libc::c_int as libc::c_double
     |         ----^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:4661:9
     |
4661 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4661:5
     |
4661 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `lng` is never read
    --> src/tiamalgamation.rs:4686:13
     |
4686 |     let mut lng: libc::c_int = 0;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `sar` is never read
    --> src/tiamalgamation.rs:4695:13
     |
4695 |     let mut sar: libc::c_double = 0.;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `extreme` is never read
    --> src/tiamalgamation.rs:4696:13
     |
4696 |     let mut extreme: libc::c_double = 0.;
     |             ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:4705:13
     |
4705 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4667:5
     |
4667 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4668:5
     |
4668 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4669:5
     |
4669 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4670:5
     |
4670 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4672:9
     |
4672 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4673:9
     |
4673 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:4785:9
     |
4785 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4785:5
     |
4785 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:4806:13
     |
4806 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4791:5
     |
4791 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4792:5
     |
4792 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4793:5
     |
4793 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4794:5
     |
4794 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4796:9
     |
4796 |     let mut close: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4797:9
     |
4797 |     let mut volume: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4842:5
     |
4842 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:4865:13
     |
4865 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4848:5
     |
4848 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4849:5
     |
4849 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4850:5
     |
4850 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4851:5
     |
4851 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4853:9
     |
4853 |     let mut open: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4854:9
     |
4854 |     let mut close: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4908:5
     |
4908 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:4928:13
     |
4928 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4914:5
     |
4914 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4915:5
     |
4915 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4916:5
     |
4916 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4917:5
     |
4917 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4919:9
     |
4919 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4959:5
     |
4959 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:4979:13
     |
4979 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4965:5
     |
4965 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4966:5
     |
4966 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4967:5
     |
4967 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4968:5
     |
4968 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:4970:9
     |
4970 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:5009:9
     |
5009 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5009:5
     |
5009 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:5022:13
     |
5022 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:5017:9
     |
5017 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5015:5
     |
5015 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5016:5
     |
5016 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5017:5
     |
5017 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5018:5
     |
5018 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5020:9
     |
5020 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5021:9
     |
5021 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5033:5
     |
5033 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:5056:13
     |
5056 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5039:5
     |
5039 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5040:5
     |
5040 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5041:5
     |
5041 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5042:5
     |
5042 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5044:9
     |
5044 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:5128:9
     |
5128 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5128:5
     |
5128 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:5141:13
     |
5141 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:5136:9
     |
5136 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5134:5
     |
5134 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5135:5
     |
5135 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5136:5
     |
5136 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5137:5
     |
5137 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5139:9
     |
5139 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5140:9
     |
5140 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:5152:9
     |
5152 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5152:5
     |
5152 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:5165:13
     |
5165 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:5160:9
     |
5160 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5158:5
     |
5158 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5159:5
     |
5159 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5160:5
     |
5160 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5161:5
     |
5161 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5163:9
     |
5163 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5164:9
     |
5164 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5176:5
     |
5176 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:5198:13
     |
5198 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5182:5
     |
5182 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5183:5
     |
5183 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5184:5
     |
5184 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5185:5
     |
5185 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5187:9
     |
5187 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5239:5
     |
5239 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5240:5
     |
5240 |     mut stream_in: *mut *mut ti_stream,
     |     ----^^^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5242:9
     |
5242 |     let mut stream: *mut *mut ti_stream_sma = stream_in as *mut *mut ti_stream_sma;
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5243:9
     |
5243 |     let mut period: libc::c_int = *options.offset(0 as libc::c_int as isize)
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:5283:13
     |
5283 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5268:5
     |
5268 |     mut stream_in: *mut ti_stream,
     |     ----^^^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5269:5
     |
5269 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5270:5
     |
5270 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5271:5
     |
5271 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5273:9
     |
5273 |     let mut stream: *mut ti_stream_sma = stream_in as *mut ti_stream_sma;
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5275:9
     |
5275 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5276:9
     |
5276 |     let mut period: libc::c_int = (*stream).period;
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5278:9
     |
5278 |     let mut per: libc::c_double = (*stream).per;
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5281:9
     |
5281 |     let mut buffer: *mut libc::c_double = ((*stream).buffer).as_mut_ptr();
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5325:45
     |
5325 | pub unsafe extern "C" fn ti_sma_stream_free(mut stream: *mut ti_stream) {
     |                                             ----^^^^^^
     |                                             |
     |                                             help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:5330:9
     |
5330 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5330:5
     |
5330 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:5343:13
     |
5343 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:5338:9
     |
5338 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5336:5
     |
5336 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5337:5
     |
5337 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5338:5
     |
5338 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5339:5
     |
5339 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5341:9
     |
5341 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5342:9
     |
5342 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5354:5
     |
5354 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:5377:13
     |
5377 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5360:5
     |
5360 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5361:5
     |
5361 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5362:5
     |
5362 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5363:5
     |
5363 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5365:9
     |
5365 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5431:5
     |
5431 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:5455:13
     |
5455 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5437:5
     |
5437 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5438:5
     |
5438 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5439:5
     |
5439 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5440:5
     |
5440 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5442:9
     |
5442 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5509:5
     |
5509 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `bar` is never read
    --> src/tiamalgamation.rs:5550:13
     |
5550 |     let mut bar: libc::c_double = 0.;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:5553:13
     |
5553 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
    --> src/tiamalgamation.rs:5554:13
     |
5554 |     let mut j: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5518:5
     |
5518 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5519:5
     |
5519 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5520:5
     |
5520 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5521:5
     |
5521 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5523:9
     |
5523 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5524:9
     |
5524 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5525:9
     |
5525 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5551:9
     |
5551 |     let mut k_sum: *mut ti_buffer = ti_buffer_new(kslow);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5552:9
     |
5552 |     let mut d_sum: *mut ti_buffer = ti_buffer_new(dperiod);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5687:5
     |
5687 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:5712:13
     |
5712 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
    --> src/tiamalgamation.rs:5775:21
     |
5775 |             let mut j: libc::c_int = 0;
     |                     ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `j_0` is never read
    --> src/tiamalgamation.rs:5793:21
     |
5793 |             let mut j_0: libc::c_int = 0;
     |                     ^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5694:5
     |
5694 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5695:5
     |
5695 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5696:5
     |
5696 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5697:5
     |
5697 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5699:9
     |
5699 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5709:9
     |
5709 |     let mut rsi: *mut ti_buffer = ti_buffer_new(period);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:5848:9
     |
5848 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5848:5
     |
5848 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:5862:13
     |
5862 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:5856:9
     |
5856 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5854:5
     |
5854 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5855:5
     |
5855 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5856:5
     |
5856 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5857:5
     |
5857 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5859:9
     |
5859 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5860:9
     |
5860 |     let mut in2: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5861:9
     |
5861 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5873:5
     |
5873 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:5894:13
     |
5894 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5879:5
     |
5879 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5880:5
     |
5880 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5881:5
     |
5881 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5882:5
     |
5882 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5884:9
     |
5884 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:5935:9
     |
5935 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5935:5
     |
5935 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:5948:13
     |
5948 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:5943:9
     |
5943 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5941:5
     |
5941 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5942:5
     |
5942 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5943:5
     |
5943 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5944:5
     |
5944 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5946:9
     |
5946 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5947:9
     |
5947 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:5959:9
     |
5959 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5959:5
     |
5959 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:5972:13
     |
5972 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:5967:9
     |
5967 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5965:5
     |
5965 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5966:5
     |
5966 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5967:5
     |
5967 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5968:5
     |
5968 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5970:9
     |
5970 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5971:9
     |
5971 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5983:5
     |
5983 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:6010:13
     |
6010 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5990:5
     |
5990 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5991:5
     |
5991 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5992:5
     |
5992 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5993:5
     |
5993 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:5995:9
     |
5995 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:6056:9
     |
6056 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6056:5
     |
6056 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:6069:13
     |
6069 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:6064:9
     |
6064 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6062:5
     |
6062 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6063:5
     |
6063 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6064:5
     |
6064 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6065:5
     |
6065 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6067:9
     |
6067 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6068:9
     |
6068 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:6083:9
     |
6083 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6083:5
     |
6083 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:6096:13
     |
6096 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:6091:9
     |
6091 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6089:5
     |
6089 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6090:5
     |
6090 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6091:5
     |
6091 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6092:5
     |
6092 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6094:9
     |
6094 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6095:9
     |
6095 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:6109:42
     |
6109 | pub unsafe extern "C" fn ti_tr_start(mut options: *const libc::c_double) -> libc::c_int {
     |                                          ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6109:38
     |
6109 | pub unsafe extern "C" fn ti_tr_start(mut options: *const libc::c_double) -> libc::c_int {
     |                                      ----^^^^^^^
     |                                      |
     |                                      help: remove this `mut`

warning: value assigned to `truerange` is never read
    --> src/tiamalgamation.rs:6123:13
     |
6123 |     let mut truerange: libc::c_double = 0.;
     |             ^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:6129:13
     |
6129 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:6116:9
     |
6116 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6114:5
     |
6114 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6115:5
     |
6115 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6116:5
     |
6116 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6117:5
     |
6117 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6119:9
     |
6119 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6120:9
     |
6120 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6121:9
     |
6121 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6122:9
     |
6122 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6153:5
     |
6153 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:6192:13
     |
6192 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6159:5
     |
6159 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6160:5
     |
6160 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6161:5
     |
6161 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6162:5
     |
6162 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6164:9
     |
6164 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6176:9
     |
6176 |     let mut weights: libc::c_double = 1 as libc::c_int as libc::c_double
     |         ----^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6261:5
     |
6261 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:6302:13
     |
6302 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6268:5
     |
6268 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6269:5
     |
6269 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6270:5
     |
6270 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6271:5
     |
6271 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6273:9
     |
6273 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:6352:9
     |
6352 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6352:5
     |
6352 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:6365:13
     |
6365 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:6360:9
     |
6360 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6358:5
     |
6358 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6359:5
     |
6359 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6360:5
     |
6360 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6361:5
     |
6361 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6363:9
     |
6363 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6364:9
     |
6364 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6379:5
     |
6379 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:6404:13
     |
6404 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6385:5
     |
6385 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6386:5
     |
6386 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6387:5
     |
6387 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6388:5
     |
6388 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6390:9
     |
6390 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:6452:9
     |
6452 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6452:5
     |
6452 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:6467:13
     |
6467 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:6460:9
     |
6460 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6458:5
     |
6458 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6459:5
     |
6459 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6460:5
     |
6460 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6461:5
     |
6461 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6463:9
     |
6463 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6464:9
     |
6464 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6465:9
     |
6465 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6466:9
     |
6466 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6482:5
     |
6482 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:6521:13
     |
6521 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6488:5
     |
6488 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6489:5
     |
6489 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6490:5
     |
6490 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6491:5
     |
6491 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6493:9
     |
6493 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6494:9
     |
6494 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6495:9
     |
6495 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6515:9
     |
6515 |     let mut bp_buf: *mut ti_buffer = ti_buffer_new(long_period);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6516:9
     |
6516 |     let mut r_buf: *mut ti_buffer = ti_buffer_new(long_period);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6624:5
     |
6624 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:6647:13
     |
6647 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6630:5
     |
6630 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6631:5
     |
6631 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6632:5
     |
6632 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6633:5
     |
6633 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6635:9
     |
6635 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6693:5
     |
6693 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `bar` is never read
    --> src/tiamalgamation.rs:6718:13
     |
6718 |     let mut bar: libc::c_double = 0.;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:6720:13
     |
6720 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
    --> src/tiamalgamation.rs:6721:13
     |
6721 |     let mut j: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `c` is never read
    --> src/tiamalgamation.rs:6723:13
     |
6723 |     let mut c: libc::c_double = 0.;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6699:5
     |
6699 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6700:5
     |
6700 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6701:5
     |
6701 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6702:5
     |
6702 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6704:9
     |
6704 |     let mut in_0: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6813:5
     |
6813 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:6852:13
     |
6852 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6819:5
     |
6819 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6820:5
     |
6820 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6821:5
     |
6821 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6822:5
     |
6822 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6824:9
     |
6824 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6870:13
     |
6870 |         let mut short_stddev: libc::c_double = sqrt(
     |             ----^^^^^^^^^^^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6873:13
     |
6873 |         let mut long_stddev: libc::c_double = sqrt(
     |             ----^^^^^^^^^^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6900:13
     |
6900 |         let mut short_stddev_0: libc::c_double = sqrt(
     |             ----^^^^^^^^^^^^^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6903:13
     |
6903 |         let mut long_stddev_0: libc::c_double = sqrt(
     |             ----^^^^^^^^^^^^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6939:5
     |
6939 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:6963:13
     |
6963 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6945:5
     |
6945 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6946:5
     |
6946 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6947:5
     |
6947 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6948:5
     |
6948 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:6950:9
     |
6950 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7013:5
     |
7013 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:7043:13
     |
7043 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7019:5
     |
7019 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7020:5
     |
7020 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7021:5
     |
7021 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7022:5
     |
7022 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7024:9
     |
7024 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7093:5
     |
7093 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:7116:13
     |
7116 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7099:5
     |
7099 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7100:5
     |
7100 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7101:5
     |
7101 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7102:5
     |
7102 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7104:9
     |
7104 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7105:9
     |
7105 |     let mut volume: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:7162:9
     |
7162 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7162:5
     |
7162 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:7182:13
     |
7182 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7168:5
     |
7168 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7169:5
     |
7169 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7170:5
     |
7170 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7171:5
     |
7171 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7173:9
     |
7173 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7174:9
     |
7174 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7175:9
     |
7175 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `options`
    --> src/tiamalgamation.rs:7231:9
     |
7231 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7231:5
     |
7231 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:7246:13
     |
7246 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `options`
    --> src/tiamalgamation.rs:7239:9
     |
7239 |     mut options: *const libc::c_double,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7237:5
     |
7237 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7238:5
     |
7238 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7239:5
     |
7239 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7240:5
     |
7240 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7242:9
     |
7242 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7243:9
     |
7243 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7244:9
     |
7244 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7245:9
     |
7245 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7261:5
     |
7261 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:7283:13
     |
7283 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7267:5
     |
7267 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7268:5
     |
7268 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7269:5
     |
7269 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7270:5
     |
7270 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7272:9
     |
7272 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7324:5
     |
7324 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `bar` is never read
    --> src/tiamalgamation.rs:7351:13
     |
7351 |     let mut bar: libc::c_double = 0.;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:7352:13
     |
7352 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
    --> src/tiamalgamation.rs:7353:13
     |
7353 |     let mut j: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7330:5
     |
7330 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7331:5
     |
7331 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7332:5
     |
7332 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7333:5
     |
7333 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7335:9
     |
7335 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7336:9
     |
7336 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7337:9
     |
7337 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7432:5
     |
7432 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:7456:13
     |
7456 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7438:5
     |
7438 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7439:5
     |
7439 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7440:5
     |
7440 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7441:5
     |
7441 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7443:9
     |
7443 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7498:5
     |
7498 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/tiamalgamation.rs:7526:13
     |
7526 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7505:5
     |
7505 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7506:5
     |
7506 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7507:5
     |
7507 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7508:5
     |
7508 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7510:9
     |
7510 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7529:13
     |
7529 |         let mut c: libc::c_double = *input.offset(i as isize);
     |             ----^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7530:13
     |
7530 |         let mut l: libc::c_double = *input.offset((i - lag) as isize);
     |             ----^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7558:40
     |
7558 | pub unsafe extern "C" fn ti_buffer_new(mut size: libc::c_int) -> *mut ti_buffer {
     |                                        ----^^^^
     |                                        |
     |                                        help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7563:9
     |
7563 |     let mut ret: *mut ti_buffer = malloc(s as libc::c_uint as libc::c_ulong)
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/tiamalgamation.rs:7572:41
     |
7572 | pub unsafe extern "C" fn ti_buffer_free(mut buffer: *mut ti_buffer) {
     |                                         ----^^^^^^
     |                                         |
     |                                         help: remove this `mut`

warning: unnecessary `unsafe` block
    --> src/tiamalgamation.rs:7588:58
     |
7588 | pub static mut ti_indicators: [ti_indicator_info; 105] = unsafe {
     |                                                          ^^^^^^ unnecessary `unsafe` block

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16293:5
      |
16293 |     mut stream: *mut ti_stream,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16294:5
      |
16294 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16295:5
      |
16295 |     mut inputs: *const *const libc::c_double,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16296:5
      |
16296 |     mut outputs: *const *mut libc::c_double,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16303:5
      |
16303 |     mut stream: *mut ti_stream,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16309:5
      |
16309 |     mut stream: *mut ti_stream,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16314:41
      |
16314 | pub unsafe extern "C" fn ti_stream_free(mut stream: *mut ti_stream) {
      |                                         ----^^^^^^
      |                                         |
      |                                         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16320:5
      |
16320 |     mut name: *const libc::c_char,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: unnecessary `unsafe` block
     --> src/tiamalgamation.rs:16369:51
      |
16369 | pub static mut tc_candles: [tc_candle_info; 27] = unsafe {
      |                                                   ^^^^^^ unnecessary `unsafe` block

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16826:5
      |
16826 |     mut name: *const libc::c_char,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16847:38
      |
16847 | pub unsafe extern "C" fn tc_get_info(mut pattern: tc_set) -> *const tc_candle_info {
      |                                      ----^^^^^^^
      |                                      |
      |                                      help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16851:9
      |
16851 |     let mut k: tc_set = pattern & !pattern.wrapping_sub(1 as libc::c_int as tc_set);
      |         ----^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16870:51
      |
16870 | pub unsafe extern "C" fn tc_config_set_to_default(mut config: *mut tc_config) {
      |                                                   ----^^^^^^
      |                                                   |
      |                                                   help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16879:9
      |
16879 |     let mut k: *mut tc_result = malloc(
      |         ----^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16892:38
      |
16892 | unsafe extern "C" fn tc_result_reset(mut result: *mut tc_result) {
      |                                      ----^^^^^^
      |                                      |
      |                                      help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16898:41
      |
16898 | pub unsafe extern "C" fn tc_result_free(mut result: *mut tc_result) {
      |                                         ----^^^^^^
      |                                         |
      |                                         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16906:42
      |
16906 | pub unsafe extern "C" fn tc_result_count(mut result: *const tc_result) -> libc::c_int {
      |                                          ----^^^^^^
      |                                          |
      |                                          help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16911:5
      |
16911 |     mut result: *const tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16917:5
      |
16917 |     mut result: *const tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16918:5
      |
16918 |     mut index: libc::c_int,
      |     ----^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16923:9
      |
16923 |     let mut hit: tc_hit = {
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16924:13
      |
16924 |         let mut init = tc_hit {
      |             ----^^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16934:5
      |
16934 |     mut result: *const tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16935:5
      |
16935 |     mut index: libc::c_int,
      |     ----^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16979:5
      |
16979 |     mut result: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:16980:5
      |
16980 |     mut hit: tc_hit,
      |     ----^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17003:13
      |
17003 |         let mut hits: *mut tc_hit = realloc(
      |             ----^^^^
      |             |
      |             help: remove this `mut`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:17123:13
      |
17123 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:17144:13
      |
17144 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:17145:13
      |
17145 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17020:5
      |
17020 |     mut patterns: tc_set,
      |     ----^^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17021:5
      |
17021 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17022:5
      |
17022 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17023:5
      |
17023 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17024:5
      |
17024 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17109:9
      |
17109 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17110:9
      |
17110 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17111:9
      |
17111 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17112:9
      |
17112 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17168:21
      |
17168 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17199:21
      |
17199 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17216:21
      |
17216 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17233:21
      |
17233 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17252:21
      |
17252 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17268:21
      |
17268 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17286:21
      |
17286 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17306:21
      |
17306 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17326:21
      |
17326 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17380:21
      |
17380 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17434:21
      |
17434 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17452:21
      |
17452 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17470:21
      |
17470 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17496:21
      |
17496 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17522:21
      |
17522 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17553:21
      |
17553 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17571:21
      |
17571 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17589:21
      |
17589 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17643:21
      |
17643 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17697:21
      |
17697 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17728:21
      |
17728 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17748:21
      |
17748 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17766:21
      |
17766 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17820:21
      |
17820 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17874:21
      |
17874 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17893:21
      |
17893 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:17939:13
      |
17939 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:17960:13
      |
17960 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:17961:13
      |
17961 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17920:5
      |
17920 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17921:5
      |
17921 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17922:5
      |
17922 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17923:5
      |
17923 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17925:9
      |
17925 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17926:9
      |
17926 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17927:9
      |
17927 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17928:9
      |
17928 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:17983:21
      |
17983 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:18029:13
      |
18029 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:18050:13
      |
18050 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:18051:13
      |
18051 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18010:5
      |
18010 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18011:5
      |
18011 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18012:5
      |
18012 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18013:5
      |
18013 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18015:9
      |
18015 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18016:9
      |
18016 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18017:9
      |
18017 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18018:9
      |
18018 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18073:21
      |
18073 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:18119:13
      |
18119 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:18140:13
      |
18140 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:18141:13
      |
18141 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_total`
     --> src/tiamalgamation.rs:18143:13
      |
18143 |         let avg_total: TC_REAL = avg_total_sum * div;
      |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18100:5
      |
18100 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18101:5
      |
18101 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18102:5
      |
18102 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18103:5
      |
18103 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18105:9
      |
18105 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18106:9
      |
18106 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18107:9
      |
18107 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18108:9
      |
18108 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18149:21
      |
18149 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:18195:13
      |
18195 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:18216:13
      |
18216 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:18217:13
      |
18217 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_total`
     --> src/tiamalgamation.rs:18219:13
      |
18219 |         let avg_total: TC_REAL = avg_total_sum * div;
      |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18176:5
      |
18176 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18177:5
      |
18177 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18178:5
      |
18178 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18179:5
      |
18179 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18181:9
      |
18181 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18182:9
      |
18182 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18183:9
      |
18183 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18184:9
      |
18184 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18225:21
      |
18225 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:18271:13
      |
18271 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:18292:13
      |
18292 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:18293:13
      |
18293 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18252:5
      |
18252 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18253:5
      |
18253 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18254:5
      |
18254 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18255:5
      |
18255 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18257:9
      |
18257 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18258:9
      |
18258 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18259:9
      |
18259 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18260:9
      |
18260 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18303:21
      |
18303 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:18349:13
      |
18349 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:18370:13
      |
18370 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:18371:13
      |
18371 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_body`
     --> src/tiamalgamation.rs:18372:13
      |
18372 |         let avg_body: TC_REAL = avg_body_sum * div;
      |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_body`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18330:5
      |
18330 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18331:5
      |
18331 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18332:5
      |
18332 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18333:5
      |
18333 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18335:9
      |
18335 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18336:9
      |
18336 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18337:9
      |
18337 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18338:9
      |
18338 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18378:21
      |
18378 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:18424:13
      |
18424 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:18445:13
      |
18445 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:18446:13
      |
18446 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18405:5
      |
18405 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18406:5
      |
18406 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18407:5
      |
18407 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18408:5
      |
18408 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18410:9
      |
18410 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18411:9
      |
18411 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18412:9
      |
18412 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18413:9
      |
18413 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18455:21
      |
18455 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:18501:13
      |
18501 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:18522:13
      |
18522 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:18523:13
      |
18523 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_body`
     --> src/tiamalgamation.rs:18524:13
      |
18524 |         let avg_body: TC_REAL = avg_body_sum * div;
      |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_body`

warning: unused variable: `avg_total`
     --> src/tiamalgamation.rs:18525:13
      |
18525 |         let avg_total: TC_REAL = avg_total_sum * div;
      |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18482:5
      |
18482 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18483:5
      |
18483 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18484:5
      |
18484 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18485:5
      |
18485 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18487:9
      |
18487 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18488:9
      |
18488 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18489:9
      |
18489 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18490:9
      |
18490 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18533:21
      |
18533 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:18579:13
      |
18579 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:18600:13
      |
18600 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:18601:13
      |
18601 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_body`
     --> src/tiamalgamation.rs:18602:13
      |
18602 |         let avg_body: TC_REAL = avg_body_sum * div;
      |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_body`

warning: unused variable: `avg_total`
     --> src/tiamalgamation.rs:18603:13
      |
18603 |         let avg_total: TC_REAL = avg_total_sum * div;
      |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18560:5
      |
18560 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18561:5
      |
18561 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18562:5
      |
18562 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18563:5
      |
18563 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18565:9
      |
18565 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18566:9
      |
18566 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18567:9
      |
18567 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18568:9
      |
18568 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18611:21
      |
18611 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:18657:13
      |
18657 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:18678:13
      |
18678 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:18679:13
      |
18679 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18638:5
      |
18638 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18639:5
      |
18639 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18640:5
      |
18640 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18641:5
      |
18641 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18643:9
      |
18643 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18644:9
      |
18644 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18645:9
      |
18645 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18646:9
      |
18646 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18724:21
      |
18724 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:18770:13
      |
18770 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:18791:13
      |
18791 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:18792:13
      |
18792 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_total`
     --> src/tiamalgamation.rs:18794:13
      |
18794 |         let avg_total: TC_REAL = avg_total_sum * div;
      |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18751:5
      |
18751 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18752:5
      |
18752 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18753:5
      |
18753 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18754:5
      |
18754 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18756:9
      |
18756 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18757:9
      |
18757 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18758:9
      |
18758 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18759:9
      |
18759 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18837:21
      |
18837 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:18883:13
      |
18883 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:18904:13
      |
18904 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:18905:13
      |
18905 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_body`
     --> src/tiamalgamation.rs:18906:13
      |
18906 |         let avg_body: TC_REAL = avg_body_sum * div;
      |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_body`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18864:5
      |
18864 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18865:5
      |
18865 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18866:5
      |
18866 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18867:5
      |
18867 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18869:9
      |
18869 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18870:9
      |
18870 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18871:9
      |
18871 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18872:9
      |
18872 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18914:21
      |
18914 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:18960:13
      |
18960 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:18981:13
      |
18981 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:18982:13
      |
18982 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18941:5
      |
18941 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18942:5
      |
18942 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18943:5
      |
18943 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18944:5
      |
18944 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18946:9
      |
18946 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18947:9
      |
18947 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18948:9
      |
18948 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18949:9
      |
18949 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:18991:21
      |
18991 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:19037:13
      |
19037 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:19058:13
      |
19058 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:19059:13
      |
19059 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19018:5
      |
19018 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19019:5
      |
19019 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19020:5
      |
19020 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19021:5
      |
19021 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19023:9
      |
19023 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19024:9
      |
19024 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19025:9
      |
19025 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19026:9
      |
19026 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19076:21
      |
19076 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:19122:13
      |
19122 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:19143:13
      |
19143 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:19144:13
      |
19144 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19103:5
      |
19103 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19104:5
      |
19104 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19105:5
      |
19105 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19106:5
      |
19106 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19108:9
      |
19108 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19109:9
      |
19109 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19110:9
      |
19110 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19111:9
      |
19111 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19161:21
      |
19161 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:19207:13
      |
19207 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:19228:13
      |
19228 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:19229:13
      |
19229 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19188:5
      |
19188 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19189:5
      |
19189 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19190:5
      |
19190 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19191:5
      |
19191 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19193:9
      |
19193 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19194:9
      |
19194 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19195:9
      |
19195 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19196:9
      |
19196 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19251:21
      |
19251 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:19297:13
      |
19297 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:19318:13
      |
19318 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:19319:13
      |
19319 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19278:5
      |
19278 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19279:5
      |
19279 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19280:5
      |
19280 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19281:5
      |
19281 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19283:9
      |
19283 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19284:9
      |
19284 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19285:9
      |
19285 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19286:9
      |
19286 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19328:21
      |
19328 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:19374:13
      |
19374 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:19395:13
      |
19395 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:19396:13
      |
19396 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19355:5
      |
19355 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19356:5
      |
19356 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19357:5
      |
19357 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19358:5
      |
19358 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19360:9
      |
19360 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19361:9
      |
19361 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19362:9
      |
19362 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19363:9
      |
19363 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19405:21
      |
19405 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:19451:13
      |
19451 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:19472:13
      |
19472 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:19473:13
      |
19473 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19432:5
      |
19432 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19433:5
      |
19433 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19434:5
      |
19434 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19435:5
      |
19435 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19437:9
      |
19437 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19438:9
      |
19438 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19439:9
      |
19439 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19440:9
      |
19440 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19518:21
      |
19518 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:19564:13
      |
19564 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:19585:13
      |
19585 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:19586:13
      |
19586 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_total`
     --> src/tiamalgamation.rs:19588:13
      |
19588 |         let avg_total: TC_REAL = avg_total_sum * div;
      |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19545:5
      |
19545 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19546:5
      |
19546 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19547:5
      |
19547 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19548:5
      |
19548 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19550:9
      |
19550 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19551:9
      |
19551 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19552:9
      |
19552 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19553:9
      |
19553 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19631:21
      |
19631 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:19677:13
      |
19677 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:19698:13
      |
19698 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:19699:13
      |
19699 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19658:5
      |
19658 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19659:5
      |
19659 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19660:5
      |
19660 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19661:5
      |
19661 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19663:9
      |
19663 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19664:9
      |
19664 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19665:9
      |
19665 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19666:9
      |
19666 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19721:21
      |
19721 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:19767:13
      |
19767 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:19788:13
      |
19788 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:19789:13
      |
19789 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_total`
     --> src/tiamalgamation.rs:19791:13
      |
19791 |         let avg_total: TC_REAL = avg_total_sum * div;
      |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19748:5
      |
19748 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19749:5
      |
19749 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19750:5
      |
19750 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19751:5
      |
19751 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19753:9
      |
19753 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19754:9
      |
19754 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19755:9
      |
19755 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19756:9
      |
19756 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19800:21
      |
19800 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:19846:13
      |
19846 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:19867:13
      |
19867 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:19868:13
      |
19868 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_body`
     --> src/tiamalgamation.rs:19869:13
      |
19869 |         let avg_body: TC_REAL = avg_body_sum * div;
      |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_body`

warning: unused variable: `avg_total`
     --> src/tiamalgamation.rs:19870:13
      |
19870 |         let avg_total: TC_REAL = avg_total_sum * div;
      |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19827:5
      |
19827 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19828:5
      |
19828 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19829:5
      |
19829 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19830:5
      |
19830 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19832:9
      |
19832 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19833:9
      |
19833 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19834:9
      |
19834 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19835:9
      |
19835 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19877:21
      |
19877 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:19923:13
      |
19923 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:19944:13
      |
19944 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:19945:13
      |
19945 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_body`
     --> src/tiamalgamation.rs:19946:13
      |
19946 |         let avg_body: TC_REAL = avg_body_sum * div;
      |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_body`

warning: unused variable: `avg_total`
     --> src/tiamalgamation.rs:19947:13
      |
19947 |         let avg_total: TC_REAL = avg_total_sum * div;
      |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19904:5
      |
19904 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19905:5
      |
19905 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19906:5
      |
19906 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19907:5
      |
19907 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19909:9
      |
19909 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19910:9
      |
19910 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19911:9
      |
19911 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19912:9
      |
19912 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:19990:21
      |
19990 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:20036:13
      |
20036 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:20057:13
      |
20057 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:20058:13
      |
20058 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_body`
     --> src/tiamalgamation.rs:20059:13
      |
20059 |         let avg_body: TC_REAL = avg_body_sum * div;
      |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_body`

warning: unused variable: `avg_total`
     --> src/tiamalgamation.rs:20060:13
      |
20060 |         let avg_total: TC_REAL = avg_total_sum * div;
      |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:20017:5
      |
20017 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:20018:5
      |
20018 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:20019:5
      |
20019 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:20020:5
      |
20020 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:20022:9
      |
20022 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:20023:9
      |
20023 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:20024:9
      |
20024 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:20025:9
      |
20025 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:20103:21
      |
20103 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: value assigned to `i` is never read
     --> src/tiamalgamation.rs:20149:13
      |
20149 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
     --> src/tiamalgamation.rs:20170:13
      |
20170 |         let upper: TC_REAL = *high.offset(i as isize) - top;
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
     --> src/tiamalgamation.rs:20171:13
      |
20171 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
      |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:20130:5
      |
20130 |     mut size: libc::c_int,
      |     ----^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:20131:5
      |
20131 |     mut inputs: *const *const TC_REAL,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:20132:5
      |
20132 |     mut options: *const tc_config,
      |     ----^^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:20133:5
      |
20133 |     mut output: *mut tc_result,
      |     ----^^^^^^
      |     |
      |     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:20135:9
      |
20135 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:20136:9
      |
20136 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:20137:9
      |
20137 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:20138:9
      |
20138 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
      |         ----^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/tiamalgamation.rs:20181:21
      |
20181 |                 let mut init = tc_hit {
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/abands.rs:23:5
   |
23 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/abands.rs:30:5
   |
30 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/abands.rs:31:5
   |
31 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/abands.rs:32:5
   |
32 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/abands.rs:33:5
   |
33 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/abands.rs:35:9
   |
35 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/abands.rs:36:9
   |
36 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/abands.rs:37:9
   |
37 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/abands.rs:49:9
   |
49 |     let mut per: libc::c_double = 1.0f64 / period as libc::c_double;
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/abands.rs:50:9
   |
50 |     let mut buffer_high: *mut ti_buffer = ti_buffer_new(period);
   |         ----^^^^^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/abands.rs:51:9
   |
51 |     let mut buffer_low: *mut ti_buffer = ti_buffer_new(period);
   |         ----^^^^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/abands.rs:55:13
   |
55 |         let mut mult: libc::c_double = 4.0f64
   |             ----^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/abands.rs:58:13
   |
58 |         let mut high_val: libc::c_double = (1.0f64 + mult) * *high.offset(i as isize);
   |             ----^^^^^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/abands.rs:74:13
   |
74 |         let mut low_val: libc::c_double = (1.0f64 - mult) * *low.offset(i as isize);
   |             ----^^^^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/abands.rs:105:13
    |
105 |         let mut mult_0: libc::c_double = 4.0f64
    |             ----^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/abands.rs:108:13
    |
108 |         let mut high_val_0: libc::c_double = (1.0f64 + mult_0)
    |             ----^^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/abands.rs:125:13
    |
125 |         let mut low_val_0: libc::c_double = (1.0f64 - mult_0)
    |             ----^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/abands.rs:200:5
    |
200 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/abands.rs:201:5
    |
201 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/abands.rs:202:5
    |
202 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/abands.rs:203:5
    |
203 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/abands.rs:205:9
    |
205 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/abands.rs:206:9
    |
206 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/abands.rs:207:9
    |
207 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/alma.rs:19:5
   |
19 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/beta/alma.rs:35:13
   |
35 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
  --> src/beta/alma.rs:36:13
   |
36 |     let mut j: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/beta/alma.rs:26:5
   |
26 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/alma.rs:27:5
   |
27 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/alma.rs:28:5
   |
28 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/alma.rs:29:5
   |
29 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/alma.rs:31:9
   |
31 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/alma.rs:52:9
   |
52 |     let mut weights: *mut libc::c_double = malloc(
   |         ----^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/ce.rs:52:38
   |
52 | pub unsafe extern "C" fn ti_ce_start(mut options: *const libc::c_double) -> libc::c_int {
   |                                      ----^^^^^^^
   |                                      |
   |                                      help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:166:5
    |
166 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:167:5
    |
167 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:168:5
    |
168 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:169:5
    |
169 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:200:13
    |
200 |         let mut HP: libc::c_double = *max.offset(i as isize);
    |             ----^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:204:13
    |
204 |         let mut LP: libc::c_double = *min.offset(i as isize);
    |             ----^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:218:5
    |
218 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:219:5
    |
219 |     mut stream_in: *mut *mut ti_stream,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:221:9
    |
221 |     let mut stream: *mut *mut ti_stream_ce = stream_in as *mut *mut ti_stream_ce;
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:265:44
    |
265 | pub unsafe extern "C" fn ti_ce_stream_free(mut stream: *mut ti_stream) {
    |                                            ----^^^^^^
    |                                            |
    |                                            help: remove this `mut`

warning: value assigned to `atr` is never read
   --> src/beta/ce.rs:284:13
    |
284 |     let mut atr: libc::c_double = 0.;
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `prev_close` is never read
   --> src/beta/ce.rs:285:13
    |
285 |     let mut prev_close: libc::c_double = 0.;
    |             ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `LP` is never read
   --> src/beta/ce.rs:290:13
    |
290 |     let mut LP: libc::c_double = 0.;
    |             ^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `HP` is never read
   --> src/beta/ce.rs:291:13
    |
291 |     let mut HP: libc::c_double = 0.;
    |             ^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `val` is never read
   --> src/beta/ce.rs:309:17
    |
309 |         let mut val: libc::c_double = 0.;
    |                 ^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
   --> src/beta/ce.rs:316:21
    |
316 |             let mut j: libc::c_int = 0;
    |                     ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `j_0` is never read
   --> src/beta/ce.rs:339:21
    |
339 |             let mut j_0: libc::c_int = 0;
    |                     ^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `truerange` is never read
   --> src/beta/ce.rs:366:17
    |
366 |         let mut truerange: libc::c_double = 0.;
    |                 ^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `val_0` is never read
   --> src/beta/ce.rs:394:17
    |
394 |         let mut val_0: libc::c_double = 0.;
    |                 ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `j_1` is never read
   --> src/beta/ce.rs:401:21
    |
401 |             let mut j_1: libc::c_int = 0;
    |                     ^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `j_2` is never read
   --> src/beta/ce.rs:424:21
    |
424 |             let mut j_2: libc::c_int = 0;
    |                     ^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `truerange_0` is never read
   --> src/beta/ce.rs:463:17
    |
463 |         let mut truerange_0: libc::c_double = 0.;
    |                 ^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `val_1` is never read
   --> src/beta/ce.rs:491:17
    |
491 |         let mut val_1: libc::c_double = 0.;
    |                 ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `j_3` is never read
   --> src/beta/ce.rs:498:21
    |
498 |             let mut j_3: libc::c_int = 0;
    |                     ^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `j_4` is never read
   --> src/beta/ce.rs:521:21
    |
521 |             let mut j_4: libc::c_int = 0;
    |                     ^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src/beta/ce.rs:270:5
    |
270 |     mut stream_in: *mut ti_stream,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:271:5
    |
271 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:272:5
    |
272 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:273:5
    |
273 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:275:9
    |
275 |     let mut stream: *mut ti_stream_ce = stream_in as *mut ti_stream_ce;
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:277:9
    |
277 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:278:9
    |
278 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:279:9
    |
279 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:286:9
    |
286 |     let mut LP_HP: *mut ti_ringbuffer_minmax = &mut (*stream).LP_HP;
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:296:13
    |
296 |         let mut end_idx: libc::c_int = ((*LP_HP).end_idx + 1 as libc::c_int)
    |             ----^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:381:13
    |
381 |         let mut end_idx_0: libc::c_int = ((*LP_HP).end_idx + 1 as libc::c_int)
    |             ----^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/ce.rs:478:13
    |
478 |         let mut end_idx_1: libc::c_int = ((*LP_HP).end_idx + 1 as libc::c_int)
    |             ----^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/cmf.rs:13:5
   |
13 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/beta/cmf.rs:38:13
   |
38 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/beta/cmf.rs:19:5
   |
19 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/cmf.rs:20:5
   |
20 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/cmf.rs:21:5
   |
21 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/cmf.rs:22:5
   |
22 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/cmf.rs:24:9
   |
24 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/cmf.rs:25:9
   |
25 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/cmf.rs:26:9
   |
26 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/cmf.rs:27:9
   |
27 |     let mut volume: *const libc::c_double = *inputs.offset(3 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/copp.rs:87:5
   |
87 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `buffers` is never read
   --> src/beta/copp.rs:124:13
    |
124 |     let mut buffers: *mut C2RustUnnamed = 0 as *mut C2RustUnnamed;
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var1` is never read
   --> src/beta/copp.rs:164:13
    |
164 |     let mut var1: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var2` is never read
   --> src/beta/copp.rs:165:13
    |
165 |     let mut var2: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var3` is never read
   --> src/beta/copp.rs:166:13
    |
166 |     let mut var3: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/beta/copp.rs:97:5
   |
97 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/copp.rs:98:5
   |
98 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/copp.rs:99:5
   |
99 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/copp.rs:100:5
    |
100 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/copp.rs:102:9
    |
102 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/copp.rs:159:9
    |
159 |     let mut denominator: libc::c_double = 1.0f64
    |         ----^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/copp.rs:352:5
    |
352 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/copp.rs:353:5
    |
353 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/copp.rs:354:5
    |
354 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/copp.rs:355:5
    |
355 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/copp.rs:376:9
    |
376 |     let mut roc_short_len: libc::c_int = size - ti_roc_start(&roc_shorter_period);
    |         ----^^^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/copp.rs:381:9
    |
381 |     let mut roc_long_len: libc::c_int = size - ti_roc_start(&roc_longer_period);
    |         ----^^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/copp.rs:386:9
    |
386 |     let mut interm: *mut libc::c_double = malloc(
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/copp.rs:413:46
    |
413 | pub unsafe extern "C" fn ti_copp_stream_free(mut stream: *mut ti_stream) {
    |                                              ----^^^^^^
    |                                              |
    |                                              help: remove this `mut`

warning: value assigned to `var1` is never read
   --> src/beta/copp.rs:434:13
    |
434 |     let mut var1: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var2` is never read
   --> src/beta/copp.rs:435:13
    |
435 |     let mut var2: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var3` is never read
   --> src/beta/copp.rs:436:13
    |
436 |     let mut var3: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src/beta/copp.rs:418:5
    |
418 |     mut stream_in: *mut ti_stream,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/copp.rs:419:5
    |
419 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/copp.rs:420:5
    |
420 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/copp.rs:421:5
    |
421 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/copp.rs:423:9
    |
423 |     let mut stream: *mut ti_stream_copp = stream_in as *mut ti_stream_copp;
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/copp.rs:425:9
    |
425 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/copp.rs:430:9
    |
430 |     let mut denominator: libc::c_double = (*stream).state.denominator;
    |         ----^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/copp.rs:431:9
    |
431 |     let mut rocs_per: libc::c_double = (*stream).state.rocs_per;
    |         ----^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/dc.rs:53:38
   |
53 | pub unsafe extern "C" fn ti_dc_start(mut options: *const libc::c_double) -> libc::c_int {
   |                                      ----^^^^^^^
   |                                      |
   |                                      help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/dc.rs:59:5
   |
59 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/dc.rs:60:5
   |
60 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/dc.rs:61:5
   |
61 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/dc.rs:62:5
   |
62 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/dc.rs:79:44
   |
79 | pub unsafe extern "C" fn ti_dc_stream_free(mut stream: *mut ti_stream) {
   |                                            ----^^^^^^
   |                                            |
   |                                            help: remove this `mut`

warning: value assigned to `var1` is never read
   --> src/beta/dc.rs:168:25
    |
168 |                 let mut var1: libc::c_double = 0.;
    |                         ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var1_0` is never read
   --> src/beta/dc.rs:207:25
    |
207 |                 let mut var1_0: libc::c_double = 0.;
    |                         ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/beta/dc.rs:84:5
   |
84 |     mut stream_in: *mut ti_stream,
   |     ----^^^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/dc.rs:85:5
   |
85 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/dc.rs:86:5
   |
86 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/dc.rs:87:5
   |
87 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/dc.rs:89:9
   |
89 |     let mut stream: *mut ti_stream_de = stream_in as *mut ti_stream_de;
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/dc.rs:91:9
   |
91 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
  --> src/beta/fi.rs:23:42
   |
23 | pub unsafe extern "C" fn ti_fi_start(mut options: *const libc::c_double) -> libc::c_int {
   |                                          ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/beta/fi.rs:23:38
   |
23 | pub unsafe extern "C" fn ti_fi_start(mut options: *const libc::c_double) -> libc::c_int {
   |                                      ----^^^^^^^
   |                                      |
   |                                      help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/fi.rs:28:5
   |
28 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/fi.rs:29:5
   |
29 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/fi.rs:30:5
   |
30 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/fi.rs:31:5
   |
31 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/fi.rs:33:9
   |
33 |     let mut close: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/fi.rs:34:9
   |
34 |     let mut volume: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/fi.rs:62:5
   |
62 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/fi.rs:63:5
   |
63 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/fi.rs:64:5
   |
64 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/fi.rs:65:5
   |
65 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/fi.rs:67:9
   |
67 |     let mut close: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/fi.rs:68:9
   |
68 |     let mut volume: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/fi.rs:90:44
   |
90 | pub unsafe extern "C" fn ti_fi_stream_free(mut stream: *mut ti_stream) {
   |                                            ----^^^^^^
   |                                            |
   |                                            help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/fi.rs:95:5
   |
95 |     mut stream_in: *mut ti_stream,
   |     ----^^^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/fi.rs:96:5
   |
96 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/fi.rs:97:5
   |
97 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/fi.rs:98:5
   |
98 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/fi.rs:100:9
    |
100 |     let mut stream: *mut ti_stream_fi = stream_in as *mut ti_stream_fi;
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/fi.rs:102:9
    |
102 |     let mut close: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/fi.rs:103:9
    |
103 |     let mut volume: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/fi.rs:105:9
    |
105 |     let mut per: libc::c_double = (*stream).per;
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/ikhts.rs:27:5
   |
27 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
   --> src/beta/ikhts.rs:135:13
    |
135 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/beta/ikhts.rs:33:5
   |
33 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/ikhts.rs:34:5
   |
34 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/ikhts.rs:35:5
   |
35 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/ikhts.rs:36:5
   |
36 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/ikhts.rs:47:9
   |
47 |     let mut buff: *mut libc::c_double = malloc(
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
  --> src/beta/kc.rs:41:42
   |
41 | pub unsafe extern "C" fn ti_kc_start(mut options: *const libc::c_double) -> libc::c_int {
   |                                          ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/beta/kc.rs:41:38
   |
41 | pub unsafe extern "C" fn ti_kc_start(mut options: *const libc::c_double) -> libc::c_int {
   |                                      ----^^^^^^^
   |                                      |
   |                                      help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/kc.rs:98:5
   |
98 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/kc.rs:99:5
   |
99 |     mut stream_in: *mut *mut ti_stream,
   |     ----^^^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/kc.rs:101:9
    |
101 |     let mut stream: *mut *mut ti_stream_kc = stream_in as *mut *mut ti_stream_kc;
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/kc.rs:145:44
    |
145 | pub unsafe extern "C" fn ti_kc_stream_free(mut stream: *mut ti_stream) {
    |                                            ----^^^^^^
    |                                            |
    |                                            help: remove this `mut`

warning: value assigned to `var1` is never read
   --> src/beta/kc.rs:167:13
    |
167 |     let mut var1: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
   --> src/beta/kc.rs:170:13
    |
170 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `truerange` is never read
   --> src/beta/kc.rs:221:17
    |
221 |         let mut truerange: libc::c_double = 0.;
    |                 ^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src/beta/kc.rs:150:5
    |
150 |     mut stream_in: *mut ti_stream,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/kc.rs:151:5
    |
151 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/kc.rs:152:5
    |
152 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/kc.rs:153:5
    |
153 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/kc.rs:155:9
    |
155 |     let mut stream: *mut ti_stream_kc = stream_in as *mut ti_stream_kc;
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/kc.rs:159:9
    |
159 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/kc.rs:160:9
    |
160 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/kc.rs:161:9
    |
161 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/kst.rs:28:5
   |
28 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `max_ma` is never read
  --> src/beta/kst.rs:62:13
   |
62 |     let mut max_ma: libc::c_double = 0.;
   |             ^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `max_ma` is never read
  --> src/beta/kst.rs:71:9
   |
71 |         max_ma = ma4 as libc::c_double;
   |         ^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/beta/kst.rs:35:5
   |
35 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/kst.rs:36:5
   |
36 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/kst.rs:37:5
   |
37 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/kst.rs:38:5
   |
38 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/kst.rs:40:9
   |
40 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/kst.rs:73:9
   |
73 |     let mut per1: libc::c_double = 2.0f64 / (ma1 + 1 as libc::c_int) as libc::c_double;
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/kst.rs:74:9
   |
74 |     let mut per2: libc::c_double = 2.0f64 / (ma2 + 1 as libc::c_int) as libc::c_double;
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/kst.rs:75:9
   |
75 |     let mut per3: libc::c_double = 2.0f64 / (ma3 + 1 as libc::c_int) as libc::c_double;
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/kst.rs:76:9
   |
76 |     let mut per4: libc::c_double = 2.0f64 / (ma4 + 1 as libc::c_int) as libc::c_double;
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/kst.rs:77:9
   |
77 |     let mut per_signal: libc::c_double = 2.0f64 / (9.0f64 + 1.0f64);
   |         ----^^^^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/kst.rs:186:5
    |
186 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/kst.rs:187:5
    |
187 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/kst.rs:188:5
    |
188 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/kst.rs:189:5
    |
189 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/kst.rs:192:9
    |
192 |     let mut roc: *const libc::c_double = options;
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/kst.rs:193:9
    |
193 |     let mut ma: *const libc::c_double = options.offset(4 as libc::c_int as isize);
    |         ----^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `options`
   --> src/beta/mama.rs:181:9
    |
181 |     mut options: *const libc::c_double,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
   --> src/beta/mama.rs:181:5
    |
181 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: value assigned to `data_0` is never read
   --> src/beta/mama.rs:206:13
    |
206 |     let mut data_0: *mut data = 0 as *mut data;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var1` is never read
   --> src/beta/mama.rs:525:13
    |
525 |     let mut var1: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var2` is never read
   --> src/beta/mama.rs:526:13
    |
526 |     let mut var2: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var3` is never read
   --> src/beta/mama.rs:527:13
    |
527 |     let mut var3: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var4` is never read
   --> src/beta/mama.rs:528:13
    |
528 |     let mut var4: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var5` is never read
   --> src/beta/mama.rs:529:13
    |
529 |     let mut var5: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src/beta/mama.rs:187:5
    |
187 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/mama.rs:188:5
    |
188 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/mama.rs:189:5
    |
189 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/mama.rs:190:5
    |
190 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/mama.rs:192:9
    |
192 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/mama.rs:205:9
    |
205 |     let mut price: *const libc::c_double = real;
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1372:5
     |
1372 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1373:5
     |
1373 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1374:5
     |
1374 |     mut options: *const libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1375:5
     |
1375 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1377:9
     |
1377 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1390:9
     |
1390 |     let mut price: *const libc::c_double = real;
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1392:9
     |
1392 |     let mut smooth: *mut libc::c_double = calloc(
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1396:9
     |
1396 |     let mut detrender: *mut libc::c_double = calloc(
     |         ----^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1400:9
     |
1400 |     let mut I1: *mut libc::c_double = calloc(
     |         ----^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1404:9
     |
1404 |     let mut Q1: *mut libc::c_double = calloc(
     |         ----^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1408:9
     |
1408 |     let mut jI: *mut libc::c_double = calloc(
     |         ----^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1412:9
     |
1412 |     let mut jQ: *mut libc::c_double = calloc(
     |         ----^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1416:9
     |
1416 |     let mut I2: *mut libc::c_double = calloc(
     |         ----^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1420:9
     |
1420 |     let mut Q2: *mut libc::c_double = calloc(
     |         ----^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1424:9
     |
1424 |     let mut Re: *mut libc::c_double = calloc(
     |         ----^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1428:9
     |
1428 |     let mut Im: *mut libc::c_double = calloc(
     |         ----^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1432:9
     |
1432 |     let mut period: *mut libc::c_double = calloc(
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1436:9
     |
1436 |     let mut smoothperiod: *mut libc::c_double = calloc(
     |         ----^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1440:9
     |
1440 |     let mut phase: *mut libc::c_double = calloc(
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1444:9
     |
1444 |     let mut deltaphase: *mut libc::c_double = calloc(
     |         ----^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1448:9
     |
1448 |     let mut alpha: *mut libc::c_double = calloc(
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: value assigned to `i` is never read
    --> src/beta/mama.rs:1639:13
     |
1639 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `var1` is never read
    --> src/beta/mama.rs:1813:17
     |
1813 |         let mut var1: libc::c_double = 0.;
     |                 ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `var2` is never read
    --> src/beta/mama.rs:1814:17
     |
1814 |         let mut var2: libc::c_double = 0.;
     |                 ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `var3` is never read
    --> src/beta/mama.rs:1815:17
     |
1815 |         let mut var3: libc::c_double = 0.;
     |                 ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `var4` is never read
    --> src/beta/mama.rs:1816:17
     |
1816 |         let mut var4: libc::c_double = 0.;
     |                 ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `var5` is never read
    --> src/beta/mama.rs:1817:17
     |
1817 |         let mut var5: libc::c_double = 0.;
     |                 ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1625:5
     |
1625 |     mut stream_in: *mut ti_stream,
     |     ----^^^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1626:5
     |
1626 |     mut size: libc::c_int,
     |     ----^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1627:5
     |
1627 |     mut inputs: *const *const libc::c_double,
     |     ----^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1628:5
     |
1628 |     mut outputs: *const *mut libc::c_double,
     |     ----^^^^^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1630:9
     |
1630 |     let mut stream: *mut ti_stream_mama = stream_in as *mut ti_stream_mama;
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1632:9
     |
1632 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:1637:9
     |
1637 |     let mut price: *const libc::c_double = real;
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/beta/mama.rs:2721:46
     |
2721 | pub unsafe extern "C" fn ti_mama_stream_free(mut stream: *mut ti_stream) {
     |                                              ----^^^^^^
     |                                              |
     |                                              help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pbands.rs:63:5
   |
63 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/beta/pbands.rs:95:13
   |
95 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/beta/pbands.rs:70:5
   |
70 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pbands.rs:71:5
   |
71 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pbands.rs:72:5
   |
72 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pbands.rs:73:5
   |
73 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pbands.rs:75:9
   |
75 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pbands.rs:76:9
   |
76 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pbands.rs:77:9
   |
77 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:105:9
    |
105 |     let mut b: libc::c_double = (xy_sum / period as libc::c_double
    |         ----^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:138:13
    |
138 |         let mut b_0: libc::c_double = (xy_sum / period as libc::c_double
    |             ----^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:177:5
    |
177 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:178:5
    |
178 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:179:5
    |
179 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:180:5
    |
180 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:182:9
    |
182 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:183:9
    |
183 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:196:9
    |
196 |     let mut start: libc::c_int = ti_linregslope_start(options);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:243:48
    |
243 | pub unsafe extern "C" fn ti_pbands_stream_free(mut stream: *mut ti_stream) {
    |                                                ----^^^^^^
    |                                                |
    |                                                help: remove this `mut`

warning: value assigned to `var1` is never read
   --> src/beta/pbands.rs:268:13
    |
268 |     let mut var1: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:248:5
    |
248 |     mut stream_in: *mut ti_stream,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:249:5
    |
249 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:250:5
    |
250 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:251:5
    |
251 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:253:9
    |
253 |     let mut stream: *mut ti_stream_pbands = stream_in as *mut ti_stream_pbands;
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:254:9
    |
254 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:255:9
    |
255 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:256:9
    |
256 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:312:13
    |
312 |         let mut b: libc::c_double = (xy_sum / period as libc::c_double
    |             ----^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pbands.rs:408:13
    |
408 |         let mut b_0: libc::c_double = (xy_sum / period as libc::c_double
    |             ----^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pc.rs:57:38
   |
57 | pub unsafe extern "C" fn ti_pc_start(mut options: *const libc::c_double) -> libc::c_int {
   |                                      ----^^^^^^^
   |                                      |
   |                                      help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pc.rs:63:5
   |
63 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pc.rs:64:5
   |
64 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pc.rs:65:5
   |
65 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pc.rs:66:5
   |
66 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pc.rs:84:44
   |
84 | pub unsafe extern "C" fn ti_pc_stream_free(mut stream: *mut ti_stream) {
   |                                            ----^^^^^^
   |                                            |
   |                                            help: remove this `mut`

warning: value assigned to `var1` is never read
   --> src/beta/pc.rs:203:25
    |
203 |                 let mut var1: libc::c_double = 0.;
    |                         ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var1_0` is never read
   --> src/beta/pc.rs:241:25
    |
241 |                 let mut var1_0: libc::c_double = 0.;
    |                         ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/beta/pc.rs:89:5
   |
89 |     mut stream_in: *mut ti_stream,
   |     ----^^^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pc.rs:90:5
   |
90 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pc.rs:91:5
   |
91 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pc.rs:92:5
   |
92 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pc.rs:94:9
   |
94 |     let mut stream: *mut ti_stream_pc = stream_in as *mut ti_stream_pc;
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pc.rs:96:9
   |
96 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pc.rs:97:9
   |
97 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pc.rs:100:9
    |
100 |     let mut period: libc::c_double = (*stream).options.period;
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pfe.rs:47:5
   |
47 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/beta/pfe.rs:72:13
   |
72 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/beta/pfe.rs:54:5
   |
54 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pfe.rs:55:5
   |
55 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pfe.rs:56:5
   |
56 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pfe.rs:57:5
   |
57 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pfe.rs:59:9
   |
59 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/pfe.rs:71:9
   |
71 |     let mut denom: *mut ti_buffer = ti_buffer_new(period);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pfe.rs:130:9
    |
130 |     let mut numer: libc::c_double = (if *real.offset(i as isize)
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pfe.rs:176:13
    |
176 |         let mut numer2: libc::c_double = (if *real.offset(i as isize)
    |             ----^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pfe.rs:239:5
    |
239 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pfe.rs:240:5
    |
240 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pfe.rs:241:5
    |
241 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pfe.rs:242:5
    |
242 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pfe.rs:244:9
    |
244 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pfe.rs:335:45
    |
335 | pub unsafe extern "C" fn ti_pfe_stream_free(mut stream: *mut ti_stream) {
    |                                             ----^^^^^^
    |                                             |
    |                                             help: remove this `mut`

warning: value assigned to `prev` is never read
   --> src/beta/pfe.rs:379:17
    |
379 |         let mut prev: libc::c_double = 0.;
    |                 ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `prev_0` is never read
   --> src/beta/pfe.rs:414:17
    |
414 |         let mut prev_0: libc::c_double = 0.;
    |                 ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `prev_1` is never read
   --> src/beta/pfe.rs:471:17
    |
471 |         let mut prev_1: libc::c_double = 0.;
    |                 ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src/beta/pfe.rs:340:5
    |
340 |     mut stream_in: *mut ti_stream,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pfe.rs:341:5
    |
341 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pfe.rs:342:5
    |
342 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pfe.rs:343:5
    |
343 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pfe.rs:345:9
    |
345 |     let mut stream: *mut ti_stream_pfe = stream_in as *mut ti_stream_pfe;
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pfe.rs:346:9
    |
346 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/pfe.rs:355:9
    |
355 |     let mut buffer: *mut [[libc::c_double; 2]; 0] = &mut (*stream).buffer;
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/posc.rs:71:5
   |
71 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `ema` is never read
   --> src/beta/posc.rs:101:13
    |
101 |     let mut ema: libc::c_double = 0.;
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
   --> src/beta/posc.rs:106:13
    |
106 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/beta/posc.rs:78:5
   |
78 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/posc.rs:79:5
   |
79 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/posc.rs:80:5
   |
80 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/posc.rs:81:5
   |
81 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/posc.rs:83:9
   |
83 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/posc.rs:84:9
   |
84 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/posc.rs:85:9
   |
85 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:116:9
    |
116 |     let mut b: libc::c_double = (xy_sum / period as libc::c_double
    |         ----^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:147:13
    |
147 |         let mut b_0: libc::c_double = (xy_sum / period as libc::c_double
    |             ----^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:173:13
    |
173 |         let mut osc: libc::c_double = (*close.offset(i as isize) - the_min_0)
    |             ----^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:187:5
    |
187 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:188:5
    |
188 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:189:5
    |
189 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:190:5
    |
190 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:192:9
    |
192 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:193:9
    |
193 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:207:9
    |
207 |     let mut start: libc::c_int = ti_linregslope_start(options);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:254:46
    |
254 | pub unsafe extern "C" fn ti_posc_stream_free(mut stream: *mut ti_stream) {
    |                                              ----^^^^^^
    |                                              |
    |                                              help: remove this `mut`

warning: value assigned to `var1` is never read
   --> src/beta/posc.rs:278:13
    |
278 |     let mut var1: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src/beta/posc.rs:259:5
    |
259 |     mut stream_in: *mut ti_stream,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:260:5
    |
260 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:261:5
    |
261 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:262:5
    |
262 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:264:9
    |
264 |     let mut stream: *mut ti_stream_posc = stream_in as *mut ti_stream_posc;
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:265:9
    |
265 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:266:9
    |
266 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:267:9
    |
267 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:320:13
    |
320 |         let mut b: libc::c_double = (xy_sum / period as libc::c_double
    |             ----^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:412:13
    |
412 |         let mut b_0: libc::c_double = (xy_sum / period as libc::c_double
    |             ----^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/posc.rs:456:13
    |
456 |         let mut osc: libc::c_double = (*close.offset(i as isize) - the_min_0)
    |             ----^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rmi.rs:54:5
   |
54 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `gains_ema` is never read
  --> src/beta/rmi.rs:81:13
   |
81 |     let mut gains_ema: libc::c_double = 0.;
   |             ^^^^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `losses_ema` is never read
  --> src/beta/rmi.rs:82:13
   |
82 |     let mut losses_ema: libc::c_double = 0.;
   |             ^^^^^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/beta/rmi.rs:62:5
   |
62 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rmi.rs:63:5
   |
63 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rmi.rs:64:5
   |
64 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rmi.rs:65:5
   |
65 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rmi.rs:67:9
   |
67 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rmi.rs:130:5
    |
130 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rmi.rs:131:5
    |
131 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rmi.rs:132:5
    |
132 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rmi.rs:133:5
    |
133 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rmi.rs:135:9
    |
135 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rmi.rs:149:9
    |
149 |     let mut start: libc::c_int = ti_rmi_start(options);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rmi.rs:212:45
    |
212 | pub unsafe extern "C" fn ti_rmi_stream_free(mut stream: *mut ti_stream) {
    |                                             ----^^^^^^
    |                                             |
    |                                             help: remove this `mut`

warning: value assigned to `var1` is never read
   --> src/beta/rmi.rs:231:13
    |
231 |     let mut var1: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src/beta/rmi.rs:217:5
    |
217 |     mut stream_in: *mut ti_stream,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rmi.rs:218:5
    |
218 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rmi.rs:219:5
    |
219 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rmi.rs:220:5
    |
220 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rmi.rs:222:9
    |
222 |     let mut stream: *mut ti_stream_rmi = stream_in as *mut ti_stream_rmi;
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rmi.rs:223:9
    |
223 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rmta.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rmta.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rmta.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rmta.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rmta.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rmta.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rmta.rs:42:13
   |
42 |         let mut next_b: libc::c_double = (1.0f64 - alpha) * b
   |             ----^^^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rmta.rs:52:13
   |
52 |         let mut next_b_0: libc::c_double = (1.0f64 - alpha) * b
   |             ----^^^^^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rvi.rs:50:5
   |
50 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rvi.rs:58:5
   |
58 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rvi.rs:59:5
   |
59 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rvi.rs:60:5
   |
60 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rvi.rs:61:5
   |
61 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rvi.rs:63:9
   |
63 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/rvi.rs:96:9
   |
96 |     let mut b: libc::c_double = (xy_sum / stddev_period as libc::c_double
   |         ----^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:102:9
    |
102 |     let mut a: libc::c_double = y_sum / stddev_period as libc::c_double
    |         ----^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:104:9
    |
104 |     let mut higher: libc::c_double = *real.offset(i as isize)
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:125:13
    |
125 |         let mut b_0: libc::c_double = (xy_sum / stddev_period as libc::c_double
    |             ----^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:131:13
    |
131 |         let mut a_0: libc::c_double = y_sum / stddev_period as libc::c_double
    |             ----^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:133:13
    |
133 |         let mut higher_0: libc::c_double = *real.offset(i as isize)
    |             ----^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:159:45
    |
159 | pub unsafe extern "C" fn ti_rvi_stream_free(mut stream: *mut ti_stream) {
    |                                             ----^^^^^^
    |                                             |
    |                                             help: remove this `mut`

warning: value assigned to `var1` is never read
   --> src/beta/rvi.rs:182:13
    |
182 |     let mut var1: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:164:5
    |
164 |     mut stream_in: *mut ti_stream,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:165:5
    |
165 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:166:5
    |
166 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:167:5
    |
167 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:169:9
    |
169 |     let mut stream: *mut ti_stream_rvi = stream_in as *mut ti_stream_rvi;
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:170:9
    |
170 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:179:9
    |
179 |     let mut x_sum: libc::c_double = (*stream).constants.x_sum;
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:180:9
    |
180 |     let mut xsq_sum: libc::c_double = (*stream).constants.xsq_sum;
    |         ----^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:206:13
    |
206 |         let mut b: libc::c_double = (xy_sum / stddev_period as libc::c_double
    |             ----^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:212:13
    |
212 |         let mut a: libc::c_double = y_sum / stddev_period as libc::c_double
    |             ----^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:214:13
    |
214 |         let mut higher: libc::c_double = *real.offset(i as isize)
    |             ----^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:256:13
    |
256 |         let mut b_0: libc::c_double = (xy_sum / stddev_period as libc::c_double
    |             ----^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:262:13
    |
262 |         let mut a_0: libc::c_double = y_sum / stddev_period as libc::c_double
    |             ----^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/rvi.rs:264:13
    |
264 |         let mut higher_0: libc::c_double = *real.offset(i as isize)
    |             ----^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/smi.rs:72:5
   |
72 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `var1` is never read
   --> src/beta/smi.rs:112:13
    |
112 |     let mut var1: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/beta/smi.rs:80:5
   |
80 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/smi.rs:81:5
   |
81 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/smi.rs:82:5
   |
82 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/smi.rs:83:5
   |
83 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/smi.rs:85:9
   |
85 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/smi.rs:86:9
   |
86 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/smi.rs:87:9
   |
87 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: value assigned to `i_0` is never read
   --> src/beta/smi.rs:256:13
    |
256 |     let mut i_0: libc::c_int = 0;
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src/beta/smi.rs:215:5
    |
215 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/smi.rs:216:5
    |
216 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/smi.rs:217:5
    |
217 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/smi.rs:218:5
    |
218 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/smi.rs:220:9
    |
220 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/smi.rs:221:9
    |
221 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/smi.rs:222:9
    |
222 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/smi.rs:226:9
    |
226 |     let mut smi: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/smi.rs:294:45
    |
294 | pub unsafe extern "C" fn ti_smi_stream_free(mut stream: *mut ti_stream) {
    |                                             ----^^^^^^
    |                                             |
    |                                             help: remove this `mut`

warning: value assigned to `var1` is never read
   --> src/beta/smi.rs:321:13
    |
321 |     let mut var1: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src/beta/smi.rs:299:5
    |
299 |     mut stream_in: *mut ti_stream,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/smi.rs:300:5
    |
300 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/smi.rs:301:5
    |
301 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/smi.rs:302:5
    |
302 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/smi.rs:304:9
    |
304 |     let mut stream: *mut ti_stream_smi = stream_in as *mut ti_stream_smi;
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/smi.rs:305:9
    |
305 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/smi.rs:306:9
    |
306 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/smi.rs:307:9
    |
307 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `options`
  --> src/beta/tsi.rs:52:9
   |
52 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/beta/tsi.rs:52:5
   |
52 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/tsi.rs:58:5
   |
58 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/tsi.rs:59:5
   |
59 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/tsi.rs:60:5
   |
60 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/tsi.rs:61:5
   |
61 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/tsi.rs:63:9
   |
63 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/tsi.rs:133:5
    |
133 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/tsi.rs:134:5
    |
134 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/tsi.rs:135:5
    |
135 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/tsi.rs:136:5
    |
136 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/tsi.rs:151:9
    |
151 |     let mut outsize: libc::c_int = size - ti_mom_start(&mut _one);
    |         ----^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/tsi.rs:191:45
    |
191 | pub unsafe extern "C" fn ti_tsi_stream_free(mut stream: *mut ti_stream) {
    |                                             ----^^^^^^
    |                                             |
    |                                             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/tsi.rs:196:5
    |
196 |     mut stream_in: *mut ti_stream,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/tsi.rs:197:5
    |
197 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/tsi.rs:198:5
    |
198 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/tsi.rs:199:5
    |
199 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/tsi.rs:201:9
    |
201 |     let mut stream: *mut ti_stream_tsi = stream_in as *mut ti_stream_tsi;
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/tsi.rs:202:9
    |
202 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/vwap.rs:60:5
   |
60 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/vwap.rs:66:5
   |
66 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/vwap.rs:67:5
   |
67 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/vwap.rs:68:5
   |
68 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/vwap.rs:69:5
   |
69 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/vwap.rs:71:9
   |
71 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/vwap.rs:72:9
   |
72 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/vwap.rs:73:9
   |
73 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/beta/vwap.rs:74:9
   |
74 |     let mut volume: *const libc::c_double = *inputs.offset(3 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: value assigned to `i` is never read
   --> src/beta/vwap.rs:139:13
    |
139 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src/beta/vwap.rs:120:5
    |
120 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/vwap.rs:121:5
    |
121 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/vwap.rs:122:5
    |
122 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/vwap.rs:123:5
    |
123 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/vwap.rs:125:9
    |
125 |     let mut volume: *const libc::c_double = *inputs.offset(3 as libc::c_int as isize);
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/vwap.rs:131:9
    |
131 |     let mut outsize: libc::c_int = size - ti_typprice_start(&period);
    |         ----^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/vwap.rs:168:46
    |
168 | pub unsafe extern "C" fn ti_vwap_stream_free(mut stream: *mut ti_stream) {
    |                                              ----^^^^^^
    |                                              |
    |                                              help: remove this `mut`

warning: value assigned to `var1` is never read
   --> src/beta/vwap.rs:188:13
    |
188 |     let mut var1: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var2` is never read
   --> src/beta/vwap.rs:189:13
    |
189 |     let mut var2: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var3` is never read
   --> src/beta/vwap.rs:190:13
    |
190 |     let mut var3: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `var4` is never read
   --> src/beta/vwap.rs:191:13
    |
191 |     let mut var4: libc::c_double = 0.;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src/beta/vwap.rs:173:5
    |
173 |     mut stream_in: *mut ti_stream,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/vwap.rs:174:5
    |
174 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/vwap.rs:175:5
    |
175 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/vwap.rs:176:5
    |
176 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/vwap.rs:178:9
    |
178 |     let mut stream: *mut ti_stream_vwap = stream_in as *mut ti_stream_vwap;
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/vwap.rs:179:9
    |
179 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/vwap.rs:180:9
    |
180 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/vwap.rs:181:9
    |
181 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/beta/vwap.rs:182:9
    |
182 |     let mut volume: *const libc::c_double = *inputs.offset(3 as libc::c_int as isize);
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `options`
 --> src/indicators/abs.rs:7:9
  |
7 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
 --> src/indicators/abs.rs:7:5
  |
7 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/abs.rs:20:13
   |
20 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/abs.rs:15:9
   |
15 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/abs.rs:13:5
   |
13 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/abs.rs:14:5
   |
14 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/abs.rs:15:5
   |
15 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/abs.rs:16:5
   |
16 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/abs.rs:18:9
   |
18 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/abs.rs:19:9
   |
19 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
 --> src/indicators/acos.rs:7:9
  |
7 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
 --> src/indicators/acos.rs:7:5
  |
7 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/acos.rs:20:13
   |
20 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/acos.rs:15:9
   |
15 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/acos.rs:13:5
   |
13 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/acos.rs:14:5
   |
14 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/acos.rs:15:5
   |
15 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/acos.rs:16:5
   |
16 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/acos.rs:18:9
   |
18 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/acos.rs:19:9
   |
19 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
 --> src/indicators/ad.rs:3:42
  |
3 | pub unsafe extern "C" fn ti_ad_start(mut options: *const libc::c_double) -> libc::c_int {
  |                                          ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
 --> src/indicators/ad.rs:3:38
  |
3 | pub unsafe extern "C" fn ti_ad_start(mut options: *const libc::c_double) -> libc::c_int {
  |                                      ----^^^^^^^
  |                                      |
  |                                      help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/ad.rs:19:13
   |
19 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/ad.rs:10:9
   |
10 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
 --> src/indicators/ad.rs:8:5
  |
8 |     mut size: libc::c_int,
  |     ----^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/ad.rs:9:5
  |
9 |     mut inputs: *const *const libc::c_double,
  |     ----^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ad.rs:10:5
   |
10 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ad.rs:11:5
   |
11 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ad.rs:13:9
   |
13 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ad.rs:14:9
   |
14 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ad.rs:15:9
   |
15 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ad.rs:16:9
   |
16 |     let mut volume: *const libc::c_double = *inputs.offset(3 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ad.rs:17:9
   |
17 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
 --> src/indicators/add.rs:4:9
  |
4 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
 --> src/indicators/add.rs:4:5
  |
4 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/add.rs:18:13
   |
18 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/add.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/add.rs:10:5
   |
10 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/add.rs:11:5
   |
11 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/add.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/add.rs:13:5
   |
13 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/add.rs:15:9
   |
15 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/add.rs:16:9
   |
16 |     let mut in2: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/add.rs:17:9
   |
17 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adosc.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/adosc.rs:49:13
   |
49 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/adosc.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adosc.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adosc.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adosc.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adosc.rs:23:9
   |
23 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adosc.rs:24:9
   |
24 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adosc.rs:25:9
   |
25 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adosc.rs:26:9
   |
26 |     let mut volume: *const libc::c_double = *inputs.offset(3 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adx.rs:13:5
   |
13 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/adx.rs:40:13
   |
40 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dp` is never read
  --> src/indicators/adx.rs:43:17
   |
43 |         let mut dp: libc::c_double = 0.;
   |                 ^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dm` is never read
  --> src/indicators/adx.rs:44:17
   |
44 |         let mut dm: libc::c_double = 0.;
   |                 ^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dp_0` is never read
  --> src/indicators/adx.rs:71:17
   |
71 |         let mut dp_0: libc::c_double = 0.;
   |                 ^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dm_0` is never read
  --> src/indicators/adx.rs:72:17
   |
72 |         let mut dm_0: libc::c_double = 0.;
   |                 ^^^^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/adx.rs:20:5
   |
20 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adx.rs:21:5
   |
21 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adx.rs:22:5
   |
22 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adx.rs:23:5
   |
23 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adx.rs:25:9
   |
25 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adx.rs:26:9
   |
26 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adx.rs:63:9
   |
63 |     let mut di_up: libc::c_double = dmup;
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adx.rs:64:9
   |
64 |     let mut di_down: libc::c_double = dmdown;
   |         ----^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adx.rs:65:9
   |
65 |     let mut dm_diff: libc::c_double = fabs(di_up - di_down);
   |         ----^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adx.rs:66:9
   |
66 |     let mut dm_sum: libc::c_double = di_up + di_down;
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adx.rs:67:9
   |
67 |     let mut dx: libc::c_double = dm_diff / dm_sum * 100 as libc::c_int as libc::c_double;
   |         ----^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adx.rs:87:13
   |
87 |         let mut di_up_0: libc::c_double = dmup;
   |             ----^^^^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adx.rs:88:13
   |
88 |         let mut di_down_0: libc::c_double = dmdown;
   |             ----^^^^^^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adx.rs:89:13
   |
89 |         let mut dm_diff_0: libc::c_double = fabs(di_up_0 - di_down_0);
   |             ----^^^^^^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adx.rs:90:13
   |
90 |         let mut dm_sum_0: libc::c_double = di_up_0 + di_down_0;
   |             ----^^^^^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adx.rs:91:13
   |
91 |         let mut dx_0: libc::c_double = dm_diff_0 / dm_sum_0
   |             ----^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adxr.rs:24:5
   |
24 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/adxr.rs:51:13
   |
51 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dp` is never read
  --> src/indicators/adxr.rs:54:17
   |
54 |         let mut dp: libc::c_double = 0.;
   |                 ^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dm` is never read
  --> src/indicators/adxr.rs:55:17
   |
55 |         let mut dm: libc::c_double = 0.;
   |                 ^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dp_0` is never read
  --> src/indicators/adxr.rs:84:17
   |
84 |         let mut dp_0: libc::c_double = 0.;
   |                 ^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dm_0` is never read
  --> src/indicators/adxr.rs:85:17
   |
85 |         let mut dm_0: libc::c_double = 0.;
   |                 ^^^^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/adxr.rs:31:5
   |
31 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adxr.rs:32:5
   |
32 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adxr.rs:33:5
   |
33 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adxr.rs:34:5
   |
34 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adxr.rs:36:9
   |
36 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adxr.rs:37:9
   |
37 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adxr.rs:74:9
   |
74 |     let mut di_up: libc::c_double = dmup;
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adxr.rs:75:9
   |
75 |     let mut di_down: libc::c_double = dmdown;
   |         ----^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adxr.rs:76:9
   |
76 |     let mut dm_diff: libc::c_double = fabs(di_up - di_down);
   |         ----^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adxr.rs:77:9
   |
77 |     let mut dm_sum: libc::c_double = di_up + di_down;
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adxr.rs:78:9
   |
78 |     let mut dx: libc::c_double = dm_diff / dm_sum * 100 as libc::c_int as libc::c_double;
   |         ----^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/adxr.rs:80:9
   |
80 |     let mut adxr: *mut ti_buffer = ti_buffer_new(period - 1 as libc::c_int);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/adxr.rs:100:13
    |
100 |         let mut di_up_0: libc::c_double = dmup;
    |             ----^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/adxr.rs:101:13
    |
101 |         let mut di_down_0: libc::c_double = dmdown;
    |             ----^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/adxr.rs:102:13
    |
102 |         let mut dm_diff_0: libc::c_double = fabs(di_up_0 - di_down_0);
    |             ----^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/adxr.rs:103:13
    |
103 |         let mut dm_sum_0: libc::c_double = di_up_0 + di_down_0;
    |             ----^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/adxr.rs:104:13
    |
104 |         let mut dx_0: libc::c_double = dm_diff_0 / dm_sum_0
    |             ----^^^^
    |             |
    |             help: remove this `mut`

warning: unused variable: `options`
  --> src/indicators/ao.rs:11:42
   |
11 | pub unsafe extern "C" fn ti_ao_start(mut options: *const libc::c_double) -> libc::c_int {
   |                                          ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/ao.rs:11:38
   |
11 | pub unsafe extern "C" fn ti_ao_start(mut options: *const libc::c_double) -> libc::c_int {
   |                                      ----^^^^^^^
   |                                      |
   |                                      help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/ao.rs:32:13
   |
32 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/ao.rs:16:5
   |
16 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ao.rs:17:5
   |
17 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ao.rs:18:5
   |
18 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ao.rs:19:5
   |
19 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ao.rs:21:9
   |
21 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ao.rs:22:9
   |
22 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ao.rs:35:13
   |
35 |         let mut hl: libc::c_double = 0.5f64
   |             ----^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ao.rs:49:13
   |
49 |         let mut hl_0: libc::c_double = 0.5f64
   |             ----^^^^
   |             |
   |             help: remove this `mut`

warning: unused variable: `options`
  --> src/indicators/apo.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/apo.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/apo.rs:47:13
   |
47 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/apo.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/apo.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/apo.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/apo.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/apo.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/apo.rs:41:9
   |
41 |     let mut short_per: libc::c_double = 2 as libc::c_int as libc::c_double
   |         ----^^^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/apo.rs:43:9
   |
43 |     let mut long_per: libc::c_double = 2 as libc::c_int as libc::c_double
   |         ----^^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/aroon.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `bar` is never read
  --> src/indicators/aroon.rs:40:13
   |
40 |     let mut bar: libc::c_double = 0.;
   |             ^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/aroon.rs:41:13
   |
41 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
  --> src/indicators/aroon.rs:42:13
   |
42 |     let mut j: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/aroon.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/aroon.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/aroon.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/aroon.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/aroon.rs:23:9
   |
23 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/aroon.rs:24:9
   |
24 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/aroonosc.rs:13:5
   |
13 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/aroonosc.rs:40:13
   |
40 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
  --> src/indicators/aroonosc.rs:41:13
   |
41 |     let mut j: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/aroonosc.rs:19:5
   |
19 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/aroonosc.rs:20:5
   |
20 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/aroonosc.rs:21:5
   |
21 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/aroonosc.rs:22:5
   |
22 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/aroonosc.rs:24:9
   |
24 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/aroonosc.rs:25:9
   |
25 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/asin.rs:14:13
   |
14 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
 --> src/indicators/asin.rs:9:9
  |
9 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
 --> src/indicators/asin.rs:7:5
  |
7 |     mut size: libc::c_int,
  |     ----^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/asin.rs:8:5
  |
8 |     mut inputs: *const *const libc::c_double,
  |     ----^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/asin.rs:9:5
  |
9 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/asin.rs:10:5
   |
10 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/asin.rs:12:9
   |
12 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/asin.rs:13:9
   |
13 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
  --> src/indicators/asin.rs:25:9
   |
25 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/asin.rs:25:5
   |
25 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: unused variable: `options`
 --> src/indicators/atan.rs:7:9
  |
7 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
 --> src/indicators/atan.rs:7:5
  |
7 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/atan.rs:20:13
   |
20 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/atan.rs:15:9
   |
15 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/atan.rs:13:5
   |
13 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/atan.rs:14:5
   |
14 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/atan.rs:15:5
   |
15 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/atan.rs:16:5
   |
16 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/atan.rs:18:9
   |
18 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/atan.rs:19:9
   |
19 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/atr.rs:40:5
   |
40 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `truerange` is never read
  --> src/indicators/atr.rs:64:13
   |
64 |     let mut truerange: libc::c_double = 0.;
   |             ^^^^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/atr.rs:68:13
   |
68 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/atr.rs:46:5
   |
46 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/atr.rs:47:5
   |
47 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/atr.rs:48:5
   |
48 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/atr.rs:49:5
   |
49 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/atr.rs:51:9
   |
51 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/atr.rs:52:9
   |
52 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/atr.rs:53:9
   |
53 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/atr.rs:135:5
    |
135 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/atr.rs:136:5
    |
136 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/atr.rs:137:5
    |
137 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/atr.rs:138:5
    |
138 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/atr.rs:149:9
    |
149 |     let mut truerange: *mut libc::c_double = malloc(
    |         ----^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/atr.rs:196:5
    |
196 |     mut options: *const libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/atr.rs:197:5
    |
197 |     mut stream_in: *mut *mut ti_stream,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/atr.rs:199:9
    |
199 |     let mut stream: *mut *mut ti_stream_atr = stream_in as *mut *mut ti_stream_atr;
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: value assigned to `truerange` is never read
   --> src/indicators/atr.rs:242:21
    |
242 |             let mut truerange: libc::c_double = 0.;
    |                     ^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `truerange_0` is never read
   --> src/indicators/atr.rs:276:21
    |
276 |             let mut truerange_0: libc::c_double = 0.;
    |                     ^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src/indicators/atr.rs:217:5
    |
217 |     mut stream_in: *mut ti_stream,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/atr.rs:218:5
    |
218 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/atr.rs:219:5
    |
219 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/atr.rs:220:5
    |
220 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/atr.rs:222:9
    |
222 |     let mut stream: *mut ti_stream_atr = stream_in as *mut ti_stream_atr;
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/atr.rs:223:9
    |
223 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/atr.rs:224:9
    |
224 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/atr.rs:225:9
    |
225 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/atr.rs:307:45
    |
307 | pub unsafe extern "C" fn ti_atr_stream_free(mut stream: *mut ti_stream) {
    |                                             ----^^^^^^
    |                                             |
    |                                             help: remove this `mut`

warning: unused variable: `options`
 --> src/indicators/avgprice.rs:4:9
  |
4 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
 --> src/indicators/avgprice.rs:4:5
  |
4 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/avgprice.rs:20:13
   |
20 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/avgprice.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/avgprice.rs:10:5
   |
10 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/avgprice.rs:11:5
   |
11 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/avgprice.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/avgprice.rs:13:5
   |
13 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/avgprice.rs:15:9
   |
15 |     let mut open: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/avgprice.rs:16:9
   |
16 |     let mut high: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/avgprice.rs:17:9
   |
17 |     let mut low: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/avgprice.rs:18:9
   |
18 |     let mut close: *const libc::c_double = *inputs.offset(3 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/avgprice.rs:19:9
   |
19 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/bbands.rs:13:5
   |
13 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/bbands.rs:39:13
   |
39 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/bbands.rs:19:5
   |
19 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/bbands.rs:20:5
   |
20 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/bbands.rs:21:5
   |
21 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/bbands.rs:22:5
   |
22 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/bbands.rs:24:9
   |
24 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
 --> src/indicators/bop.rs:4:9
  |
4 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
 --> src/indicators/bop.rs:4:5
  |
4 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/bop.rs:20:13
   |
20 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/bop.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/bop.rs:10:5
   |
10 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/bop.rs:11:5
   |
11 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/bop.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/bop.rs:13:5
   |
13 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/bop.rs:15:9
   |
15 |     let mut open: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/bop.rs:16:9
   |
16 |     let mut high: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/bop.rs:17:9
   |
17 |     let mut low: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/bop.rs:18:9
   |
18 |     let mut close: *const libc::c_double = *inputs.offset(3 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/bop.rs:19:9
   |
19 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/bop.rs:23:13
   |
23 |         let mut hl: libc::c_double = *high.offset(i as isize) - *low.offset(i as isize);
   |             ----^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cci.rs:24:5
   |
24 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/cci.rs:49:13
   |
49 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
  --> src/indicators/cci.rs:50:13
   |
50 |     let mut j: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/cci.rs:31:5
   |
31 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cci.rs:32:5
   |
32 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cci.rs:33:5
   |
33 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cci.rs:34:5
   |
34 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cci.rs:36:9
   |
36 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cci.rs:37:9
   |
37 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cci.rs:38:9
   |
38 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cci.rs:48:9
   |
48 |     let mut sum: *mut ti_buffer = ti_buffer_new(period);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
 --> src/indicators/ceil.rs:7:9
  |
7 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
 --> src/indicators/ceil.rs:7:5
  |
7 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/ceil.rs:20:13
   |
20 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/ceil.rs:15:9
   |
15 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/ceil.rs:13:5
   |
13 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ceil.rs:14:5
   |
14 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ceil.rs:15:5
   |
15 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ceil.rs:16:5
   |
16 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ceil.rs:18:9
   |
18 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ceil.rs:19:9
   |
19 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cmo.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/cmo.rs:34:13
   |
34 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/cmo.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cmo.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cmo.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cmo.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cmo.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
 --> src/indicators/cos.rs:7:9
  |
7 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
 --> src/indicators/cos.rs:7:5
  |
7 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/cos.rs:20:13
   |
20 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/cos.rs:15:9
   |
15 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/cos.rs:13:5
   |
13 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cos.rs:14:5
   |
14 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cos.rs:15:5
   |
15 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cos.rs:16:5
   |
16 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cos.rs:18:9
   |
18 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cos.rs:19:9
   |
19 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
 --> src/indicators/cosh.rs:7:9
  |
7 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
 --> src/indicators/cosh.rs:7:5
  |
7 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/cosh.rs:20:13
   |
20 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/cosh.rs:15:9
   |
15 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/cosh.rs:13:5
   |
13 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cosh.rs:14:5
   |
14 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cosh.rs:15:5
   |
15 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cosh.rs:16:5
   |
16 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cosh.rs:18:9
   |
18 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cosh.rs:19:9
   |
19 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
 --> src/indicators/crossany.rs:4:9
  |
4 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
 --> src/indicators/crossany.rs:4:5
  |
4 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/crossany.rs:18:13
   |
18 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/crossany.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/crossany.rs:10:5
   |
10 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/crossany.rs:11:5
   |
11 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/crossany.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/crossany.rs:13:5
   |
13 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/crossany.rs:15:9
   |
15 |     let mut a: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/crossany.rs:16:9
   |
16 |     let mut b: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
 --> src/indicators/crossover.rs:4:9
  |
4 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
 --> src/indicators/crossover.rs:4:5
  |
4 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/crossover.rs:18:13
   |
18 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/crossover.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/crossover.rs:10:5
   |
10 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/crossover.rs:11:5
   |
11 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/crossover.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/crossover.rs:13:5
   |
13 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/crossover.rs:15:9
   |
15 |     let mut a: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/crossover.rs:16:9
   |
16 |     let mut b: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cvi.rs:23:5
   |
23 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/cvi.rs:50:13
   |
50 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/cvi.rs:30:5
   |
30 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cvi.rs:31:5
   |
31 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cvi.rs:32:5
   |
32 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cvi.rs:33:5
   |
33 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cvi.rs:35:9
   |
35 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cvi.rs:36:9
   |
36 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/cvi.rs:47:9
   |
47 |     let mut lag: *mut ti_buffer = ti_buffer_new(period);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
 --> src/indicators/decay.rs:4:9
  |
4 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
 --> src/indicators/decay.rs:4:5
  |
4 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/decay.rs:22:13
   |
22 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/decay.rs:10:5
   |
10 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/decay.rs:11:5
   |
11 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/decay.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/decay.rs:13:5
   |
13 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/decay.rs:15:9
   |
15 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/decay.rs:25:13
   |
25 |         let mut d: libc::c_double = *output.offset(-(1 as libc::c_int) as isize) - scale;
   |             ----^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dema.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/dema.rs:38:13
   |
38 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/dema.rs:19:5
   |
19 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dema.rs:20:5
   |
20 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dema.rs:21:5
   |
21 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dema.rs:22:5
   |
22 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dema.rs:24:9
   |
24 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/di.rs:12:38
   |
12 | pub unsafe extern "C" fn ti_di_start(mut options: *const libc::c_double) -> libc::c_int {
   |                                      ----^^^^^^^
   |                                      |
   |                                      help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/di.rs:39:13
   |
39 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `truerange` is never read
  --> src/indicators/di.rs:42:17
   |
42 |         let mut truerange: libc::c_double = 0.;
   |                 ^^^^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dp` is never read
  --> src/indicators/di.rs:57:17
   |
57 |         let mut dp: libc::c_double = 0.;
   |                 ^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dm` is never read
  --> src/indicators/di.rs:58:17
   |
58 |         let mut dm: libc::c_double = 0.;
   |                 ^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `truerange_0` is never read
  --> src/indicators/di.rs:84:17
   |
84 |         let mut truerange_0: libc::c_double = 0.;
   |                 ^^^^^^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dp_0` is never read
  --> src/indicators/di.rs:99:17
   |
99 |         let mut dp_0: libc::c_double = 0.;
   |                 ^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dm_0` is never read
   --> src/indicators/di.rs:100:17
    |
100 |         let mut dm_0: libc::c_double = 0.;
    |                 ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/di.rs:17:5
   |
17 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/di.rs:18:5
   |
18 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/di.rs:19:5
   |
19 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/di.rs:20:5
   |
20 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/di.rs:22:9
   |
22 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/di.rs:23:9
   |
23 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/di.rs:24:9
   |
24 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/div.rs:12:13
   |
12 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
 --> src/indicators/div.rs:6:9
  |
6 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
 --> src/indicators/div.rs:4:5
  |
4 |     mut size: libc::c_int,
  |     ----^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/div.rs:5:5
  |
5 |     mut inputs: *const *const libc::c_double,
  |     ----^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/div.rs:6:5
  |
6 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/div.rs:7:5
  |
7 |     mut outputs: *const *mut libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/div.rs:9:9
  |
9 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
  |         ----^^^
  |         |
  |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/div.rs:10:9
   |
10 |     let mut in2: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/div.rs:11:9
   |
11 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
  --> src/indicators/div.rs:23:9
   |
23 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/div.rs:23:5
   |
23 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dm.rs:11:38
   |
11 | pub unsafe extern "C" fn ti_dm_start(mut options: *const libc::c_double) -> libc::c_int {
   |                                      ----^^^^^^^
   |                                      |
   |                                      help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/dm.rs:36:13
   |
36 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dp` is never read
  --> src/indicators/dm.rs:39:17
   |
39 |         let mut dp: libc::c_double = 0.;
   |                 ^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dm` is never read
  --> src/indicators/dm.rs:40:17
   |
40 |         let mut dm: libc::c_double = 0.;
   |                 ^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dp_0` is never read
  --> src/indicators/dm.rs:66:17
   |
66 |         let mut dp_0: libc::c_double = 0.;
   |                 ^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dm_0` is never read
  --> src/indicators/dm.rs:67:17
   |
67 |         let mut dm_0: libc::c_double = 0.;
   |                 ^^^^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/dm.rs:16:5
   |
16 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dm.rs:17:5
   |
17 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dm.rs:18:5
   |
18 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dm.rs:19:5
   |
19 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dm.rs:21:9
   |
21 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dm.rs:22:9
   |
22 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dpo.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/dpo.rs:35:13
   |
35 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/dpo.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dpo.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dpo.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dpo.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dpo.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dx.rs:12:38
   |
12 | pub unsafe extern "C" fn ti_dx_start(mut options: *const libc::c_double) -> libc::c_int {
   |                                      ----^^^^^^^
   |                                      |
   |                                      help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/dx.rs:36:13
   |
36 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dp` is never read
  --> src/indicators/dx.rs:39:17
   |
39 |         let mut dp: libc::c_double = 0.;
   |                 ^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dm` is never read
  --> src/indicators/dx.rs:40:17
   |
40 |         let mut dm: libc::c_double = 0.;
   |                 ^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dp_0` is never read
  --> src/indicators/dx.rs:68:17
   |
68 |         let mut dp_0: libc::c_double = 0.;
   |                 ^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `dm_0` is never read
  --> src/indicators/dx.rs:69:17
   |
69 |         let mut dm_0: libc::c_double = 0.;
   |                 ^^^^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/dx.rs:17:5
   |
17 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dx.rs:18:5
   |
18 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dx.rs:19:5
   |
19 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dx.rs:20:5
   |
20 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dx.rs:22:9
   |
22 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dx.rs:23:9
   |
23 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dx.rs:58:9
   |
58 |     let mut di_up: libc::c_double = dmup;
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dx.rs:59:9
   |
59 |     let mut di_down: libc::c_double = dmdown;
   |         ----^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dx.rs:60:9
   |
60 |     let mut dm_diff: libc::c_double = fabs(di_up - di_down);
   |         ----^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dx.rs:61:9
   |
61 |     let mut dm_sum: libc::c_double = di_up + di_down;
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dx.rs:62:9
   |
62 |     let mut dx: libc::c_double = dm_diff / dm_sum * 100 as libc::c_int as libc::c_double;
   |         ----^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dx.rs:84:13
   |
84 |         let mut di_up_0: libc::c_double = dmup;
   |             ----^^^^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dx.rs:85:13
   |
85 |         let mut di_down_0: libc::c_double = dmdown;
   |             ----^^^^^^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dx.rs:86:13
   |
86 |         let mut dm_diff_0: libc::c_double = fabs(di_up_0 - di_down_0);
   |             ----^^^^^^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dx.rs:87:13
   |
87 |         let mut dm_sum_0: libc::c_double = di_up_0 + di_down_0;
   |             ----^^^^^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/dx.rs:88:13
   |
88 |         let mut dx_0: libc::c_double = dm_diff_0 / dm_sum_0
   |             ----^^^^
   |             |
   |             help: remove this `mut`

warning: unused variable: `options`
 --> src/indicators/edecay.rs:4:9
  |
4 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
 --> src/indicators/edecay.rs:4:5
  |
4 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/edecay.rs:22:13
   |
22 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/edecay.rs:10:5
   |
10 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/edecay.rs:11:5
   |
11 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/edecay.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/edecay.rs:13:5
   |
13 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/edecay.rs:15:9
   |
15 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/edecay.rs:25:13
   |
25 |         let mut d: libc::c_double = *output.offset(-(1 as libc::c_int) as isize) * scale;
   |             ----^
   |             |
   |             help: remove this `mut`

warning: unused variable: `options`
  --> src/indicators/ema.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/ema.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/ema.rs:38:13
   |
38 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/ema.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ema.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ema.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ema.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ema.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
  --> src/indicators/emv.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/emv.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/emv.rs:32:13
   |
32 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/emv.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/emv.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/emv.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/emv.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/emv.rs:23:9
   |
23 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/emv.rs:24:9
   |
24 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/emv.rs:25:9
   |
25 |     let mut volume: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/emv.rs:35:13
   |
35 |         let mut hl: libc::c_double = (*high.offset(i as isize) + *low.offset(i as isize))
   |             ----^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/emv.rs:37:13
   |
37 |         let mut br: libc::c_double = *volume.offset(i as isize) / 10000.0f64
   |             ----^^
   |             |
   |             help: remove this `mut`

warning: unused variable: `options`
 --> src/indicators/exp.rs:7:9
  |
7 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
 --> src/indicators/exp.rs:7:5
  |
7 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/exp.rs:20:13
   |
20 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/exp.rs:15:9
   |
15 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/exp.rs:13:5
   |
13 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/exp.rs:14:5
   |
14 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/exp.rs:15:5
   |
15 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/exp.rs:16:5
   |
16 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/exp.rs:18:9
   |
18 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/exp.rs:19:9
   |
19 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/fisher.rs:13:5
   |
13 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `bar` is never read
  --> src/indicators/fisher.rs:45:13
   |
45 |     let mut bar: libc::c_double = 0.;
   |             ^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/fisher.rs:47:13
   |
47 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
  --> src/indicators/fisher.rs:48:13
   |
48 |     let mut j: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/fisher.rs:19:5
   |
19 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/fisher.rs:20:5
   |
20 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/fisher.rs:21:5
   |
21 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/fisher.rs:22:5
   |
22 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/fisher.rs:24:9
   |
24 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/fisher.rs:25:9
   |
25 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/floor.rs:14:13
   |
14 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
 --> src/indicators/floor.rs:9:9
  |
9 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
 --> src/indicators/floor.rs:7:5
  |
7 |     mut size: libc::c_int,
  |     ----^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/floor.rs:8:5
  |
8 |     mut inputs: *const *const libc::c_double,
  |     ----^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/floor.rs:9:5
  |
9 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/floor.rs:10:5
   |
10 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/floor.rs:12:9
   |
12 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/floor.rs:13:9
   |
13 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
  --> src/indicators/floor.rs:25:9
   |
25 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/floor.rs:25:5
   |
25 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/fosc.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/fosc.rs:38:13
   |
38 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/fosc.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/fosc.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/fosc.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/fosc.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/fosc.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/hma.rs:24:5
   |
24 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/hma.rs:60:13
   |
60 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/hma.rs:32:5
   |
32 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/hma.rs:33:5
   |
33 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/hma.rs:34:5
   |
34 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/hma.rs:35:5
   |
35 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/hma.rs:37:9
   |
37 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/hma.rs:75:9
   |
75 |     let mut buff: *mut ti_buffer = ti_buffer_new(periodsqrt);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/kama.rs:14:5
   |
14 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/kama.rs:39:13
   |
39 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `er` is never read
  --> src/indicators/kama.rs:54:13
   |
54 |     let mut er: libc::c_double = 0.;
   |             ^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `sc` is never read
  --> src/indicators/kama.rs:55:13
   |
55 |     let mut sc: libc::c_double = 0.;
   |             ^^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/kama.rs:20:5
   |
20 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/kama.rs:21:5
   |
21 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/kama.rs:22:5
   |
22 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/kama.rs:23:5
   |
23 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/kama.rs:25:9
   |
25 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
  --> src/indicators/kvo.rs:13:9
   |
13 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/kvo.rs:13:5
   |
13 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/kvo.rs:53:13
   |
53 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/kvo.rs:19:5
   |
19 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/kvo.rs:20:5
   |
20 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/kvo.rs:21:5
   |
21 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/kvo.rs:22:5
   |
22 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/kvo.rs:24:9
   |
24 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/kvo.rs:25:9
   |
25 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/kvo.rs:26:9
   |
26 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/kvo.rs:27:9
   |
27 |     let mut volume: *const libc::c_double = *inputs.offset(3 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/lag.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/lag.rs:32:13
   |
32 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/lag.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/lag.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/lag.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/lag.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/lag.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/linreg.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/linreg.rs:37:13
   |
37 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/linreg.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/linreg.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/linreg.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/linreg.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/linreg.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/linregintercept.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/linregintercept.rs:37:13
   |
37 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/linregintercept.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/linregintercept.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/linregintercept.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/linregintercept.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/linregintercept.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/linregslope.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/linregslope.rs:36:13
   |
36 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/linregslope.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/linregslope.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/linregslope.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/linregslope.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/linregslope.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/ln.rs:14:13
   |
14 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
 --> src/indicators/ln.rs:9:9
  |
9 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
 --> src/indicators/ln.rs:7:5
  |
7 |     mut size: libc::c_int,
  |     ----^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/ln.rs:8:5
  |
8 |     mut inputs: *const *const libc::c_double,
  |     ----^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/ln.rs:9:5
  |
9 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ln.rs:10:5
   |
10 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ln.rs:12:9
   |
12 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ln.rs:13:9
   |
13 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
  --> src/indicators/ln.rs:24:42
   |
24 | pub unsafe extern "C" fn ti_ln_start(mut options: *const libc::c_double) -> libc::c_int {
   |                                          ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/ln.rs:24:38
   |
24 | pub unsafe extern "C" fn ti_ln_start(mut options: *const libc::c_double) -> libc::c_int {
   |                                      ----^^^^^^^
   |                                      |
   |                                      help: remove this `mut`

warning: unused variable: `options`
 --> src/indicators/log10.rs:7:9
  |
7 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
 --> src/indicators/log10.rs:7:5
  |
7 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/log10.rs:20:13
   |
20 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/log10.rs:15:9
   |
15 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/log10.rs:13:5
   |
13 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/log10.rs:14:5
   |
14 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/log10.rs:15:5
   |
15 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/log10.rs:16:5
   |
16 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/log10.rs:18:9
   |
18 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/log10.rs:19:9
   |
19 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/macd.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/macd.rs:63:13
   |
63 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/macd.rs:20:5
   |
20 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/macd.rs:21:5
   |
21 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/macd.rs:22:5
   |
22 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/macd.rs:23:5
   |
23 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/macd.rs:25:9
   |
25 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/macd.rs:54:9
   |
54 |     let mut signal_per: libc::c_double = 2 as libc::c_int as libc::c_double
   |         ----^^^^^^^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
  --> src/indicators/marketfi.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/marketfi.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/marketfi.rs:30:13
   |
30 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/marketfi.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/marketfi.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/marketfi.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/marketfi.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/marketfi.rs:23:9
   |
23 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/marketfi.rs:24:9
   |
24 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/marketfi.rs:25:9
   |
25 |     let mut volume: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mass.rs:23:5
   |
23 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mass.rs:25:9
   |
25 |     let mut sum_p: libc::c_int = *options.offset(0 as libc::c_int as isize)
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/mass.rs:53:13
   |
53 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/mass.rs:31:5
   |
31 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mass.rs:32:5
   |
32 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mass.rs:33:5
   |
33 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mass.rs:34:5
   |
34 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mass.rs:36:9
   |
36 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mass.rs:37:9
   |
37 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mass.rs:52:9
   |
52 |     let mut sum: *mut ti_buffer = ti_buffer_new(period);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mass.rs:56:13
   |
56 |         let mut hl: libc::c_double = *high.offset(i as isize) - *low.offset(i as isize);
   |             ----^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/max.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/max.rs:35:13
   |
35 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
  --> src/indicators/max.rs:36:13
   |
36 |     let mut j: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/max.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/max.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/max.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/max.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/max.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/max.rs:88:5
   |
88 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/max.rs:89:5
   |
89 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/max.rs:90:5
   |
90 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/max.rs:91:5
   |
91 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/max.rs:93:9
   |
93 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/md.rs:12:38
   |
12 | pub unsafe extern "C" fn ti_md_start(mut options: *const libc::c_double) -> libc::c_int {
   |                                      ----^^^^^^^
   |                                      |
   |                                      help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/md.rs:33:13
   |
33 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
  --> src/indicators/md.rs:34:13
   |
34 |     let mut j: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/md.rs:17:5
   |
17 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/md.rs:18:5
   |
18 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/md.rs:19:5
   |
19 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/md.rs:20:5
   |
20 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/md.rs:22:9
   |
22 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
 --> src/indicators/medprice.rs:4:9
  |
4 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
 --> src/indicators/medprice.rs:4:5
  |
4 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/medprice.rs:18:13
   |
18 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/medprice.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/medprice.rs:10:5
   |
10 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/medprice.rs:11:5
   |
11 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/medprice.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/medprice.rs:13:5
   |
13 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/medprice.rs:15:9
   |
15 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/medprice.rs:16:9
   |
16 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/medprice.rs:17:9
   |
17 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mfi.rs:23:5
   |
23 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/mfi.rs:49:13
   |
49 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/mfi.rs:29:5
   |
29 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mfi.rs:30:5
   |
30 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mfi.rs:31:5
   |
31 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mfi.rs:32:5
   |
32 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mfi.rs:34:9
   |
34 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mfi.rs:35:9
   |
35 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mfi.rs:36:9
   |
36 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mfi.rs:37:9
   |
37 |     let mut volume: *const libc::c_double = *inputs.offset(3 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mfi.rs:50:9
   |
50 |     let mut up: *mut ti_buffer = ti_buffer_new(period);
   |         ----^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mfi.rs:51:9
   |
51 |     let mut down: *mut ti_buffer = ti_buffer_new(period);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/min.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/min.rs:35:13
   |
35 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
  --> src/indicators/min.rs:36:13
   |
36 |     let mut j: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/min.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/min.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/min.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/min.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/min.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/min.rs:88:5
   |
88 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/min.rs:89:5
   |
89 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/min.rs:90:5
   |
90 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/min.rs:91:5
   |
91 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/min.rs:93:9
   |
93 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mom.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/mom.rs:32:13
   |
32 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/mom.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mom.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mom.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mom.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mom.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/msw.rs:16:5
   |
16 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `weight` is never read
  --> src/indicators/msw.rs:39:13
   |
39 |     let mut weight: libc::c_double = 0 as libc::c_int as libc::c_double;
   |             ^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `phase` is never read
  --> src/indicators/msw.rs:40:13
   |
40 |     let mut phase: libc::c_double = 0.;
   |             ^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `rp` is never read
  --> src/indicators/msw.rs:41:13
   |
41 |     let mut rp: libc::c_double = 0.;
   |             ^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `ip` is never read
  --> src/indicators/msw.rs:42:13
   |
42 |     let mut ip: libc::c_double = 0.;
   |             ^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/msw.rs:43:13
   |
43 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
  --> src/indicators/msw.rs:44:13
   |
44 |     let mut j: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/msw.rs:22:5
   |
22 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/msw.rs:23:5
   |
23 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/msw.rs:24:5
   |
24 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/msw.rs:25:5
   |
25 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/msw.rs:27:9
   |
27 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
 --> src/indicators/mul.rs:4:9
  |
4 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
 --> src/indicators/mul.rs:4:5
  |
4 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/mul.rs:18:13
   |
18 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/mul.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/mul.rs:10:5
   |
10 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mul.rs:11:5
   |
11 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mul.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mul.rs:13:5
   |
13 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mul.rs:15:9
   |
15 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mul.rs:16:9
   |
16 |     let mut in2: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/mul.rs:17:9
   |
17 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/natr.rs:13:5
   |
13 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `truerange` is never read
  --> src/indicators/natr.rs:37:13
   |
37 |     let mut truerange: libc::c_double = 0.;
   |             ^^^^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/natr.rs:41:13
   |
41 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/natr.rs:19:5
   |
19 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/natr.rs:20:5
   |
20 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/natr.rs:21:5
   |
21 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/natr.rs:22:5
   |
22 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/natr.rs:24:9
   |
24 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/natr.rs:25:9
   |
25 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/natr.rs:26:9
   |
26 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
  --> src/indicators/nvi.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/nvi.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/nvi.rs:33:13
   |
33 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/nvi.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/nvi.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/nvi.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/nvi.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/nvi.rs:23:9
   |
23 |     let mut close: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/nvi.rs:24:9
   |
24 |     let mut volume: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
 --> src/indicators/obv.rs:4:9
  |
4 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
 --> src/indicators/obv.rs:4:5
  |
4 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/obv.rs:23:13
   |
23 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/obv.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/obv.rs:10:5
   |
10 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/obv.rs:11:5
   |
11 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/obv.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/obv.rs:13:5
   |
13 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/obv.rs:15:9
   |
15 |     let mut close: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/obv.rs:16:9
   |
16 |     let mut volume: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
  --> src/indicators/ppo.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/ppo.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/ppo.rs:47:13
   |
47 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/ppo.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ppo.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ppo.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ppo.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ppo.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ppo.rs:41:9
   |
41 |     let mut short_per: libc::c_double = 2 as libc::c_int as libc::c_double
   |         ----^^^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ppo.rs:43:9
   |
43 |     let mut long_per: libc::c_double = 2 as libc::c_int as libc::c_double
   |         ----^^^^^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
  --> src/indicators/psar.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/psar.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `lng` is never read
  --> src/indicators/psar.rs:37:13
   |
37 |     let mut lng: libc::c_int = 0;
   |             ^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `sar` is never read
  --> src/indicators/psar.rs:46:13
   |
46 |     let mut sar: libc::c_double = 0.;
   |             ^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `extreme` is never read
  --> src/indicators/psar.rs:47:13
   |
47 |     let mut extreme: libc::c_double = 0.;
   |             ^^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/psar.rs:56:13
   |
56 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/psar.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/psar.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/psar.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/psar.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/psar.rs:23:9
   |
23 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/psar.rs:24:9
   |
24 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
  --> src/indicators/pvi.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/pvi.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/pvi.rs:33:13
   |
33 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/pvi.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/pvi.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/pvi.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/pvi.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/pvi.rs:23:9
   |
23 |     let mut close: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/pvi.rs:24:9
   |
24 |     let mut volume: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/qstick.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/qstick.rs:35:13
   |
35 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/qstick.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/qstick.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/qstick.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/qstick.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/qstick.rs:23:9
   |
23 |     let mut open: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/qstick.rs:24:9
   |
24 |     let mut close: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/roc.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/roc.rs:32:13
   |
32 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/roc.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/roc.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/roc.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/roc.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/roc.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/rocr.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/rocr.rs:32:13
   |
32 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/rocr.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/rocr.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/rocr.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/rocr.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/rocr.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
 --> src/indicators/round.rs:7:9
  |
7 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
 --> src/indicators/round.rs:7:5
  |
7 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/round.rs:20:13
   |
20 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/round.rs:15:9
   |
15 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/round.rs:13:5
   |
13 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/round.rs:14:5
   |
14 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/round.rs:15:5
   |
15 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/round.rs:16:5
   |
16 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/round.rs:18:9
   |
18 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/round.rs:19:9
   |
19 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/rsi.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/rsi.rs:35:13
   |
35 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/rsi.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/rsi.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/rsi.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/rsi.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/rsi.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
 --> src/indicators/sin.rs:7:9
  |
7 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
 --> src/indicators/sin.rs:7:5
  |
7 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/sin.rs:20:13
   |
20 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/sin.rs:15:9
   |
15 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/sin.rs:13:5
   |
13 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sin.rs:14:5
   |
14 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sin.rs:15:5
   |
15 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sin.rs:16:5
   |
16 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sin.rs:18:9
   |
18 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sin.rs:19:9
   |
19 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
 --> src/indicators/sinh.rs:7:9
  |
7 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
 --> src/indicators/sinh.rs:7:5
  |
7 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/sinh.rs:20:13
   |
20 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/sinh.rs:15:9
   |
15 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/sinh.rs:13:5
   |
13 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sinh.rs:14:5
   |
14 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sinh.rs:15:5
   |
15 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sinh.rs:16:5
   |
16 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sinh.rs:18:9
   |
18 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sinh.rs:19:9
   |
19 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sma.rs:26:5
   |
26 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/sma.rs:48:13
   |
48 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/sma.rs:32:5
   |
32 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sma.rs:33:5
   |
33 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sma.rs:34:5
   |
34 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sma.rs:35:5
   |
35 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sma.rs:37:9
   |
37 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sma.rs:89:5
   |
89 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sma.rs:90:5
   |
90 |     mut stream_in: *mut *mut ti_stream,
   |     ----^^^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sma.rs:92:9
   |
92 |     let mut stream: *mut *mut ti_stream_sma = stream_in as *mut *mut ti_stream_sma;
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sma.rs:93:9
   |
93 |     let mut period: libc::c_int = *options.offset(0 as libc::c_int as isize)
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: value assigned to `i` is never read
   --> src/indicators/sma.rs:133:13
    |
133 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src/indicators/sma.rs:118:5
    |
118 |     mut stream_in: *mut ti_stream,
    |     ----^^^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/sma.rs:119:5
    |
119 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/sma.rs:120:5
    |
120 |     mut inputs: *const *const libc::c_double,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/sma.rs:121:5
    |
121 |     mut outputs: *const *mut libc::c_double,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/sma.rs:123:9
    |
123 |     let mut stream: *mut ti_stream_sma = stream_in as *mut ti_stream_sma;
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/sma.rs:125:9
    |
125 |     let mut real: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/sma.rs:126:9
    |
126 |     let mut period: libc::c_int = (*stream).period;
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/sma.rs:128:9
    |
128 |     let mut per: libc::c_double = (*stream).per;
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/sma.rs:131:9
    |
131 |     let mut buffer: *mut libc::c_double = ((*stream).buffer).as_mut_ptr();
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/sma.rs:175:45
    |
175 | pub unsafe extern "C" fn ti_sma_stream_free(mut stream: *mut ti_stream) {
    |                                             ----^^^^^^
    |                                             |
    |                                             help: remove this `mut`

warning: unused variable: `options`
 --> src/indicators/sqrt.rs:7:9
  |
7 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
 --> src/indicators/sqrt.rs:7:5
  |
7 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/sqrt.rs:20:13
   |
20 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/sqrt.rs:15:9
   |
15 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/sqrt.rs:13:5
   |
13 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sqrt.rs:14:5
   |
14 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sqrt.rs:15:5
   |
15 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sqrt.rs:16:5
   |
16 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sqrt.rs:18:9
   |
18 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sqrt.rs:19:9
   |
19 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stddev.rs:13:5
   |
13 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/stddev.rs:36:13
   |
36 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/stddev.rs:19:5
   |
19 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stddev.rs:20:5
   |
20 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stddev.rs:21:5
   |
21 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stddev.rs:22:5
   |
22 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stddev.rs:24:9
   |
24 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stderr.rs:13:5
   |
13 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/stderr.rs:37:13
   |
37 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/stderr.rs:19:5
   |
19 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stderr.rs:20:5
   |
20 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stderr.rs:21:5
   |
21 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stderr.rs:22:5
   |
22 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stderr.rs:24:9
   |
24 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stoch.rs:23:5
   |
23 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `bar` is never read
  --> src/indicators/stoch.rs:64:13
   |
64 |     let mut bar: libc::c_double = 0.;
   |             ^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/stoch.rs:67:13
   |
67 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
  --> src/indicators/stoch.rs:68:13
   |
68 |     let mut j: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/stoch.rs:32:5
   |
32 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stoch.rs:33:5
   |
33 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stoch.rs:34:5
   |
34 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stoch.rs:35:5
   |
35 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stoch.rs:37:9
   |
37 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stoch.rs:38:9
   |
38 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stoch.rs:39:9
   |
39 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stoch.rs:65:9
   |
65 |     let mut k_sum: *mut ti_buffer = ti_buffer_new(kslow);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stoch.rs:66:9
   |
66 |     let mut d_sum: *mut ti_buffer = ti_buffer_new(dperiod);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stochrsi.rs:23:5
   |
23 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/stochrsi.rs:48:13
   |
48 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
   --> src/indicators/stochrsi.rs:111:21
    |
111 |             let mut j: libc::c_int = 0;
    |                     ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `j_0` is never read
   --> src/indicators/stochrsi.rs:129:21
    |
129 |             let mut j_0: libc::c_int = 0;
    |                     ^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/stochrsi.rs:30:5
   |
30 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stochrsi.rs:31:5
   |
31 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stochrsi.rs:32:5
   |
32 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stochrsi.rs:33:5
   |
33 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stochrsi.rs:35:9
   |
35 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/stochrsi.rs:45:9
   |
45 |     let mut rsi: *mut ti_buffer = ti_buffer_new(period);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/sub.rs:12:13
   |
12 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
 --> src/indicators/sub.rs:6:9
  |
6 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
 --> src/indicators/sub.rs:4:5
  |
4 |     mut size: libc::c_int,
  |     ----^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/sub.rs:5:5
  |
5 |     mut inputs: *const *const libc::c_double,
  |     ----^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/sub.rs:6:5
  |
6 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/sub.rs:7:5
  |
7 |     mut outputs: *const *mut libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/sub.rs:9:9
  |
9 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
  |         ----^^^
  |         |
  |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sub.rs:10:9
   |
10 |     let mut in2: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sub.rs:11:9
   |
11 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
  --> src/indicators/sub.rs:23:9
   |
23 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/sub.rs:23:5
   |
23 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sum.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/sum.rs:33:13
   |
33 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/sum.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sum.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sum.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sum.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/sum.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
 --> src/indicators/tan.rs:7:9
  |
7 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
 --> src/indicators/tan.rs:7:5
  |
7 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/tan.rs:20:13
   |
20 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/tan.rs:15:9
   |
15 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/tan.rs:13:5
   |
13 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tan.rs:14:5
   |
14 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tan.rs:15:5
   |
15 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tan.rs:16:5
   |
16 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tan.rs:18:9
   |
18 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tan.rs:19:9
   |
19 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/tanh.rs:14:13
   |
14 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
 --> src/indicators/tanh.rs:9:9
  |
9 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
 --> src/indicators/tanh.rs:7:5
  |
7 |     mut size: libc::c_int,
  |     ----^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/tanh.rs:8:5
  |
8 |     mut inputs: *const *const libc::c_double,
  |     ----^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/tanh.rs:9:5
  |
9 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tanh.rs:10:5
   |
10 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tanh.rs:12:9
   |
12 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tanh.rs:13:9
   |
13 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
  --> src/indicators/tanh.rs:25:9
   |
25 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/tanh.rs:25:5
   |
25 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tema.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/tema.rs:39:13
   |
39 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/tema.rs:19:5
   |
19 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tema.rs:20:5
   |
20 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tema.rs:21:5
   |
21 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tema.rs:22:5
   |
22 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tema.rs:24:9
   |
24 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
 --> src/indicators/todeg.rs:4:9
  |
4 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
 --> src/indicators/todeg.rs:4:5
  |
4 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/todeg.rs:17:13
   |
17 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/todeg.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/todeg.rs:10:5
   |
10 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/todeg.rs:11:5
   |
11 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/todeg.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/todeg.rs:13:5
   |
13 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/todeg.rs:15:9
   |
15 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/todeg.rs:16:9
   |
16 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/torad.rs:11:13
   |
11 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
 --> src/indicators/torad.rs:6:9
  |
6 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
 --> src/indicators/torad.rs:4:5
  |
4 |     mut size: libc::c_int,
  |     ----^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/torad.rs:5:5
  |
5 |     mut inputs: *const *const libc::c_double,
  |     ----^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/torad.rs:6:5
  |
6 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/torad.rs:7:5
  |
7 |     mut outputs: *const *mut libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/indicators/torad.rs:9:9
  |
9 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
  |         ----^^^
  |         |
  |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/torad.rs:10:9
   |
10 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
  --> src/indicators/torad.rs:25:9
   |
25 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/torad.rs:25:5
   |
25 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: unused variable: `options`
 --> src/indicators/tr.rs:6:42
  |
6 | pub unsafe extern "C" fn ti_tr_start(mut options: *const libc::c_double) -> libc::c_int {
  |                                          ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
 --> src/indicators/tr.rs:6:38
  |
6 | pub unsafe extern "C" fn ti_tr_start(mut options: *const libc::c_double) -> libc::c_int {
  |                                      ----^^^^^^^
  |                                      |
  |                                      help: remove this `mut`

warning: value assigned to `truerange` is never read
  --> src/indicators/tr.rs:20:13
   |
20 |     let mut truerange: libc::c_double = 0.;
   |             ^^^^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/tr.rs:26:13
   |
26 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/tr.rs:13:9
   |
13 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/tr.rs:11:5
   |
11 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tr.rs:12:5
   |
12 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tr.rs:13:5
   |
13 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tr.rs:14:5
   |
14 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tr.rs:16:9
   |
16 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tr.rs:17:9
   |
17 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tr.rs:18:9
   |
18 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tr.rs:19:9
   |
19 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/trima.rs:18:5
   |
18 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/trima.rs:57:13
   |
57 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/trima.rs:24:5
   |
24 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/trima.rs:25:5
   |
25 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/trima.rs:26:5
   |
26 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/trima.rs:27:5
   |
27 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/trima.rs:29:9
   |
29 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/trima.rs:41:9
   |
41 |     let mut weights: libc::c_double = 1 as libc::c_int as libc::c_double
   |         ----^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/trix.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/trix.rs:53:13
   |
53 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/trix.rs:19:5
   |
19 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/trix.rs:20:5
   |
20 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/trix.rs:21:5
   |
21 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/trix.rs:22:5
   |
22 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/trix.rs:24:9
   |
24 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
 --> src/indicators/trunc.rs:4:9
  |
4 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
 --> src/indicators/trunc.rs:4:5
  |
4 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/trunc.rs:17:13
   |
17 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/trunc.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/trunc.rs:10:5
   |
10 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/trunc.rs:11:5
   |
11 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/trunc.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/trunc.rs:13:5
   |
13 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/trunc.rs:15:9
   |
15 |     let mut in1: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/trunc.rs:16:9
   |
16 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tsf.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/tsf.rs:37:13
   |
37 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/tsf.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tsf.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tsf.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tsf.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/tsf.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
 --> src/indicators/typprice.rs:4:9
  |
4 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
 --> src/indicators/typprice.rs:4:5
  |
4 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/typprice.rs:19:13
   |
19 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/typprice.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/typprice.rs:10:5
   |
10 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/typprice.rs:11:5
   |
11 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/typprice.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/typprice.rs:13:5
   |
13 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/typprice.rs:15:9
   |
15 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/typprice.rs:16:9
   |
16 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/typprice.rs:17:9
   |
17 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/typprice.rs:18:9
   |
18 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ultosc.rs:23:5
   |
23 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/ultosc.rs:62:13
   |
62 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/ultosc.rs:29:5
   |
29 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ultosc.rs:30:5
   |
30 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ultosc.rs:31:5
   |
31 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ultosc.rs:32:5
   |
32 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ultosc.rs:34:9
   |
34 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ultosc.rs:35:9
   |
35 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ultosc.rs:36:9
   |
36 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ultosc.rs:56:9
   |
56 |     let mut bp_buf: *mut ti_buffer = ti_buffer_new(long_period);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/ultosc.rs:57:9
   |
57 |     let mut r_buf: *mut ti_buffer = ti_buffer_new(long_period);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/var.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/var.rs:35:13
   |
35 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/var.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/var.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/var.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/var.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/var.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vhf.rs:13:5
   |
13 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `bar` is never read
  --> src/indicators/vhf.rs:38:13
   |
38 |     let mut bar: libc::c_double = 0.;
   |             ^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/vhf.rs:40:13
   |
40 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
  --> src/indicators/vhf.rs:41:13
   |
41 |     let mut j: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `c` is never read
  --> src/indicators/vhf.rs:43:13
   |
43 |     let mut c: libc::c_double = 0.;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/vhf.rs:19:5
   |
19 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vhf.rs:20:5
   |
20 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vhf.rs:21:5
   |
21 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vhf.rs:22:5
   |
22 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vhf.rs:24:9
   |
24 |     let mut in_0: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vidya.rs:13:5
   |
13 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/vidya.rs:52:13
   |
52 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/vidya.rs:19:5
   |
19 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vidya.rs:20:5
   |
20 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vidya.rs:21:5
   |
21 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vidya.rs:22:5
   |
22 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vidya.rs:24:9
   |
24 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vidya.rs:70:13
   |
70 |         let mut short_stddev: libc::c_double = sqrt(
   |             ----^^^^^^^^^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vidya.rs:73:13
   |
73 |         let mut long_stddev: libc::c_double = sqrt(
   |             ----^^^^^^^^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/vidya.rs:100:13
    |
100 |         let mut short_stddev_0: libc::c_double = sqrt(
    |             ----^^^^^^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/indicators/vidya.rs:103:13
    |
103 |         let mut long_stddev_0: libc::c_double = sqrt(
    |             ----^^^^^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/volatility.rs:13:5
   |
13 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/volatility.rs:37:13
   |
37 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/volatility.rs:19:5
   |
19 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/volatility.rs:20:5
   |
20 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/volatility.rs:21:5
   |
21 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/volatility.rs:22:5
   |
22 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/volatility.rs:24:9
   |
24 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vosc.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/vosc.rs:42:13
   |
42 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/vosc.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vosc.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vosc.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vosc.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vosc.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vwma.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/vwma.rs:35:13
   |
35 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/vwma.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vwma.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vwma.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vwma.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vwma.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/vwma.rs:24:9
   |
24 |     let mut volume: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
  --> src/indicators/wad.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/wad.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/wad.rs:32:13
   |
32 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/wad.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wad.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wad.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wad.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wad.rs:23:9
   |
23 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wad.rs:24:9
   |
24 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wad.rs:25:9
   |
25 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `options`
 --> src/indicators/wcprice.rs:4:9
  |
4 |     mut options: *const libc::c_double,
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
 --> src/indicators/wcprice.rs:4:5
  |
4 |     mut options: *const libc::c_double,
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/wcprice.rs:19:13
   |
19 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `options`
  --> src/indicators/wcprice.rs:12:9
   |
12 |     mut options: *const libc::c_double,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
  --> src/indicators/wcprice.rs:10:5
   |
10 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wcprice.rs:11:5
   |
11 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wcprice.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wcprice.rs:13:5
   |
13 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wcprice.rs:15:9
   |
15 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wcprice.rs:16:9
   |
16 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wcprice.rs:17:9
   |
17 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wcprice.rs:18:9
   |
18 |     let mut output: *mut libc::c_double = *outputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wilders.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/wilders.rs:34:13
   |
34 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/wilders.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wilders.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wilders.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wilders.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wilders.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/willr.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `bar` is never read
  --> src/indicators/willr.rs:39:13
   |
39 |     let mut bar: libc::c_double = 0.;
   |             ^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
  --> src/indicators/willr.rs:40:13
   |
40 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
  --> src/indicators/willr.rs:41:13
   |
41 |     let mut j: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/willr.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/willr.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/willr.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/willr.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/willr.rs:23:9
   |
23 |     let mut high: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/willr.rs:24:9
   |
24 |     let mut low: *const libc::c_double = *inputs.offset(1 as libc::c_int as isize);
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/willr.rs:25:9
   |
25 |     let mut close: *const libc::c_double = *inputs.offset(2 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wma.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/wma.rs:36:13
   |
36 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/wma.rs:18:5
   |
18 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wma.rs:19:5
   |
19 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wma.rs:20:5
   |
20 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wma.rs:21:5
   |
21 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/wma.rs:23:9
   |
23 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/zlema.rs:12:5
   |
12 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: value assigned to `i` is never read
  --> src/indicators/zlema.rs:40:13
   |
40 |     let mut i: libc::c_int = 0;
   |             ^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> src/indicators/zlema.rs:19:5
   |
19 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/zlema.rs:20:5
   |
20 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/zlema.rs:21:5
   |
21 |     mut options: *const libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/zlema.rs:22:5
   |
22 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/zlema.rs:24:9
   |
24 |     let mut input: *const libc::c_double = *inputs.offset(0 as libc::c_int as isize);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/zlema.rs:43:13
   |
43 |         let mut c: libc::c_double = *input.offset(i as isize);
   |             ----^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/indicators/zlema.rs:44:13
   |
44 |         let mut l: libc::c_double = *input.offset((i - lag) as isize);
   |             ----^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/templates/candles.rs:95:5
   |
95 |     mut name: *const libc::c_char,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:116:38
    |
116 | pub unsafe extern "C" fn tc_get_info(mut pattern: tc_set) -> *const tc_candle_info {
    |                                      ----^^^^^^^
    |                                      |
    |                                      help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:120:9
    |
120 |     let mut k: tc_set = pattern & !pattern.wrapping_sub(1 as libc::c_int as tc_set);
    |         ----^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:139:51
    |
139 | pub unsafe extern "C" fn tc_config_set_to_default(mut config: *mut tc_config) {
    |                                                   ----^^^^^^
    |                                                   |
    |                                                   help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:148:9
    |
148 |     let mut k: *mut tc_result = malloc(
    |         ----^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:161:38
    |
161 | unsafe extern "C" fn tc_result_reset(mut result: *mut tc_result) {
    |                                      ----^^^^^^
    |                                      |
    |                                      help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:167:41
    |
167 | pub unsafe extern "C" fn tc_result_free(mut result: *mut tc_result) {
    |                                         ----^^^^^^
    |                                         |
    |                                         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:175:42
    |
175 | pub unsafe extern "C" fn tc_result_count(mut result: *const tc_result) -> libc::c_int {
    |                                          ----^^^^^^
    |                                          |
    |                                          help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:180:5
    |
180 |     mut result: *const tc_result,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:186:5
    |
186 |     mut result: *const tc_result,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:187:5
    |
187 |     mut index: libc::c_int,
    |     ----^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:192:9
    |
192 |     let mut hit: tc_hit = {
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:193:13
    |
193 |         let mut init = tc_hit {
    |             ----^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:203:5
    |
203 |     mut result: *const tc_result,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:204:5
    |
204 |     mut index: libc::c_int,
    |     ----^^^^^
    |     |
    |     help: remove this `mut`

warning: value assigned to `i` is never read
   --> src/templates/candles.rs:304:13
    |
304 |     let mut i: libc::c_int = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `upper`
   --> src/templates/candles.rs:325:13
    |
325 |         let upper: TC_REAL = *high.offset(i as isize) - top;
    |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_upper`

warning: unused variable: `lower`
   --> src/templates/candles.rs:326:13
    |
326 |         let lower: TC_REAL = bottom - *low.offset(i as isize);
    |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_lower`

warning: unused variable: `avg_body`
   --> src/templates/candles.rs:327:13
    |
327 |         let avg_body: TC_REAL = avg_body_sum * div;
    |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_body`

warning: unused variable: `avg_total`
   --> src/templates/candles.rs:328:13
    |
328 |         let avg_total: TC_REAL = avg_total_sum * div;
    |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_total`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:281:5
    |
281 |     mut patterns: tc_set,
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:282:5
    |
282 |     mut size: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:283:5
    |
283 |     mut inputs: *const *const TC_REAL,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:284:5
    |
284 |     mut options: *const tc_config,
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:285:5
    |
285 |     mut output: *mut tc_result,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:290:9
    |
290 |     let mut open: *const TC_REAL = *inputs.offset(0 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:291:9
    |
291 |     let mut high: *const TC_REAL = *inputs.offset(1 as libc::c_int as isize);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:292:9
    |
292 |     let mut low: *const TC_REAL = *inputs.offset(2 as libc::c_int as isize);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/templates/candles.rs:293:9
    |
293 |     let mut close: *const TC_REAL = *inputs.offset(3 as libc::c_int as isize);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/templates/indicators.rs:60:5
   |
60 |     mut stream: *mut ti_stream,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/templates/indicators.rs:61:5
   |
61 |     mut size: libc::c_int,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/templates/indicators.rs:62:5
   |
62 |     mut inputs: *const *const libc::c_double,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/templates/indicators.rs:63:5
   |
63 |     mut outputs: *const *mut libc::c_double,
   |     ----^^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/templates/indicators.rs:70:5
   |
70 |     mut stream: *mut ti_stream,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/templates/indicators.rs:76:5
   |
76 |     mut stream: *mut ti_stream,
   |     ----^^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/templates/indicators.rs:81:41
   |
81 | pub unsafe extern "C" fn ti_stream_free(mut stream: *mut ti_stream) {
   |                                         ----^^^^^^
   |                                         |
   |                                         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/templates/indicators.rs:87:5
   |
87 |     mut name: *const libc::c_char,
   |     ----^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/utils/buffer.rs:16:40
   |
16 | pub unsafe extern "C" fn ti_buffer_new(mut size: libc::c_int) -> *mut ti_buffer {
   |                                        ----^^^^
   |                                        |
   |                                        help: remove this `mut`

warning: variable does not need to be mutable
  --> src/utils/buffer.rs:21:9
   |
21 |     let mut ret: *mut ti_buffer = malloc(s as libc::c_uint as libc::c_ulong)
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/utils/buffer.rs:30:41
   |
30 | pub unsafe extern "C" fn ti_buffer_free(mut buffer: *mut ti_buffer) {
   |                                         ----^^^^^^
   |                                         |
   |                                         help: remove this `mut`

Some errors have detailed explanations: E0425, E0583, E0658.
For more information about an error, try `rustc --explain E0425`.
warning: `tulipindicators` (lib) generated 4054 warnings
error: could not compile `tulipindicators` (lib) due to 39 previous errors; 4054 warnings emitted
