    Checking qsort_edits v0.1.0 (/mnt/c/Users/mazin/Downloads/School/Research/datasets/2-C2Rust-Translation/qsort_edits)
warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src/main.rs:15:30
   |
15 |     let mut t: libc::c_int = *a;
   |                              ^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
  --> src/main.rs:14:1
   |
14 | pub unsafe extern "C" fn swap(mut a: *mut libc::c_int, mut b: *mut libc::c_int) {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = note: `#[warn(unsafe_op_in_unsafe_fn)]` on by default

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src/main.rs:16:5
   |
16 |     *a = *b;
   |     ^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src/main.rs:16:10
   |
16 |     *a = *b;
   |          ^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src/main.rs:17:5
   |
17 |     *b = t;
   |     ^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src/main.rs:25:34
   |
25 |     let mut pivot: libc::c_int = *arr.offset(high as isize);
   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
  --> src/main.rs:20:1
   |
20 | / pub unsafe extern "C" fn partition(
21 | |     mut arr: *mut libc::c_int,
22 | |     mut low: libc::c_int,
23 | |     mut high: libc::c_int,
24 | | ) -> libc::c_int {
   | |________________^

warning[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
  --> src/main.rs:25:35
   |
25 |     let mut pivot: libc::c_int = *arr.offset(high as isize);
   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src/main.rs:29:12
   |
29 |         if *arr.offset(j as isize) <= pivot {
   |            ^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
  --> src/main.rs:29:13
   |
29 |         if *arr.offset(j as isize) <= pivot {
   |             ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `swap` is unsafe and requires unsafe block
  --> src/main.rs:32:13
   |
32 |             swap(&mut *arr.offset(i as isize), &mut *arr.offset(j as isize));
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src/main.rs:32:23
   |
32 |             swap(&mut *arr.offset(i as isize), &mut *arr.offset(j as isize));
   |                       ^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
  --> src/main.rs:32:24
   |
32 |             swap(&mut *arr.offset(i as isize), &mut *arr.offset(j as isize));
   |                        ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src/main.rs:32:53
   |
32 |             swap(&mut *arr.offset(i as isize), &mut *arr.offset(j as isize));
   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
  --> src/main.rs:32:54
   |
32 |             swap(&mut *arr.offset(i as isize), &mut *arr.offset(j as isize));
   |                                                      ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `swap` is unsafe and requires unsafe block
  --> src/main.rs:37:5
   |
37 | /     swap(
38 | |         &mut *arr.offset((i + 1 as libc::c_int) as isize),
39 | |         &mut *arr.offset(high as isize),
40 | |     );
   | |_____^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src/main.rs:38:14
   |
38 |         &mut *arr.offset((i + 1 as libc::c_int) as isize),
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
  --> src/main.rs:38:15
   |
38 |         &mut *arr.offset((i + 1 as libc::c_int) as isize),
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src/main.rs:39:14
   |
39 |         &mut *arr.offset(high as isize),
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
  --> src/main.rs:39:15
   |
39 |         &mut *arr.offset(high as isize),
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `partition` is unsafe and requires unsafe block
  --> src/main.rs:50:34
   |
50 |         let mut i: libc::c_int = partition(arr, low, high);
   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
  --> src/main.rs:44:1
   |
44 | / pub unsafe extern "C" fn quickSort(
45 | |     mut arr: *mut libc::c_int,
46 | |     mut low: libc::c_int,
47 | |     mut high: libc::c_int,
48 | | ) {
   | |_^

warning[E0133]: call to unsafe function `quickSort` is unsafe and requires unsafe block
  --> src/main.rs:51:9
   |
51 |         quickSort(arr, low, i - 1 as libc::c_int);
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `quickSort` is unsafe and requires unsafe block
  --> src/main.rs:52:9
   |
52 |         quickSort(arr, i + 1 as libc::c_int, high);
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

warning: path statement with no effect
  --> src/main.rs:31:13
   |
31 |             i;
   |             ^^
   |
   = note: `#[warn(path_statements)]` on by default

warning: path statement with no effect
  --> src/main.rs:35:9
   |
35 |         j;
   |         ^^

For more information about this error, try `rustc --explain E0133`.
warning: `qsort_edits` (bin "qsort_edits") generated 23 warnings (run `cargo fix --bin "qsort_edits"` to apply 3 suggestions)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.52s
